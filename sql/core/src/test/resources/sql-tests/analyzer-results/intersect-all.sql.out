-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TEMPORARY VIEW tab1 AS SELECT * FROM VALUES
    (1, 2), 
    (1, 2),
    (1, 3),
    (1, 3),
    (2, 3),
    (null, null),
    (null, null)
    AS tab1(k, v)
-- !query analysis
CreateViewCommand `tab1`, SELECT * FROM VALUES
    (1, 2), 
    (1, 2),
    (1, 3),
    (1, 3),
    (2, 3),
    (null, null),
    (null, null)
    AS tab1(k, v), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [k#x, v#x]
      +- SubqueryAlias tab1
         +- LocalRelation [k#x, v#x]


-- !query
CREATE TEMPORARY VIEW tab2 AS SELECT * FROM VALUES
    (1, 2), 
    (1, 2), 
    (2, 3),
    (3, 4),
    (null, null),
    (null, null)
    AS tab2(k, v)
-- !query analysis
CreateViewCommand `tab2`, SELECT * FROM VALUES
    (1, 2), 
    (1, 2), 
    (2, 3),
    (3, 4),
    (null, null),
    (null, null)
    AS tab2(k, v), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [k#x, v#x]
      +- SubqueryAlias tab2
         +- LocalRelation [k#x, v#x]


-- !query
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query analysis
Intersect All true
:- Project [k#x, v#x]
:  +- SubqueryAlias tab1
:     +- View (`tab1`, [k#x, v#x])
:        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:           +- Project [k#x, v#x]
:              +- SubqueryAlias tab1
:                 +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab1 WHERE k = 1
-- !query analysis
Intersect All true
:- Project [k#x, v#x]
:  +- SubqueryAlias tab1
:     +- View (`tab1`, [k#x, v#x])
:        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:           +- Project [k#x, v#x]
:              +- SubqueryAlias tab1
:                 +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- Filter (k#x = 1)
      +- SubqueryAlias tab1
         +- View (`tab1`, [k#x, v#x])
            +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
               +- Project [k#x, v#x]
                  +- SubqueryAlias tab1
                     +- LocalRelation [k#x, v#x]


-- !query
SELECT * FROM tab1 WHERE k > 2
INTERSECT ALL
SELECT * FROM tab2
-- !query analysis
Intersect All true
:- Project [k#x, v#x]
:  +- Filter (k#x > 2)
:     +- SubqueryAlias tab1
:        +- View (`tab1`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab1
:                    +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2 WHERE k > 3
-- !query analysis
Intersect All true
:- Project [k#x, v#x]
:  +- SubqueryAlias tab1
:     +- View (`tab1`, [k#x, v#x])
:        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:           +- Project [k#x, v#x]
:              +- SubqueryAlias tab1
:                 +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- Filter (k#x > 3)
      +- SubqueryAlias tab2
         +- View (`tab2`, [k#x, v#x])
            +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
               +- Project [k#x, v#x]
                  +- SubqueryAlias tab2
                     +- LocalRelation [k#x, v#x]


-- !query
SELECT * FROM tab1
INTERSECT ALL
SELECT CAST(1 AS BIGINT), CAST(2 AS BIGINT)
-- !query analysis
Intersect All true
:- Project [cast(k#x as bigint) AS k#xL, cast(v#x as bigint) AS v#xL]
:  +- Project [k#x, v#x]
:     +- SubqueryAlias tab1
:        +- View (`tab1`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab1
:                    +- LocalRelation [k#x, v#x]
+- Project [cast(1 as bigint) AS CAST(1 AS BIGINT)#xL, cast(2 as bigint) AS CAST(2 AS BIGINT)#xL]
   +- OneRowRelation


-- !query
SELECT * FROM tab1
INTERSECT ALL
SELECT array(1), 2
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "first",
    "dataType1" : "\"ARRAY<INT>\"",
    "dataType2" : "\"INT\"",
    "hint" : "",
    "operator" : "INTERSECT ALL",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 51,
    "fragment" : "SELECT * FROM tab1\nINTERSECT ALL\nSELECT array(1), 2"
  } ]
}


-- !query
SELECT k FROM tab1
INTERSECT ALL
SELECT k, v FROM tab2
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "NUM_COLUMNS_MISMATCH",
  "sqlState" : "42826",
  "messageParameters" : {
    "firstNumColumns" : "1",
    "invalidNumColumns" : "2",
    "invalidOrdinalNum" : "second",
    "operator" : "INTERSECT ALL"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 54,
    "fragment" : "SELECT k FROM tab1\nINTERSECT ALL\nSELECT k, v FROM tab2"
  } ]
}


-- !query
SELECT * FROM tab2
INTERSECT ALL
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query analysis
Intersect All true
:- Intersect All true
:  :- Project [k#x, v#x]
:  :  +- SubqueryAlias tab2
:  :     +- View (`tab2`, [k#x, v#x])
:  :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :           +- Project [k#x, v#x]
:  :              +- SubqueryAlias tab2
:  :                 +- LocalRelation [k#x, v#x]
:  +- Project [k#x, v#x]
:     +- SubqueryAlias tab1
:        +- View (`tab1`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab1
:                    +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SELECT * FROM tab1
EXCEPT
SELECT * FROM tab2
UNION ALL
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query analysis
Union false, false
:- Except false
:  :- Project [k#x, v#x]
:  :  +- SubqueryAlias tab1
:  :     +- View (`tab1`, [k#x, v#x])
:  :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :           +- Project [k#x, v#x]
:  :              +- SubqueryAlias tab1
:  :                 +- LocalRelation [k#x, v#x]
:  +- Project [k#x, v#x]
:     +- SubqueryAlias tab2
:        +- View (`tab2`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab2
:                    +- LocalRelation [k#x, v#x]
+- Intersect All true
   :- Project [k#x, v#x]
   :  +- SubqueryAlias tab1
   :     +- View (`tab1`, [k#x, v#x])
   :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
   :           +- Project [k#x, v#x]
   :              +- SubqueryAlias tab1
   :                 +- LocalRelation [k#x, v#x]
   +- Project [k#x, v#x]
      +- SubqueryAlias tab2
         +- View (`tab2`, [k#x, v#x])
            +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
               +- Project [k#x, v#x]
                  +- SubqueryAlias tab2
                     +- LocalRelation [k#x, v#x]


-- !query
SELECT * FROM tab1
EXCEPT
SELECT * FROM tab2
EXCEPT
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query analysis
Except false
:- Except false
:  :- Project [k#x, v#x]
:  :  +- SubqueryAlias tab1
:  :     +- View (`tab1`, [k#x, v#x])
:  :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :           +- Project [k#x, v#x]
:  :              +- SubqueryAlias tab1
:  :                 +- LocalRelation [k#x, v#x]
:  +- Project [k#x, v#x]
:     +- SubqueryAlias tab2
:        +- View (`tab2`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab2
:                    +- LocalRelation [k#x, v#x]
+- Intersect All true
   :- Project [k#x, v#x]
   :  +- SubqueryAlias tab1
   :     +- View (`tab1`, [k#x, v#x])
   :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
   :           +- Project [k#x, v#x]
   :              +- SubqueryAlias tab1
   :                 +- LocalRelation [k#x, v#x]
   +- Project [k#x, v#x]
      +- SubqueryAlias tab2
         +- View (`tab2`, [k#x, v#x])
            +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
               +- Project [k#x, v#x]
                  +- SubqueryAlias tab2
                     +- LocalRelation [k#x, v#x]


-- !query
(
  (
    (
      SELECT * FROM tab1
      EXCEPT
      SELECT * FROM tab2
    )
    EXCEPT
    SELECT * FROM tab1
  )
  INTERSECT ALL
  SELECT * FROM tab2
)
-- !query analysis
Intersect All true
:- Except false
:  :- Except false
:  :  :- Project [k#x, v#x]
:  :  :  +- SubqueryAlias tab1
:  :  :     +- View (`tab1`, [k#x, v#x])
:  :  :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :  :           +- Project [k#x, v#x]
:  :  :              +- SubqueryAlias tab1
:  :  :                 +- LocalRelation [k#x, v#x]
:  :  +- Project [k#x, v#x]
:  :     +- SubqueryAlias tab2
:  :        +- View (`tab2`, [k#x, v#x])
:  :           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :              +- Project [k#x, v#x]
:  :                 +- SubqueryAlias tab2
:  :                    +- LocalRelation [k#x, v#x]
:  +- Project [k#x, v#x]
:     +- SubqueryAlias tab1
:        +- View (`tab1`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab1
:                    +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SELECT * 
FROM   (SELECT tab1.k, 
               tab2.v 
        FROM   tab1 
               JOIN tab2 
                 ON tab1.k = tab2.k)
INTERSECT ALL 
SELECT * 
FROM   (SELECT tab1.k, 
               tab2.v 
        FROM   tab1 
               JOIN tab2 
                 ON tab1.k = tab2.k)
-- !query analysis
Intersect All true
:- Project [k#x, v#x]
:  +- SubqueryAlias __auto_generated_subquery_name
:     +- Project [k#x, v#x]
:        +- Join Inner, (k#x = k#x)
:           :- SubqueryAlias tab1
:           :  +- View (`tab1`, [k#x, v#x])
:           :     +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:           :        +- Project [k#x, v#x]
:           :           +- SubqueryAlias tab1
:           :              +- LocalRelation [k#x, v#x]
:           +- SubqueryAlias tab2
:              +- View (`tab2`, [k#x, v#x])
:                 +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:                    +- Project [k#x, v#x]
:                       +- SubqueryAlias tab2
:                          +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [k#x, v#x]
         +- Join Inner, (k#x = k#x)
            :- SubqueryAlias tab1
            :  +- View (`tab1`, [k#x, v#x])
            :     +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            :        +- Project [k#x, v#x]
            :           +- SubqueryAlias tab1
            :              +- LocalRelation [k#x, v#x]
            +- SubqueryAlias tab2
               +- View (`tab2`, [k#x, v#x])
                  +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
                     +- Project [k#x, v#x]
                        +- SubqueryAlias tab2
                           +- LocalRelation [k#x, v#x]


-- !query
SELECT * 
FROM   (SELECT tab1.k, 
               tab2.v 
        FROM   tab1 
               JOIN tab2 
                 ON tab1.k = tab2.k) 
INTERSECT ALL 
SELECT * 
FROM   (SELECT tab2.v AS k, 
               tab1.k AS v 
        FROM   tab1 
               JOIN tab2 
                 ON tab1.k = tab2.k)
-- !query analysis
Intersect All true
:- Project [k#x, v#x]
:  +- SubqueryAlias __auto_generated_subquery_name
:     +- Project [k#x, v#x]
:        +- Join Inner, (k#x = k#x)
:           :- SubqueryAlias tab1
:           :  +- View (`tab1`, [k#x, v#x])
:           :     +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:           :        +- Project [k#x, v#x]
:           :           +- SubqueryAlias tab1
:           :              +- LocalRelation [k#x, v#x]
:           +- SubqueryAlias tab2
:              +- View (`tab2`, [k#x, v#x])
:                 +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:                    +- Project [k#x, v#x]
:                       +- SubqueryAlias tab2
:                          +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [v#x AS k#x, k#x AS v#x]
         +- Join Inner, (k#x = k#x)
            :- SubqueryAlias tab1
            :  +- View (`tab1`, [k#x, v#x])
            :     +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            :        +- Project [k#x, v#x]
            :           +- SubqueryAlias tab1
            :              +- LocalRelation [k#x, v#x]
            +- SubqueryAlias tab2
               +- View (`tab2`, [k#x, v#x])
                  +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
                     +- Project [k#x, v#x]
                        +- SubqueryAlias tab2
                           +- LocalRelation [k#x, v#x]


-- !query
SELECT v FROM tab1 GROUP BY v
INTERSECT ALL
SELECT k FROM tab2 GROUP BY k
-- !query analysis
Intersect All true
:- Aggregate [v#x], [v#x]
:  +- SubqueryAlias tab1
:     +- View (`tab1`, [k#x, v#x])
:        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:           +- Project [k#x, v#x]
:              +- SubqueryAlias tab1
:                 +- LocalRelation [k#x, v#x]
+- Aggregate [k#x], [k#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SET spark.sql.legacy.setopsPrecedence.enabled= true
-- !query analysis
SetCommand (spark.sql.legacy.setopsPrecedence.enabled,Some(true))


-- !query
SELECT * FROM tab1
EXCEPT
SELECT * FROM tab2
UNION ALL
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query analysis
Intersect All true
:- Union false, false
:  :- Except false
:  :  :- Project [k#x, v#x]
:  :  :  +- SubqueryAlias tab1
:  :  :     +- View (`tab1`, [k#x, v#x])
:  :  :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :  :           +- Project [k#x, v#x]
:  :  :              +- SubqueryAlias tab1
:  :  :                 +- LocalRelation [k#x, v#x]
:  :  +- Project [k#x, v#x]
:  :     +- SubqueryAlias tab2
:  :        +- View (`tab2`, [k#x, v#x])
:  :           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :              +- Project [k#x, v#x]
:  :                 +- SubqueryAlias tab2
:  :                    +- LocalRelation [k#x, v#x]
:  +- Project [k#x, v#x]
:     +- SubqueryAlias tab1
:        +- View (`tab1`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab1
:                    +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SELECT * FROM tab1
EXCEPT
SELECT * FROM tab2
UNION ALL
SELECT * FROM tab1
INTERSECT
SELECT * FROM tab2
-- !query analysis
Intersect false
:- Union false, false
:  :- Except false
:  :  :- Project [k#x, v#x]
:  :  :  +- SubqueryAlias tab1
:  :  :     +- View (`tab1`, [k#x, v#x])
:  :  :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :  :           +- Project [k#x, v#x]
:  :  :              +- SubqueryAlias tab1
:  :  :                 +- LocalRelation [k#x, v#x]
:  :  +- Project [k#x, v#x]
:  :     +- SubqueryAlias tab2
:  :        +- View (`tab2`, [k#x, v#x])
:  :           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :              +- Project [k#x, v#x]
:  :                 +- SubqueryAlias tab2
:  :                    +- LocalRelation [k#x, v#x]
:  +- Project [k#x, v#x]
:     +- SubqueryAlias tab1
:        +- View (`tab1`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab1
:                    +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SET spark.sql.legacy.setopsPrecedence.enabled = false
-- !query analysis
SetCommand (spark.sql.legacy.setopsPrecedence.enabled,Some(false))


-- !query
CREATE OR REPLACE TEMPORARY VIEW tab3 AS VALUES (decimal(1)), (decimal(2)) tbl3(v)
-- !query analysis
CreateViewCommand `tab3`, VALUES (decimal(1)), (decimal(2)) tbl3(v), false, true, LocalTempView, UNSUPPORTED, true
   +- SubqueryAlias tbl3
      +- LocalRelation [v#x]


-- !query
SELECT t.v FROM (
  SELECT v FROM tab3
  INTERSECT
  SELECT v + v AS v FROM tab3
) t
-- !query analysis
Project [v#x]
+- SubqueryAlias t
   +- Intersect false
      :- Project [cast(v#x as decimal(11,0)) AS v#x]
      :  +- Project [v#x]
      :     +- SubqueryAlias tab3
      :        +- View (`tab3`, [v#x])
      :           +- Project [cast(v#x as decimal(10,0)) AS v#x]
      :              +- SubqueryAlias tbl3
      :                 +- LocalRelation [v#x]
      +- Project [(v#x + v#x) AS v#x]
         +- SubqueryAlias tab3
            +- View (`tab3`, [v#x])
               +- Project [cast(v#x as decimal(10,0)) AS v#x]
                  +- SubqueryAlias tbl3
                     +- LocalRelation [v#x]


-- !query
SELECT SUM(t.v) FROM (
  SELECT v FROM tab3
  INTERSECT
  SELECT v + v AS v FROM tab3
) t
-- !query analysis
Aggregate [sum(v#x) AS sum(v)#x]
+- SubqueryAlias t
   +- Intersect false
      :- Project [cast(v#x as decimal(11,0)) AS v#x]
      :  +- Project [v#x]
      :     +- SubqueryAlias tab3
      :        +- View (`tab3`, [v#x])
      :           +- Project [cast(v#x as decimal(10,0)) AS v#x]
      :              +- SubqueryAlias tbl3
      :                 +- LocalRelation [v#x]
      +- Project [(v#x + v#x) AS v#x]
         +- SubqueryAlias tab3
            +- View (`tab3`, [v#x])
               +- Project [cast(v#x as decimal(10,0)) AS v#x]
                  +- SubqueryAlias tbl3
                     +- LocalRelation [v#x]


-- !query
DROP VIEW IF EXISTS tab1
-- !query analysis
DropTempViewCommand tab1


-- !query
DROP VIEW IF EXISTS tab2
-- !query analysis
DropTempViewCommand tab2


-- !query
DROP VIEW IF EXISTS tab3
-- !query analysis
DropTempViewCommand tab3
