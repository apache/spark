-- Automatically generated by SQLQueryTestSuite
-- !query
create temp view x (x1, x2) as values (1, 1), (2, 2)
-- !query analysis
CreateViewCommand `x`, [(x1,None), (x2,None)], values (1, 1), (2, 2), false, false, LocalTempView, UNSUPPORTED, true
   +- LocalRelation [col1#x, col2#x]


-- !query
create temp view y (y1, y2) as values (2, 0), (3, -1)
-- !query analysis
CreateViewCommand `y`, [(y1,None), (y2,None)], values (2, 0), (3, -1), false, false, LocalTempView, UNSUPPORTED, true
   +- LocalRelation [col1#x, col2#x]


-- !query
create temp view z (z1, z2) as values (1, 0), (1, 1)
-- !query analysis
CreateViewCommand `z`, [(z1,None), (z2,None)], values (1, 0), (1, 1), false, false, LocalTempView, UNSUPPORTED, true
   +- LocalRelation [col1#x, col2#x]


-- !query
select * from x where (select count(*) from y where y1 = x1 group by y1) = 1
-- !query analysis
Project [x1#x, x2#x]
+- Filter (scalar-subquery#x [x1#x] = cast(1 as bigint))
   :  +- Aggregate [y1#x], [count(1) AS count(1)#xL]
   :     +- Filter (y1#x = outer(x1#x))
   :        +- SubqueryAlias y
   :           +- View (`y`, [y1#x, y2#x])
   :              +- Project [cast(col1#x as int) AS y1#x, cast(col2#x as int) AS y2#x]
   :                 +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias x
      +- View (`x`, [x1#x, x2#x])
         +- Project [cast(col1#x as int) AS x1#x, cast(col2#x as int) AS x2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from x where (select count(*) from y where y1 = x1 group by x1) = 1
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.CORRELATED_REFERENCE",
  "sqlState" : "0A000",
  "messageParameters" : {
    "sqlExprs" : "\"x1\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 61,
    "stopIndex" : 71,
    "fragment" : "group by x1"
  } ]
}


-- !query
select * from x where (select count(*) from y where y1 > x1 group by x1) = 1
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.CORRELATED_REFERENCE",
  "sqlState" : "0A000",
  "messageParameters" : {
    "sqlExprs" : "\"x1\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 61,
    "stopIndex" : 71,
    "fragment" : "group by x1"
  } ]
}


-- !query
select *, (select count(*) from y where x1 = y1 and y2 = 1 group by y2) from x
-- !query analysis
Project [x1#x, x2#x, scalar-subquery#x [x1#x] AS scalarsubquery(x1)#xL]
:  +- Aggregate [y2#x], [count(1) AS count(1)#xL]
:     +- Filter ((outer(x1#x) = y1#x) AND (y2#x = 1))
:        +- SubqueryAlias y
:           +- View (`y`, [y1#x, y2#x])
:              +- Project [cast(col1#x as int) AS y1#x, cast(col2#x as int) AS y2#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias x
   +- View (`x`, [x1#x, x2#x])
      +- Project [cast(col1#x as int) AS x1#x, cast(col2#x as int) AS x2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from y where x1 = y1 and y2 = x1 + 1 group by y2) from x
-- !query analysis
Project [x1#x, x2#x, scalar-subquery#x [x1#x && x1#x] AS scalarsubquery(x1, x1)#xL]
:  +- Aggregate [y2#x], [count(1) AS count(1)#xL]
:     +- Filter ((outer(x1#x) = y1#x) AND (y2#x = (outer(x1#x) + 1)))
:        +- SubqueryAlias y
:           +- View (`y`, [y1#x, y2#x])
:              +- Project [cast(col1#x as int) AS y1#x, cast(col2#x as int) AS y2#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias x
   +- View (`x`, [x1#x, x2#x])
      +- Project [cast(col1#x as int) AS x1#x, cast(col2#x as int) AS x2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from y where x1 = y1 and cast(y2 as double) = x1 + 1
           group by cast(y2 as double)) from x
-- !query analysis
Project [x1#x, x2#x, scalar-subquery#x [x1#x && x1#x] AS scalarsubquery(x1, x1)#xL]
:  +- Aggregate [cast(y2#x as double)], [count(1) AS count(1)#xL]
:     +- Filter ((outer(x1#x) = y1#x) AND (cast(y2#x as double) = cast((outer(x1#x) + 1) as double)))
:        +- SubqueryAlias y
:           +- View (`y`, [y1#x, y2#x])
:              +- Project [cast(col1#x as int) AS y1#x, cast(col2#x as int) AS y2#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias x
   +- View (`x`, [x1#x, x2#x])
      +- Project [cast(col1#x as int) AS x1#x, cast(col2#x as int) AS x2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from y where y2 + 1 = x1 + x2 group by y2 + 1) from x
-- !query analysis
Project [x1#x, x2#x, scalar-subquery#x [x1#x && x2#x] AS scalarsubquery(x1, x2)#xL]
:  +- Aggregate [(y2#x + 1)], [count(1) AS count(1)#xL]
:     +- Filter ((y2#x + 1) = (outer(x1#x) + outer(x2#x)))
:        +- SubqueryAlias y
:           +- View (`y`, [y1#x, y2#x])
:              +- Project [cast(col1#x as int) AS y1#x, cast(col2#x as int) AS y2#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias x
   +- View (`x`, [x1#x, x2#x])
      +- Project [cast(col1#x as int) AS x1#x, cast(col2#x as int) AS x2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
set spark.sql.optimizer.scalarSubqueryUseSingleJoin = false
-- !query analysis
SetCommand (spark.sql.optimizer.scalarSubqueryUseSingleJoin,Some(false))


-- !query
select * from x where (select count(*) from y where y1 > x1 group by y1) = 1
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.NON_CORRELATED_COLUMNS_IN_GROUP_BY",
  "sqlState" : "0A000",
  "messageParameters" : {
    "value" : "y1"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 23,
    "stopIndex" : 72,
    "fragment" : "(select count(*) from y where y1 > x1 group by y1)"
  } ]
}


-- !query
select *, (select count(*) from y where y1 + y2 = x1 group by y1) from x
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.NON_CORRELATED_COLUMNS_IN_GROUP_BY",
  "sqlState" : "0A000",
  "messageParameters" : {
    "value" : "y1"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 11,
    "stopIndex" : 65,
    "fragment" : "(select count(*) from y where y1 + y2 = x1 group by y1)"
  } ]
}


-- !query
select *, (select count(*) from y where x1 = y1 and y2 + 10 = x1 + 1 group by y2) from x
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.NON_CORRELATED_COLUMNS_IN_GROUP_BY",
  "sqlState" : "0A000",
  "messageParameters" : {
    "value" : "y2"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 11,
    "stopIndex" : 81,
    "fragment" : "(select count(*) from y where x1 = y1 and y2 + 10 = x1 + 1 group by y2)"
  } ]
}


-- !query
set spark.sql.optimizer.scalarSubqueryUseSingleJoin = true
-- !query analysis
SetCommand (spark.sql.optimizer.scalarSubqueryUseSingleJoin,Some(true))


-- !query
select * from x where (select count(*) from y where y1 > x1 group by y1) = 1
-- !query analysis
Project [x1#x, x2#x]
+- Filter (scalar-subquery#x [x1#x] = cast(1 as bigint))
   :  +- Aggregate [y1#x], [count(1) AS count(1)#xL]
   :     +- Filter (y1#x > outer(x1#x))
   :        +- SubqueryAlias y
   :           +- View (`y`, [y1#x, y2#x])
   :              +- Project [cast(col1#x as int) AS y1#x, cast(col2#x as int) AS y2#x]
   :                 +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias x
      +- View (`x`, [x1#x, x2#x])
         +- Project [cast(col1#x as int) AS x1#x, cast(col2#x as int) AS x2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from y where y1 + y2 = x1 group by y1) from x
-- !query analysis
Project [x1#x, x2#x, scalar-subquery#x [x1#x] AS scalarsubquery(x1)#xL]
:  +- Aggregate [y1#x], [count(1) AS count(1)#xL]
:     +- Filter ((y1#x + y2#x) = outer(x1#x))
:        +- SubqueryAlias y
:           +- View (`y`, [y1#x, y2#x])
:              +- Project [cast(col1#x as int) AS y1#x, cast(col2#x as int) AS y2#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias x
   +- View (`x`, [x1#x, x2#x])
      +- Project [cast(col1#x as int) AS x1#x, cast(col2#x as int) AS x2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from y where x1 = y1 and y2 + 10 = x1 + 1 group by y2) from x
-- !query analysis
Project [x1#x, x2#x, scalar-subquery#x [x1#x && x1#x] AS scalarsubquery(x1, x1)#xL]
:  +- Aggregate [y2#x], [count(1) AS count(1)#xL]
:     +- Filter ((outer(x1#x) = y1#x) AND ((y2#x + 10) = (outer(x1#x) + 1)))
:        +- SubqueryAlias y
:           +- View (`y`, [y1#x, y2#x])
:              +- Project [cast(col1#x as int) AS y1#x, cast(col2#x as int) AS y2#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias x
   +- View (`x`, [x1#x, x2#x])
      +- Project [cast(col1#x as int) AS x1#x, cast(col2#x as int) AS x2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from (select * from y where y1 = x1 union all select * from y) sub group by y1) from x
-- !query analysis
Project [x1#x, x2#x, scalar-subquery#x [x1#x] AS scalarsubquery(x1)#xL]
:  +- Aggregate [y1#x], [count(1) AS count(1)#xL]
:     +- SubqueryAlias sub
:        +- Union false, false
:           :- Project [y1#x, y2#x]
:           :  +- Filter (y1#x = outer(x1#x))
:           :     +- SubqueryAlias y
:           :        +- View (`y`, [y1#x, y2#x])
:           :           +- Project [cast(col1#x as int) AS y1#x, cast(col2#x as int) AS y2#x]
:           :              +- LocalRelation [col1#x, col2#x]
:           +- Project [y1#x, y2#x]
:              +- SubqueryAlias y
:                 +- View (`y`, [y1#x, y2#x])
:                    +- Project [cast(col1#x as int) AS y1#x, cast(col2#x as int) AS y2#x]
:                       +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias x
   +- View (`x`, [x1#x, x2#x])
      +- Project [cast(col1#x as int) AS x1#x, cast(col2#x as int) AS x2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from y left join (select * from z where z1 = x1) sub on y2 = z2 group by z1) from x
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.ACCESSING_OUTER_QUERY_COLUMN_IS_NOT_ALLOWED",
  "sqlState" : "0A000",
  "messageParameters" : {
    "treeNode" : "Filter (z1#x = outer(x1#x))\n+- SubqueryAlias z\n   +- View (`z`, [z1#x, z2#x])\n      +- Project [cast(col1#x as int) AS z1#x, cast(col2#x as int) AS z2#x]\n         +- LocalRelation [col1#x, col2#x]\n"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 46,
    "stopIndex" : 74,
    "fragment" : "select * from z where z1 = x1"
  } ]
}


-- !query
set spark.sql.legacy.scalarSubqueryAllowGroupByNonEqualityCorrelatedPredicate = true
-- !query analysis
SetCommand (spark.sql.legacy.scalarSubqueryAllowGroupByNonEqualityCorrelatedPredicate,Some(true))


-- !query
set spark.sql.optimizer.scalarSubqueryUseSingleJoin = false
-- !query analysis
SetCommand (spark.sql.optimizer.scalarSubqueryUseSingleJoin,Some(false))


-- !query
select * from x where (select count(*) from y where y1 > x1 group by y1) = 1
-- !query analysis
Project [x1#x, x2#x]
+- Filter (scalar-subquery#x [x1#x] = cast(1 as bigint))
   :  +- Aggregate [y1#x], [count(1) AS count(1)#xL]
   :     +- Filter (y1#x > outer(x1#x))
   :        +- SubqueryAlias y
   :           +- View (`y`, [y1#x, y2#x])
   :              +- Project [cast(col1#x as int) AS y1#x, cast(col2#x as int) AS y2#x]
   :                 +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias x
      +- View (`x`, [x1#x, x2#x])
         +- Project [cast(col1#x as int) AS x1#x, cast(col2#x as int) AS x2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
reset spark.sql.legacy.scalarSubqueryAllowGroupByNonEqualityCorrelatedPredicate
-- !query analysis
ResetCommand spark.sql.legacy.scalarSubqueryAllowGroupByNonEqualityCorrelatedPredicate
