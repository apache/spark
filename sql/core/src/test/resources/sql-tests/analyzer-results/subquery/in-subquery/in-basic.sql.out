-- Automatically generated by SQLQueryTestSuite
-- !query
create temporary view tab_a as select * from values (1, 1) as tab_a(a1, b1)
-- !query analysis
CreateViewCommand `tab_a`, select * from values (1, 1) as tab_a(a1, b1), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [a1#x, b1#x]
      +- SubqueryAlias tab_a
         +- LocalRelation [a1#x, b1#x]


-- !query
create temporary view tab_b as select * from values (1, 1) as tab_b(a2, b2)
-- !query analysis
CreateViewCommand `tab_b`, select * from values (1, 1) as tab_b(a2, b2), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [a2#x, b2#x]
      +- SubqueryAlias tab_b
         +- LocalRelation [a2#x, b2#x]


-- !query
create temporary view struct_tab as select struct(col1 as a, col2 as b) as record from
 values (1, 1), (1, 2), (2, 1), (2, 2)
-- !query analysis
CreateViewCommand `struct_tab`, select struct(col1 as a, col2 as b) as record from
 values (1, 1), (1, 2), (2, 1), (2, 2), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [struct(a, col1#x, b, col2#x) AS record#x]
      +- LocalRelation [col1#x, col2#x]


-- !query
select 1 from tab_a where (a1, b1) not in (select a2, b2 from tab_b)
-- !query analysis
Project [1 AS 1#x]
+- Filter NOT named_struct(a1, a1#x, b1, b1#x) IN (list#x [])
   :  +- Project [a2#x, b2#x]
   :     +- SubqueryAlias tab_b
   :        +- View (`tab_b`, [a2#x, b2#x])
   :           +- Project [cast(a2#x as int) AS a2#x, cast(b2#x as int) AS b2#x]
   :              +- Project [a2#x, b2#x]
   :                 +- SubqueryAlias tab_b
   :                    +- LocalRelation [a2#x, b2#x]
   +- SubqueryAlias tab_a
      +- View (`tab_a`, [a1#x, b1#x])
         +- Project [cast(a1#x as int) AS a1#x, cast(b1#x as int) AS b1#x]
            +- Project [a1#x, b1#x]
               +- SubqueryAlias tab_a
                  +- LocalRelation [a1#x, b1#x]


-- !query
select 1 from tab_a where (a1, b1) not in (select (a2, b2) from tab_b)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.IN_SUBQUERY_LENGTH_MISMATCH",
  "sqlState" : "42K09",
  "messageParameters" : {
    "leftColumns" : "\"a1\", \"b1\"",
    "leftLength" : "2",
    "rightColumns" : "\"named_struct(a2, a2, b2, b2)\"",
    "rightLength" : "1",
    "sqlExpr" : "\"(named_struct('a1', a1, 'b1', b1) IN (listquery()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 36,
    "stopIndex" : 70,
    "fragment" : "not in (select (a2, b2) from tab_b)"
  } ]
}


-- !query
select count(*) from struct_tab where record in
  (select (a2 as a, b2 as b) from tab_b)
-- !query analysis
Aggregate [count(1) AS count(1)#xL]
+- Filter record#x IN (list#x [])
   :  +- Project [named_struct(a, a2#x, b, b2#x) AS named_struct(a, a2 AS a, b, b2 AS b)#x]
   :     +- SubqueryAlias tab_b
   :        +- View (`tab_b`, [a2#x, b2#x])
   :           +- Project [cast(a2#x as int) AS a2#x, cast(b2#x as int) AS b2#x]
   :              +- Project [a2#x, b2#x]
   :                 +- SubqueryAlias tab_b
   :                    +- LocalRelation [a2#x, b2#x]
   +- SubqueryAlias struct_tab
      +- View (`struct_tab`, [record#x])
         +- Project [cast(record#x as struct<a:int,b:int>) AS record#x]
            +- Project [struct(a, col1#x, b, col2#x) AS record#x]
               +- LocalRelation [col1#x, col2#x]


-- !query
select count(*) from struct_tab where record not in
  (select (a2 as a, b2 as b) from tab_b)
-- !query analysis
Aggregate [count(1) AS count(1)#xL]
+- Filter NOT record#x IN (list#x [])
   :  +- Project [named_struct(a, a2#x, b, b2#x) AS named_struct(a, a2 AS a, b, b2 AS b)#x]
   :     +- SubqueryAlias tab_b
   :        +- View (`tab_b`, [a2#x, b2#x])
   :           +- Project [cast(a2#x as int) AS a2#x, cast(b2#x as int) AS b2#x]
   :              +- Project [a2#x, b2#x]
   :                 +- SubqueryAlias tab_b
   :                    +- LocalRelation [a2#x, b2#x]
   +- SubqueryAlias struct_tab
      +- View (`struct_tab`, [record#x])
         +- Project [cast(record#x as struct<a:int,b:int>) AS record#x]
            +- Project [struct(a, col1#x, b, col2#x) AS record#x]
               +- LocalRelation [col1#x, col2#x]
