-- Automatically generated by SQLQueryTestSuite
-- !query
create temporary view t1(c1, c2) as values (0, 1), (1, 2)
-- !query analysis
CreateViewCommand `t1`, [(c1,None), (c2,None)], values (0, 1), (1, 2), false, false, LocalTempView, UNSUPPORTED, true
   +- LocalRelation [col1#x, col2#x]


-- !query
create temporary view t2(c1, c2) as values (0, 2), (0, 3)
-- !query analysis
CreateViewCommand `t2`, [(c1,None), (c2,None)], values (0, 2), (0, 3), false, false, LocalTempView, UNSUPPORTED, true
   +- LocalRelation [col1#x, col2#x]


-- !query
create temporary view t3(c1, c2) as values (0, 3), (1, 4), (2, 5)
-- !query analysis
CreateViewCommand `t3`, [(c1,None), (c2,None)], values (0, 3), (1, 4), (2, 5), false, false, LocalTempView, UNSUPPORTED, true
   +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 where c1 in (select count(*) + 1 from t2 where t2.c1 = t1.c1)
-- !query analysis
Project [c1#x, c2#x]
+- Filter cast(c1#x as bigint) IN (list#x [c1#x])
   :  +- Project [(count(1) + 1)#xL]
   :     +- Aggregate [(count(1) + cast(1 as bigint)) AS (count(1) + 1)#xL]
   :        +- Filter (c1#x = outer(c1#x))
   :           +- SubqueryAlias t2
   :              +- View (`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias t1
      +- View (`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select *, c1 in (select count(*) + 1 from t2 where t2.c1 = t1.c1)
from t1
-- !query analysis
Project [c1#x, c2#x, cast(c1#x as bigint) IN (list#x [c1#x]) AS (c1 IN (listquery(c1)))#x]
:  +- Project [(count(1) + 1)#xL]
:     +- Aggregate [(count(1) + cast(1 as bigint)) AS (count(1) + 1)#xL]
:        +- Filter (c1#x = outer(c1#x))
:           +- SubqueryAlias t2
:              +- View (`t2`, [c1#x, c2#x])
:                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:                    +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias t1
   +- View (`t1`, [c1#x, c2#x])
      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, c1 not in (select count(*) + 1 from t2 where t2.c1 = t1.c1)
from t1
-- !query analysis
Project [c1#x, c2#x, NOT cast(c1#x as bigint) IN (list#x [c1#x]) AS (NOT (c1 IN (listquery(c1))))#x]
:  +- Project [(count(1) + 1)#xL]
:     +- Aggregate [(count(1) + cast(1 as bigint)) AS (count(1) + 1)#xL]
:        +- Filter (c1#x = outer(c1#x))
:           +- SubqueryAlias t2
:              +- View (`t2`, [c1#x, c2#x])
:                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:                    +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias t1
   +- View (`t1`, [c1#x, c2#x])
      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 where
 c1 in (select count(*) + 1 from t2 where t2.c1 = t1.c1) OR
 c2 in (select count(*) - 1 from t2 where t2.c1 = t1.c1)
-- !query analysis
Project [c1#x, c2#x]
+- Filter (cast(c1#x as bigint) IN (list#x [c1#x]) OR cast(c2#x as bigint) IN (list#x [c1#x]))
   :  :- Project [(count(1) + 1)#xL]
   :  :  +- Aggregate [(count(1) + cast(1 as bigint)) AS (count(1) + 1)#xL]
   :  :     +- Filter (c1#x = outer(c1#x))
   :  :        +- SubqueryAlias t2
   :  :           +- View (`t2`, [c1#x, c2#x])
   :  :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :  :                 +- LocalRelation [col1#x, col2#x]
   :  +- Project [(count(1) - 1)#xL]
   :     +- Aggregate [(count(1) - cast(1 as bigint)) AS (count(1) - 1)#xL]
   :        +- Filter (c1#x = outer(c1#x))
   :           +- SubqueryAlias t2
   :              +- View (`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias t1
      +- View (`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 where
 (c1 in (select count(*) + 1 from t2 where t2.c1 = t1.c1) OR
 c2 in (select count(*) - 1 from t2 where t2.c1 = t1.c1)) AND
 c1 NOT in (select count(*) from t2 where t2.c1 = t1.c2)
-- !query analysis
Project [c1#x, c2#x]
+- Filter ((cast(c1#x as bigint) IN (list#x [c1#x]) OR cast(c2#x as bigint) IN (list#x [c1#x])) AND NOT cast(c1#x as bigint) IN (list#x [c2#x]))
   :  :- Project [(count(1) + 1)#xL]
   :  :  +- Aggregate [(count(1) + cast(1 as bigint)) AS (count(1) + 1)#xL]
   :  :     +- Filter (c1#x = outer(c1#x))
   :  :        +- SubqueryAlias t2
   :  :           +- View (`t2`, [c1#x, c2#x])
   :  :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :  :                 +- LocalRelation [col1#x, col2#x]
   :  :- Project [(count(1) - 1)#xL]
   :  :  +- Aggregate [(count(1) - cast(1 as bigint)) AS (count(1) - 1)#xL]
   :  :     +- Filter (c1#x = outer(c1#x))
   :  :        +- SubqueryAlias t2
   :  :           +- View (`t2`, [c1#x, c2#x])
   :  :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :  :                 +- LocalRelation [col1#x, col2#x]
   :  +- Project [count(1)#xL]
   :     +- Aggregate [count(1) AS count(1)#xL]
   :        +- Filter (c1#x = outer(c2#x))
   :           +- SubqueryAlias t2
   :              +- View (`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias t1
      +- View (`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 where c1 in (select 1 from t2 where t2.c1 = t1.c1 having count(*) = 0)
-- !query analysis
Project [c1#x, c2#x]
+- Filter c1#x IN (list#x [c1#x])
   :  +- Project [1#x]
   :     +- Filter (count(1)#xL = cast(0 as bigint))
   :        +- Aggregate [1 AS 1#x, count(1) AS count(1)#xL]
   :           +- Filter (c1#x = outer(c1#x))
   :              +- SubqueryAlias t2
   :                 +- View (`t2`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias t1
      +- View (`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 where c1 not in (select 1 from t2 where t2.c1 = t1.c1 having count(*) = 0)
-- !query analysis
Project [c1#x, c2#x]
+- Filter NOT c1#x IN (list#x [c1#x])
   :  +- Project [1#x]
   :     +- Filter (count(1)#xL = cast(0 as bigint))
   :        +- Aggregate [1 AS 1#x, count(1) AS count(1)#xL]
   :           +- Filter (c1#x = outer(c1#x))
   :              +- SubqueryAlias t2
   :                 +- View (`t2`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias t1
      +- View (`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 where c1 in (select count(*) from t1 join t3 using (c1) where t3.c1 = t1.c2)
-- !query analysis
Project [c1#x, c2#x]
+- Filter cast(c1#x as bigint) IN (list#x [])
   :  +- Project [count(1)#xL]
   :     +- Aggregate [count(1) AS count(1)#xL]
   :        +- Project [c1#x, c2#x, c2#x]
   :           +- Filter (c1#x = c2#x)
   :              +- Project [c1#x, c2#x, c2#x, c1#x]
   :                 +- Join Inner, (c1#x = c1#x)
   :                    :- SubqueryAlias t1
   :                    :  +- View (`t1`, [c1#x, c2#x])
   :                    :     +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    :        +- LocalRelation [col1#x, col2#x]
   :                    +- SubqueryAlias t3
   :                       +- View (`t3`, [c1#x, c2#x])
   :                          +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias t1
      +- View (`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 where c1 not in (select count(*) + 1 from t1 join t3 using (c1) where t3.c1 = t1.c2)
-- !query analysis
Project [c1#x, c2#x]
+- Filter NOT cast(c1#x as bigint) IN (list#x [])
   :  +- Project [(count(1) + 1)#xL]
   :     +- Aggregate [(count(1) + cast(1 as bigint)) AS (count(1) + 1)#xL]
   :        +- Project [c1#x, c2#x, c2#x]
   :           +- Filter (c1#x = c2#x)
   :              +- Project [c1#x, c2#x, c2#x, c1#x]
   :                 +- Join Inner, (c1#x = c1#x)
   :                    :- SubqueryAlias t1
   :                    :  +- View (`t1`, [c1#x, c2#x])
   :                    :     +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    :        +- LocalRelation [col1#x, col2#x]
   :                    +- SubqueryAlias t3
   :                       +- View (`t3`, [c1#x, c2#x])
   :                          +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias t1
      +- View (`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
set spark.sql.optimizer.decorrelateExistsSubqueryLegacyIncorrectCountHandling.enabled = true
-- !query analysis
SetCommand (spark.sql.optimizer.decorrelateExistsSubqueryLegacyIncorrectCountHandling.enabled,Some(true))


-- !query
select * from t1 where c1 in (select count(*) + 1 from t2 where t2.c1 = t1.c1)
-- !query analysis
Project [c1#x, c2#x]
+- Filter cast(c1#x as bigint) IN (list#x [c1#x])
   :  +- Project [(count(1) + 1)#xL]
   :     +- Aggregate [(count(1) + cast(1 as bigint)) AS (count(1) + 1)#xL]
   :        +- Filter (c1#x = outer(c1#x))
   :           +- SubqueryAlias t2
   :              +- View (`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias t1
      +- View (`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select *, c1 in (select count(*) + 1 from t2 where t2.c1 = t1.c1)
from t1
-- !query analysis
Project [c1#x, c2#x, cast(c1#x as bigint) IN (list#x [c1#x]) AS (c1 IN (listquery(c1)))#x]
:  +- Project [(count(1) + 1)#xL]
:     +- Aggregate [(count(1) + cast(1 as bigint)) AS (count(1) + 1)#xL]
:        +- Filter (c1#x = outer(c1#x))
:           +- SubqueryAlias t2
:              +- View (`t2`, [c1#x, c2#x])
:                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:                    +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias t1
   +- View (`t1`, [c1#x, c2#x])
      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, c1 not in (select count(*) + 1 from t2 where t2.c1 = t1.c1)
from t1
-- !query analysis
Project [c1#x, c2#x, NOT cast(c1#x as bigint) IN (list#x [c1#x]) AS (NOT (c1 IN (listquery(c1))))#x]
:  +- Project [(count(1) + 1)#xL]
:     +- Aggregate [(count(1) + cast(1 as bigint)) AS (count(1) + 1)#xL]
:        +- Filter (c1#x = outer(c1#x))
:           +- SubqueryAlias t2
:              +- View (`t2`, [c1#x, c2#x])
:                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:                    +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias t1
   +- View (`t1`, [c1#x, c2#x])
      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 where c1 in (select 1 from t2 where t2.c1 = t1.c1 having count(*) = 0)
-- !query analysis
Project [c1#x, c2#x]
+- Filter c1#x IN (list#x [c1#x])
   :  +- Project [1#x]
   :     +- Filter (count(1)#xL = cast(0 as bigint))
   :        +- Aggregate [1 AS 1#x, count(1) AS count(1)#xL]
   :           +- Filter (c1#x = outer(c1#x))
   :              +- SubqueryAlias t2
   :                 +- View (`t2`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias t1
      +- View (`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 where c1 not in (select 1 from t2 where t2.c1 = t1.c1 having count(*) = 0)
-- !query analysis
Project [c1#x, c2#x]
+- Filter NOT c1#x IN (list#x [c1#x])
   :  +- Project [1#x]
   :     +- Filter (count(1)#xL = cast(0 as bigint))
   :        +- Aggregate [1 AS 1#x, count(1) AS count(1)#xL]
   :           +- Filter (c1#x = outer(c1#x))
   :              +- SubqueryAlias t2
   :                 +- View (`t2`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias t1
      +- View (`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 where c1 in (select count(*) from t1 join t3 using (c1) where t3.c1 = t1.c2)
-- !query analysis
Project [c1#x, c2#x]
+- Filter cast(c1#x as bigint) IN (list#x [])
   :  +- Project [count(1)#xL]
   :     +- Aggregate [count(1) AS count(1)#xL]
   :        +- Project [c1#x, c2#x, c2#x]
   :           +- Filter (c1#x = c2#x)
   :              +- Project [c1#x, c2#x, c2#x, c1#x]
   :                 +- Join Inner, (c1#x = c1#x)
   :                    :- SubqueryAlias t1
   :                    :  +- View (`t1`, [c1#x, c2#x])
   :                    :     +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    :        +- LocalRelation [col1#x, col2#x]
   :                    +- SubqueryAlias t3
   :                       +- View (`t3`, [c1#x, c2#x])
   :                          +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias t1
      +- View (`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 where c1 not in (select count(*) + 1 from t1 join t3 using (c1) where t3.c1 = t1.c2)
-- !query analysis
Project [c1#x, c2#x]
+- Filter NOT cast(c1#x as bigint) IN (list#x [])
   :  +- Project [(count(1) + 1)#xL]
   :     +- Aggregate [(count(1) + cast(1 as bigint)) AS (count(1) + 1)#xL]
   :        +- Project [c1#x, c2#x, c2#x]
   :           +- Filter (c1#x = c2#x)
   :              +- Project [c1#x, c2#x, c2#x, c1#x]
   :                 +- Join Inner, (c1#x = c1#x)
   :                    :- SubqueryAlias t1
   :                    :  +- View (`t1`, [c1#x, c2#x])
   :                    :     +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    :        +- LocalRelation [col1#x, col2#x]
   :                    +- SubqueryAlias t3
   :                       +- View (`t3`, [c1#x, c2#x])
   :                          +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias t1
      +- View (`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
set spark.sql.optimizer.decorrelateExistsSubqueryLegacyIncorrectCountHandling.enabled = false
-- !query analysis
SetCommand (spark.sql.optimizer.decorrelateExistsSubqueryLegacyIncorrectCountHandling.enabled,Some(false))
