-- Automatically generated by SQLQueryTestSuite
-- !query
create temporary view t1 as select * from values
  ("one", 1),
  ("two", 2),
  ("three", 3),
  ("one", NULL)
  as t1(k, v)
-- !query analysis
CreateViewCommand `t1`, select * from values
  ("one", 1),
  ("two", 2),
  ("three", 3),
  ("one", NULL)
  as t1(k, v), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [k#x, v#x]
      +- SubqueryAlias t1
         +- LocalRelation [k#x, v#x]


-- !query
create temporary view t2 as select * from values
  ("one", 1),
  ("two", 22),
  ("one", 5),
  ("one", NULL),
  (NULL, 5)
  as t2(k, v)
-- !query analysis
CreateViewCommand `t2`, select * from values
  ("one", 1),
  ("two", 22),
  ("one", 5),
  ("one", NULL),
  (NULL, 5)
  as t2(k, v), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [k#x, v#x]
      +- SubqueryAlias t2
         +- LocalRelation [k#x, v#x]


-- !query
SELECT * FROM t1 EXCEPT SELECT * FROM t2
-- !query analysis
Except false
:- Project [k#x, v#x]
:  +- SubqueryAlias t1
:     +- View (`t1`, [k#x, v#x])
:        +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
:           +- Project [k#x, v#x]
:              +- SubqueryAlias t1
:                 +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- SubqueryAlias t2
      +- View (`t2`, [k#x, v#x])
         +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias t2
                  +- LocalRelation [k#x, v#x]


-- !query
SELECT * FROM t1 EXCEPT SELECT * FROM t1 where v <> 1 and v <> 2
-- !query analysis
Except false
:- Project [k#x, v#x]
:  +- SubqueryAlias t1
:     +- View (`t1`, [k#x, v#x])
:        +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
:           +- Project [k#x, v#x]
:              +- SubqueryAlias t1
:                 +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- Filter (NOT (v#x = 1) AND NOT (v#x = 2))
      +- SubqueryAlias t1
         +- View (`t1`, [k#x, v#x])
            +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
               +- Project [k#x, v#x]
                  +- SubqueryAlias t1
                     +- LocalRelation [k#x, v#x]


-- !query
SELECT * FROM t1 where v <> 1 and v <> 22 EXCEPT SELECT * FROM t1 where v <> 2 and v >= 3
-- !query analysis
Except false
:- Project [k#x, v#x]
:  +- Filter (NOT (v#x = 1) AND NOT (v#x = 22))
:     +- SubqueryAlias t1
:        +- View (`t1`, [k#x, v#x])
:           +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias t1
:                    +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- Filter (NOT (v#x = 2) AND (v#x >= 3))
      +- SubqueryAlias t1
         +- View (`t1`, [k#x, v#x])
            +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
               +- Project [k#x, v#x]
                  +- SubqueryAlias t1
                     +- LocalRelation [k#x, v#x]


-- !query
SELECT t1.* FROM t1, t2 where t1.k = t2.k
EXCEPT
SELECT t1.* FROM t1, t2 where t1.k = t2.k and t1.k != 'one'
-- !query analysis
Except false
:- Project [k#x, v#x]
:  +- Filter (k#x = k#x)
:     +- Join Inner
:        :- SubqueryAlias t1
:        :  +- View (`t1`, [k#x, v#x])
:        :     +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
:        :        +- Project [k#x, v#x]
:        :           +- SubqueryAlias t1
:        :              +- LocalRelation [k#x, v#x]
:        +- SubqueryAlias t2
:           +- View (`t2`, [k#x, v#x])
:              +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
:                 +- Project [k#x, v#x]
:                    +- SubqueryAlias t2
:                       +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- Filter ((k#x = k#x) AND NOT (k#x = one))
      +- Join Inner
         :- SubqueryAlias t1
         :  +- View (`t1`, [k#x, v#x])
         :     +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
         :        +- Project [k#x, v#x]
         :           +- SubqueryAlias t1
         :              +- LocalRelation [k#x, v#x]
         +- SubqueryAlias t2
            +- View (`t2`, [k#x, v#x])
               +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
                  +- Project [k#x, v#x]
                     +- SubqueryAlias t2
                        +- LocalRelation [k#x, v#x]


-- !query
SELECT * FROM t2 where v >= 1 and v <> 22 EXCEPT SELECT * FROM t1
-- !query analysis
Except false
:- Project [k#x, v#x]
:  +- Filter ((v#x >= 1) AND NOT (v#x = 22))
:     +- SubqueryAlias t2
:        +- View (`t2`, [k#x, v#x])
:           +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias t2
:                    +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- SubqueryAlias t1
      +- View (`t1`, [k#x, v#x])
         +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias t1
                  +- LocalRelation [k#x, v#x]


-- !query
SELECT (SELECT min(k) FROM t2 WHERE t2.k = t1.k) min_t2 FROM t1
MINUS
SELECT (SELECT min(k) FROM t2) abs_min_t2 FROM t1 WHERE  t1.k = 'one'
-- !query analysis
Except false
:- Project [scalar-subquery#x [k#x] AS min_t2#x]
:  :  +- Aggregate [min(k#x) AS min(k)#x]
:  :     +- Filter (k#x = outer(k#x))
:  :        +- SubqueryAlias t2
:  :           +- View (`t2`, [k#x, v#x])
:  :              +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
:  :                 +- Project [k#x, v#x]
:  :                    +- SubqueryAlias t2
:  :                       +- LocalRelation [k#x, v#x]
:  +- SubqueryAlias t1
:     +- View (`t1`, [k#x, v#x])
:        +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
:           +- Project [k#x, v#x]
:              +- SubqueryAlias t1
:                 +- LocalRelation [k#x, v#x]
+- Project [scalar-subquery#x [] AS abs_min_t2#x]
   :  +- Aggregate [min(k#x) AS min(k)#x]
   :     +- SubqueryAlias t2
   :        +- View (`t2`, [k#x, v#x])
   :           +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
   :              +- Project [k#x, v#x]
   :                 +- SubqueryAlias t2
   :                    +- LocalRelation [k#x, v#x]
   +- Filter (k#x = one)
      +- SubqueryAlias t1
         +- View (`t1`, [k#x, v#x])
            +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
               +- Project [k#x, v#x]
                  +- SubqueryAlias t1
                     +- LocalRelation [k#x, v#x]


-- !query
SELECT t1.k
FROM   t1
WHERE  t1.v <= (SELECT   max(t2.v)
                FROM     t2
                WHERE    t2.k = t1.k)
MINUS
SELECT t1.k
FROM   t1
WHERE  t1.v >= (SELECT   min(t2.v)
                FROM     t2
                WHERE    t2.k = t1.k)
-- !query analysis
Except false
:- Project [k#x]
:  +- Filter (v#x <= scalar-subquery#x [k#x])
:     :  +- Aggregate [max(v#x) AS max(v)#x]
:     :     +- Filter (k#x = outer(k#x))
:     :        +- SubqueryAlias t2
:     :           +- View (`t2`, [k#x, v#x])
:     :              +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
:     :                 +- Project [k#x, v#x]
:     :                    +- SubqueryAlias t2
:     :                       +- LocalRelation [k#x, v#x]
:     +- SubqueryAlias t1
:        +- View (`t1`, [k#x, v#x])
:           +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias t1
:                    +- LocalRelation [k#x, v#x]
+- Project [k#x]
   +- Filter (v#x >= scalar-subquery#x [k#x])
      :  +- Aggregate [min(v#x) AS min(v)#x]
      :     +- Filter (k#x = outer(k#x))
      :        +- SubqueryAlias t2
      :           +- View (`t2`, [k#x, v#x])
      :              +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
      :                 +- Project [k#x, v#x]
      :                    +- SubqueryAlias t2
      :                       +- LocalRelation [k#x, v#x]
      +- SubqueryAlias t1
         +- View (`t1`, [k#x, v#x])
            +- Project [cast(k#x as string) AS k#x, cast(v#x as int) AS v#x]
               +- Project [k#x, v#x]
                  +- SubqueryAlias t1
                     +- LocalRelation [k#x, v#x]


-- !query
CREATE OR REPLACE TEMPORARY VIEW t3 AS VALUES (decimal(1)) tbl(v)
-- !query analysis
CreateViewCommand `t3`, VALUES (decimal(1)) tbl(v), false, true, LocalTempView, UNSUPPORTED, true
   +- SubqueryAlias tbl
      +- LocalRelation [v#x]


-- !query
SELECT t.v FROM (
  SELECT v FROM t3
  EXCEPT
  SELECT v + v AS v FROM t3
) t
-- !query analysis
Project [v#x]
+- SubqueryAlias t
   +- Except false
      :- Project [cast(v#x as decimal(11,0)) AS v#x]
      :  +- Project [v#x]
      :     +- SubqueryAlias t3
      :        +- View (`t3`, [v#x])
      :           +- Project [cast(v#x as decimal(10,0)) AS v#x]
      :              +- SubqueryAlias tbl
      :                 +- LocalRelation [v#x]
      +- Project [(v#x + v#x) AS v#x]
         +- SubqueryAlias t3
            +- View (`t3`, [v#x])
               +- Project [cast(v#x as decimal(10,0)) AS v#x]
                  +- SubqueryAlias tbl
                     +- LocalRelation [v#x]


-- !query
SELECT SUM(t.v) FROM (
  SELECT v FROM t3
  EXCEPT
  SELECT v + v AS v FROM t3
) t
-- !query analysis
Aggregate [sum(v#x) AS sum(v)#x]
+- SubqueryAlias t
   +- Except false
      :- Project [cast(v#x as decimal(11,0)) AS v#x]
      :  +- Project [v#x]
      :     +- SubqueryAlias t3
      :        +- View (`t3`, [v#x])
      :           +- Project [cast(v#x as decimal(10,0)) AS v#x]
      :              +- SubqueryAlias tbl
      :                 +- LocalRelation [v#x]
      +- Project [(v#x + v#x) AS v#x]
         +- SubqueryAlias t3
            +- View (`t3`, [v#x])
               +- Project [cast(v#x as decimal(10,0)) AS v#x]
                  +- SubqueryAlias tbl
                     +- LocalRelation [v#x]


-- !query
DROP VIEW IF EXISTS t1
-- !query analysis
DropTempViewCommand t1


-- !query
DROP VIEW IF EXISTS t2
-- !query analysis
DropTempViewCommand t2


-- !query
DROP VIEW IF EXISTS t3
-- !query analysis
DropTempViewCommand t3
