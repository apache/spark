-- Automatically generated by SQLQueryTestSuite
-- !query
select bit_count(null)
-- !query analysis
Project [bit_count(null) AS bit_count(NULL)#x]
+- OneRowRelation


-- !query
select bit_count(true)
-- !query analysis
Project [bit_count(true) AS bit_count(true)#x]
+- OneRowRelation


-- !query
select bit_count(false)
-- !query analysis
Project [bit_count(false) AS bit_count(false)#x]
+- OneRowRelation


-- !query
select bit_count(cast(1 as tinyint))
-- !query analysis
Project [bit_count(cast(1 as tinyint)) AS bit_count(CAST(1 AS TINYINT))#x]
+- OneRowRelation


-- !query
select bit_count(cast(2 as tinyint))
-- !query analysis
Project [bit_count(cast(2 as tinyint)) AS bit_count(CAST(2 AS TINYINT))#x]
+- OneRowRelation


-- !query
select bit_count(cast(3 as tinyint))
-- !query analysis
Project [bit_count(cast(3 as tinyint)) AS bit_count(CAST(3 AS TINYINT))#x]
+- OneRowRelation


-- !query
select bit_count(1S)
-- !query analysis
Project [bit_count(1) AS bit_count(1)#x]
+- OneRowRelation


-- !query
select bit_count(2S)
-- !query analysis
Project [bit_count(2) AS bit_count(2)#x]
+- OneRowRelation


-- !query
select bit_count(3S)
-- !query analysis
Project [bit_count(3) AS bit_count(3)#x]
+- OneRowRelation


-- !query
select bit_count(1)
-- !query analysis
Project [bit_count(1) AS bit_count(1)#x]
+- OneRowRelation


-- !query
select bit_count(2)
-- !query analysis
Project [bit_count(2) AS bit_count(2)#x]
+- OneRowRelation


-- !query
select bit_count(3)
-- !query analysis
Project [bit_count(3) AS bit_count(3)#x]
+- OneRowRelation


-- !query
select bit_count(1L)
-- !query analysis
Project [bit_count(1) AS bit_count(1)#x]
+- OneRowRelation


-- !query
select bit_count(2L)
-- !query analysis
Project [bit_count(2) AS bit_count(2)#x]
+- OneRowRelation


-- !query
select bit_count(3L)
-- !query analysis
Project [bit_count(3) AS bit_count(3)#x]
+- OneRowRelation


-- !query
select bit_count(-1L)
-- !query analysis
Project [bit_count(-1) AS bit_count(-1)#x]
+- OneRowRelation


-- !query
select bit_count(9223372036854775807L)
-- !query analysis
Project [bit_count(9223372036854775807) AS bit_count(9223372036854775807)#x]
+- OneRowRelation


-- !query
select bit_count(-9223372036854775808L)
-- !query analysis
Project [bit_count(-9223372036854775808) AS bit_count(-9223372036854775808)#x]
+- OneRowRelation


-- !query
select bit_count("bit count")
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"bit count\"",
    "inputType" : "\"STRING\"",
    "paramIndex" : "first",
    "requiredType" : "(\"INTEGRAL\" or \"BOOLEAN\")",
    "sqlExpr" : "\"bit_count(bit count)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 29,
    "fragment" : "bit_count(\"bit count\")"
  } ]
}


-- !query
select bit_count('a')
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"a\"",
    "inputType" : "\"STRING\"",
    "paramIndex" : "first",
    "requiredType" : "(\"INTEGRAL\" or \"BOOLEAN\")",
    "sqlExpr" : "\"bit_count(a)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 21,
    "fragment" : "bit_count('a')"
  } ]
}


-- !query
CREATE OR REPLACE TEMPORARY VIEW bitwise_test AS SELECT * FROM VALUES
  (1, 1, 1, 1L),
  (2, 3, 4, null),
  (7, 7, 7, 3L) AS bitwise_test(b1, b2, b3, b4)
-- !query analysis
CreateViewCommand `bitwise_test`, SELECT * FROM VALUES
  (1, 1, 1, 1L),
  (2, 3, 4, null),
  (7, 7, 7, 3L) AS bitwise_test(b1, b2, b3, b4), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [b1#x, b2#x, b3#x, b4#xL]
      +- SubqueryAlias bitwise_test
         +- LocalRelation [b1#x, b2#x, b3#x, b4#xL]


-- !query
SELECT BIT_XOR(b3) AS n1 FROM bitwise_test where 1 = 0
-- !query analysis
Aggregate [bit_xor(b3#x) AS n1#x]
+- Filter (1 = 0)
   +- SubqueryAlias bitwise_test
      +- View (`bitwise_test`, [b1#x, b2#x, b3#x, b4#xL])
         +- Project [cast(b1#x as int) AS b1#x, cast(b2#x as int) AS b2#x, cast(b3#x as int) AS b3#x, cast(b4#xL as bigint) AS b4#xL]
            +- Project [b1#x, b2#x, b3#x, b4#xL]
               +- SubqueryAlias bitwise_test
                  +- LocalRelation [b1#x, b2#x, b3#x, b4#xL]


-- !query
SELECT BIT_XOR(b4) AS n1 FROM bitwise_test where b4 is null
-- !query analysis
Aggregate [bit_xor(b4#xL) AS n1#xL]
+- Filter isnull(b4#xL)
   +- SubqueryAlias bitwise_test
      +- View (`bitwise_test`, [b1#x, b2#x, b3#x, b4#xL])
         +- Project [cast(b1#x as int) AS b1#x, cast(b2#x as int) AS b2#x, cast(b3#x as int) AS b3#x, cast(b4#xL as bigint) AS b4#xL]
            +- Project [b1#x, b2#x, b3#x, b4#xL]
               +- SubqueryAlias bitwise_test
                  +- LocalRelation [b1#x, b2#x, b3#x, b4#xL]


-- !query
SELECT
 BIT_XOR(cast(b1 as tinyint))  AS a4,
 BIT_XOR(cast(b2 as smallint))  AS b5,
 BIT_XOR(b3)  AS c2,
 BIT_XOR(b4)  AS d2,
 BIT_XOR(distinct b4) AS e2
FROM bitwise_test
-- !query analysis
Aggregate [bit_xor(cast(b1#x as tinyint)) AS a4#x, bit_xor(cast(b2#x as smallint)) AS b5#x, bit_xor(b3#x) AS c2#x, bit_xor(b4#xL) AS d2#xL, bit_xor(distinct b4#xL) AS e2#xL]
+- SubqueryAlias bitwise_test
   +- View (`bitwise_test`, [b1#x, b2#x, b3#x, b4#xL])
      +- Project [cast(b1#x as int) AS b1#x, cast(b2#x as int) AS b2#x, cast(b3#x as int) AS b3#x, cast(b4#xL as bigint) AS b4#xL]
         +- Project [b1#x, b2#x, b3#x, b4#xL]
            +- SubqueryAlias bitwise_test
               +- LocalRelation [b1#x, b2#x, b3#x, b4#xL]


-- !query
SELECT bit_xor(b3) FROM bitwise_test GROUP BY b1 & 1
-- !query analysis
Aggregate [(b1#x & 1)], [bit_xor(b3#x) AS bit_xor(b3)#x]
+- SubqueryAlias bitwise_test
   +- View (`bitwise_test`, [b1#x, b2#x, b3#x, b4#xL])
      +- Project [cast(b1#x as int) AS b1#x, cast(b2#x as int) AS b2#x, cast(b3#x as int) AS b3#x, cast(b4#xL as bigint) AS b4#xL]
         +- Project [b1#x, b2#x, b3#x, b4#xL]
            +- SubqueryAlias bitwise_test
               +- LocalRelation [b1#x, b2#x, b3#x, b4#xL]


-- !query
SELECT b1, bit_xor(b2) FROM bitwise_test GROUP BY b1 HAVING bit_and(b2) < 7
-- !query analysis
Project [b1#x, bit_xor(b2)#x]
+- Filter (bit_and(b2#x)#x < 7)
   +- Aggregate [b1#x], [b1#x, bit_xor(b2#x) AS bit_xor(b2)#x, bit_and(b2#x) AS bit_and(b2#x)#x]
      +- SubqueryAlias bitwise_test
         +- View (`bitwise_test`, [b1#x, b2#x, b3#x, b4#xL])
            +- Project [cast(b1#x as int) AS b1#x, cast(b2#x as int) AS b2#x, cast(b3#x as int) AS b3#x, cast(b4#xL as bigint) AS b4#xL]
               +- Project [b1#x, b2#x, b3#x, b4#xL]
                  +- SubqueryAlias bitwise_test
                     +- LocalRelation [b1#x, b2#x, b3#x, b4#xL]


-- !query
SELECT b1, b2, bit_xor(b2) OVER (PARTITION BY b1 ORDER BY b2) FROM bitwise_test
-- !query analysis
Project [b1#x, b2#x, bit_xor(b2) OVER (PARTITION BY b1 ORDER BY b2 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x]
+- Project [b1#x, b2#x, bit_xor(b2) OVER (PARTITION BY b1 ORDER BY b2 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x, bit_xor(b2) OVER (PARTITION BY b1 ORDER BY b2 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x]
   +- Window [bit_xor(b2#x) windowspecdefinition(b1#x, b2#x ASC NULLS FIRST, specifiedwindowframe(RangeFrame, unboundedpreceding$(), currentrow$())) AS bit_xor(b2) OVER (PARTITION BY b1 ORDER BY b2 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x], [b1#x], [b2#x ASC NULLS FIRST]
      +- Project [b1#x, b2#x]
         +- SubqueryAlias bitwise_test
            +- View (`bitwise_test`, [b1#x, b2#x, b3#x, b4#xL])
               +- Project [cast(b1#x as int) AS b1#x, cast(b2#x as int) AS b2#x, cast(b3#x as int) AS b3#x, cast(b4#xL as bigint) AS b4#xL]
                  +- Project [b1#x, b2#x, b3#x, b4#xL]
                     +- SubqueryAlias bitwise_test
                        +- LocalRelation [b1#x, b2#x, b3#x, b4#xL]


-- !query
select getbit(11L, 3), getbit(11L, 2), getbit(11L, 1), getbit(11L, 0)
-- !query analysis
Project [getbit(11, 3) AS getbit(11, 3)#x, getbit(11, 2) AS getbit(11, 2)#x, getbit(11, 1) AS getbit(11, 1)#x, getbit(11, 0) AS getbit(11, 0)#x]
+- OneRowRelation


-- !query
select getbit(11L, 2 + 1), getbit(11L, 3 - 1), getbit(10L + 1, 1 * 1), getbit(cast(11L / 1 AS long), 1 - 1)
-- !query analysis
Project [getbit(11, (2 + 1)) AS getbit(11, (2 + 1))#x, getbit(11, (3 - 1)) AS getbit(11, (3 - 1))#x, getbit((10 + cast(1 as bigint)), (1 * 1)) AS getbit((10 + 1), (1 * 1))#x, getbit(cast((cast(11 as double) / cast(1 as double)) as bigint), (1 - 1)) AS getbit(CAST((11 / 1) AS BIGINT), (1 - 1))#x]
+- OneRowRelation


-- !query
select getbit(11L, 63)
-- !query analysis
Project [getbit(11, 63) AS getbit(11, 63)#x]
+- OneRowRelation


-- !query
select getbit(11L, -1)
-- !query analysis
Project [getbit(11, -1) AS getbit(11, -1)#x]
+- OneRowRelation


-- !query
select getbit(11L, 64)
-- !query analysis
Project [getbit(11, 64) AS getbit(11, 64)#x]
+- OneRowRelation


-- !query
SELECT 20181117 >> 2
-- !query analysis
Project [(20181117 >> 2) AS (20181117 >> 2)#x]
+- OneRowRelation


-- !query
SELECT 20181117 << 2
-- !query analysis
Project [(20181117 << 2) AS (20181117 << 2)#x]
+- OneRowRelation


-- !query
SELECT 20181117 >>> 2
-- !query analysis
Project [(20181117 >>> 2) AS (20181117 >>> 2)#x]
+- OneRowRelation


-- !query
SELECT 20181117 > > 2
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'>'",
    "hint" : ""
  }
}


-- !query
SELECT 20181117 < < 2
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'<'",
    "hint" : ""
  }
}


-- !query
SELECT 20181117 > >> 2
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'>>'",
    "hint" : ""
  }
}


-- !query
SELECT 20181117 <<< 2
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'<'",
    "hint" : ""
  }
}


-- !query
SELECT 20181117 >>>> 2
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'>'",
    "hint" : ""
  }
}


-- !query
select cast(null as array<array<int>>), 20181117 >> 2
-- !query analysis
Project [cast(null as array<array<int>>) AS NULL#x, (20181117 >> 2) AS (20181117 >> 2)#x]
+- OneRowRelation


-- !query
select cast(null as array<array<int>>), 20181117 >>> 2
-- !query analysis
Project [cast(null as array<array<int>>) AS NULL#x, (20181117 >>> 2) AS (20181117 >>> 2)#x]
+- OneRowRelation


-- !query
select cast(null as map<int, array<int>>), 20181117 >> 2
-- !query analysis
Project [cast(null as map<int,array<int>>) AS NULL#x, (20181117 >> 2) AS (20181117 >> 2)#x]
+- OneRowRelation


-- !query
select 1 << 1 + 2 as plus_over_shift
-- !query analysis
Project [(1 << (1 + 2)) AS plus_over_shift#x]
+- OneRowRelation


-- !query
select 2 >> 1 << 1 as left_to_right
-- !query analysis
Project [((2 >> 1) << 1) AS left_to_right#x]
+- OneRowRelation


-- !query
select 1 & 2 >> 1 as shift_over_ampersand
-- !query analysis
Project [(1 & (2 >> 1)) AS shift_over_ampersand#x]
+- OneRowRelation
