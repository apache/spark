-- Automatically generated by SQLQueryTestSuite
-- !query
select udf(col1), udf(col2) from values ("one", 1)
-- !query analysis
Project [cast(udf(cast(col1#x as string)) as string) AS udf(col1)#x, cast(udf(cast(col2#x as string)) as int) AS udf(col2)#x]
+- LocalRelation [col1#x, col2#x]


-- !query
select udf(col1), udf(udf(col2)) from values ("one", 1) as data
-- !query analysis
Project [cast(udf(cast(col1#x as string)) as string) AS udf(col1)#x, cast(udf(cast(cast(udf(cast(col2#x as string)) as int) as string)) as int) AS udf(udf(col2))#x]
+- SubqueryAlias data
   +- LocalRelation [col1#x, col2#x]


-- !query
select udf(a), b from values ("one", 1) as data(a, b)
-- !query analysis
Project [cast(udf(cast(a#x as string)) as string) AS udf(a)#x, b#x]
+- SubqueryAlias data
   +- LocalRelation [a#x, b#x]


-- !query
select udf(a) from values 1, 2, 3 as data(a)
-- !query analysis
Project [cast(udf(cast(a#x as string)) as int) AS udf(a)#x]
+- SubqueryAlias data
   +- LocalRelation [a#x]


-- !query
select udf(a), b from values ("one", 1), ("two", 2), ("three", null) as data(a, b)
-- !query analysis
Project [cast(udf(cast(a#x as string)) as string) AS udf(a)#x, b#x]
+- SubqueryAlias data
   +- LocalRelation [a#x, b#x]


-- !query
select udf(a), b from values ("one", null), ("two", null) as data(a, b)
-- !query analysis
Project [cast(udf(cast(a#x as string)) as string) AS udf(a)#x, b#x]
+- SubqueryAlias data
   +- LocalRelation [a#x, b#x]


-- !query
select udf(a), b from values ("one", 1), ("two", 2L) as data(a, b)
-- !query analysis
Project [cast(udf(cast(a#x as string)) as string) AS udf(a)#x, b#xL]
+- SubqueryAlias data
   +- LocalRelation [a#x, b#xL]


-- !query
select udf(udf(a)), udf(b) from values ("one", 1 + 0), ("two", 1 + 3L) as data(a, b)
-- !query analysis
Project [cast(udf(cast(cast(udf(cast(a#x as string)) as string) as string)) as string) AS udf(udf(a))#x, cast(udf(cast(b#xL as string)) as bigint) AS udf(b)#xL]
+- SubqueryAlias data
   +- LocalRelation [a#x, b#xL]


-- !query
select udf(a), b from values ("one", array(0, 1)), ("two", array(2, 3)) as data(a, b)
-- !query analysis
Project [cast(udf(cast(a#x as string)) as string) AS udf(a)#x, b#x]
+- SubqueryAlias data
   +- LocalRelation [a#x, b#x]


-- !query
select udf(a), b from values ("one", 2.0), ("two", 3.0D) as data(a, b)
-- !query analysis
Project [cast(udf(cast(a#x as string)) as string) AS udf(a)#x, b#x]
+- SubqueryAlias data
   +- LocalRelation [a#x, b#x]


-- !query
select udf(a), b from values ("one", rand(5)), ("two", 3.0D) as data(a, b)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_INLINE_TABLE.CANNOT_EVALUATE_EXPRESSION_IN_INLINE_TABLE",
  "sqlState" : "42000",
  "messageParameters" : {
    "expr" : "\"rand(5)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 38,
    "stopIndex" : 44,
    "fragment" : "rand(5)"
  } ]
}


-- !query
select udf(a), udf(b) from values ("one", 2.0), ("two") as data(a, b)
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "INVALID_INLINE_TABLE.NUM_COLUMNS_MISMATCH",
  "sqlState" : "42000",
  "messageParameters" : {
    "actualNumCols" : "1",
    "expectedNumCols" : "2",
    "rowIndex" : "1"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 28,
    "stopIndex" : 69,
    "fragment" : "values (\"one\", 2.0), (\"two\") as data(a, b)"
  } ]
}


-- !query
select udf(a), udf(b) from values ("one", array(0, 1)), ("two", struct(1, 2)) as data(a, b)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_INLINE_TABLE.INCOMPATIBLE_TYPES_IN_INLINE_TABLE",
  "sqlState" : "42000",
  "messageParameters" : {
    "colName" : "`b`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 28,
    "stopIndex" : 91,
    "fragment" : "values (\"one\", array(0, 1)), (\"two\", struct(1, 2)) as data(a, b)"
  } ]
}


-- !query
select udf(a), udf(b) from values ("one"), ("two") as data(a, b)
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "INVALID_INLINE_TABLE.NUM_COLUMNS_MISMATCH",
  "sqlState" : "42000",
  "messageParameters" : {
    "actualNumCols" : "1",
    "expectedNumCols" : "2",
    "rowIndex" : "0"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 28,
    "stopIndex" : 64,
    "fragment" : "values (\"one\"), (\"two\") as data(a, b)"
  } ]
}


-- !query
select udf(a), udf(b) from values ("one", random_not_exist_func(1)), ("two", 2) as data(a, b)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNRESOLVED_ROUTINE",
  "sqlState" : "42883",
  "messageParameters" : {
    "routineName" : "`random_not_exist_func`",
    "searchPath" : "[`system`.`builtin`, `system`.`session`, `spark_catalog`.`default`]"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 43,
    "stopIndex" : 66,
    "fragment" : "random_not_exist_func(1)"
  } ]
}


-- !query
select udf(a), udf(b) from values ("one", count(1)), ("two", 2) as data(a, b)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_INLINE_TABLE.CANNOT_EVALUATE_EXPRESSION_IN_INLINE_TABLE",
  "sqlState" : "42000",
  "messageParameters" : {
    "expr" : "\"count(1)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 43,
    "stopIndex" : 50,
    "fragment" : "count(1)"
  } ]
}


-- !query
select udf(a), b from values (timestamp('1991-12-06 00:00:00.0'), array(timestamp('1991-12-06 01:00:00.0'), timestamp('1991-12-06 12:00:00.0'))) as data(a, b)
-- !query analysis
Project [cast(udf(cast(a#x as string)) as timestamp) AS udf(a)#x, b#x]
+- SubqueryAlias data
   +- LocalRelation [a#x, b#x]
