-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TEMPORARY VIEW tab1 AS SELECT * FROM VALUES
    (1, 2), 
    (1, 2),
    (1, 3),
    (1, 3),
    (2, 3),
    (null, null),
    (null, null)
    AS tab1(k, v)
-- !query analysis
CreateViewCommand `tab1`, SELECT * FROM VALUES
    (1, 2), 
    (1, 2),
    (1, 3),
    (1, 3),
    (2, 3),
    (null, null),
    (null, null)
    AS tab1(k, v), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [k#x, v#x]
      +- SubqueryAlias tab1
         +- LocalRelation [k#x, v#x]


-- !query
CREATE TEMPORARY VIEW tab2 AS SELECT * FROM VALUES
    (1, 2), 
    (1, 2), 
    (2, 3),
    (3, 4),
    (null, null),
    (null, null)
    AS tab2(k, v)
-- !query analysis
CreateViewCommand `tab2`, SELECT * FROM VALUES
    (1, 2), 
    (1, 2), 
    (2, 3),
    (3, 4),
    (null, null),
    (null, null)
    AS tab2(k, v), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [k#x, v#x]
      +- SubqueryAlias tab2
         +- LocalRelation [k#x, v#x]


-- !query
SELECT udf(k), v FROM tab1
INTERSECT ALL
SELECT k, udf(v) FROM tab2
-- !query analysis
Intersect All true
:- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, v#x]
:  +- SubqueryAlias tab1
:     +- View (`tab1`, [k#x, v#x])
:        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:           +- Project [k#x, v#x]
:              +- SubqueryAlias tab1
:                 +- LocalRelation [k#x, v#x]
+- Project [k#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SELECT k, udf(v) FROM tab1
INTERSECT ALL
SELECT udf(k), v FROM tab1 WHERE udf(k) = 1
-- !query analysis
Intersect All true
:- Project [k#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:  +- SubqueryAlias tab1
:     +- View (`tab1`, [k#x, v#x])
:        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:           +- Project [k#x, v#x]
:              +- SubqueryAlias tab1
:                 +- LocalRelation [k#x, v#x]
+- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, v#x]
   +- Filter (cast(udf(cast(k#x as string)) as int) = 1)
      +- SubqueryAlias tab1
         +- View (`tab1`, [k#x, v#x])
            +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
               +- Project [k#x, v#x]
                  +- SubqueryAlias tab1
                     +- LocalRelation [k#x, v#x]


-- !query
SELECT udf(k), udf(v) FROM tab1 WHERE k > udf(2)
INTERSECT ALL
SELECT udf(k), udf(v) FROM tab2
-- !query analysis
Intersect All true
:- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:  +- Filter (k#x > cast(udf(cast(2 as string)) as int))
:     +- SubqueryAlias tab1
:        +- View (`tab1`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab1
:                    +- LocalRelation [k#x, v#x]
+- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SELECT udf(k), v FROM tab1
INTERSECT ALL
SELECT udf(k), v FROM tab2 WHERE udf(udf(k)) > 3
-- !query analysis
Intersect All true
:- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, v#x]
:  +- SubqueryAlias tab1
:     +- View (`tab1`, [k#x, v#x])
:        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:           +- Project [k#x, v#x]
:              +- SubqueryAlias tab1
:                 +- LocalRelation [k#x, v#x]
+- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, v#x]
   +- Filter (cast(udf(cast(cast(udf(cast(k#x as string)) as int) as string)) as int) > 3)
      +- SubqueryAlias tab2
         +- View (`tab2`, [k#x, v#x])
            +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
               +- Project [k#x, v#x]
                  +- SubqueryAlias tab2
                     +- LocalRelation [k#x, v#x]


-- !query
SELECT udf(k), v FROM tab1
INTERSECT ALL
SELECT CAST(udf(1) AS BIGINT), CAST(udf(2) AS BIGINT)
-- !query analysis
Intersect All true
:- Project [cast(udf(k)#x as bigint) AS udf(k)#xL, cast(v#x as bigint) AS v#xL]
:  +- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, v#x]
:     +- SubqueryAlias tab1
:        +- View (`tab1`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab1
:                    +- LocalRelation [k#x, v#x]
+- Project [cast(cast(udf(cast(1 as string)) as int) as bigint) AS CAST(udf(1) AS BIGINT)#xL, cast(cast(udf(cast(2 as string)) as int) as bigint) AS CAST(udf(2) AS BIGINT)#xL]
   +- OneRowRelation


-- !query
SELECT k, udf(v) FROM tab1
INTERSECT ALL
SELECT array(1), udf(2)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "first",
    "dataType1" : "\"ARRAY<INT>\"",
    "dataType2" : "\"INT\"",
    "hint" : "",
    "operator" : "INTERSECT ALL",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 64,
    "fragment" : "SELECT k, udf(v) FROM tab1\nINTERSECT ALL\nSELECT array(1), udf(2)"
  } ]
}


-- !query
SELECT udf(k) FROM tab1
INTERSECT ALL
SELECT udf(k), udf(v) FROM tab2
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "NUM_COLUMNS_MISMATCH",
  "sqlState" : "42826",
  "messageParameters" : {
    "firstNumColumns" : "1",
    "invalidNumColumns" : "2",
    "invalidOrdinalNum" : "second",
    "operator" : "INTERSECT ALL"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 69,
    "fragment" : "SELECT udf(k) FROM tab1\nINTERSECT ALL\nSELECT udf(k), udf(v) FROM tab2"
  } ]
}


-- !query
SELECT udf(k), v FROM tab2
INTERSECT ALL
SELECT k, udf(v) FROM tab1
INTERSECT ALL
SELECT udf(k), udf(v) FROM tab2
-- !query analysis
Intersect All true
:- Intersect All true
:  :- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, v#x]
:  :  +- SubqueryAlias tab2
:  :     +- View (`tab2`, [k#x, v#x])
:  :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :           +- Project [k#x, v#x]
:  :              +- SubqueryAlias tab2
:  :                 +- LocalRelation [k#x, v#x]
:  +- Project [k#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:     +- SubqueryAlias tab1
:        +- View (`tab1`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab1
:                    +- LocalRelation [k#x, v#x]
+- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SELECT udf(k), v FROM tab1
EXCEPT
SELECT k, udf(v) FROM tab2
UNION ALL
SELECT k, udf(udf(v)) FROM tab1
INTERSECT ALL
SELECT udf(k), v FROM tab2
-- !query analysis
Union false, false
:- Except false
:  :- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, v#x]
:  :  +- SubqueryAlias tab1
:  :     +- View (`tab1`, [k#x, v#x])
:  :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :           +- Project [k#x, v#x]
:  :              +- SubqueryAlias tab1
:  :                 +- LocalRelation [k#x, v#x]
:  +- Project [k#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:     +- SubqueryAlias tab2
:        +- View (`tab2`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab2
:                    +- LocalRelation [k#x, v#x]
+- Intersect All true
   :- Project [k#x, cast(udf(cast(cast(udf(cast(v#x as string)) as int) as string)) as int) AS udf(udf(v))#x]
   :  +- SubqueryAlias tab1
   :     +- View (`tab1`, [k#x, v#x])
   :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
   :           +- Project [k#x, v#x]
   :              +- SubqueryAlias tab1
   :                 +- LocalRelation [k#x, v#x]
   +- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, v#x]
      +- SubqueryAlias tab2
         +- View (`tab2`, [k#x, v#x])
            +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
               +- Project [k#x, v#x]
                  +- SubqueryAlias tab2
                     +- LocalRelation [k#x, v#x]


-- !query
SELECT udf(k), udf(v) FROM tab1
EXCEPT
SELECT udf(k), v FROM tab2
EXCEPT
SELECT k, udf(v) FROM tab1
INTERSECT ALL
SELECT udf(k), udf(udf(v)) FROM tab2
-- !query analysis
Except false
:- Except false
:  :- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:  :  +- SubqueryAlias tab1
:  :     +- View (`tab1`, [k#x, v#x])
:  :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :           +- Project [k#x, v#x]
:  :              +- SubqueryAlias tab1
:  :                 +- LocalRelation [k#x, v#x]
:  +- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, v#x]
:     +- SubqueryAlias tab2
:        +- View (`tab2`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab2
:                    +- LocalRelation [k#x, v#x]
+- Intersect All true
   :- Project [k#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
   :  +- SubqueryAlias tab1
   :     +- View (`tab1`, [k#x, v#x])
   :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
   :           +- Project [k#x, v#x]
   :              +- SubqueryAlias tab1
   :                 +- LocalRelation [k#x, v#x]
   +- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, cast(udf(cast(cast(udf(cast(v#x as string)) as int) as string)) as int) AS udf(udf(v))#x]
      +- SubqueryAlias tab2
         +- View (`tab2`, [k#x, v#x])
            +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
               +- Project [k#x, v#x]
                  +- SubqueryAlias tab2
                     +- LocalRelation [k#x, v#x]


-- !query
(
  (
    (
      SELECT udf(k), v FROM tab1
      EXCEPT
      SELECT k, udf(v) FROM tab2
    )
    EXCEPT
    SELECT udf(k), udf(v) FROM tab1
  )
  INTERSECT ALL
  SELECT udf(k), udf(v) FROM tab2
)
-- !query analysis
Intersect All true
:- Except false
:  :- Except false
:  :  :- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, v#x]
:  :  :  +- SubqueryAlias tab1
:  :  :     +- View (`tab1`, [k#x, v#x])
:  :  :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :  :           +- Project [k#x, v#x]
:  :  :              +- SubqueryAlias tab1
:  :  :                 +- LocalRelation [k#x, v#x]
:  :  +- Project [k#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:  :     +- SubqueryAlias tab2
:  :        +- View (`tab2`, [k#x, v#x])
:  :           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :              +- Project [k#x, v#x]
:  :                 +- SubqueryAlias tab2
:  :                    +- LocalRelation [k#x, v#x]
:  +- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:     +- SubqueryAlias tab1
:        +- View (`tab1`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab1
:                    +- LocalRelation [k#x, v#x]
+- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SELECT * 
FROM   (SELECT udf(tab1.k),
               udf(tab2.v)
        FROM   tab1 
               JOIN tab2 
                 ON udf(udf(tab1.k)) = tab2.k)
INTERSECT ALL 
SELECT * 
FROM   (SELECT udf(tab1.k),
               udf(tab2.v)
        FROM   tab1 
               JOIN tab2 
                 ON udf(tab1.k) = udf(udf(tab2.k)))
-- !query analysis
Intersect All true
:- Project [udf(k)#x, udf(v)#x]
:  +- SubqueryAlias __auto_generated_subquery_name
:     +- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:        +- Join Inner, (cast(udf(cast(cast(udf(cast(k#x as string)) as int) as string)) as int) = k#x)
:           :- SubqueryAlias tab1
:           :  +- View (`tab1`, [k#x, v#x])
:           :     +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:           :        +- Project [k#x, v#x]
:           :           +- SubqueryAlias tab1
:           :              +- LocalRelation [k#x, v#x]
:           +- SubqueryAlias tab2
:              +- View (`tab2`, [k#x, v#x])
:                 +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:                    +- Project [k#x, v#x]
:                       +- SubqueryAlias tab2
:                          +- LocalRelation [k#x, v#x]
+- Project [udf(k)#x, udf(v)#x]
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
         +- Join Inner, (cast(udf(cast(k#x as string)) as int) = cast(udf(cast(cast(udf(cast(k#x as string)) as int) as string)) as int))
            :- SubqueryAlias tab1
            :  +- View (`tab1`, [k#x, v#x])
            :     +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            :        +- Project [k#x, v#x]
            :           +- SubqueryAlias tab1
            :              +- LocalRelation [k#x, v#x]
            +- SubqueryAlias tab2
               +- View (`tab2`, [k#x, v#x])
                  +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
                     +- Project [k#x, v#x]
                        +- SubqueryAlias tab2
                           +- LocalRelation [k#x, v#x]


-- !query
SELECT * 
FROM   (SELECT udf(tab1.k),
               udf(tab2.v)
        FROM   tab1 
               JOIN tab2 
                 ON udf(tab1.k) = udf(tab2.k))
INTERSECT ALL 
SELECT * 
FROM   (SELECT udf(tab2.v) AS k,
               udf(tab1.k) AS v
        FROM   tab1 
               JOIN tab2 
                 ON tab1.k = udf(tab2.k))
-- !query analysis
Intersect All true
:- Project [udf(k)#x, udf(v)#x]
:  +- SubqueryAlias __auto_generated_subquery_name
:     +- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:        +- Join Inner, (cast(udf(cast(k#x as string)) as int) = cast(udf(cast(k#x as string)) as int))
:           :- SubqueryAlias tab1
:           :  +- View (`tab1`, [k#x, v#x])
:           :     +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:           :        +- Project [k#x, v#x]
:           :           +- SubqueryAlias tab1
:           :              +- LocalRelation [k#x, v#x]
:           +- SubqueryAlias tab2
:              +- View (`tab2`, [k#x, v#x])
:                 +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:                    +- Project [k#x, v#x]
:                       +- SubqueryAlias tab2
:                          +- LocalRelation [k#x, v#x]
+- Project [k#x, v#x]
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [cast(udf(cast(v#x as string)) as int) AS k#x, cast(udf(cast(k#x as string)) as int) AS v#x]
         +- Join Inner, (k#x = cast(udf(cast(k#x as string)) as int))
            :- SubqueryAlias tab1
            :  +- View (`tab1`, [k#x, v#x])
            :     +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            :        +- Project [k#x, v#x]
            :           +- SubqueryAlias tab1
            :              +- LocalRelation [k#x, v#x]
            +- SubqueryAlias tab2
               +- View (`tab2`, [k#x, v#x])
                  +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
                     +- Project [k#x, v#x]
                        +- SubqueryAlias tab2
                           +- LocalRelation [k#x, v#x]


-- !query
SELECT udf(v) FROM tab1 GROUP BY v
INTERSECT ALL
SELECT udf(udf(k)) FROM tab2 GROUP BY k
-- !query analysis
Intersect All true
:- Aggregate [v#x], [cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:  +- SubqueryAlias tab1
:     +- View (`tab1`, [k#x, v#x])
:        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:           +- Project [k#x, v#x]
:              +- SubqueryAlias tab1
:                 +- LocalRelation [k#x, v#x]
+- Aggregate [k#x], [cast(udf(cast(cast(udf(cast(k#x as string)) as int) as string)) as int) AS udf(udf(k))#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SET spark.sql.legacy.setopsPrecedence.enabled= true
-- !query analysis
SetCommand (spark.sql.legacy.setopsPrecedence.enabled,Some(true))


-- !query
SELECT udf(k), v FROM tab1
EXCEPT
SELECT k, udf(v) FROM tab2
UNION ALL
SELECT udf(k), udf(v) FROM tab1
INTERSECT ALL
SELECT udf(udf(k)), udf(v) FROM tab2
-- !query analysis
Intersect All true
:- Union false, false
:  :- Except false
:  :  :- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, v#x]
:  :  :  +- SubqueryAlias tab1
:  :  :     +- View (`tab1`, [k#x, v#x])
:  :  :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :  :           +- Project [k#x, v#x]
:  :  :              +- SubqueryAlias tab1
:  :  :                 +- LocalRelation [k#x, v#x]
:  :  +- Project [k#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:  :     +- SubqueryAlias tab2
:  :        +- View (`tab2`, [k#x, v#x])
:  :           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :              +- Project [k#x, v#x]
:  :                 +- SubqueryAlias tab2
:  :                    +- LocalRelation [k#x, v#x]
:  +- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:     +- SubqueryAlias tab1
:        +- View (`tab1`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab1
:                    +- LocalRelation [k#x, v#x]
+- Project [cast(udf(cast(cast(udf(cast(k#x as string)) as int) as string)) as int) AS udf(udf(k))#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SELECT k, udf(v) FROM tab1
EXCEPT
SELECT udf(k), v FROM tab2
UNION ALL
SELECT udf(k), udf(v) FROM tab1
INTERSECT
SELECT udf(k), udf(udf(v)) FROM tab2
-- !query analysis
Intersect false
:- Union false, false
:  :- Except false
:  :  :- Project [k#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:  :  :  +- SubqueryAlias tab1
:  :  :     +- View (`tab1`, [k#x, v#x])
:  :  :        +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :  :           +- Project [k#x, v#x]
:  :  :              +- SubqueryAlias tab1
:  :  :                 +- LocalRelation [k#x, v#x]
:  :  +- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, v#x]
:  :     +- SubqueryAlias tab2
:  :        +- View (`tab2`, [k#x, v#x])
:  :           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:  :              +- Project [k#x, v#x]
:  :                 +- SubqueryAlias tab2
:  :                    +- LocalRelation [k#x, v#x]
:  +- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, cast(udf(cast(v#x as string)) as int) AS udf(v)#x]
:     +- SubqueryAlias tab1
:        +- View (`tab1`, [k#x, v#x])
:           +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
:              +- Project [k#x, v#x]
:                 +- SubqueryAlias tab1
:                    +- LocalRelation [k#x, v#x]
+- Project [cast(udf(cast(k#x as string)) as int) AS udf(k)#x, cast(udf(cast(cast(udf(cast(v#x as string)) as int) as string)) as int) AS udf(udf(v))#x]
   +- SubqueryAlias tab2
      +- View (`tab2`, [k#x, v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias tab2
                  +- LocalRelation [k#x, v#x]


-- !query
SET spark.sql.legacy.setopsPrecedence.enabled = false
-- !query analysis
SetCommand (spark.sql.legacy.setopsPrecedence.enabled,Some(false))


-- !query
DROP VIEW IF EXISTS tab1
-- !query analysis
DropTempViewCommand tab1


-- !query
DROP VIEW IF EXISTS tab2
-- !query analysis
DropTempViewCommand tab2
