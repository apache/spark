-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE OR REPLACE TEMPORARY VIEW t1 AS VALUES (1, 'a'), (2, 'b') tbl(c1, c2)
-- !query analysis
CreateViewCommand `t1`, VALUES (1, 'a'), (2, 'b') tbl(c1, c2), false, true, LocalTempView, UNSUPPORTED, true
   +- SubqueryAlias tbl
      +- LocalRelation [c1#x, c2#x]


-- !query
CREATE OR REPLACE TEMPORARY VIEW t2 AS VALUES (1.0, 1), (2.0, 4) tbl(c1, c2)
-- !query analysis
CreateViewCommand `t2`, VALUES (1.0, 1), (2.0, 4) tbl(c1, c2), false, true, LocalTempView, UNSUPPORTED, true
   +- SubqueryAlias tbl
      +- LocalRelation [c1#x, c2#x]


-- !query
SELECT udf(c1) as c1, udf(c2) as c2
FROM   (SELECT udf(c1) as c1, udf(c2) as c2 FROM t1
        UNION ALL
        SELECT udf(c1) as c1, udf(c2) as c2 FROM t1)
-- !query analysis
Project [cast(udf(cast(c1#x as string)) as int) AS c1#x, cast(udf(cast(c2#x as string)) as string) AS c2#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Project [cast(udf(cast(c1#x as string)) as int) AS c1#x, cast(udf(cast(c2#x as string)) as string) AS c2#x]
      :  +- SubqueryAlias t1
      :     +- View (`t1`, [c1#x, c2#x])
      :        +- Project [cast(c1#x as int) AS c1#x, cast(c2#x as string) AS c2#x]
      :           +- SubqueryAlias tbl
      :              +- LocalRelation [c1#x, c2#x]
      +- Project [cast(udf(cast(c1#x as string)) as int) AS c1#x, cast(udf(cast(c2#x as string)) as string) AS c2#x]
         +- SubqueryAlias t1
            +- View (`t1`, [c1#x, c2#x])
               +- Project [cast(c1#x as int) AS c1#x, cast(c2#x as string) AS c2#x]
                  +- SubqueryAlias tbl
                     +- LocalRelation [c1#x, c2#x]


-- !query
SELECT udf(c1) as c1, udf(c2) as c2
FROM   (SELECT udf(c1) as c1, udf(c2) as c2 FROM t1 WHERE c2 = 'a'
        UNION ALL
        SELECT udf(c1) as c1, udf(c2) as c2 FROM t2
        UNION ALL
        SELECT udf(c1) as c1, udf(c2) as c2 FROM t2)
-- !query analysis
Project [cast(udf(cast(c1#x as string)) as decimal(11,1)) AS c1#x, cast(udf(cast(c2#xL as string)) as bigint) AS c2#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Union false, false
      :  :- Project [cast(c1#x as decimal(11,1)) AS c1#x, cast(c2#x as bigint) AS c2#xL]
      :  :  +- Project [cast(udf(cast(c1#x as string)) as int) AS c1#x, cast(udf(cast(c2#x as string)) as string) AS c2#x]
      :  :     +- Filter (c2#x = a)
      :  :        +- SubqueryAlias t1
      :  :           +- View (`t1`, [c1#x, c2#x])
      :  :              +- Project [cast(c1#x as int) AS c1#x, cast(c2#x as string) AS c2#x]
      :  :                 +- SubqueryAlias tbl
      :  :                    +- LocalRelation [c1#x, c2#x]
      :  +- Project [cast(c1#x as decimal(11,1)) AS c1#x, cast(c2#x as bigint) AS c2#xL]
      :     +- Project [cast(udf(cast(c1#x as string)) as decimal(2,1)) AS c1#x, cast(udf(cast(c2#x as string)) as int) AS c2#x]
      :        +- SubqueryAlias t2
      :           +- View (`t2`, [c1#x, c2#x])
      :              +- Project [cast(c1#x as decimal(2,1)) AS c1#x, cast(c2#x as int) AS c2#x]
      :                 +- SubqueryAlias tbl
      :                    +- LocalRelation [c1#x, c2#x]
      +- Project [cast(c1#x as decimal(11,1)) AS c1#x, cast(c2#x as bigint) AS c2#xL]
         +- Project [cast(udf(cast(c1#x as string)) as decimal(2,1)) AS c1#x, cast(udf(cast(c2#x as string)) as int) AS c2#x]
            +- SubqueryAlias t2
               +- View (`t2`, [c1#x, c2#x])
                  +- Project [cast(c1#x as decimal(2,1)) AS c1#x, cast(c2#x as int) AS c2#x]
                     +- SubqueryAlias tbl
                        +- LocalRelation [c1#x, c2#x]


-- !query
SELECT udf(udf(a)) as a
FROM (SELECT udf(0) a, udf(0) b
      UNION ALL
      SELECT udf(SUM(1)) a, udf(CAST(0 AS BIGINT)) b
      UNION ALL SELECT udf(0) a, udf(0) b) T
-- !query analysis
Project [cast(udf(cast(cast(udf(cast(a#xL as string)) as bigint) as string)) as bigint) AS a#xL]
+- SubqueryAlias T
   +- Union false, false
      :- Union false, false
      :  :- Project [cast(a#x as bigint) AS a#xL, cast(b#x as bigint) AS b#xL]
      :  :  +- Project [cast(udf(cast(0 as string)) as int) AS a#x, cast(udf(cast(0 as string)) as int) AS b#x]
      :  :     +- OneRowRelation
      :  +- Aggregate [cast(udf(cast(sum(1) as string)) as bigint) AS a#xL, cast(udf(cast(cast(0 as bigint) as string)) as bigint) AS b#xL]
      :     +- OneRowRelation
      +- Project [cast(a#x as bigint) AS a#xL, cast(b#x as bigint) AS b#xL]
         +- Project [cast(udf(cast(0 as string)) as int) AS a#x, cast(udf(cast(0 as string)) as int) AS b#x]
            +- OneRowRelation


-- !query
CREATE OR REPLACE TEMPORARY VIEW p1 AS VALUES 1 T(col)
-- !query analysis
CreateViewCommand `p1`, VALUES 1 T(col), false, true, LocalTempView, UNSUPPORTED, true
   +- SubqueryAlias T
      +- LocalRelation [col#x]


-- !query
CREATE OR REPLACE TEMPORARY VIEW p2 AS VALUES 1 T(col)
-- !query analysis
CreateViewCommand `p2`, VALUES 1 T(col), false, true, LocalTempView, UNSUPPORTED, true
   +- SubqueryAlias T
      +- LocalRelation [col#x]


-- !query
CREATE OR REPLACE TEMPORARY VIEW p3 AS VALUES 1 T(col)
-- !query analysis
CreateViewCommand `p3`, VALUES 1 T(col), false, true, LocalTempView, UNSUPPORTED, true
   +- SubqueryAlias T
      +- LocalRelation [col#x]


-- !query
SELECT udf(1) AS x,
       udf(col) as col
FROM   (SELECT udf(col) AS col
        FROM (SELECT udf(p1.col) AS col
              FROM   p1 CROSS JOIN p2
              UNION ALL
              SELECT udf(col)
              FROM p3) T1) T2
-- !query analysis
Project [cast(udf(cast(1 as string)) as int) AS x#x, cast(udf(cast(col#x as string)) as int) AS col#x]
+- SubqueryAlias T2
   +- Project [cast(udf(cast(col#x as string)) as int) AS col#x]
      +- SubqueryAlias T1
         +- Union false, false
            :- Project [cast(udf(cast(col#x as string)) as int) AS col#x]
            :  +- Join Cross
            :     :- SubqueryAlias p1
            :     :  +- View (`p1`, [col#x])
            :     :     +- Project [cast(col#x as int) AS col#x]
            :     :        +- SubqueryAlias T
            :     :           +- LocalRelation [col#x]
            :     +- SubqueryAlias p2
            :        +- View (`p2`, [col#x])
            :           +- Project [cast(col#x as int) AS col#x]
            :              +- SubqueryAlias T
            :                 +- LocalRelation [col#x]
            +- Project [cast(udf(cast(col#x as string)) as int) AS udf(col)#x]
               +- SubqueryAlias p3
                  +- View (`p3`, [col#x])
                     +- Project [cast(col#x as int) AS col#x]
                        +- SubqueryAlias T
                           +- LocalRelation [col#x]


-- !query
SELECT map(1, 2), udf('str') as str
UNION ALL
SELECT map(1, 2, 3, NULL), udf(1)
-- !query analysis
Union false, false
:- Project [cast(map(1, 2)#x as map<int,int>) AS map(1, 2)#x, cast(str#x as bigint) AS str#xL]
:  +- Project [map(1, 2) AS map(1, 2)#x, cast(udf(cast(str as string)) as string) AS str#x]
:     +- OneRowRelation
+- Project [map(1, 2, 3, NULL)#x, cast(udf(1)#x as bigint) AS udf(1)#xL]
   +- Project [map(1, 2, 3, cast(null as int)) AS map(1, 2, 3, NULL)#x, cast(udf(cast(1 as string)) as int) AS udf(1)#x]
      +- OneRowRelation


-- !query
SELECT array(1, 2), udf('str') as str
UNION ALL
SELECT array(1, 2, 3, NULL), udf(1)
-- !query analysis
Union false, false
:- Project [cast(array(1, 2)#x as array<int>) AS array(1, 2)#x, cast(str#x as bigint) AS str#xL]
:  +- Project [array(1, 2) AS array(1, 2)#x, cast(udf(cast(str as string)) as string) AS str#x]
:     +- OneRowRelation
+- Project [array(1, 2, 3, NULL)#x, cast(udf(1)#x as bigint) AS udf(1)#xL]
   +- Project [array(1, 2, 3, cast(null as int)) AS array(1, 2, 3, NULL)#x, cast(udf(cast(1 as string)) as int) AS udf(1)#x]
      +- OneRowRelation


-- !query
DROP VIEW IF EXISTS t1
-- !query analysis
DropTempViewCommand t1


-- !query
DROP VIEW IF EXISTS t2
-- !query analysis
DropTempViewCommand t2


-- !query
DROP VIEW IF EXISTS p1
-- !query analysis
DropTempViewCommand p1


-- !query
DROP VIEW IF EXISTS p2
-- !query analysis
DropTempViewCommand p2


-- !query
DROP VIEW IF EXISTS p3
-- !query analysis
DropTempViewCommand p3
