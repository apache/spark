-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE OR REPLACE TEMPORARY VIEW t AS SELECT * FROM VALUES
('1', true, unhex('537061726B2053514C'), tinyint(1), 1, smallint(100), bigint(1), float(1.0), 1.0, Decimal(1.0), timestamp('1997-01-02'), date('2000-04-01')),
('2', false, unhex('537061726B2053514C'), tinyint(2), 2,  smallint(200), bigint(2), float(2.0), 2.0, Decimal(2.0), timestamp('1997-01-02 03:04:05'), date('2000-04-02')),
('3', true, unhex('537061726B2053514C'), tinyint(3), 3, smallint(300), bigint(3), float(3.0), 3.0, Decimal(3.0), timestamp('1997-02-10 17:32:01-08'), date('2000-04-03'))
AS t(a, b, c, d, e, f, g, h, i, j, k, l)
-- !query analysis
CreateViewCommand `t`, SELECT * FROM VALUES
('1', true, unhex('537061726B2053514C'), tinyint(1), 1, smallint(100), bigint(1), float(1.0), 1.0, Decimal(1.0), timestamp('1997-01-02'), date('2000-04-01')),
('2', false, unhex('537061726B2053514C'), tinyint(2), 2,  smallint(200), bigint(2), float(2.0), 2.0, Decimal(2.0), timestamp('1997-01-02 03:04:05'), date('2000-04-02')),
('3', true, unhex('537061726B2053514C'), tinyint(3), 3, smallint(300), bigint(3), float(3.0), 3.0, Decimal(3.0), timestamp('1997-02-10 17:32:01-08'), date('2000-04-03'))
AS t(a, b, c, d, e, f, g, h, i, j, k, l), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
      +- SubqueryAlias t
         +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
CREATE OR REPLACE TEMPORARY VIEW script_trans AS SELECT * FROM VALUES
(1, 2, 3),
(4, 5, 6),
(7, 8, 9)
AS script_trans(a, b, c)
-- !query analysis
CreateViewCommand `script_trans`, SELECT * FROM VALUES
(1, 2, 3),
(4, 5, 6),
(7, 8, 9)
AS script_trans(a, b, c), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [a#x, b#x, c#x]
      +- SubqueryAlias script_trans
         +- LocalRelation [a#x, b#x, c#x]


-- !query
CREATE OR REPLACE TEMPORARY VIEW complex_trans AS SELECT * FROM VALUES
(1, 1),
(1, 1),
(2, 2),
(2, 2),
(3, 3),
(2, 2),
(3, 3),
(1, 1),
(3, 3)
as complex_trans(a, b)
-- !query analysis
CreateViewCommand `complex_trans`, SELECT * FROM VALUES
(1, 1),
(1, 1),
(2, 2),
(2, 2),
(3, 3),
(2, 2),
(3, 3),
(1, 1),
(3, 3)
as complex_trans(a, b), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [a#x, b#x]
      +- SubqueryAlias complex_trans
         +- LocalRelation [a#x, b#x]


-- !query
SELECT TRANSFORM(a)
USING 'cat' AS (a)
FROM t
-- !query analysis
ScriptTransformation cat, [a#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [a#x]
   +- SubqueryAlias t
      +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
         +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
            +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT a, b, decode(c, 'UTF-8'), d, e, f, g, h, i, j, k, l FROM (
  SELECT TRANSFORM(a, b, c, d, e, f, g, h, i, j, k, l)
  USING 'cat' AS (
    a string,
    b boolean,
    c binary,
    d tinyint,
    e int,
    f smallint,
    g long,
    h float,
    i double,
    j decimal(38, 18),
    k timestamp,
    l date)
  FROM t
) tmp
-- !query analysis
Project [a#x, b#x, decode(c#x, UTF-8) AS decode(c, UTF-8)#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
+- SubqueryAlias tmp
   +- ScriptTransformation cat, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
      +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
         +- SubqueryAlias t
            +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
               +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
                  +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
                     +- SubqueryAlias t
                        +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT a, b, decode(c, 'UTF-8'), d, e, f, g, h, i, j, k, l FROM (
  SELECT TRANSFORM(a, b, c, d, e, f, g, h, i, j, k, l)
  USING 'cat' AS (
    a string,
    b string,
    c string,
    d string,
    e string,
    f string,
    g string,
    h string,
    i string,
    j string,
    k string,
    l string)
  FROM t
) tmp
-- !query analysis
Project [a#x, b#x, decode(c#x, UTF-8) AS decode(c, UTF-8)#x, d#x, e#x, f#x, g#x, h#x, i#x, j#x, k#x, l#x]
+- SubqueryAlias tmp
   +- ScriptTransformation cat, [a#x, b#x, c#x, d#x, e#x, f#x, g#x, h#x, i#x, j#x, k#x, l#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
      +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
         +- SubqueryAlias t
            +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
               +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
                  +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
                     +- SubqueryAlias t
                        +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT TRANSFORM(a)
USING 'cat'
FROM t
-- !query analysis
ScriptTransformation cat, [key#x, value#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,true)
+- Project [a#x]
   +- SubqueryAlias t
      +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
         +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
            +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT TRANSFORM(a, b)
USING 'cat'
FROM t
-- !query analysis
ScriptTransformation cat, [key#x, value#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,true)
+- Project [a#x, b#x]
   +- SubqueryAlias t
      +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
         +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
            +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT TRANSFORM(a, b, c)
USING 'cat'
FROM t
-- !query analysis
ScriptTransformation cat, [key#x, value#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,true)
+- Project [a#x, b#x, c#x]
   +- SubqueryAlias t
      +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
         +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
            +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT TRANSFORM(a, b, c, d, e, f, g, h, i)
USING 'cat' AS (a int, b short, c long, d byte, e float, f double, g decimal(38, 18), h date, i timestamp)
FROM VALUES
('a','','1231a','a','213.21a','213.21a','0a.21d','2000-04-01123','1997-0102 00:00:') tmp(a, b, c, d, e, f, g, h, i)
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#xL, d#x, e#x, f#x, g#x, h#x, i#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#x, h#x, i#x]
   +- SubqueryAlias tmp
      +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#x, h#x, i#x]


-- !query
SELECT TRANSFORM(b, max(a), sum(f))
USING 'cat' AS (a, b)
FROM t
GROUP BY b
-- !query analysis
ScriptTransformation cat, [a#x, b#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Aggregate [b#x], [b#x, max(a#x) AS max(a)#x, sum(f#x) AS sum(f)#xL]
   +- SubqueryAlias t
      +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
         +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
            +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
MAP a, b USING 'cat' AS (a, b) FROM t
-- !query analysis
ScriptTransformation cat, [a#x, b#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [a#x, b#x]
   +- SubqueryAlias t
      +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
         +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
            +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
REDUCE a, b USING 'cat' AS (a, b) FROM t
-- !query analysis
ScriptTransformation cat, [a#x, b#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [a#x, b#x]
   +- SubqueryAlias t
      +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
         +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
            +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT TRANSFORM(a, b, c, null)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '@'
  LINES TERMINATED BY '\n'
  NULL DEFINED AS 'NULL'
USING 'cat' AS (a, b, c, d)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '@'
  LINES TERMINATED BY '\n'
  NULL DEFINED AS 'NULL'
FROM t
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x, d#x], ScriptInputOutputSchema(List((TOK_TABLEROWFORMATFIELD,@), (TOK_TABLEROWFORMATNULL,NULL), (TOK_TABLEROWFORMATLINES,
)),List((TOK_TABLEROWFORMATFIELD,@), (TOK_TABLEROWFORMATNULL,NULL), (TOK_TABLEROWFORMATLINES,
)),None,None,List(),List(),None,None,false)
+- Project [a#x, b#x, c#x, null AS NULL#x]
   +- SubqueryAlias t
      +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
         +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
            +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT TRANSFORM(a, b, c, null)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '@'
  LINES TERMINATED BY '\n'
  NULL DEFINED AS 'NULL'
USING 'cat' AS (d)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '@'
  LINES TERMINATED BY '\n'
  NULL DEFINED AS 'NULL'
FROM t
-- !query analysis
ScriptTransformation cat, [d#x], ScriptInputOutputSchema(List((TOK_TABLEROWFORMATFIELD,@), (TOK_TABLEROWFORMATNULL,NULL), (TOK_TABLEROWFORMATLINES,
)),List((TOK_TABLEROWFORMATFIELD,@), (TOK_TABLEROWFORMATNULL,NULL), (TOK_TABLEROWFORMATLINES,
)),None,None,List(),List(),None,None,false)
+- Project [a#x, b#x, c#x, null AS NULL#x]
   +- SubqueryAlias t
      +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
         +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
            +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT TRANSFORM(a, b, c, null)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '@'
  LINES TERMINATED BY '\n'
USING 'cat' AS (a, b, c, d)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '@'
  LINES TERMINATED BY '\n'
  NULL DEFINED AS 'NULL'
FROM t
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x, d#x], ScriptInputOutputSchema(List((TOK_TABLEROWFORMATFIELD,@), (TOK_TABLEROWFORMATLINES,
)),List((TOK_TABLEROWFORMATFIELD,@), (TOK_TABLEROWFORMATNULL,NULL), (TOK_TABLEROWFORMATLINES,
)),None,None,List(),List(),None,None,false)
+- Project [a#x, b#x, c#x, null AS NULL#x]
   +- SubqueryAlias t
      +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
         +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
            +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT TRANSFORM(a, b, c, null)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '@'
  LINES TERMINATED BY '\n'
USING 'cat' AS (a, b, c, d)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '@'
  LINES TERMINATED BY '\n'
FROM t
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x, d#x], ScriptInputOutputSchema(List((TOK_TABLEROWFORMATFIELD,@), (TOK_TABLEROWFORMATLINES,
)),List((TOK_TABLEROWFORMATFIELD,@), (TOK_TABLEROWFORMATLINES,
)),None,None,List(),List(),None,None,false)
+- Project [a#x, b#x, c#x, null AS NULL#x]
   +- SubqueryAlias t
      +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
         +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
            +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT TRANSFORM(a, b, c, null)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '@'
  LINES TERMINATED BY '\n'
  NULL DEFINED AS 'XXXX'
USING 'cat' AS (a, b, c, d)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '@'
  LINES TERMINATED BY '\n'
FROM t
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x, d#x], ScriptInputOutputSchema(List((TOK_TABLEROWFORMATFIELD,@), (TOK_TABLEROWFORMATNULL,XXXX), (TOK_TABLEROWFORMATLINES,
)),List((TOK_TABLEROWFORMATFIELD,@), (TOK_TABLEROWFORMATLINES,
)),None,None,List(),List(),None,None,false)
+- Project [a#x, b#x, c#x, null AS NULL#x]
   +- SubqueryAlias t
      +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
         +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
            +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT TRANSFORM(a, b, c, null)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '@'
  LINES TERMINATED BY '\n'
  NULL DEFINED AS '\n'
USING 'cat' AS (a, b, c, d)
  ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '@'
  LINES TERMINATED BY '\n'
FROM t
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x, d#x], ScriptInputOutputSchema(List((TOK_TABLEROWFORMATFIELD,@), (TOK_TABLEROWFORMATNULL,
), (TOK_TABLEROWFORMATLINES,
)),List((TOK_TABLEROWFORMATFIELD,@), (TOK_TABLEROWFORMATLINES,
)),None,None,List(),List(),None,None,false)
+- Project [a#x, b#x, c#x, null AS NULL#x]
   +- SubqueryAlias t
      +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
         +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
            +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT a, b, decode(c, 'UTF-8'), d, e, f, g, h, i, j, k, l FROM (
  SELECT TRANSFORM(a, b, c, d, e, f, g, h, i, j, k, l)
    ROW FORMAT DELIMITED
    FIELDS TERMINATED BY ','
    LINES TERMINATED BY '\n'
    NULL DEFINED AS 'NULL'
    USING 'cat' AS (
      a string,
      b boolean,
      c binary,
      d tinyint,
      e int,
      f smallint,
      g long,
      h float,
      i double,
      j decimal(38, 18),
      k timestamp,
      l date)
    ROW FORMAT DELIMITED
    FIELDS TERMINATED BY ','
    LINES TERMINATED BY '\n'
    NULL DEFINED AS 'NULL'
  FROM t
) tmp
-- !query analysis
Project [a#x, b#x, decode(c#x, UTF-8) AS decode(c, UTF-8)#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
+- SubqueryAlias tmp
   +- ScriptTransformation cat, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x], ScriptInputOutputSchema(List((TOK_TABLEROWFORMATFIELD,,), (TOK_TABLEROWFORMATNULL,NULL), (TOK_TABLEROWFORMATLINES,
)),List((TOK_TABLEROWFORMATFIELD,,), (TOK_TABLEROWFORMATNULL,NULL), (TOK_TABLEROWFORMATLINES,
)),None,None,List(),List(),None,None,false)
      +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
         +- SubqueryAlias t
            +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
               +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
                  +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
                     +- SubqueryAlias t
                        +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT a, b, decode(c, 'UTF-8'), d, e, f, g, h, i, j, k, l FROM (
  SELECT TRANSFORM(a, b, c, d, e, f, g, h, i, j, k, l)
    ROW FORMAT DELIMITED
    FIELDS TERMINATED BY ','
    LINES TERMINATED BY '\n'
    NULL DEFINED AS 'NULL'
    USING 'cat' AS (
      a string,
      b long,
      c binary,
      d tinyint,
      e int,
      f smallint,
      g long,
      h float,
      i double,
      j decimal(38, 18),
      k int,
      l long)
    ROW FORMAT DELIMITED
    FIELDS TERMINATED BY ','
    LINES TERMINATED BY '\n'
    NULL DEFINED AS 'NULL'
  FROM t
) tmp
-- !query analysis
Project [a#x, b#xL, decode(c#x, UTF-8) AS decode(c, UTF-8)#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#xL]
+- SubqueryAlias tmp
   +- ScriptTransformation cat, [a#x, b#xL, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#xL], ScriptInputOutputSchema(List((TOK_TABLEROWFORMATFIELD,,), (TOK_TABLEROWFORMATNULL,NULL), (TOK_TABLEROWFORMATLINES,
)),List((TOK_TABLEROWFORMATFIELD,,), (TOK_TABLEROWFORMATNULL,NULL), (TOK_TABLEROWFORMATLINES,
)),None,None,List(),List(),None,None,false)
      +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
         +- SubqueryAlias t
            +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
               +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
                  +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
                     +- SubqueryAlias t
                        +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]


-- !query
SELECT a, b, decode(c, 'UTF-8'), d, e, f, g, h, i, j, k, l FROM (
  SELECT TRANSFORM(a, b, c, d, e, f, g, h, i, j, k, l)
    ROW FORMAT DELIMITED
    FIELDS TERMINATED BY ','
    LINES TERMINATED BY '@'
    NULL DEFINED AS 'NULL'
    USING 'cat' AS (
      a string,
      b string,
      c string,
      d string,
      e string,
      f string,
      g string,
      h string,
      i string,
      j string,
      k string,
      l string)
    ROW FORMAT DELIMITED
    FIELDS TERMINATED BY ','
    LINES TERMINATED BY '@'
    NULL DEFINED AS 'NULL'
  FROM t
) tmp
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_0064",
  "messageParameters" : {
    "msg" : "LINES TERMINATED BY only supports newline '\\n' right now: @"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 69,
    "stopIndex" : 560,
    "fragment" : "SELECT TRANSFORM(a, b, c, d, e, f, g, h, i, j, k, l)\n    ROW FORMAT DELIMITED\n    FIELDS TERMINATED BY ','\n    LINES TERMINATED BY '@'\n    NULL DEFINED AS 'NULL'\n    USING 'cat' AS (\n      a string,\n      b string,\n      c string,\n      d string,\n      e string,\n      f string,\n      g string,\n      h string,\n      i string,\n      j string,\n      k string,\n      l string)\n    ROW FORMAT DELIMITED\n    FIELDS TERMINATED BY ','\n    LINES TERMINATED BY '@'\n    NULL DEFINED AS 'NULL'\n  FROM t"
  } ]
}


-- !query
SELECT TRANSFORM(b, a, CAST(c AS STRING))
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 4
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [b#x, a#x, cast(c#x as string) AS c#x]
   +- Filter (a#x <= 4)
      +- SubqueryAlias script_trans
         +- View (`script_trans`, [a#x, b#x, c#x])
            +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
               +- Project [a#x, b#x, c#x]
                  +- SubqueryAlias script_trans
                     +- LocalRelation [a#x, b#x, c#x]


-- !query
SELECT TRANSFORM(1, 2, 3)
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 4
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [1 AS 1#x, 2 AS 2#x, 3 AS 3#x]
   +- Filter (a#x <= 4)
      +- SubqueryAlias script_trans
         +- View (`script_trans`, [a#x, b#x, c#x])
            +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
               +- Project [a#x, b#x, c#x]
                  +- SubqueryAlias script_trans
                     +- LocalRelation [a#x, b#x, c#x]


-- !query
SELECT TRANSFORM(1, 2)
  USING 'cat' AS (a INT, b INT)
FROM script_trans
LIMIT 1
-- !query analysis
GlobalLimit 1
+- LocalLimit 1
   +- ScriptTransformation cat, [a#x, b#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
      +- Project [1 AS 1#x, 2 AS 2#x]
         +- SubqueryAlias script_trans
            +- View (`script_trans`, [a#x, b#x, c#x])
               +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
                  +- Project [a#x, b#x, c#x]
                     +- SubqueryAlias script_trans
                        +- LocalRelation [a#x, b#x, c#x]


-- !query
SELECT TRANSFORM(
  b, a,
  CASE
    WHEN c > 100 THEN 1
    WHEN c < 100 THEN 2
  ELSE 3 END)
  USING 'cat' AS (a, b,  c)
FROM script_trans
WHERE a <= 4
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [b#x, a#x, CASE WHEN (c#x > 100) THEN 1 WHEN (c#x < 100) THEN 2 ELSE 3 END AS CASE WHEN (c > 100) THEN 1 WHEN (c < 100) THEN 2 ELSE 3 END#x]
   +- Filter (a#x <= 4)
      +- SubqueryAlias script_trans
         +- View (`script_trans`, [a#x, b#x, c#x])
            +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
               +- Project [a#x, b#x, c#x]
                  +- SubqueryAlias script_trans
                     +- LocalRelation [a#x, b#x, c#x]


-- !query
SELECT TRANSFORM(b, a, c + 1)
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 4
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [b#x, a#x, (c#x + 1) AS (c + 1)#x]
   +- Filter (a#x <= 4)
      +- SubqueryAlias script_trans
         +- View (`script_trans`, [a#x, b#x, c#x])
            +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
               +- Project [a#x, b#x, c#x]
                  +- SubqueryAlias script_trans
                     +- LocalRelation [a#x, b#x, c#x]


-- !query
SELECT TRANSFORM(*)
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 4
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [a#x, b#x, c#x]
   +- Filter (a#x <= 4)
      +- SubqueryAlias script_trans
         +- View (`script_trans`, [a#x, b#x, c#x])
            +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
               +- Project [a#x, b#x, c#x]
                  +- SubqueryAlias script_trans
                     +- LocalRelation [a#x, b#x, c#x]


-- !query
SELECT TRANSFORM(b, MAX(a), CAST(SUM(c) AS STRING))
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 4
GROUP BY b
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Aggregate [b#x], [b#x, max(a#x) AS max(a)#x, cast(sum(c#x) as string) AS CAST(sum(c) AS STRING)#x]
   +- Filter (a#x <= 4)
      +- SubqueryAlias script_trans
         +- View (`script_trans`, [a#x, b#x, c#x])
            +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
               +- Project [a#x, b#x, c#x]
                  +- SubqueryAlias script_trans
                     +- LocalRelation [a#x, b#x, c#x]


-- !query
SELECT TRANSFORM(b, MAX(a) FILTER (WHERE a > 3), CAST(SUM(c) AS STRING))
  USING 'cat' AS (a,b,c)
FROM script_trans
WHERE a <= 4
GROUP BY b
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Aggregate [b#x], [b#x, max(a#x) FILTER (WHERE (a#x > 3)) AS max(a) FILTER (WHERE (a > 3))#x, cast(sum(c#x) as string) AS CAST(sum(c) AS STRING)#x]
   +- Filter (a#x <= 4)
      +- SubqueryAlias script_trans
         +- View (`script_trans`, [a#x, b#x, c#x])
            +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
               +- Project [a#x, b#x, c#x]
                  +- SubqueryAlias script_trans
                     +- LocalRelation [a#x, b#x, c#x]


-- !query
SELECT TRANSFORM(b, MAX(a), CAST(sum(c) AS STRING))
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 2
GROUP BY b
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Aggregate [b#x], [b#x, max(a#x) AS max(a)#x, cast(sum(c#x) as string) AS CAST(sum(c) AS STRING)#x]
   +- Filter (a#x <= 2)
      +- SubqueryAlias script_trans
         +- View (`script_trans`, [a#x, b#x, c#x])
            +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
               +- Project [a#x, b#x, c#x]
                  +- SubqueryAlias script_trans
                     +- LocalRelation [a#x, b#x, c#x]


-- !query
SELECT TRANSFORM(b, MAX(a), CAST(SUM(c) AS STRING))
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 4
GROUP BY b
HAVING MAX(a) > 0
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Filter (max(a)#x > 0)
   +- Aggregate [b#x], [b#x, max(a#x) AS max(a)#x, cast(sum(c#x) as string) AS CAST(sum(c) AS STRING)#x]
      +- Filter (a#x <= 4)
         +- SubqueryAlias script_trans
            +- View (`script_trans`, [a#x, b#x, c#x])
               +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
                  +- Project [a#x, b#x, c#x]
                     +- SubqueryAlias script_trans
                        +- LocalRelation [a#x, b#x, c#x]


-- !query
SELECT TRANSFORM(b, MAX(a), CAST(SUM(c) AS STRING))
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 4
GROUP BY b
HAVING MAX(a) > 1
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Filter (max(a)#x > 1)
   +- Aggregate [b#x], [b#x, max(a#x) AS max(a)#x, cast(sum(c#x) as string) AS CAST(sum(c) AS STRING)#x]
      +- Filter (a#x <= 4)
         +- SubqueryAlias script_trans
            +- View (`script_trans`, [a#x, b#x, c#x])
               +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
                  +- Project [a#x, b#x, c#x]
                     +- SubqueryAlias script_trans
                        +- LocalRelation [a#x, b#x, c#x]


-- !query
SELECT TRANSFORM(b, MAX(a) OVER w, CAST(SUM(c) OVER w AS STRING))
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 4
WINDOW w AS (PARTITION BY b ORDER BY a)
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [b#x, max(a) OVER (PARTITION BY b ORDER BY a ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x, CAST(sum(c) OVER (PARTITION BY b ORDER BY a ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS STRING)#x]
   +- Project [b#x, a#x, c#x, max(a) OVER (PARTITION BY b ORDER BY a ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x, _we1#xL, max(a) OVER (PARTITION BY b ORDER BY a ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x, cast(_we1#xL as string) AS CAST(sum(c) OVER (PARTITION BY b ORDER BY a ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS STRING)#x]
      +- Window [max(a#x) windowspecdefinition(b#x, a#x ASC NULLS FIRST, specifiedwindowframe(RangeFrame, unboundedpreceding$(), currentrow$())) AS max(a) OVER (PARTITION BY b ORDER BY a ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x, sum(c#x) windowspecdefinition(b#x, a#x ASC NULLS FIRST, specifiedwindowframe(RangeFrame, unboundedpreceding$(), currentrow$())) AS _we1#xL], [b#x], [a#x ASC NULLS FIRST]
         +- Project [b#x, a#x, c#x]
            +- Filter (a#x <= 4)
               +- SubqueryAlias script_trans
                  +- View (`script_trans`, [a#x, b#x, c#x])
                     +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
                        +- Project [a#x, b#x, c#x]
                           +- SubqueryAlias script_trans
                              +- LocalRelation [a#x, b#x, c#x]


-- !query
SELECT TRANSFORM(b, MAX(a), CAST(SUM(c) AS STRING), myCol, myCol2)
  USING 'cat' AS (a STRING, b STRING, c STRING, d ARRAY<INT>, e STRING)
FROM script_trans
LATERAL VIEW explode(array(array(1,2,3))) myTable AS myCol
LATERAL VIEW explode(myTable.myCol) myTable2 AS myCol2
WHERE a <= 4
GROUP BY b, myCol, myCol2
HAVING max(a) > 1
-- !query analysis
ScriptTransformation cat, [a#x, b#x, c#x, d#x, e#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Filter (max(a)#x > 1)
   +- Aggregate [b#x, myCol#x, myCol2#x], [b#x, max(a#x) AS max(a)#x, cast(sum(c#x) as string) AS CAST(sum(c) AS STRING)#x, myCol#x, myCol2#x]
      +- Filter (a#x <= 4)
         +- Generate explode(myCol#x), false, mytable2, [myCol2#x]
            +- Generate explode(array(array(1, 2, 3))), false, mytable, [myCol#x]
               +- SubqueryAlias script_trans
                  +- View (`script_trans`, [a#x, b#x, c#x])
                     +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
                        +- Project [a#x, b#x, c#x]
                           +- SubqueryAlias script_trans
                              +- LocalRelation [a#x, b#x, c#x]


-- !query
FROM(
  FROM script_trans
  SELECT TRANSFORM(a, b)
    USING 'cat' AS (`a` INT, b STRING)
) t
SELECT a + 1
-- !query analysis
Project [(a#x + 1) AS (a + 1)#x]
+- SubqueryAlias t
   +- ScriptTransformation cat, [a#x, b#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
      +- Project [a#x, b#x]
         +- SubqueryAlias script_trans
            +- View (`script_trans`, [a#x, b#x, c#x])
               +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
                  +- Project [a#x, b#x, c#x]
                     +- SubqueryAlias script_trans
                        +- LocalRelation [a#x, b#x, c#x]


-- !query
FROM(
  SELECT TRANSFORM(a, SUM(b))
    USING 'cat' AS (`a` INT, b STRING)
  FROM script_trans
  GROUP BY a
) t
SELECT (b + 1) AS result
ORDER BY result
-- !query analysis
Sort [result#xL ASC NULLS FIRST], true
+- Project [(cast(b#x as bigint) + cast(1 as bigint)) AS result#xL]
   +- SubqueryAlias t
      +- ScriptTransformation cat, [a#x, b#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
         +- Aggregate [a#x], [a#x, sum(b#x) AS sum(b)#xL]
            +- SubqueryAlias script_trans
               +- View (`script_trans`, [a#x, b#x, c#x])
                  +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
                     +- Project [a#x, b#x, c#x]
                        +- SubqueryAlias script_trans
                           +- LocalRelation [a#x, b#x, c#x]


-- !query
MAP k / 10 USING 'cat' AS (one) FROM (SELECT 10 AS k)
-- !query analysis
ScriptTransformation cat, [one#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [(cast(k#x as double) / cast(10 as double)) AS (k / 10)#x]
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [10 AS k#x]
         +- OneRowRelation


-- !query
FROM (SELECT 1 AS key, 100 AS value) src
MAP src.*, src.key, CAST(src.key / 10 AS INT), CAST(src.key % 10 AS INT), src.value
  USING 'cat' AS (k, v, tkey, ten, one, tvalue)
-- !query analysis
ScriptTransformation cat, [k#x, v#x, tkey#x, ten#x, one#x, tvalue#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [key#x, value#x, key#x, cast((cast(key#x as double) / cast(10 as double)) as int) AS CAST((key / 10) AS INT)#x, cast((key#x % 10) as int) AS CAST((key % 10) AS INT)#x, value#x]
   +- SubqueryAlias src
      +- Project [1 AS key#x, 100 AS value#x]
         +- OneRowRelation


-- !query
SELECT TRANSFORM(1)
  USING 'cat' AS (a)
FROM script_trans
HAVING true
-- !query analysis
ScriptTransformation cat, [a#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Filter cast(true as boolean)
   +- Aggregate [1 AS 1#x]
      +- SubqueryAlias script_trans
         +- View (`script_trans`, [a#x, b#x, c#x])
            +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
               +- Project [a#x, b#x, c#x]
                  +- SubqueryAlias script_trans
                     +- LocalRelation [a#x, b#x, c#x]


-- !query
SET spark.sql.legacy.parser.havingWithoutGroupByAsWhere=true
-- !query analysis
SetCommand (spark.sql.legacy.parser.havingWithoutGroupByAsWhere,Some(true))


-- !query
SELECT TRANSFORM(1)
  USING 'cat' AS (a)
FROM script_trans
HAVING true
-- !query analysis
ScriptTransformation cat, [a#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Filter cast(true as boolean)
   +- Project [1 AS 1#x]
      +- SubqueryAlias script_trans
         +- View (`script_trans`, [a#x, b#x, c#x])
            +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(c#x as int) AS c#x]
               +- Project [a#x, b#x, c#x]
                  +- SubqueryAlias script_trans
                     +- LocalRelation [a#x, b#x, c#x]


-- !query
SET spark.sql.legacy.parser.havingWithoutGroupByAsWhere=false
-- !query analysis
SetCommand (spark.sql.legacy.parser.havingWithoutGroupByAsWhere,Some(false))


-- !query
WITH temp AS (
  SELECT TRANSFORM(a) USING 'cat' AS (b string) FROM t
)
SELECT t1.b FROM temp t1 JOIN temp t2 ON t1.b = t2.b
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias temp
:     +- ScriptTransformation cat, [b#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
:        +- Project [a#x]
:           +- SubqueryAlias t
:              +- View (`t`, [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x])
:                 +- Project [cast(a#x as string) AS a#x, cast(b#x as boolean) AS b#x, cast(c#x as binary) AS c#x, cast(d#x as tinyint) AS d#x, cast(e#x as int) AS e#x, cast(f#x as smallint) AS f#x, cast(g#xL as bigint) AS g#xL, cast(h#x as float) AS h#x, cast(i#x as decimal(2,1)) AS i#x, cast(j#x as decimal(10,0)) AS j#x, cast(k#x as timestamp) AS k#x, cast(l#x as date) AS l#x]
:                    +- Project [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
:                       +- SubqueryAlias t
:                          +- LocalRelation [a#x, b#x, c#x, d#x, e#x, f#x, g#xL, h#x, i#x, j#x, k#x, l#x]
+- Project [b#x]
   +- Join Inner, (b#x = b#x)
      :- SubqueryAlias t1
      :  +- SubqueryAlias temp
      :     +- CTERelationRef xxxx, true, [b#x], false, false
      +- SubqueryAlias t2
         +- SubqueryAlias temp
            +- CTERelationRef xxxx, true, [b#x], false, false


-- !query
SELECT TRANSFORM(DISTINCT b, a, c)
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 4
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.TRANSFORM_DISTINCT_ALL",
  "sqlState" : "0A000",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 92,
    "fragment" : "SELECT TRANSFORM(DISTINCT b, a, c)\n  USING 'cat' AS (a, b, c)\nFROM script_trans\nWHERE a <= 4"
  } ]
}


-- !query
SELECT TRANSFORM(ALL b, a, c)
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 4
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.TRANSFORM_DISTINCT_ALL",
  "sqlState" : "0A000",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 87,
    "fragment" : "SELECT TRANSFORM(ALL b, a, c)\n  USING 'cat' AS (a, b, c)\nFROM script_trans\nWHERE a <= 4"
  } ]
}


-- !query
SELECT TRANSFORM(b AS b_1, MAX(a), CAST(sum(c) AS STRING))
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 2
GROUP BY b
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'AS'",
    "hint" : ""
  }
}


-- !query
SELECT TRANSFORM(b b_1, MAX(a), CAST(sum(c) AS STRING))
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 2
GROUP BY b
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'b_1'",
    "hint" : ""
  }
}


-- !query
SELECT TRANSFORM(b, MAX(a) AS max_a, CAST(sum(c) AS STRING))
  USING 'cat' AS (a, b, c)
FROM script_trans
WHERE a <= 2
GROUP BY b
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'AS'",
    "hint" : ""
  }
}


-- !query
FROM (
  SELECT TRANSFORM(a, b)
    USING 'cat' AS (a, b)
  FROM complex_trans
  CLUSTER BY a
) map_output
SELECT TRANSFORM(a, b)
  USING 'cat' AS (a, b)
-- !query analysis
ScriptTransformation cat, [a#x, b#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [a#x, b#x]
   +- SubqueryAlias map_output
      +- Sort [a#x ASC NULLS FIRST], false
         +- RepartitionByExpression [a#x]
            +- ScriptTransformation cat, [a#x, b#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
               +- Project [a#x, b#x]
                  +- SubqueryAlias complex_trans
                     +- View (`complex_trans`, [a#x, b#x])
                        +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x]
                           +- Project [a#x, b#x]
                              +- SubqueryAlias complex_trans
                                 +- LocalRelation [a#x, b#x]


-- !query
FROM (
  SELECT TRANSFORM(a, b)
    USING 'cat' AS (a, b)
  FROM complex_trans
  ORDER BY a
) map_output
SELECT TRANSFORM(a, b)
  USING 'cat' AS (a, b)
-- !query analysis
ScriptTransformation cat, [a#x, b#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [a#x, b#x]
   +- SubqueryAlias map_output
      +- Sort [a#x ASC NULLS FIRST], true
         +- ScriptTransformation cat, [a#x, b#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
            +- Project [a#x, b#x]
               +- SubqueryAlias complex_trans
                  +- View (`complex_trans`, [a#x, b#x])
                     +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x]
                        +- Project [a#x, b#x]
                           +- SubqueryAlias complex_trans
                              +- LocalRelation [a#x, b#x]


-- !query
SELECT TRANSFORM (a, b)
  USING 'cat' AS (a CHAR(10), b VARCHAR(10))
FROM VALUES('apache', 'spark') t(a, b)
-- !query analysis
ScriptTransformation cat, [a#x, b#x], ScriptInputOutputSchema(List(),List(),None,None,List(),List(),None,None,false)
+- Project [a#x, b#x]
   +- SubqueryAlias t
      +- LocalRelation [a#x, b#x]
