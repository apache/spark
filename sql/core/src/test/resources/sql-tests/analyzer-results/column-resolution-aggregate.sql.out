-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TEMPORARY VIEW v1 AS VALUES (1, 1, 1), (2, 2, 1) AS t(a, b, k)
-- !query analysis
CreateViewCommand `v1`, VALUES (1, 1, 1), (2, 2, 1) AS t(a, b, k), false, false, LocalTempView, UNSUPPORTED, true
   +- SubqueryAlias t
      +- LocalRelation [a#x, b#x, k#x]


-- !query
CREATE TEMPORARY VIEW v2 AS VALUES (1, 1, 1), (2, 2, 1) AS t(x, y, all)
-- !query analysis
CreateViewCommand `v2`, VALUES (1, 1, 1), (2, 2, 1) AS t(x, y, all), false, false, LocalTempView, UNSUPPORTED, true
   +- SubqueryAlias t
      +- LocalRelation [x#x, y#x, all#x]


-- !query
SELECT max(a) AS b, b FROM v1 GROUP BY k
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "MISSING_AGGREGATION",
  "sqlState" : "42803",
  "messageParameters" : {
    "expression" : "\"b\"",
    "expressionAnyValue" : "\"any_value(b)\""
  }
}


-- !query
SELECT a FROM v1 WHERE (12, 13) IN (SELECT max(x + 10) AS a, a + 1 FROM v2)
-- !query analysis
Project [a#x]
+- Filter named_struct(_0, 12, _1, 13) IN (list#x [])
   :  +- Project [a#x, (a#x + 1) AS (lateralAliasReference(a) + 1)#x]
   :     +- Project [max((x + 10))#x, max((x + 10))#x AS a#x]
   :        +- Aggregate [max((x#x + 10)) AS max((x + 10))#x]
   :           +- SubqueryAlias v2
   :              +- View (`v2`, [x#x, y#x, all#x])
   :                 +- Project [cast(x#x as int) AS x#x, cast(y#x as int) AS y#x, cast(all#x as int) AS all#x]
   :                    +- SubqueryAlias t
   :                       +- LocalRelation [x#x, y#x, all#x]
   +- SubqueryAlias v1
      +- View (`v1`, [a#x, b#x, k#x])
         +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(k#x as int) AS k#x]
            +- SubqueryAlias t
               +- LocalRelation [a#x, b#x, k#x]


-- !query
SELECT a AS k FROM v1 GROUP BY k
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "MISSING_AGGREGATION",
  "sqlState" : "42803",
  "messageParameters" : {
    "expression" : "\"a\"",
    "expressionAnyValue" : "\"any_value(a)\""
  }
}


-- !query
SELECT x FROM v2 GROUP BY all
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "MISSING_AGGREGATION",
  "sqlState" : "42803",
  "messageParameters" : {
    "expression" : "\"x\"",
    "expressionAnyValue" : "\"any_value(x)\""
  }
}


-- !query
SELECT a AS all, b FROM v1 GROUP BY all
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "MISSING_AGGREGATION",
  "sqlState" : "42803",
  "messageParameters" : {
    "expression" : "\"b\"",
    "expressionAnyValue" : "\"any_value(b)\""
  }
}


-- !query
SELECT k AS lca, lca + 1 AS col FROM v1 GROUP BY k, col
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_FEATURE.LATERAL_COLUMN_ALIAS_IN_GROUP_BY",
  "sqlState" : "0A000"
}


-- !query
SELECT k AS lca, lca + 1 AS col FROM v1 GROUP BY all
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_FEATURE.LATERAL_COLUMN_ALIAS_IN_GROUP_BY",
  "sqlState" : "0A000"
}


-- !query
SELECT k AS lca, lca + 1 AS col FROM v1 GROUP BY lca
-- !query analysis
Project [lca#x, (lca#x + 1) AS col#x]
+- Project [k#x, k#x AS lca#x]
   +- Aggregate [k#x], [k#x]
      +- SubqueryAlias v1
         +- View (`v1`, [a#x, b#x, k#x])
            +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(k#x as int) AS k#x]
               +- SubqueryAlias t
                  +- LocalRelation [a#x, b#x, k#x]


-- !query
SELECT * FROM v2 WHERE EXISTS (SELECT a, b FROM v1 GROUP BY all)
-- !query analysis
Project [x#x, y#x, all#x]
+- Filter exists#x []
   :  +- Aggregate [a#x, b#x], [a#x, b#x]
   :     +- SubqueryAlias v1
   :        +- View (`v1`, [a#x, b#x, k#x])
   :           +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x, cast(k#x as int) AS k#x]
   :              +- SubqueryAlias t
   :                 +- LocalRelation [a#x, b#x, k#x]
   +- SubqueryAlias v2
      +- View (`v2`, [x#x, y#x, all#x])
         +- Project [cast(x#x as int) AS x#x, cast(y#x as int) AS y#x, cast(all#x as int) AS all#x]
            +- SubqueryAlias t
               +- LocalRelation [x#x, y#x, all#x]
