-- Automatically generated by SQLQueryTestSuite
-- !query
set spark.sql.parser.quotedRegexColumnNames=false
-- !query analysis
SetCommand (spark.sql.parser.quotedRegexColumnNames,Some(false))


-- !query
CREATE OR REPLACE TEMPORARY VIEW testData AS SELECT * FROM VALUES
(1, "1", "11"), (2, "2", "22"), (3, "3", "33"), (4, "4", "44"), (5, "5", "55"), (6, "6", "66")
AS testData(key, value1, value2)
-- !query analysis
CreateViewCommand `testData`, SELECT * FROM VALUES
(1, "1", "11"), (2, "2", "22"), (3, "3", "33"), (4, "4", "44"), (5, "5", "55"), (6, "6", "66")
AS testData(key, value1, value2), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [key#x, value1#x, value2#x]
      +- SubqueryAlias testData
         +- LocalRelation [key#x, value1#x, value2#x]


-- !query
CREATE OR REPLACE TEMPORARY VIEW testData2 AS SELECT * FROM VALUES
(1, 1, 1, 2), (1, 2, 1, 2), (2, 1, 2, 3), (2, 2, 2, 3), (3, 1, 3, 4), (3, 2, 3, 4)
AS testData2(A, B, c, d)
-- !query analysis
CreateViewCommand `testData2`, SELECT * FROM VALUES
(1, 1, 1, 2), (1, 2, 1, 2), (2, 1, 2, 3), (2, 2, 2, 3), (3, 1, 3, 4), (3, 2, 3, 4)
AS testData2(A, B, c, d), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [A#x, B#x, c#x, d#x]
      +- SubqueryAlias testData2
         +- LocalRelation [A#x, B#x, c#x, d#x]


-- !query
SELECT `(a)?+.+` FROM testData2 WHERE a = 1
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`(a)?+.+`",
    "proposal" : "`A`, `B`, `c`, `d`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 16,
    "fragment" : "`(a)?+.+`"
  } ]
}


-- !query
SELECT t.`(a)?+.+` FROM testData2 t WHERE a = 1
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`t`.`(a)?+.+`",
    "proposal" : "`t`.`A`, `t`.`B`, `t`.`c`, `t`.`d`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 18,
    "fragment" : "t.`(a)?+.+`"
  } ]
}


-- !query
SELECT `(a|b)` FROM testData2 WHERE a = 2
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`(a|b)`",
    "proposal" : "`A`, `B`, `c`, `d`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 14,
    "fragment" : "`(a|b)`"
  } ]
}


-- !query
SELECT `(a|b)?+.+` FROM testData2 WHERE a = 2
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`(a|b)?+.+`",
    "proposal" : "`A`, `B`, `c`, `d`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 18,
    "fragment" : "`(a|b)?+.+`"
  } ]
}


-- !query
SELECT SUM(`(a|b)?+.+`) FROM testData2
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`(a|b)?+.+`",
    "proposal" : "`A`, `B`, `c`, `d`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 22,
    "fragment" : "`(a|b)?+.+`"
  } ]
}


-- !query
SELECT SUM(`(a)`) FROM testData2
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`(a)`",
    "proposal" : "`A`, `B`, `c`, `d`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 16,
    "fragment" : "`(a)`"
  } ]
}


-- !query
set spark.sql.parser.quotedRegexColumnNames=true
-- !query analysis
SetCommand (spark.sql.parser.quotedRegexColumnNames,Some(true))


-- !query
SELECT `(a)?+.+` FROM testData2 WHERE a = 1
-- !query analysis
Project [B#x, c#x, d#x]
+- Filter (a#x = 1)
   +- SubqueryAlias testdata2
      +- View (`testData2`, [A#x, B#x, c#x, d#x])
         +- Project [cast(A#x as int) AS A#x, cast(B#x as int) AS B#x, cast(c#x as int) AS c#x, cast(d#x as int) AS d#x]
            +- Project [A#x, B#x, c#x, d#x]
               +- SubqueryAlias testData2
                  +- LocalRelation [A#x, B#x, c#x, d#x]


-- !query
SELECT `(A)?+.+` FROM testData2 WHERE a = 1
-- !query analysis
Project [B#x, c#x, d#x]
+- Filter (a#x = 1)
   +- SubqueryAlias testdata2
      +- View (`testData2`, [A#x, B#x, c#x, d#x])
         +- Project [cast(A#x as int) AS A#x, cast(B#x as int) AS B#x, cast(c#x as int) AS c#x, cast(d#x as int) AS d#x]
            +- Project [A#x, B#x, c#x, d#x]
               +- SubqueryAlias testData2
                  +- LocalRelation [A#x, B#x, c#x, d#x]


-- !query
SELECT t.`(a)?+.+` FROM testData2 t WHERE a = 1
-- !query analysis
Project [B#x, c#x, d#x]
+- Filter (a#x = 1)
   +- SubqueryAlias t
      +- SubqueryAlias testdata2
         +- View (`testData2`, [A#x, B#x, c#x, d#x])
            +- Project [cast(A#x as int) AS A#x, cast(B#x as int) AS B#x, cast(c#x as int) AS c#x, cast(d#x as int) AS d#x]
               +- Project [A#x, B#x, c#x, d#x]
                  +- SubqueryAlias testData2
                     +- LocalRelation [A#x, B#x, c#x, d#x]


-- !query
SELECT t.`(A)?+.+` FROM testData2 t WHERE a = 1
-- !query analysis
Project [B#x, c#x, d#x]
+- Filter (a#x = 1)
   +- SubqueryAlias t
      +- SubqueryAlias testdata2
         +- View (`testData2`, [A#x, B#x, c#x, d#x])
            +- Project [cast(A#x as int) AS A#x, cast(B#x as int) AS B#x, cast(c#x as int) AS c#x, cast(d#x as int) AS d#x]
               +- Project [A#x, B#x, c#x, d#x]
                  +- SubqueryAlias testData2
                     +- LocalRelation [A#x, B#x, c#x, d#x]


-- !query
SELECT `(a|B)` FROM testData2 WHERE a = 2
-- !query analysis
Project [A#x, B#x]
+- Filter (a#x = 2)
   +- SubqueryAlias testdata2
      +- View (`testData2`, [A#x, B#x, c#x, d#x])
         +- Project [cast(A#x as int) AS A#x, cast(B#x as int) AS B#x, cast(c#x as int) AS c#x, cast(d#x as int) AS d#x]
            +- Project [A#x, B#x, c#x, d#x]
               +- SubqueryAlias testData2
                  +- LocalRelation [A#x, B#x, c#x, d#x]


-- !query
SELECT `(A|b)` FROM testData2 WHERE a = 2
-- !query analysis
Project [A#x, B#x]
+- Filter (a#x = 2)
   +- SubqueryAlias testdata2
      +- View (`testData2`, [A#x, B#x, c#x, d#x])
         +- Project [cast(A#x as int) AS A#x, cast(B#x as int) AS B#x, cast(c#x as int) AS c#x, cast(d#x as int) AS d#x]
            +- Project [A#x, B#x, c#x, d#x]
               +- SubqueryAlias testData2
                  +- LocalRelation [A#x, B#x, c#x, d#x]


-- !query
SELECT `(a|B)?+.+` FROM testData2 WHERE a = 2
-- !query analysis
Project [c#x, d#x]
+- Filter (a#x = 2)
   +- SubqueryAlias testdata2
      +- View (`testData2`, [A#x, B#x, c#x, d#x])
         +- Project [cast(A#x as int) AS A#x, cast(B#x as int) AS B#x, cast(c#x as int) AS c#x, cast(d#x as int) AS d#x]
            +- Project [A#x, B#x, c#x, d#x]
               +- SubqueryAlias testData2
                  +- LocalRelation [A#x, B#x, c#x, d#x]


-- !query
SELECT `(A|b)?+.+` FROM testData2 WHERE a = 2
-- !query analysis
Project [c#x, d#x]
+- Filter (a#x = 2)
   +- SubqueryAlias testdata2
      +- View (`testData2`, [A#x, B#x, c#x, d#x])
         +- Project [cast(A#x as int) AS A#x, cast(B#x as int) AS B#x, cast(c#x as int) AS c#x, cast(d#x as int) AS d#x]
            +- Project [A#x, B#x, c#x, d#x]
               +- SubqueryAlias testData2
                  +- LocalRelation [A#x, B#x, c#x, d#x]


-- !query
SELECT `(e|f)` FROM testData2
-- !query analysis
Project
+- SubqueryAlias testdata2
   +- View (`testData2`, [A#x, B#x, c#x, d#x])
      +- Project [cast(A#x as int) AS A#x, cast(B#x as int) AS B#x, cast(c#x as int) AS c#x, cast(d#x as int) AS d#x]
         +- Project [A#x, B#x, c#x, d#x]
            +- SubqueryAlias testData2
               +- LocalRelation [A#x, B#x, c#x, d#x]


-- !query
SELECT t.`(e|f)` FROM testData2 t
-- !query analysis
Project
+- SubqueryAlias t
   +- SubqueryAlias testdata2
      +- View (`testData2`, [A#x, B#x, c#x, d#x])
         +- Project [cast(A#x as int) AS A#x, cast(B#x as int) AS B#x, cast(c#x as int) AS c#x, cast(d#x as int) AS d#x]
            +- Project [A#x, B#x, c#x, d#x]
               +- SubqueryAlias testData2
                  +- LocalRelation [A#x, B#x, c#x, d#x]


-- !query
SELECT p.`(KEY)?+.+`, b, testdata2.`(b)?+.+` FROM testData p join testData2 ON p.key = testData2.a WHERE key < 3
-- !query analysis
Project [value1#x, value2#x, b#x, A#x, c#x, d#x]
+- Filter (key#x < 3)
   +- Join Inner, (key#x = a#x)
      :- SubqueryAlias p
      :  +- SubqueryAlias testdata
      :     +- View (`testData`, [key#x, value1#x, value2#x])
      :        +- Project [cast(key#x as int) AS key#x, cast(value1#x as string) AS value1#x, cast(value2#x as string) AS value2#x]
      :           +- Project [key#x, value1#x, value2#x]
      :              +- SubqueryAlias testData
      :                 +- LocalRelation [key#x, value1#x, value2#x]
      +- SubqueryAlias testdata2
         +- View (`testData2`, [A#x, B#x, c#x, d#x])
            +- Project [cast(A#x as int) AS A#x, cast(B#x as int) AS B#x, cast(c#x as int) AS c#x, cast(d#x as int) AS d#x]
               +- Project [A#x, B#x, c#x, d#x]
                  +- SubqueryAlias testData2
                     +- LocalRelation [A#x, B#x, c#x, d#x]


-- !query
SELECT p.`(key)?+.+`, b, testdata2.`(b)?+.+` FROM testData p join testData2 ON p.key = testData2.a WHERE key < 3
-- !query analysis
Project [value1#x, value2#x, b#x, A#x, c#x, d#x]
+- Filter (key#x < 3)
   +- Join Inner, (key#x = a#x)
      :- SubqueryAlias p
      :  +- SubqueryAlias testdata
      :     +- View (`testData`, [key#x, value1#x, value2#x])
      :        +- Project [cast(key#x as int) AS key#x, cast(value1#x as string) AS value1#x, cast(value2#x as string) AS value2#x]
      :           +- Project [key#x, value1#x, value2#x]
      :              +- SubqueryAlias testData
      :                 +- LocalRelation [key#x, value1#x, value2#x]
      +- SubqueryAlias testdata2
         +- View (`testData2`, [A#x, B#x, c#x, d#x])
            +- Project [cast(A#x as int) AS A#x, cast(B#x as int) AS B#x, cast(c#x as int) AS c#x, cast(d#x as int) AS d#x]
               +- Project [A#x, B#x, c#x, d#x]
                  +- SubqueryAlias testData2
                     +- LocalRelation [A#x, B#x, c#x, d#x]


-- !query
set spark.sql.caseSensitive=true
-- !query analysis
SetCommand (spark.sql.caseSensitive,Some(true))


-- !query
CREATE OR REPLACE TEMPORARY VIEW testdata3 AS SELECT * FROM VALUES
(0, 1), (1, 2), (2, 3), (3, 4)
AS testdata3(a, b)
-- !query analysis
CreateViewCommand `testdata3`, SELECT * FROM VALUES
(0, 1), (1, 2), (2, 3), (3, 4)
AS testdata3(a, b), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [a#x, b#x]
      +- SubqueryAlias testdata3
         +- LocalRelation [a#x, b#x]


-- !query
SELECT `(A)?+.+` FROM testdata3
-- !query analysis
Project [a#x, b#x]
+- SubqueryAlias testdata3
   +- View (`testdata3`, [a#x, b#x])
      +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x]
         +- Project [a#x, b#x]
            +- SubqueryAlias testdata3
               +- LocalRelation [a#x, b#x]


-- !query
SELECT `(a)?+.+` FROM testdata3
-- !query analysis
Project [b#x]
+- SubqueryAlias testdata3
   +- View (`testdata3`, [a#x, b#x])
      +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x]
         +- Project [a#x, b#x]
            +- SubqueryAlias testdata3
               +- LocalRelation [a#x, b#x]


-- !query
SELECT `(A)?+.+` FROM testdata3 WHERE a > 1
-- !query analysis
Project [a#x, b#x]
+- Filter (a#x > 1)
   +- SubqueryAlias testdata3
      +- View (`testdata3`, [a#x, b#x])
         +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x]
            +- Project [a#x, b#x]
               +- SubqueryAlias testdata3
                  +- LocalRelation [a#x, b#x]


-- !query
SELECT `(a)?+.+` FROM testdata3 where `a` > 1
-- !query analysis
Project [b#x]
+- Filter (a#x > 1)
   +- SubqueryAlias testdata3
      +- View (`testdata3`, [a#x, b#x])
         +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x]
            +- Project [a#x, b#x]
               +- SubqueryAlias testdata3
                  +- LocalRelation [a#x, b#x]


-- !query
SELECT SUM(`a`) FROM testdata3
-- !query analysis
Aggregate [sum(a#x) AS sum(a)#xL]
+- SubqueryAlias testdata3
   +- View (`testdata3`, [a#x, b#x])
      +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x]
         +- Project [a#x, b#x]
            +- SubqueryAlias testdata3
               +- LocalRelation [a#x, b#x]


-- !query
SELECT SUM(`(a)`) FROM testdata3
-- !query analysis
Aggregate [sum(a#x) AS sum(a)#xL]
+- SubqueryAlias testdata3
   +- View (`testdata3`, [a#x, b#x])
      +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x]
         +- Project [a#x, b#x]
            +- SubqueryAlias testdata3
               +- LocalRelation [a#x, b#x]


-- !query
SELECT SUM(`(a)?+.+`) FROM testdata3
-- !query analysis
Aggregate [sum(b#x) AS sum(b)#xL]
+- SubqueryAlias testdata3
   +- View (`testdata3`, [a#x, b#x])
      +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x]
         +- Project [a#x, b#x]
            +- SubqueryAlias testdata3
               +- LocalRelation [a#x, b#x]


-- !query
SELECT SUM(a) FROM testdata3 GROUP BY `a`
-- !query analysis
Aggregate [a#x], [sum(a#x) AS sum(a)#xL]
+- SubqueryAlias testdata3
   +- View (`testdata3`, [a#x, b#x])
      +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x]
         +- Project [a#x, b#x]
            +- SubqueryAlias testdata3
               +- LocalRelation [a#x, b#x]


-- !query
SELECT SUM(a) FROM testdata3 GROUP BY `(a)`
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`(a)`",
    "proposal" : "`a`, `b`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 39,
    "stopIndex" : 43,
    "fragment" : "`(a)`"
  } ]
}


-- !query
SELECT SUM(a) FROM testdata3 GROUP BY `(a)?+.+`
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`(a)?+.+`",
    "proposal" : "`a`, `b`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 39,
    "stopIndex" : 47,
    "fragment" : "`(a)?+.+`"
  } ]
}
