-- Automatically generated by SQLQueryTestSuite
-- !query
create temporary view courseSales as select * from values
  ("dotNET", 2012, 10000),
  ("Java", 2012, 20000),
  ("dotNET", 2012, 5000),
  ("dotNET", 2013, 48000),
  ("Java", 2013, 30000)
  as courseSales(course, year, earnings)
-- !query analysis
CreateViewCommand `courseSales`, select * from values
  ("dotNET", 2012, 10000),
  ("Java", 2012, 20000),
  ("dotNET", 2012, 5000),
  ("dotNET", 2013, 48000),
  ("Java", 2013, 30000)
  as courseSales(course, year, earnings), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [course#x, year#x, earnings#x]
      +- SubqueryAlias courseSales
         +- LocalRelation [course#x, year#x, earnings#x]


-- !query
create temporary view years as select * from values
  (2012, 1),
  (2013, 2)
  as years(y, s)
-- !query analysis
CreateViewCommand `years`, select * from values
  (2012, 1),
  (2013, 2)
  as years(y, s), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [y#x, s#x]
      +- SubqueryAlias years
         +- LocalRelation [y#x, s#x]


-- !query
create temporary view yearsWithComplexTypes as select * from values
  (2012, array(1, 1), map('1', 1), struct(1, 'a')),
  (2013, array(2, 2), map('2', 2), struct(2, 'b'))
  as yearsWithComplexTypes(y, a, m, s)
-- !query analysis
CreateViewCommand `yearsWithComplexTypes`, select * from values
  (2012, array(1, 1), map('1', 1), struct(1, 'a')),
  (2013, array(2, 2), map('2', 2), struct(2, 'b'))
  as yearsWithComplexTypes(y, a, m, s), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [y#x, a#x, m#x, s#x]
      +- SubqueryAlias yearsWithComplexTypes
         +- LocalRelation [y#x, a#x, m#x, s#x]


-- !query
SELECT * FROM (
  SELECT year, course, earnings FROM courseSales
)
PIVOT (
  sum(earnings)
  FOR course IN ('dotNET', 'Java')
)
-- !query analysis
Project [year#x, dotNET#xL, Java#xL]
+- Project [year#x, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[0] AS dotNET#xL, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[1] AS Java#xL]
   +- Aggregate [year#x], [year#x, pivotfirst(course#x, sum(__auto_generated_subquery_name.earnings)#xL, dotNET, Java, 0, 0) AS __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x]
      +- Aggregate [year#x, course#x], [year#x, course#x, sum(earnings#x) AS sum(__auto_generated_subquery_name.earnings)#xL]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [year#x, course#x, earnings#x]
               +- SubqueryAlias coursesales
                  +- View (`courseSales`, [course#x, year#x, earnings#x])
                     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                        +- Project [course#x, year#x, earnings#x]
                           +- SubqueryAlias courseSales
                              +- LocalRelation [course#x, year#x, earnings#x]


-- !query
SELECT * FROM courseSales
PIVOT (
  sum(earnings)
  FOR year IN (2012, 2013)
)
-- !query analysis
Project [course#x, 2012#xL, 2013#xL]
+- Project [course#x, __pivot_sum(coursesales.earnings) AS `sum(coursesales.earnings)`#x[0] AS 2012#xL, __pivot_sum(coursesales.earnings) AS `sum(coursesales.earnings)`#x[1] AS 2013#xL]
   +- Aggregate [course#x], [course#x, pivotfirst(year#x, sum(coursesales.earnings)#xL, 2012, 2013, 0, 0) AS __pivot_sum(coursesales.earnings) AS `sum(coursesales.earnings)`#x]
      +- Aggregate [course#x, year#x], [course#x, year#x, sum(earnings#x) AS sum(coursesales.earnings)#xL]
         +- SubqueryAlias coursesales
            +- View (`courseSales`, [course#x, year#x, earnings#x])
               +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                  +- Project [course#x, year#x, earnings#x]
                     +- SubqueryAlias courseSales
                        +- LocalRelation [course#x, year#x, earnings#x]


-- !query
SELECT * FROM (
  SELECT year, course, earnings FROM courseSales
)
PIVOT (
  sum(earnings), avg(earnings)
  FOR course IN ('dotNET', 'Java')
)
-- !query analysis
Project [year#x, dotNET_sum(earnings)#xL, dotNET_avg(earnings)#x, Java_sum(earnings)#xL, Java_avg(earnings)#x]
+- Project [year#x, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[0] AS dotNET_sum(earnings)#xL, __pivot_avg(__auto_generated_subquery_name.earnings) AS `avg(__auto_generated_subquery_name.earnings)`#x[0] AS dotNET_avg(earnings)#x, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[1] AS Java_sum(earnings)#xL, __pivot_avg(__auto_generated_subquery_name.earnings) AS `avg(__auto_generated_subquery_name.earnings)`#x[1] AS Java_avg(earnings)#x]
   +- Aggregate [year#x], [year#x, pivotfirst(course#x, sum(__auto_generated_subquery_name.earnings)#xL, dotNET, Java, 0, 0) AS __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x, pivotfirst(course#x, avg(__auto_generated_subquery_name.earnings)#x, dotNET, Java, 0, 0) AS __pivot_avg(__auto_generated_subquery_name.earnings) AS `avg(__auto_generated_subquery_name.earnings)`#x]
      +- Aggregate [year#x, course#x], [year#x, course#x, sum(earnings#x) AS sum(__auto_generated_subquery_name.earnings)#xL, avg(earnings#x) AS avg(__auto_generated_subquery_name.earnings)#x]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [year#x, course#x, earnings#x]
               +- SubqueryAlias coursesales
                  +- View (`courseSales`, [course#x, year#x, earnings#x])
                     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                        +- Project [course#x, year#x, earnings#x]
                           +- SubqueryAlias courseSales
                              +- LocalRelation [course#x, year#x, earnings#x]


-- !query
SELECT * FROM (
  SELECT course, earnings FROM courseSales
)
PIVOT (
  sum(earnings)
  FOR course IN ('dotNET', 'Java')
)
-- !query analysis
Project [dotNET#xL, Java#xL]
+- Project [__pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[0] AS dotNET#xL, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[1] AS Java#xL]
   +- Aggregate [pivotfirst(course#x, sum(__auto_generated_subquery_name.earnings)#xL, dotNET, Java, 0, 0) AS __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x]
      +- Aggregate [course#x], [course#x, sum(earnings#x) AS sum(__auto_generated_subquery_name.earnings)#xL]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [course#x, earnings#x]
               +- SubqueryAlias coursesales
                  +- View (`courseSales`, [course#x, year#x, earnings#x])
                     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                        +- Project [course#x, year#x, earnings#x]
                           +- SubqueryAlias courseSales
                              +- LocalRelation [course#x, year#x, earnings#x]


-- !query
SELECT * FROM (
  SELECT year, course, earnings FROM courseSales
)
PIVOT (
  sum(earnings), min(year)
  FOR course IN ('dotNET', 'Java')
)
-- !query analysis
Project [dotNET_sum(earnings)#xL, dotNET_min(year)#x, Java_sum(earnings)#xL, Java_min(year)#x]
+- Project [__pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[0] AS dotNET_sum(earnings)#xL, __pivot_min(__auto_generated_subquery_name.year) AS `min(__auto_generated_subquery_name.year)`#x[0] AS dotNET_min(year)#x, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[1] AS Java_sum(earnings)#xL, __pivot_min(__auto_generated_subquery_name.year) AS `min(__auto_generated_subquery_name.year)`#x[1] AS Java_min(year)#x]
   +- Aggregate [pivotfirst(course#x, sum(__auto_generated_subquery_name.earnings)#xL, dotNET, Java, 0, 0) AS __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x, pivotfirst(course#x, min(__auto_generated_subquery_name.year)#x, dotNET, Java, 0, 0) AS __pivot_min(__auto_generated_subquery_name.year) AS `min(__auto_generated_subquery_name.year)`#x]
      +- Aggregate [course#x], [course#x, sum(earnings#x) AS sum(__auto_generated_subquery_name.earnings)#xL, min(year#x) AS min(__auto_generated_subquery_name.year)#x]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [year#x, course#x, earnings#x]
               +- SubqueryAlias coursesales
                  +- View (`courseSales`, [course#x, year#x, earnings#x])
                     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                        +- Project [course#x, year#x, earnings#x]
                           +- SubqueryAlias courseSales
                              +- LocalRelation [course#x, year#x, earnings#x]


-- !query
SELECT * FROM (
  SELECT course, year, earnings, s
  FROM courseSales
  JOIN years ON year = y
)
PIVOT (
  sum(earnings)
  FOR s IN (1, 2)
)
-- !query analysis
Project [course#x, year#x, 1#xL, 2#xL]
+- Project [course#x, year#x, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[0] AS 1#xL, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[1] AS 2#xL]
   +- Aggregate [course#x, year#x], [course#x, year#x, pivotfirst(s#x, sum(__auto_generated_subquery_name.earnings)#xL, 1, 2, 0, 0) AS __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x]
      +- Aggregate [course#x, year#x, s#x], [course#x, year#x, s#x, sum(earnings#x) AS sum(__auto_generated_subquery_name.earnings)#xL]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [course#x, year#x, earnings#x, s#x]
               +- Join Inner, (year#x = y#x)
                  :- SubqueryAlias coursesales
                  :  +- View (`courseSales`, [course#x, year#x, earnings#x])
                  :     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                  :        +- Project [course#x, year#x, earnings#x]
                  :           +- SubqueryAlias courseSales
                  :              +- LocalRelation [course#x, year#x, earnings#x]
                  +- SubqueryAlias years
                     +- View (`years`, [y#x, s#x])
                        +- Project [cast(y#x as int) AS y#x, cast(s#x as int) AS s#x]
                           +- Project [y#x, s#x]
                              +- SubqueryAlias years
                                 +- LocalRelation [y#x, s#x]


-- !query
SELECT * FROM (
  SELECT course, year, earnings, s
  FROM courseSales
  JOIN years ON year = y
)
PIVOT (
  sum(earnings), min(s)
  FOR course IN ('dotNET', 'Java')
)
-- !query analysis
Project [year#x, dotNET_sum(earnings)#xL, dotNET_min(s)#x, Java_sum(earnings)#xL, Java_min(s)#x]
+- Project [year#x, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[0] AS dotNET_sum(earnings)#xL, __pivot_min(__auto_generated_subquery_name.s) AS `min(__auto_generated_subquery_name.s)`#x[0] AS dotNET_min(s)#x, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[1] AS Java_sum(earnings)#xL, __pivot_min(__auto_generated_subquery_name.s) AS `min(__auto_generated_subquery_name.s)`#x[1] AS Java_min(s)#x]
   +- Aggregate [year#x], [year#x, pivotfirst(course#x, sum(__auto_generated_subquery_name.earnings)#xL, dotNET, Java, 0, 0) AS __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x, pivotfirst(course#x, min(__auto_generated_subquery_name.s)#x, dotNET, Java, 0, 0) AS __pivot_min(__auto_generated_subquery_name.s) AS `min(__auto_generated_subquery_name.s)`#x]
      +- Aggregate [year#x, course#x], [year#x, course#x, sum(earnings#x) AS sum(__auto_generated_subquery_name.earnings)#xL, min(s#x) AS min(__auto_generated_subquery_name.s)#x]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [course#x, year#x, earnings#x, s#x]
               +- Join Inner, (year#x = y#x)
                  :- SubqueryAlias coursesales
                  :  +- View (`courseSales`, [course#x, year#x, earnings#x])
                  :     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                  :        +- Project [course#x, year#x, earnings#x]
                  :           +- SubqueryAlias courseSales
                  :              +- LocalRelation [course#x, year#x, earnings#x]
                  +- SubqueryAlias years
                     +- View (`years`, [y#x, s#x])
                        +- Project [cast(y#x as int) AS y#x, cast(s#x as int) AS s#x]
                           +- Project [y#x, s#x]
                              +- SubqueryAlias years
                                 +- LocalRelation [y#x, s#x]


-- !query
SELECT * FROM (
  SELECT course, year, earnings, s
  FROM courseSales
  JOIN years ON year = y
)
PIVOT (
  sum(earnings * s)
  FOR course IN ('dotNET', 'Java')
)
-- !query analysis
Project [year#x, dotNET#xL, Java#xL]
+- Project [year#x, __pivot_sum((__auto_generated_subquery_name.earnings * __auto_generated_subquery_name.s)) AS `sum((__auto_generated_subquery_name.earnings * __auto_generated_subquery_name.s))`#x[0] AS dotNET#xL, __pivot_sum((__auto_generated_subquery_name.earnings * __auto_generated_subquery_name.s)) AS `sum((__auto_generated_subquery_name.earnings * __auto_generated_subquery_name.s))`#x[1] AS Java#xL]
   +- Aggregate [year#x], [year#x, pivotfirst(course#x, sum((__auto_generated_subquery_name.earnings * __auto_generated_subquery_name.s))#xL, dotNET, Java, 0, 0) AS __pivot_sum((__auto_generated_subquery_name.earnings * __auto_generated_subquery_name.s)) AS `sum((__auto_generated_subquery_name.earnings * __auto_generated_subquery_name.s))`#x]
      +- Aggregate [year#x, course#x], [year#x, course#x, sum((earnings#x * s#x)) AS sum((__auto_generated_subquery_name.earnings * __auto_generated_subquery_name.s))#xL]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [course#x, year#x, earnings#x, s#x]
               +- Join Inner, (year#x = y#x)
                  :- SubqueryAlias coursesales
                  :  +- View (`courseSales`, [course#x, year#x, earnings#x])
                  :     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                  :        +- Project [course#x, year#x, earnings#x]
                  :           +- SubqueryAlias courseSales
                  :              +- LocalRelation [course#x, year#x, earnings#x]
                  +- SubqueryAlias years
                     +- View (`years`, [y#x, s#x])
                        +- Project [cast(y#x as int) AS y#x, cast(s#x as int) AS s#x]
                           +- Project [y#x, s#x]
                              +- SubqueryAlias years
                                 +- LocalRelation [y#x, s#x]


-- !query
SELECT 2012_s, 2013_s, 2012_a, 2013_a, c FROM (
  SELECT year y, course c, earnings e FROM courseSales
)
PIVOT (
  sum(e) s, avg(e) a
  FOR y IN (2012, 2013)
)
-- !query analysis
Project [2012_s#xL, 2013_s#xL, 2012_a#x, 2013_a#x, c#x]
+- Project [c#x, __pivot_sum(__auto_generated_subquery_name.e) AS s AS `sum(__auto_generated_subquery_name.e) AS s`#x[0] AS 2012_s#xL, __pivot_avg(__auto_generated_subquery_name.e) AS a AS `avg(__auto_generated_subquery_name.e) AS a`#x[0] AS 2012_a#x, __pivot_sum(__auto_generated_subquery_name.e) AS s AS `sum(__auto_generated_subquery_name.e) AS s`#x[1] AS 2013_s#xL, __pivot_avg(__auto_generated_subquery_name.e) AS a AS `avg(__auto_generated_subquery_name.e) AS a`#x[1] AS 2013_a#x]
   +- Aggregate [c#x], [c#x, pivotfirst(y#x, sum(__auto_generated_subquery_name.e) AS s#xL, 2012, 2013, 0, 0) AS __pivot_sum(__auto_generated_subquery_name.e) AS s AS `sum(__auto_generated_subquery_name.e) AS s`#x, pivotfirst(y#x, avg(__auto_generated_subquery_name.e) AS a#x, 2012, 2013, 0, 0) AS __pivot_avg(__auto_generated_subquery_name.e) AS a AS `avg(__auto_generated_subquery_name.e) AS a`#x]
      +- Aggregate [c#x, y#x], [c#x, y#x, sum(e#x) AS sum(__auto_generated_subquery_name.e) AS s#xL, avg(e#x) AS avg(__auto_generated_subquery_name.e) AS a#x]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [year#x AS y#x, course#x AS c#x, earnings#x AS e#x]
               +- SubqueryAlias coursesales
                  +- View (`courseSales`, [course#x, year#x, earnings#x])
                     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                        +- Project [course#x, year#x, earnings#x]
                           +- SubqueryAlias courseSales
                              +- LocalRelation [course#x, year#x, earnings#x]


-- !query
SELECT firstYear_s, secondYear_s, firstYear_a, secondYear_a, c FROM (
  SELECT year y, course c, earnings e FROM courseSales
)
PIVOT (
  sum(e) s, avg(e) a
  FOR y IN (2012 as firstYear, 2013 secondYear)
)
-- !query analysis
Project [firstYear_s#xL, secondYear_s#xL, firstYear_a#x, secondYear_a#x, c#x]
+- Project [c#x, __pivot_sum(__auto_generated_subquery_name.e) AS s AS `sum(__auto_generated_subquery_name.e) AS s`#x[0] AS firstYear_s#xL, __pivot_avg(__auto_generated_subquery_name.e) AS a AS `avg(__auto_generated_subquery_name.e) AS a`#x[0] AS firstYear_a#x, __pivot_sum(__auto_generated_subquery_name.e) AS s AS `sum(__auto_generated_subquery_name.e) AS s`#x[1] AS secondYear_s#xL, __pivot_avg(__auto_generated_subquery_name.e) AS a AS `avg(__auto_generated_subquery_name.e) AS a`#x[1] AS secondYear_a#x]
   +- Aggregate [c#x], [c#x, pivotfirst(y#x, sum(__auto_generated_subquery_name.e) AS s#xL, 2012, 2013, 0, 0) AS __pivot_sum(__auto_generated_subquery_name.e) AS s AS `sum(__auto_generated_subquery_name.e) AS s`#x, pivotfirst(y#x, avg(__auto_generated_subquery_name.e) AS a#x, 2012, 2013, 0, 0) AS __pivot_avg(__auto_generated_subquery_name.e) AS a AS `avg(__auto_generated_subquery_name.e) AS a`#x]
      +- Aggregate [c#x, y#x], [c#x, y#x, sum(e#x) AS sum(__auto_generated_subquery_name.e) AS s#xL, avg(e#x) AS avg(__auto_generated_subquery_name.e) AS a#x]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [year#x AS y#x, course#x AS c#x, earnings#x AS e#x]
               +- SubqueryAlias coursesales
                  +- View (`courseSales`, [course#x, year#x, earnings#x])
                     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                        +- Project [course#x, year#x, earnings#x]
                           +- SubqueryAlias courseSales
                              +- LocalRelation [course#x, year#x, earnings#x]


-- !query
SELECT * FROM courseSales
PIVOT (
  abs(earnings)
  FOR year IN (2012, 2013)
)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_1006",
  "messageParameters" : {
    "sql" : "coursesales.earnings"
  }
}


-- !query
SELECT * FROM (
  SELECT year, course, earnings FROM courseSales
)
PIVOT (
  sum(earnings), year
  FOR course IN ('dotNET', 'Java')
)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_1006",
  "messageParameters" : {
    "sql" : "__auto_generated_subquery_name.year"
  }
}


-- !query
SELECT * FROM (
  SELECT course, earnings FROM courseSales
)
PIVOT (
  sum(earnings)
  FOR year IN (2012, 2013)
)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`year`",
    "proposal" : "`course`, `earnings`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 62,
    "stopIndex" : 113,
    "fragment" : "PIVOT (\n  sum(earnings)\n  FOR year IN (2012, 2013)\n)"
  } ]
}


-- !query
SELECT * FROM (
  SELECT year, course, earnings FROM courseSales
)
PIVOT (
  ceil(sum(earnings)), avg(earnings) + 1 as a1
  FOR course IN ('dotNET', 'Java')
)
-- !query analysis
Project [year#x, dotNET_CEIL(sum(earnings))#xL, dotNET_a1#x, Java_CEIL(sum(earnings))#xL, Java_a1#x]
+- Project [year#x, __pivot_CEIL(sum(__auto_generated_subquery_name.earnings)) AS `CEIL(sum(__auto_generated_subquery_name.earnings))`#x[0] AS dotNET_CEIL(sum(earnings))#xL, __pivot_(avg(__auto_generated_subquery_name.earnings) + CAST(1 AS DOUBLE)) AS a1 AS `(avg(__auto_generated_subquery_name.earnings) + CAST(1 AS DOUBLE)) AS a1`#x[0] AS dotNET_a1#x, __pivot_CEIL(sum(__auto_generated_subquery_name.earnings)) AS `CEIL(sum(__auto_generated_subquery_name.earnings))`#x[1] AS Java_CEIL(sum(earnings))#xL, __pivot_(avg(__auto_generated_subquery_name.earnings) + CAST(1 AS DOUBLE)) AS a1 AS `(avg(__auto_generated_subquery_name.earnings) + CAST(1 AS DOUBLE)) AS a1`#x[1] AS Java_a1#x]
   +- Aggregate [year#x], [year#x, pivotfirst(course#x, CEIL(sum(__auto_generated_subquery_name.earnings))#xL, dotNET, Java, 0, 0) AS __pivot_CEIL(sum(__auto_generated_subquery_name.earnings)) AS `CEIL(sum(__auto_generated_subquery_name.earnings))`#x, pivotfirst(course#x, (avg(__auto_generated_subquery_name.earnings) + CAST(1 AS DOUBLE)) AS a1#x, dotNET, Java, 0, 0) AS __pivot_(avg(__auto_generated_subquery_name.earnings) + CAST(1 AS DOUBLE)) AS a1 AS `(avg(__auto_generated_subquery_name.earnings) + CAST(1 AS DOUBLE)) AS a1`#x]
      +- Aggregate [year#x, course#x], [year#x, course#x, CEIL(sum(earnings#x)) AS CEIL(sum(__auto_generated_subquery_name.earnings))#xL, (avg(earnings#x) + cast(1 as double)) AS (avg(__auto_generated_subquery_name.earnings) + CAST(1 AS DOUBLE)) AS a1#x]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [year#x, course#x, earnings#x]
               +- SubqueryAlias coursesales
                  +- View (`courseSales`, [course#x, year#x, earnings#x])
                     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                        +- Project [course#x, year#x, earnings#x]
                           +- SubqueryAlias courseSales
                              +- LocalRelation [course#x, year#x, earnings#x]


-- !query
SELECT * FROM (
  SELECT year, course, earnings FROM courseSales
)
PIVOT (
  sum(avg(earnings))
  FOR course IN ('dotNET', 'Java')
)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "NESTED_AGGREGATE_FUNCTION",
  "sqlState" : "42607",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 82,
    "stopIndex" : 94,
    "fragment" : "avg(earnings)"
  } ]
}


-- !query
SELECT * FROM (
  SELECT course, year, earnings, s
  FROM courseSales
  JOIN years ON year = y
)
PIVOT (
  sum(earnings)
  FOR (course, year) IN (('dotNET', 2012), ('Java', 2013))
)
-- !query analysis
Project [s#x, {dotNET, 2012}#xL, {Java, 2013}#xL]
+- Project [s#x, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[0] AS {dotNET, 2012}#xL, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[1] AS {Java, 2013}#xL]
   +- Aggregate [s#x], [s#x, pivotfirst(__pivot_col#x, sum(__auto_generated_subquery_name.earnings)#xL, [dotNET,2012], [Java,2013], 0, 0) AS __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x]
      +- Aggregate [s#x, named_struct(course, course#x, year, year#x)], [s#x, named_struct(course, course#x, year, year#x) AS __pivot_col#x, sum(earnings#x) AS sum(__auto_generated_subquery_name.earnings)#xL]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [course#x, year#x, earnings#x, s#x]
               +- Join Inner, (year#x = y#x)
                  :- SubqueryAlias coursesales
                  :  +- View (`courseSales`, [course#x, year#x, earnings#x])
                  :     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                  :        +- Project [course#x, year#x, earnings#x]
                  :           +- SubqueryAlias courseSales
                  :              +- LocalRelation [course#x, year#x, earnings#x]
                  +- SubqueryAlias years
                     +- View (`years`, [y#x, s#x])
                        +- Project [cast(y#x as int) AS y#x, cast(s#x as int) AS s#x]
                           +- Project [y#x, s#x]
                              +- SubqueryAlias years
                                 +- LocalRelation [y#x, s#x]


-- !query
SELECT * FROM (
  SELECT course, year, earnings, s
  FROM courseSales
  JOIN years ON year = y
)
PIVOT (
  sum(earnings)
  FOR (course, s) IN (('dotNET', 2) as c1, ('Java', 1) as c2)
)
-- !query analysis
Project [year#x, c1#xL, c2#xL]
+- Project [year#x, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[0] AS c1#xL, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[1] AS c2#xL]
   +- Aggregate [year#x], [year#x, pivotfirst(__pivot_col#x, sum(__auto_generated_subquery_name.earnings)#xL, [dotNET,2], [Java,1], 0, 0) AS __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x]
      +- Aggregate [year#x, named_struct(course, course#x, s, s#x)], [year#x, named_struct(course, course#x, s, s#x) AS __pivot_col#x, sum(earnings#x) AS sum(__auto_generated_subquery_name.earnings)#xL]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [course#x, year#x, earnings#x, s#x]
               +- Join Inner, (year#x = y#x)
                  :- SubqueryAlias coursesales
                  :  +- View (`courseSales`, [course#x, year#x, earnings#x])
                  :     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                  :        +- Project [course#x, year#x, earnings#x]
                  :           +- SubqueryAlias courseSales
                  :              +- LocalRelation [course#x, year#x, earnings#x]
                  +- SubqueryAlias years
                     +- View (`years`, [y#x, s#x])
                        +- Project [cast(y#x as int) AS y#x, cast(s#x as int) AS s#x]
                           +- Project [y#x, s#x]
                              +- SubqueryAlias years
                                 +- LocalRelation [y#x, s#x]


-- !query
SELECT * FROM (
  SELECT course, year, earnings, s
  FROM courseSales
  JOIN years ON year = y
)
PIVOT (
  sum(earnings)
  FOR (course, year) IN ('dotNET', 'Java')
)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "PIVOT_VALUE_DATA_TYPE_MISMATCH",
  "sqlState" : "42K09",
  "messageParameters" : {
    "pivotType" : "struct<course:string,year:int>",
    "value" : "dotNET",
    "valueType" : "string"
  }
}


-- !query
SELECT * FROM courseSales
PIVOT (
  sum(earnings)
  FOR year IN (s, 2013)
)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`s`",
    "proposal" : "`year`, `course`, `earnings`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 66,
    "stopIndex" : 66,
    "fragment" : "s"
  } ]
}


-- !query
SELECT * FROM courseSales
PIVOT (
  sum(earnings)
  FOR year IN (course, 2013)
)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "NON_LITERAL_PIVOT_VALUES",
  "sqlState" : "42K08",
  "messageParameters" : {
    "expression" : "\"course\""
  }
}


-- !query
SELECT * FROM (
  SELECT course, year, a
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  min(a)
  FOR course IN ('dotNET', 'Java')
)
-- !query analysis
Project [year#x, dotNET#x, Java#x]
+- Aggregate [year#x], [year#x, min(if ((course#x <=> cast(dotNET as string))) a#x else cast(null as array<int>)) AS dotNET#x, min(if ((course#x <=> cast(Java as string))) a#x else cast(null as array<int>)) AS Java#x]
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [course#x, year#x, a#x]
         +- Join Inner, (year#x = y#x)
            :- SubqueryAlias coursesales
            :  +- View (`courseSales`, [course#x, year#x, earnings#x])
            :     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
            :        +- Project [course#x, year#x, earnings#x]
            :           +- SubqueryAlias courseSales
            :              +- LocalRelation [course#x, year#x, earnings#x]
            +- SubqueryAlias yearswithcomplextypes
               +- View (`yearsWithComplexTypes`, [y#x, a#x, m#x, s#x])
                  +- Project [cast(y#x as int) AS y#x, cast(a#x as array<int>) AS a#x, cast(m#x as map<string,int>) AS m#x, cast(s#x as struct<col1:int,col2:string>) AS s#x]
                     +- Project [y#x, a#x, m#x, s#x]
                        +- SubqueryAlias yearsWithComplexTypes
                           +- LocalRelation [y#x, a#x, m#x, s#x]


-- !query
SELECT * FROM (
  SELECT course, year, y, a
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  max(a)
  FOR (y, course) IN ((2012, 'dotNET'), (2013, 'Java'))
)
-- !query analysis
Project [year#x, {2012, dotNET}#x, {2013, Java}#x]
+- Aggregate [year#x], [year#x, max(if ((named_struct(y, y#x, course, course#x) <=> cast(named_struct(col1, 2012, col2, dotNET) as struct<y:int,course:string>))) a#x else cast(null as array<int>)) AS {2012, dotNET}#x, max(if ((named_struct(y, y#x, course, course#x) <=> cast(named_struct(col1, 2013, col2, Java) as struct<y:int,course:string>))) a#x else cast(null as array<int>)) AS {2013, Java}#x]
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [course#x, year#x, y#x, a#x]
         +- Join Inner, (year#x = y#x)
            :- SubqueryAlias coursesales
            :  +- View (`courseSales`, [course#x, year#x, earnings#x])
            :     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
            :        +- Project [course#x, year#x, earnings#x]
            :           +- SubqueryAlias courseSales
            :              +- LocalRelation [course#x, year#x, earnings#x]
            +- SubqueryAlias yearswithcomplextypes
               +- View (`yearsWithComplexTypes`, [y#x, a#x, m#x, s#x])
                  +- Project [cast(y#x as int) AS y#x, cast(a#x as array<int>) AS a#x, cast(m#x as map<string,int>) AS m#x, cast(s#x as struct<col1:int,col2:string>) AS s#x]
                     +- Project [y#x, a#x, m#x, s#x]
                        +- SubqueryAlias yearsWithComplexTypes
                           +- LocalRelation [y#x, a#x, m#x, s#x]


-- !query
SELECT * FROM (
  SELECT earnings, year, a
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  sum(earnings)
  FOR a IN (array(1, 1), array(2, 2))
)
-- !query analysis
Project [year#x, [1, 1]#xL, [2, 2]#xL]
+- Project [year#x, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[0] AS [1, 1]#xL, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[1] AS [2, 2]#xL]
   +- Aggregate [year#x], [year#x, pivotfirst(a#x, sum(__auto_generated_subquery_name.earnings)#xL, [1,1], [2,2], 0, 0) AS __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x]
      +- Aggregate [year#x, a#x], [year#x, a#x, sum(earnings#x) AS sum(__auto_generated_subquery_name.earnings)#xL]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [earnings#x, year#x, a#x]
               +- Join Inner, (year#x = y#x)
                  :- SubqueryAlias coursesales
                  :  +- View (`courseSales`, [course#x, year#x, earnings#x])
                  :     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                  :        +- Project [course#x, year#x, earnings#x]
                  :           +- SubqueryAlias courseSales
                  :              +- LocalRelation [course#x, year#x, earnings#x]
                  +- SubqueryAlias yearswithcomplextypes
                     +- View (`yearsWithComplexTypes`, [y#x, a#x, m#x, s#x])
                        +- Project [cast(y#x as int) AS y#x, cast(a#x as array<int>) AS a#x, cast(m#x as map<string,int>) AS m#x, cast(s#x as struct<col1:int,col2:string>) AS s#x]
                           +- Project [y#x, a#x, m#x, s#x]
                              +- SubqueryAlias yearsWithComplexTypes
                                 +- LocalRelation [y#x, a#x, m#x, s#x]


-- !query
SELECT * FROM (
  SELECT course, earnings, year, a
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  sum(earnings)
  FOR (course, a) IN (('dotNET', array(1, 1)), ('Java', array(2, 2)))
)
-- !query analysis
Project [year#x, {dotNET, [1, 1]}#xL, {Java, [2, 2]}#xL]
+- Project [year#x, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[0] AS {dotNET, [1, 1]}#xL, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[1] AS {Java, [2, 2]}#xL]
   +- Aggregate [year#x], [year#x, pivotfirst(__pivot_col#x, sum(__auto_generated_subquery_name.earnings)#xL, [dotNET,[1,1]], [Java,[2,2]], 0, 0) AS __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x]
      +- Aggregate [year#x, named_struct(course, course#x, a, a#x)], [year#x, named_struct(course, course#x, a, a#x) AS __pivot_col#x, sum(earnings#x) AS sum(__auto_generated_subquery_name.earnings)#xL]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [course#x, earnings#x, year#x, a#x]
               +- Join Inner, (year#x = y#x)
                  :- SubqueryAlias coursesales
                  :  +- View (`courseSales`, [course#x, year#x, earnings#x])
                  :     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                  :        +- Project [course#x, year#x, earnings#x]
                  :           +- SubqueryAlias courseSales
                  :              +- LocalRelation [course#x, year#x, earnings#x]
                  +- SubqueryAlias yearswithcomplextypes
                     +- View (`yearsWithComplexTypes`, [y#x, a#x, m#x, s#x])
                        +- Project [cast(y#x as int) AS y#x, cast(a#x as array<int>) AS a#x, cast(m#x as map<string,int>) AS m#x, cast(s#x as struct<col1:int,col2:string>) AS s#x]
                           +- Project [y#x, a#x, m#x, s#x]
                              +- SubqueryAlias yearsWithComplexTypes
                                 +- LocalRelation [y#x, a#x, m#x, s#x]


-- !query
SELECT * FROM (
  SELECT earnings, year, s
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  sum(earnings)
  FOR s IN ((1, 'a'), (2, 'b'))
)
-- !query analysis
Project [year#x, {1, a}#xL, {2, b}#xL]
+- Project [year#x, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[0] AS {1, a}#xL, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[1] AS {2, b}#xL]
   +- Aggregate [year#x], [year#x, pivotfirst(s#x, sum(__auto_generated_subquery_name.earnings)#xL, [1,a], [2,b], 0, 0) AS __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x]
      +- Aggregate [year#x, s#x], [year#x, s#x, sum(earnings#x) AS sum(__auto_generated_subquery_name.earnings)#xL]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [earnings#x, year#x, s#x]
               +- Join Inner, (year#x = y#x)
                  :- SubqueryAlias coursesales
                  :  +- View (`courseSales`, [course#x, year#x, earnings#x])
                  :     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                  :        +- Project [course#x, year#x, earnings#x]
                  :           +- SubqueryAlias courseSales
                  :              +- LocalRelation [course#x, year#x, earnings#x]
                  +- SubqueryAlias yearswithcomplextypes
                     +- View (`yearsWithComplexTypes`, [y#x, a#x, m#x, s#x])
                        +- Project [cast(y#x as int) AS y#x, cast(a#x as array<int>) AS a#x, cast(m#x as map<string,int>) AS m#x, cast(s#x as struct<col1:int,col2:string>) AS s#x]
                           +- Project [y#x, a#x, m#x, s#x]
                              +- SubqueryAlias yearsWithComplexTypes
                                 +- LocalRelation [y#x, a#x, m#x, s#x]


-- !query
SELECT * FROM (
  SELECT course, earnings, year, s
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  sum(earnings)
  FOR (course, s) IN (('dotNET', (1, 'a')), ('Java', (2, 'b')))
)
-- !query analysis
Project [year#x, {dotNET, {1, a}}#xL, {Java, {2, b}}#xL]
+- Project [year#x, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[0] AS {dotNET, {1, a}}#xL, __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x[1] AS {Java, {2, b}}#xL]
   +- Aggregate [year#x], [year#x, pivotfirst(__pivot_col#x, sum(__auto_generated_subquery_name.earnings)#xL, [dotNET,[1,a]], [Java,[2,b]], 0, 0) AS __pivot_sum(__auto_generated_subquery_name.earnings) AS `sum(__auto_generated_subquery_name.earnings)`#x]
      +- Aggregate [year#x, named_struct(course, course#x, s, s#x)], [year#x, named_struct(course, course#x, s, s#x) AS __pivot_col#x, sum(earnings#x) AS sum(__auto_generated_subquery_name.earnings)#xL]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [course#x, earnings#x, year#x, s#x]
               +- Join Inner, (year#x = y#x)
                  :- SubqueryAlias coursesales
                  :  +- View (`courseSales`, [course#x, year#x, earnings#x])
                  :     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                  :        +- Project [course#x, year#x, earnings#x]
                  :           +- SubqueryAlias courseSales
                  :              +- LocalRelation [course#x, year#x, earnings#x]
                  +- SubqueryAlias yearswithcomplextypes
                     +- View (`yearsWithComplexTypes`, [y#x, a#x, m#x, s#x])
                        +- Project [cast(y#x as int) AS y#x, cast(a#x as array<int>) AS a#x, cast(m#x as map<string,int>) AS m#x, cast(s#x as struct<col1:int,col2:string>) AS s#x]
                           +- Project [y#x, a#x, m#x, s#x]
                              +- SubqueryAlias yearsWithComplexTypes
                                 +- LocalRelation [y#x, a#x, m#x, s#x]


-- !query
SELECT * FROM (
  SELECT earnings, year, m
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  sum(earnings)
  FOR m IN (map('1', 1), map('2', 2))
)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INCOMPARABLE_PIVOT_COLUMN",
  "sqlState" : "42818",
  "messageParameters" : {
    "columnName" : "`m`"
  }
}


-- !query
SELECT * FROM (
  SELECT course, earnings, year, m
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  sum(earnings)
  FOR (course, m) IN (('dotNET', map('1', 1)), ('Java', map('2', 2)))
)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INCOMPARABLE_PIVOT_COLUMN",
  "sqlState" : "42818",
  "messageParameters" : {
    "columnName" : "`named_struct('course', __auto_generated_subquery_name`.`course, 'm', __auto_generated_subquery_name`.`m)`"
  }
}


-- !query
SELECT * FROM (
  SELECT course, earnings, "a" as a, "z" as z, "b" as b, "y" as y, "c" as c, "x" as x, "d" as d, "w" as w
  FROM courseSales
)
PIVOT (
  sum(Earnings)
  FOR Course IN ('dotNET', 'Java')
)
-- !query analysis
Project [a#x, z#x, b#x, y#x, c#x, x#x, d#x, w#x, dotNET#xL, Java#xL]
+- Project [a#x, z#x, b#x, y#x, c#x, x#x, d#x, w#x, __pivot_sum(__auto_generated_subquery_name.Earnings) AS `sum(__auto_generated_subquery_name.Earnings)`#x[0] AS dotNET#xL, __pivot_sum(__auto_generated_subquery_name.Earnings) AS `sum(__auto_generated_subquery_name.Earnings)`#x[1] AS Java#xL]
   +- Aggregate [a#x, z#x, b#x, y#x, c#x, x#x, d#x, w#x], [a#x, z#x, b#x, y#x, c#x, x#x, d#x, w#x, pivotfirst(Course#x, sum(__auto_generated_subquery_name.Earnings)#xL, dotNET, Java, 0, 0) AS __pivot_sum(__auto_generated_subquery_name.Earnings) AS `sum(__auto_generated_subquery_name.Earnings)`#x]
      +- Aggregate [a#x, z#x, b#x, y#x, c#x, x#x, d#x, w#x, Course#x], [a#x, z#x, b#x, y#x, c#x, x#x, d#x, w#x, Course#x, sum(Earnings#x) AS sum(__auto_generated_subquery_name.Earnings)#xL]
         +- SubqueryAlias __auto_generated_subquery_name
            +- Project [course#x, earnings#x, a AS a#x, z AS z#x, b AS b#x, y AS y#x, c AS c#x, x AS x#x, d AS d#x, w AS w#x]
               +- SubqueryAlias coursesales
                  +- View (`courseSales`, [course#x, year#x, earnings#x])
                     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                        +- Project [course#x, year#x, earnings#x]
                           +- SubqueryAlias courseSales
                              +- LocalRelation [course#x, year#x, earnings#x]
