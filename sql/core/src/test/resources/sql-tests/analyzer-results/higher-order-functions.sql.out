-- Automatically generated by SQLQueryTestSuite
-- !query
create or replace temporary view nested as values
  (1, array(32, 97), array(array(12, 99), array(123, 42), array(1))),
  (2, array(77, -76), array(array(6, 96, 65), array(-1, -2))),
  (3, array(12), array(array(17)))
  as t(x, ys, zs)
-- !query analysis
CreateViewCommand `nested`, values
  (1, array(32, 97), array(array(12, 99), array(123, 42), array(1))),
  (2, array(77, -76), array(array(6, 96, 65), array(-1, -2))),
  (3, array(12), array(array(17)))
  as t(x, ys, zs), false, true, LocalTempView, UNSUPPORTED, true
   +- SubqueryAlias t
      +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select upper(x -> x) as v
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_LAMBDA_FUNCTION_CALL.NON_HIGHER_ORDER_FUNCTION",
  "sqlState" : "42K0D",
  "messageParameters" : {
    "class" : "org.apache.spark.sql.catalyst.expressions.Upper"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 20,
    "fragment" : "upper(x -> x)"
  } ]
}


-- !query
select ceil(x -> x) as v
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_LAMBDA_FUNCTION_CALL.NON_HIGHER_ORDER_FUNCTION",
  "sqlState" : "42K0D",
  "messageParameters" : {
    "class" : "org.apache.spark.sql.catalyst.expressions.CeilExpressionBuilder$"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 19,
    "fragment" : "ceil(x -> x)"
  } ]
}


-- !query
select transform(zs, z -> z) as v from nested
-- !query analysis
Project [transform(zs#x, lambdafunction(lambda z#x, lambda z#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select transform(ys, y -> y * y) as v from nested
-- !query analysis
Project [transform(ys#x, lambdafunction((lambda y#x * lambda y#x), lambda y#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select transform(ys, (y, i) -> y + i) as v from nested
-- !query analysis
Project [transform(ys#x, lambdafunction((lambda y#x + lambda i#x), lambda y#x, lambda i#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select transform(zs, z -> concat(ys, z)) as v from nested
-- !query analysis
Project [transform(zs#x, lambdafunction(concat(ys#x, lambda z#x), lambda z#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select transform(ys, 0) as v from nested
-- !query analysis
Project [transform(ys#x, lambdafunction(0, lambda col0#x, true)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select transform(cast(null as array<int>), x -> x + 1) as v
-- !query analysis
Project [transform(cast(null as array<int>), lambdafunction((lambda x#x + 1), lambda x#x, false)) AS v#x]
+- OneRowRelation


-- !query
select filter(ys, y -> y > 30) as v from nested
-- !query analysis
Project [filter(ys#x, lambdafunction((lambda y#x > 30), lambda y#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select filter(cast(null as array<int>), y -> true) as v
-- !query analysis
Project [filter(cast(null as array<int>), lambdafunction(true, lambda y#x, false)) AS v#x]
+- OneRowRelation


-- !query
select transform(zs, z -> filter(z, zz -> zz > 50)) as v from nested
-- !query analysis
Project [transform(zs#x, lambdafunction(filter(lambda z#x, lambdafunction((lambda zz#x > 50), lambda zz#x, false)), lambda z#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select aggregate(ys, 0, (y, a) -> y + a + x) as v from nested
-- !query analysis
Project [aggregate(ys#x, 0, lambdafunction(((lambda y#x + lambda a#x) + x#x), lambda y#x, lambda a#x, false), lambdafunction(lambda id#x, lambda id#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select aggregate(ys, (0 as sum, 0 as n), (acc, x) -> (acc.sum + x, acc.n + 1), acc -> acc.sum / acc.n) as v from nested
-- !query analysis
Project [aggregate(ys#x, named_struct(sum, 0, n, 0), lambdafunction(named_struct(col1, (lambda acc#x.sum + lambda x#x), col2, (lambda acc#x.n + 1)), lambda acc#x, lambda x#x, false), lambdafunction((cast(lambda acc#x.sum as double) / cast(lambda acc#x.n as double)), lambda acc#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select transform(zs, z -> aggregate(z, 1, (acc, val) -> acc * val * size(z))) as v from nested
-- !query analysis
Project [transform(zs#x, lambdafunction(aggregate(lambda z#x, 1, lambdafunction(((lambda acc#x * lambda val#x) * size(lambda z#x, false)), lambda acc#x, lambda val#x, false), lambdafunction(lambda id#x, lambda id#x, false)), lambda z#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select aggregate(cast(null as array<int>), 0, (a, y) -> a + y + 1, a -> a + 2) as v
-- !query analysis
Project [aggregate(cast(null as array<int>), 0, lambdafunction(((lambda a#x + lambda y#x) + 1), lambda a#x, lambda y#x, false), lambdafunction((lambda a#x + 2), lambda a#x, false)) AS v#x]
+- OneRowRelation


-- !query
select reduce(ys, 0, (y, a) -> y + a + x) as v from nested
-- !query analysis
Project [reduce(ys#x, 0, lambdafunction(((lambda y#x + lambda a#x) + x#x), lambda y#x, lambda a#x, false), lambdafunction(lambda id#x, lambda id#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select reduce(ys, (0 as sum, 0 as n), (acc, x) -> (acc.sum + x, acc.n + 1), acc -> acc.sum / acc.n) as v from nested
-- !query analysis
Project [reduce(ys#x, named_struct(sum, 0, n, 0), lambdafunction(named_struct(col1, (lambda acc#x.sum + lambda x#x), col2, (lambda acc#x.n + 1)), lambda acc#x, lambda x#x, false), lambdafunction((cast(lambda acc#x.sum as double) / cast(lambda acc#x.n as double)), lambda acc#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select transform(zs, z -> reduce(z, 1, (acc, val) -> acc * val * size(z))) as v from nested
-- !query analysis
Project [transform(zs#x, lambdafunction(reduce(lambda z#x, 1, lambdafunction(((lambda acc#x * lambda val#x) * size(lambda z#x, false)), lambda acc#x, lambda val#x, false), lambdafunction(lambda id#x, lambda id#x, false)), lambda z#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select reduce(cast(null as array<int>), 0, (a, y) -> a + y + 1, a -> a + 2) as v
-- !query analysis
Project [reduce(cast(null as array<int>), 0, lambdafunction(((lambda a#x + lambda y#x) + 1), lambda a#x, lambda y#x, false), lambdafunction((lambda a#x + 2), lambda a#x, false)) AS v#x]
+- OneRowRelation


-- !query
select exists(ys, y -> y > 30) as v from nested
-- !query analysis
Project [exists(ys#x, lambdafunction((lambda y#x > 30), lambda y#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select exists(cast(null as array<int>), y -> y > 30) as v
-- !query analysis
Project [exists(cast(null as array<int>), lambdafunction((lambda y#x > 30), lambda y#x, false)) AS v#x]
+- OneRowRelation


-- !query
select zip_with(ys, zs, (a, b) -> a + size(b)) as v from nested
-- !query analysis
Project [zip_with(ys#x, zs#x, lambdafunction((lambda a#x + size(lambda b#x, false)), lambda a#x, lambda b#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x, zs#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as array<int>) AS ys#x, cast(zs#x as array<array<int>>) AS zs#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x, zs#x]


-- !query
select zip_with(array('a', 'b', 'c'), array('d', 'e', 'f'), (x, y) -> concat(x, y)) as v
-- !query analysis
Project [zip_with(array(a, b, c), array(d, e, f), lambdafunction(concat(lambda x#x, lambda y#x), lambda x#x, lambda y#x, false)) AS v#x]
+- OneRowRelation


-- !query
select zip_with(array('a'), array('d', null, 'f'), (x, y) -> coalesce(x, y)) as v
-- !query analysis
Project [zip_with(array(a), array(d, cast(null as string), f), lambdafunction(coalesce(lambda x#x, lambda y#x), lambda x#x, lambda y#x, false)) AS v#x]
+- OneRowRelation


-- !query
create or replace temporary view nested as values
  (1, map(1, 1, 2, 2, 3, 3)),
  (2, map(4, 4, 5, 5, 6, 6))
  as t(x, ys)
-- !query analysis
CreateViewCommand `nested`, values
  (1, map(1, 1, 2, 2, 3, 3)),
  (2, map(4, 4, 5, 5, 6, 6))
  as t(x, ys), false, true, LocalTempView, UNSUPPORTED, true
   +- SubqueryAlias t
      +- LocalRelation [x#x, ys#x]


-- !query
select transform_keys(ys, (k, v) -> k) as v from nested
-- !query analysis
Project [transform_keys(ys#x, lambdafunction(lambda k#x, lambda k#x, lambda v#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as map<int,int>) AS ys#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x]


-- !query
select transform_keys(ys, (k, v) -> k + 1) as v from nested
-- !query analysis
Project [transform_keys(ys#x, lambdafunction((lambda k#x + 1), lambda k#x, lambda v#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as map<int,int>) AS ys#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x]


-- !query
select transform_keys(ys, (k, v) -> k + v) as v from nested
-- !query analysis
Project [transform_keys(ys#x, lambdafunction((lambda k#x + lambda v#x), lambda k#x, lambda v#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as map<int,int>) AS ys#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x]


-- !query
select transform_values(ys, (k, v) -> v) as v from nested
-- !query analysis
Project [transform_values(ys#x, lambdafunction(lambda v#x, lambda k#x, lambda v#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as map<int,int>) AS ys#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x]


-- !query
select transform_values(ys, (k, v) -> v + 1) as v from nested
-- !query analysis
Project [transform_values(ys#x, lambdafunction((lambda v#x + 1), lambda k#x, lambda v#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as map<int,int>) AS ys#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x]


-- !query
select transform_values(ys, (k, v) -> k + v) as v from nested
-- !query analysis
Project [transform_values(ys#x, lambdafunction((lambda k#x + lambda v#x), lambda k#x, lambda v#x, false)) AS v#x]
+- SubqueryAlias nested
   +- View (`nested`, [x#x, ys#x])
      +- Project [cast(x#x as int) AS x#x, cast(ys#x as map<int,int>) AS ys#x]
         +- SubqueryAlias t
            +- LocalRelation [x#x, ys#x]


-- !query
select transform(ys, all -> all * all) as v from values (array(32, 97)) as t(ys)
-- !query analysis
Project [transform(ys#x, lambdafunction((lambda all#x * lambda all#x), lambda all#x, false)) AS v#x]
+- SubqueryAlias t
   +- LocalRelation [ys#x]


-- !query
select transform(ys, (all, i) -> all + i) as v from values (array(32, 97)) as t(ys)
-- !query analysis
Project [transform(ys#x, lambdafunction((lambda all#x + lambda i#x), lambda all#x, lambda i#x, false)) AS v#x]
+- SubqueryAlias t
   +- LocalRelation [ys#x]


-- !query
select aggregate(split('abcdefgh',''), array(array('')), (acc, x) -> array(array(x)))
-- !query analysis
Project [aggregate(split(abcdefgh, , -1), array(array()), lambdafunction(array(array(lambda x#x)), lambda acc#x, lambda x#x, false), lambdafunction(lambda id#x, lambda id#x, false)) AS aggregate(split(abcdefgh, , -1), array(array()), lambdafunction(array(array(namedlambdavariable())), namedlambdavariable(), namedlambdavariable()), lambdafunction(namedlambdavariable(), namedlambdavariable()))#x]
+- OneRowRelation


-- !query
select aggregate(array(1, 2, 3), 0, 100) as aggregate_int_literal
-- !query analysis
Project [aggregate(array(1, 2, 3), 0, lambdafunction(100, lambda col0#x, lambda col1#x, true), lambdafunction(lambda id#x, lambda id#x, false)) AS aggregate_int_literal#x]
+- OneRowRelation


-- !query
select aggregate(array(1, 2, 3), map(), map('result', 999)) as aggregate_map_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(map(result, 999), namedlambdavariable(), namedlambdavariable())\"",
    "inputType" : "\"MAP<STRING, INT>\"",
    "paramIndex" : "third",
    "requiredType" : "\"MAP<VOID, VOID>\"",
    "sqlExpr" : "\"aggregate(array(1, 2, 3), map(), lambdafunction(map(result, 999), namedlambdavariable(), namedlambdavariable()), lambdafunction(namedlambdavariable(), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 59,
    "fragment" : "aggregate(array(1, 2, 3), map(), map('result', 999))"
  } ]
}


-- !query
select aggregate(array(1, 2, 3), struct('init', 0), struct('final', 999)) as aggregate_struct_literal
-- !query analysis
Project [aggregate(array(1, 2, 3), struct(col1, init, col2, 0), lambdafunction(struct(col1, final, col2, 999), lambda col0#x, lambda col1#x, true), lambdafunction(lambda id#x, lambda id#x, false)) AS aggregate_struct_literal#x]
+- OneRowRelation


-- !query
select aggregate(array(1, 2, 3), array(), array('result')) as aggregate_array_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(array(result), namedlambdavariable(), namedlambdavariable())\"",
    "inputType" : "\"ARRAY<STRING>\"",
    "paramIndex" : "third",
    "requiredType" : "\"ARRAY<VOID>\"",
    "sqlExpr" : "\"aggregate(array(1, 2, 3), array(), lambdafunction(array(result), namedlambdavariable(), namedlambdavariable()), lambdafunction(namedlambdavariable(), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 58,
    "fragment" : "aggregate(array(1, 2, 3), array(), array('result'))"
  } ]
}


-- !query
select array_sort(array(3, 1, 2), 1) as array_sort_int_literal
-- !query analysis
Project [array_sort(array(3, 1, 2), lambdafunction(1, lambda col0#x, lambda col1#x, true), false) AS array_sort_int_literal#x]
+- OneRowRelation


-- !query
select array_sort(array(3, 1, 2), map('compare', 0)) as array_sort_map_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_RETURN_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "actualType" : "\"MAP<STRING, INT>\"",
    "expectedType" : "\"INT\"",
    "functionName" : "`lambdafunction`",
    "sqlExpr" : "\"array_sort(array(3, 1, 2), lambdafunction(map(compare, 0), namedlambdavariable(), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 52,
    "fragment" : "array_sort(array(3, 1, 2), map('compare', 0))"
  } ]
}


-- !query
select array_sort(array(3, 1, 2), struct('result', 0)) as array_sort_struct_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_RETURN_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "actualType" : "\"STRUCT<col1: STRING NOT NULL, col2: INT NOT NULL>\"",
    "expectedType" : "\"INT\"",
    "functionName" : "`lambdafunction`",
    "sqlExpr" : "\"array_sort(array(3, 1, 2), lambdafunction(struct(result, 0), namedlambdavariable(), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 54,
    "fragment" : "array_sort(array(3, 1, 2), struct('result', 0))"
  } ]
}


-- !query
select array_sort(array(3, 1, 2), array(0)) as array_sort_array_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_RETURN_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "actualType" : "\"ARRAY<INT>\"",
    "expectedType" : "\"INT\"",
    "functionName" : "`lambdafunction`",
    "sqlExpr" : "\"array_sort(array(3, 1, 2), lambdafunction(array(0), namedlambdavariable(), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 43,
    "fragment" : "array_sort(array(3, 1, 2), array(0))"
  } ]
}


-- !query
select exists(array(1, 2, 3), 1) as exists_int_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(1, namedlambdavariable())\"",
    "inputType" : "\"INT\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"exists(array(1, 2, 3), lambdafunction(1, namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 32,
    "fragment" : "exists(array(1, 2, 3), 1)"
  } ]
}


-- !query
select exists(array(1, 2, 3), map('found', true)) as exists_map_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(map(found, true), namedlambdavariable())\"",
    "inputType" : "\"MAP<STRING, BOOLEAN>\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"exists(array(1, 2, 3), lambdafunction(map(found, true), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 49,
    "fragment" : "exists(array(1, 2, 3), map('found', true))"
  } ]
}


-- !query
select exists(array(1, 2, 3), struct('exists', true)) as exists_struct_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(struct(exists, true), namedlambdavariable())\"",
    "inputType" : "\"STRUCT<col1: STRING NOT NULL, col2: BOOLEAN NOT NULL>\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"exists(array(1, 2, 3), lambdafunction(struct(exists, true), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 53,
    "fragment" : "exists(array(1, 2, 3), struct('exists', true))"
  } ]
}


-- !query
select exists(array(1, 2, 3), array(true)) as exists_array_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(array(true), namedlambdavariable())\"",
    "inputType" : "\"ARRAY<BOOLEAN>\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"exists(array(1, 2, 3), lambdafunction(array(true), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 42,
    "fragment" : "exists(array(1, 2, 3), array(true))"
  } ]
}


-- !query
select filter(array(1, 2, 3), 1) as filter_int_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(1, namedlambdavariable())\"",
    "inputType" : "\"INT\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"filter(array(1, 2, 3), lambdafunction(1, namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 32,
    "fragment" : "filter(array(1, 2, 3), 1)"
  } ]
}


-- !query
select filter(array(1, 2, 3), map('key', 'value')) as filter_map_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(map(key, value), namedlambdavariable())\"",
    "inputType" : "\"MAP<STRING, STRING>\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"filter(array(1, 2, 3), lambdafunction(map(key, value), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 50,
    "fragment" : "filter(array(1, 2, 3), map('key', 'value'))"
  } ]
}


-- !query
select filter(array(1, 2, 3), struct('valid', true)) as filter_struct_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(struct(valid, true), namedlambdavariable())\"",
    "inputType" : "\"STRUCT<col1: STRING NOT NULL, col2: BOOLEAN NOT NULL>\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"filter(array(1, 2, 3), lambdafunction(struct(valid, true), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 52,
    "fragment" : "filter(array(1, 2, 3), struct('valid', true))"
  } ]
}


-- !query
select filter(array(1, 2, 3), array(true, false)) as filter_array_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(array(true, false), namedlambdavariable())\"",
    "inputType" : "\"ARRAY<BOOLEAN>\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"filter(array(1, 2, 3), lambdafunction(array(true, false), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 49,
    "fragment" : "filter(array(1, 2, 3), array(true, false))"
  } ]
}


-- !query
select forall(array(1, 2, 3), 1) as forall_int_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(1, namedlambdavariable())\"",
    "inputType" : "\"INT\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"forall(array(1, 2, 3), lambdafunction(1, namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 32,
    "fragment" : "forall(array(1, 2, 3), 1)"
  } ]
}


-- !query
select forall(array(1, 2, 3), map('all', true)) as forall_map_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(map(all, true), namedlambdavariable())\"",
    "inputType" : "\"MAP<STRING, BOOLEAN>\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"forall(array(1, 2, 3), lambdafunction(map(all, true), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 47,
    "fragment" : "forall(array(1, 2, 3), map('all', true))"
  } ]
}


-- !query
select forall(array(1, 2, 3), struct('all', true)) as forall_struct_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(struct(all, true), namedlambdavariable())\"",
    "inputType" : "\"STRUCT<col1: STRING NOT NULL, col2: BOOLEAN NOT NULL>\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"forall(array(1, 2, 3), lambdafunction(struct(all, true), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 50,
    "fragment" : "forall(array(1, 2, 3), struct('all', true))"
  } ]
}


-- !query
select forall(array(1, 2, 3), array(true, true)) as forall_array_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(array(true, true), namedlambdavariable())\"",
    "inputType" : "\"ARRAY<BOOLEAN>\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"forall(array(1, 2, 3), lambdafunction(array(true, true), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 48,
    "fragment" : "forall(array(1, 2, 3), array(true, true))"
  } ]
}


-- !query
select map_filter(map('a', 1, 'b', 2), 1) as map_filter_int_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(1, namedlambdavariable(), namedlambdavariable())\"",
    "inputType" : "\"INT\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"map_filter(map(a, 1, b, 2), lambdafunction(1, namedlambdavariable(), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 41,
    "fragment" : "map_filter(map('a', 1, 'b', 2), 1)"
  } ]
}


-- !query
select map_filter(map('a', 1, 'b', 2), map('keep', true)) as map_filter_map_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(map(keep, true), namedlambdavariable(), namedlambdavariable())\"",
    "inputType" : "\"MAP<STRING, BOOLEAN>\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"map_filter(map(a, 1, b, 2), lambdafunction(map(keep, true), namedlambdavariable(), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 57,
    "fragment" : "map_filter(map('a', 1, 'b', 2), map('keep', true))"
  } ]
}


-- !query
select map_filter(map('a', 1, 'b', 2), struct('filter', true)) as map_filter_struct_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(struct(filter, true), namedlambdavariable(), namedlambdavariable())\"",
    "inputType" : "\"STRUCT<col1: STRING NOT NULL, col2: BOOLEAN NOT NULL>\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"map_filter(map(a, 1, b, 2), lambdafunction(struct(filter, true), namedlambdavariable(), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 62,
    "fragment" : "map_filter(map('a', 1, 'b', 2), struct('filter', true))"
  } ]
}


-- !query
select map_filter(map('a', 1, 'b', 2), array(true)) as map_filter_array_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(array(true), namedlambdavariable(), namedlambdavariable())\"",
    "inputType" : "\"ARRAY<BOOLEAN>\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"map_filter(map(a, 1, b, 2), lambdafunction(array(true), namedlambdavariable(), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 51,
    "fragment" : "map_filter(map('a', 1, 'b', 2), array(true))"
  } ]
}


-- !query
select map_zip_with(map('a', 1), map('a', 10), 100) as map_zipwith_int_literal
-- !query analysis
Project [map_zip_with(map(a, 1), map(a, 10), lambdafunction(100, lambda col0#x, lambda col1#x, lambda col2#x, true)) AS map_zipwith_int_literal#x]
+- OneRowRelation


-- !query
select map_zip_with(map('a', 1), map('a', 10), map('merged', true)) as map_zipwith_map_literal
-- !query analysis
Project [map_zip_with(map(a, 1), map(a, 10), lambdafunction(map(merged, true), lambda col0#x, lambda col1#x, lambda col2#x, true)) AS map_zipwith_map_literal#x]
+- OneRowRelation


-- !query
select map_zip_with(map('a', 1), map('a', 10), struct('left', 1, 'right', 10)) as map_zipwith_struct_literal
-- !query analysis
Project [map_zip_with(map(a, 1), map(a, 10), lambdafunction(struct(col1, left, col2, 1, col3, right, col4, 10), lambda col0#x, lambda col1#x, lambda col2#x, true)) AS map_zipwith_struct_literal#x]
+- OneRowRelation


-- !query
select map_zip_with(map('a', 1), map('a', 10), array('combined')) as map_zipwith_array_literal
-- !query analysis
Project [map_zip_with(map(a, 1), map(a, 10), lambdafunction(array(combined), lambda col0#x, lambda col1#x, lambda col2#x, true)) AS map_zipwith_array_literal#x]
+- OneRowRelation


-- !query
select reduce(array(1, 2, 3), 0, 100) as reduce_int_literal
-- !query analysis
Project [reduce(array(1, 2, 3), 0, lambdafunction(100, lambda col0#x, lambda col1#x, true), lambdafunction(lambda id#x, lambda id#x, false)) AS reduce_int_literal#x]
+- OneRowRelation


-- !query
select reduce(array(1, 2, 3), map(), map('result', 999)) as reduce_map_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(map(result, 999), namedlambdavariable(), namedlambdavariable())\"",
    "inputType" : "\"MAP<STRING, INT>\"",
    "paramIndex" : "third",
    "requiredType" : "\"MAP<VOID, VOID>\"",
    "sqlExpr" : "\"reduce(array(1, 2, 3), map(), lambdafunction(map(result, 999), namedlambdavariable(), namedlambdavariable()), lambdafunction(namedlambdavariable(), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 56,
    "fragment" : "reduce(array(1, 2, 3), map(), map('result', 999))"
  } ]
}


-- !query
select reduce(array(1, 2, 3), struct('init', 0), struct('final', 999)) as reduce_struct_literal
-- !query analysis
Project [reduce(array(1, 2, 3), struct(col1, init, col2, 0), lambdafunction(struct(col1, final, col2, 999), lambda col0#x, lambda col1#x, true), lambdafunction(lambda id#x, lambda id#x, false)) AS reduce_struct_literal#x]
+- OneRowRelation


-- !query
select reduce(array(1, 2, 3), array(), array('result')) as reduce_array_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"lambdafunction(array(result), namedlambdavariable(), namedlambdavariable())\"",
    "inputType" : "\"ARRAY<STRING>\"",
    "paramIndex" : "third",
    "requiredType" : "\"ARRAY<VOID>\"",
    "sqlExpr" : "\"reduce(array(1, 2, 3), array(), lambdafunction(array(result), namedlambdavariable(), namedlambdavariable()), lambdafunction(namedlambdavariable(), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 55,
    "fragment" : "reduce(array(1, 2, 3), array(), array('result'))"
  } ]
}


-- !query
select transform(array(1, 2, 3), 42) as transform_int_literal
-- !query analysis
Project [transform(array(1, 2, 3), lambdafunction(42, lambda col0#x, true)) AS transform_int_literal#x]
+- OneRowRelation


-- !query
select transform(array(1, 2, 3), map('key', 'value')) as transform_map_literal
-- !query analysis
Project [transform(array(1, 2, 3), lambdafunction(map(key, value), lambda col0#x, true)) AS transform_map_literal#x]
+- OneRowRelation


-- !query
select transform(array(1, 2, 3), struct('id', 99, 'name', 'test')) as transform_struct_literal
-- !query analysis
Project [transform(array(1, 2, 3), lambdafunction(struct(col1, id, col2, 99, col3, name, col4, test), lambda col0#x, true)) AS transform_struct_literal#x]
+- OneRowRelation


-- !query
select transform(array(1, 2, 3), array('a', 'b')) as transform_array_literal
-- !query analysis
Project [transform(array(1, 2, 3), lambdafunction(array(a, b), lambda col0#x, true)) AS transform_array_literal#x]
+- OneRowRelation


-- !query
select transform_keys(map('a', 1, 'b', 2), 42) as transform_keys_int_literal
-- !query analysis
Project [transform_keys(map(a, 1, b, 2), lambdafunction(42, lambda col0#x, lambda col1#x, true)) AS transform_keys_int_literal#x]
+- OneRowRelation


-- !query
select transform_keys(map('a', 1, 'b', 2), map('new', 'key')) as transform_keys_map_literal
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.INVALID_MAP_KEY_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "keyType" : "\"MAP<STRING, STRING>\"",
    "sqlExpr" : "\"transform_keys(map(a, 1, b, 2), lambdafunction(map(new, key), namedlambdavariable(), namedlambdavariable()))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 61,
    "fragment" : "transform_keys(map('a', 1, 'b', 2), map('new', 'key'))"
  } ]
}


-- !query
select transform_keys(map('a', 1, 'b', 2), struct('key', 'value')) as transform_keys_struct_literal
-- !query analysis
Project [transform_keys(map(a, 1, b, 2), lambdafunction(struct(col1, key, col2, value), lambda col0#x, lambda col1#x, true)) AS transform_keys_struct_literal#x]
+- OneRowRelation


-- !query
select transform_keys(map('a', 1, 'b', 2), array('new_key')) as transform_keys_array_literal
-- !query analysis
Project [transform_keys(map(a, 1, b, 2), lambdafunction(array(new_key), lambda col0#x, lambda col1#x, true)) AS transform_keys_array_literal#x]
+- OneRowRelation


-- !query
select transform_values(map('a', 1, 'b', 2), 999) as transform_values_int_literal
-- !query analysis
Project [transform_values(map(a, 1, b, 2), lambdafunction(999, lambda col0#x, lambda col1#x, true)) AS transform_values_int_literal#x]
+- OneRowRelation


-- !query
select transform_values(map('a', 1, 'b', 2), map('new', 'value')) as transform_values_map_literal
-- !query analysis
Project [transform_values(map(a, 1, b, 2), lambdafunction(map(new, value), lambda col0#x, lambda col1#x, true)) AS transform_values_map_literal#x]
+- OneRowRelation


-- !query
select transform_values(map('a', 1, 'b', 2), struct('val', 999)) as transform_values_struct_literal
-- !query analysis
Project [transform_values(map(a, 1, b, 2), lambdafunction(struct(col1, val, col2, 999), lambda col0#x, lambda col1#x, true)) AS transform_values_struct_literal#x]
+- OneRowRelation


-- !query
select transform_values(map('a', 1, 'b', 2), array('new_value')) as transform_values_array_literal
-- !query analysis
Project [transform_values(map(a, 1, b, 2), lambdafunction(array(new_value), lambda col0#x, lambda col1#x, true)) AS transform_values_array_literal#x]
+- OneRowRelation


-- !query
select zip_with(array(1, 2, 3), array(4, 5, 6), 100) as zipwith_int_literal
-- !query analysis
Project [zip_with(array(1, 2, 3), array(4, 5, 6), lambdafunction(100, lambda col0#x, lambda col1#x, true)) AS zipwith_int_literal#x]
+- OneRowRelation


-- !query
select zip_with(array(1, 2, 3), array(4, 5, 6), map('merged', true)) as zipwith_map_literal
-- !query analysis
Project [zip_with(array(1, 2, 3), array(4, 5, 6), lambdafunction(map(merged, true), lambda col0#x, lambda col1#x, true)) AS zipwith_map_literal#x]
+- OneRowRelation


-- !query
select zip_with(array(1, 2, 3), array(4, 5, 6), struct('left', 1, 'right', 2)) as zipwith_struct_literal
-- !query analysis
Project [zip_with(array(1, 2, 3), array(4, 5, 6), lambdafunction(struct(col1, left, col2, 1, col3, right, col4, 2), lambda col0#x, lambda col1#x, true)) AS zipwith_struct_literal#x]
+- OneRowRelation


-- !query
select zip_with(array(1, 2, 3), array(4, 5, 6), array('combined')) as zipwith_array_literal
-- !query analysis
Project [zip_with(array(1, 2, 3), array(4, 5, 6), lambdafunction(array(combined), lambda col0#x, lambda col1#x, true)) AS zipwith_array_literal#x]
+- OneRowRelation
