-- Automatically generated by SQLQueryTestSuite
-- !query
DROP TABLE IF EXISTS t_int_1_5_through_7_11
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_int_1_5_through_7_11


-- !query
CREATE TABLE t_int_1_5_through_7_11 AS
VALUES 
  (1, 5), (2, 6), (3, 7), (4, 8), (5, 9), (6, 10), (7, 11) AS tab(col1, col2)
-- !query analysis
CreateDataSourceTableAsSelectCommand `spark_catalog`.`default`.`t_int_1_5_through_7_11`, ErrorIfExists, [col1, col2]
   +- SubqueryAlias tab
      +- LocalRelation [col1#x, col2#x]


-- !query
DROP TABLE IF EXISTS t_long_1_5_through_7_11
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_long_1_5_through_7_11


-- !query
CREATE TABLE t_long_1_5_through_7_11 AS
VALUES
  (1L, 5L), (2L, 6L), (3L, 7L), (4L, 8L), (5L, 9L), (6L, 10L), (7L, 11L) AS tab(col1, col2)
-- !query analysis
CreateDataSourceTableAsSelectCommand `spark_catalog`.`default`.`t_long_1_5_through_7_11`, ErrorIfExists, [col1, col2]
   +- SubqueryAlias tab
      +- LocalRelation [col1#xL, col2#xL]


-- !query
DROP TABLE IF EXISTS t_double_1_1_1_4_through_1_5_1_8
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_double_1_1_1_4_through_1_5_1_8


-- !query
CREATE TABLE t_double_1_1_1_4_through_1_5_1_8 AS
SELECT CAST(col1 AS DOUBLE) AS col1, CAST(col2 AS DOUBLE) AS col2
FROM VALUES
  (1.1, 1.4), (1.2, 1.5), (1.3, 1.6), (1.4, 1.7), (1.5, 1.8) AS tab(col1, col2)
-- !query analysis
CreateDataSourceTableAsSelectCommand `spark_catalog`.`default`.`t_double_1_1_1_4_through_1_5_1_8`, ErrorIfExists, [col1, col2]
   +- Project [cast(col1#x as double) AS col1#x, cast(col2#x as double) AS col2#x]
      +- SubqueryAlias tab
         +- LocalRelation [col1#x, col2#x]


-- !query
DROP TABLE IF EXISTS t_float_1_1_1_4_through_1_5_1_8
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_float_1_1_1_4_through_1_5_1_8


-- !query
CREATE TABLE t_float_1_1_1_4_through_1_5_1_8 AS
SELECT CAST(col1 AS FLOAT) col1, CAST(col2 AS FLOAT) col2
FROM VALUES
  (1.1, 1.4), (1.2, 1.5), (1.3, 1.6), (1.4, 1.7), (1.5, 1.8) AS tab(col1, col2)
-- !query analysis
CreateDataSourceTableAsSelectCommand `spark_catalog`.`default`.`t_float_1_1_1_4_through_1_5_1_8`, ErrorIfExists, [col1, col2]
   +- Project [cast(col1#x as float) AS col1#x, cast(col2#x as float) AS col2#x]
      +- SubqueryAlias tab
         +- LocalRelation [col1#x, col2#x]


-- !query
DROP TABLE IF EXISTS t_string_a_d_through_e_h
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_string_a_d_through_e_h


-- !query
CREATE TABLE t_string_a_d_through_e_h AS
VALUES
  ('a', 'd'), ('b', 'e'), ('c', 'f'), ('d', 'g'), ('e', 'h') AS tab(col1, col2)
-- !query analysis
CreateDataSourceTableAsSelectCommand `spark_catalog`.`default`.`t_string_a_d_through_e_h`, ErrorIfExists, [col1, col2]
   +- SubqueryAlias tab
      +- LocalRelation [col1#x, col2#x]


-- !query
DROP TABLE IF EXISTS t_binary_a_b_through_e_f
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_binary_a_b_through_e_f


-- !query
CREATE TABLE t_binary_a_b_through_e_f AS 
VALUES 
  (X'A', X'B'), (X'B', X'C'), (X'C', X'D'), (X'D', X'E'), (X'E', X'F') AS tab(col1, col2)
-- !query analysis
CreateDataSourceTableAsSelectCommand `spark_catalog`.`default`.`t_binary_a_b_through_e_f`, ErrorIfExists, [col1, col2]
   +- SubqueryAlias tab
      +- LocalRelation [col1#x, col2#x]


-- !query
DROP TABLE IF EXISTS t_array_int_1_3_through_4_6
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_array_int_1_3_through_4_6


-- !query
CREATE TABLE t_array_int_1_3_through_4_6 AS
VALUES 
  (ARRAY(1), ARRAY(3)), 
  (ARRAY(2), ARRAY(4)), 
  (ARRAY(3), ARRAY(5)), 
  (ARRAY(4), ARRAY(6)) AS tab(col1, col2)
-- !query analysis
CreateDataSourceTableAsSelectCommand `spark_catalog`.`default`.`t_array_int_1_3_through_4_6`, ErrorIfExists, [col1, col2]
   +- SubqueryAlias tab
      +- LocalRelation [col1#x, col2#x]


-- !query
DROP TABLE IF EXISTS t_array_long_1_3_through_4_6
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_array_long_1_3_through_4_6


-- !query
CREATE TABLE t_array_long_1_3_through_4_6 AS
VALUES 
  (ARRAY(1L), ARRAY(3L)), 
  (ARRAY(2L), ARRAY(4L)), 
  (ARRAY(3L), ARRAY(5L)), 
  (ARRAY(4L), ARRAY(6L)) AS tab(col1, col2)
-- !query analysis
CreateDataSourceTableAsSelectCommand `spark_catalog`.`default`.`t_array_long_1_3_through_4_6`, ErrorIfExists, [col1, col2]
   +- SubqueryAlias tab
      +- LocalRelation [col1#x, col2#x]


-- !query
DROP TABLE IF EXISTS t_string_collation
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_string_collation


-- !query
CREATE TABLE t_string_collation AS
VALUES
  (''), ('  '), (CAST(X'C1' AS STRING)), (CAST(X'80' AS STRING)),
  ('\uFFFD'), ('Å'), ('å'), ('a\u030A'), ('Å '), ('å  '),
  ('a\u030A   ') AS tab(col1)
-- !query analysis
CreateDataSourceTableAsSelectCommand `spark_catalog`.`default`.`t_string_collation`, ErrorIfExists, [col1]
   +- SubqueryAlias tab
      +- LocalRelation [col1#x]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1)) AS result FROM t_int_1_5_through_7_11
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col1#x, 12, 0, 0)) AS result#xL]
+- SubqueryAlias spark_catalog.default.t_int_1_5_through_7_11
   +- Relation spark_catalog.default.t_int_1_5_through_7_11[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1)) FROM t_array_int_1_3_through_4_6
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col1#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col1, 12))#xL]
+- SubqueryAlias spark_catalog.default.t_array_int_1_3_through_4_6
   +- Relation spark_catalog.default.t_array_int_1_3_through_4_6[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col2)) FROM t_array_long_1_3_through_4_6
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col2#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col2, 12))#xL]
+- SubqueryAlias spark_catalog.default.t_array_long_1_3_through_4_6
   +- Relation spark_catalog.default.t_array_long_1_3_through_4_6[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1)) FROM t_binary_a_b_through_e_f
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col1#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col1, 12))#xL]
+- SubqueryAlias spark_catalog.default.t_binary_a_b_through_e_f
   +- Relation spark_catalog.default.t_binary_a_b_through_e_f[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1)) FROM t_double_1_1_1_4_through_1_5_1_8
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col1#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col1, 12))#xL]
+- SubqueryAlias spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8
   +- Relation spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col2)) FROM t_float_1_1_1_4_through_1_5_1_8
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col2#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col2, 12))#xL]
+- SubqueryAlias spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8
   +- Relation spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1, 22)) FROM t_int_1_5_through_7_11
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col1#x, 22, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col1, 22))#xL]
+- SubqueryAlias spark_catalog.default.t_int_1_5_through_7_11
   +- Relation spark_catalog.default.t_int_1_5_through_7_11[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1)) FROM t_long_1_5_through_7_11
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col1#xL, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col1, 12))#xL]
+- SubqueryAlias spark_catalog.default.t_long_1_5_through_7_11
   +- Relation spark_catalog.default.t_long_1_5_through_7_11[col1#xL,col2#xL] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1)) FROM t_string_a_d_through_e_h
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col1#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col1, 12))#xL]
+- SubqueryAlias spark_catalog.default.t_string_a_d_through_e_h
   +- Relation spark_catalog.default.t_string_a_d_through_e_h[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_union(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2))) FROM t_int_1_5_through_7_11
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0), 12)) AS theta_sketch_estimate(theta_union(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12), 12))#xL]
+- SubqueryAlias spark_catalog.default.t_int_1_5_through_7_11
   +- Relation spark_catalog.default.t_int_1_5_through_7_11[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_union(
    theta_sketch_agg(col1, 15),
    theta_sketch_agg(col2))) FROM t_long_1_5_through_7_11
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union(theta_sketch_agg(col1#xL, 15, 0, 0), theta_sketch_agg(col2#xL, 12, 0, 0), 12)) AS theta_sketch_estimate(theta_union(theta_sketch_agg(col1, 15), theta_sketch_agg(col2, 12), 12))#xL]
+- SubqueryAlias spark_catalog.default.t_long_1_5_through_7_11
   +- Relation spark_catalog.default.t_long_1_5_through_7_11[col1#xL,col2#xL] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_union(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2))) FROM t_double_1_1_1_4_through_1_5_1_8
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0), 12)) AS theta_sketch_estimate(theta_union(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12), 12))#xL]
+- SubqueryAlias spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8
   +- Relation spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_union(
    theta_sketch_agg(col1, 6),
    theta_sketch_agg(col2, 15), 15)) FROM t_float_1_1_1_4_through_1_5_1_8
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union(theta_sketch_agg(col1#x, 6, 0, 0), theta_sketch_agg(col2#x, 15, 0, 0), 15)) AS theta_sketch_estimate(theta_union(theta_sketch_agg(col1, 6), theta_sketch_agg(col2, 15), 15))#xL]
+- SubqueryAlias spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8
   +- Relation spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_union(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2))) FROM t_string_a_d_through_e_h
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0), 12)) AS theta_sketch_estimate(theta_union(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12), 12))#xL]
+- SubqueryAlias spark_catalog.default.t_string_a_d_through_e_h
   +- Relation spark_catalog.default.t_string_a_d_through_e_h[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_union(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2), 20)) FROM t_binary_a_b_through_e_f
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0), 20)) AS theta_sketch_estimate(theta_union(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12), 20))#xL]
+- SubqueryAlias spark_catalog.default.t_binary_a_b_through_e_f
   +- Relation spark_catalog.default.t_binary_a_b_through_e_f[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_union(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2))) FROM t_array_int_1_3_through_4_6
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0), 12)) AS theta_sketch_estimate(theta_union(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12), 12))#xL]
+- SubqueryAlias spark_catalog.default.t_array_int_1_3_through_4_6
   +- Relation spark_catalog.default.t_array_int_1_3_through_4_6[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_union(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2, 13))) FROM t_array_long_1_3_through_4_6
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 13, 0, 0), 12)) AS theta_sketch_estimate(theta_union(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 13), 12))#xL]
+- SubqueryAlias spark_catalog.default.t_array_long_1_3_through_4_6
   +- Relation spark_catalog.default.t_array_long_1_3_through_4_6[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_intersection(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2))) FROM t_int_1_5_through_7_11
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0))) AS theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12)))#xL]
+- SubqueryAlias spark_catalog.default.t_int_1_5_through_7_11
   +- Relation spark_catalog.default.t_int_1_5_through_7_11[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_intersection(
    theta_sketch_agg(col1, 5),
    theta_sketch_agg(col2, 12))) FROM t_long_1_5_through_7_11
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1#xL, 5, 0, 0), theta_sketch_agg(col2#xL, 12, 0, 0))) AS theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1, 5), theta_sketch_agg(col2, 12)))#xL]
+- SubqueryAlias spark_catalog.default.t_long_1_5_through_7_11
   +- Relation spark_catalog.default.t_long_1_5_through_7_11[col1#xL,col2#xL] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_intersection(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2))) FROM t_double_1_1_1_4_through_1_5_1_8
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0))) AS theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12)))#xL]
+- SubqueryAlias spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8
   +- Relation spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_intersection(
    theta_sketch_agg(col1, 5),
    theta_sketch_agg(col2))) FROM t_float_1_1_1_4_through_1_5_1_8
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1#x, 5, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0))) AS theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1, 5), theta_sketch_agg(col2, 12)))#xL]
+- SubqueryAlias spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8
   +- Relation spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_intersection(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2))) FROM t_string_a_d_through_e_h
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0))) AS theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12)))#xL]
+- SubqueryAlias spark_catalog.default.t_string_a_d_through_e_h
   +- Relation spark_catalog.default.t_string_a_d_through_e_h[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_intersection(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2, 22))) FROM t_binary_a_b_through_e_f
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 22, 0, 0))) AS theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 22)))#xL]
+- SubqueryAlias spark_catalog.default.t_binary_a_b_through_e_f
   +- Relation spark_catalog.default.t_binary_a_b_through_e_f[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_intersection(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2))) FROM t_array_int_1_3_through_4_6
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0))) AS theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12)))#xL]
+- SubqueryAlias spark_catalog.default.t_array_int_1_3_through_4_6
   +- Relation spark_catalog.default.t_array_int_1_3_through_4_6[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_intersection(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2, 10))) FROM t_array_long_1_3_through_4_6
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 10, 0, 0))) AS theta_sketch_estimate(theta_intersection(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 10)))#xL]
+- SubqueryAlias spark_catalog.default.t_array_long_1_3_through_4_6
   +- Relation spark_catalog.default.t_array_long_1_3_through_4_6[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_difference(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2))) FROM t_int_1_5_through_7_11
-- !query analysis
Aggregate [theta_sketch_estimate(theta_difference(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0))) AS theta_sketch_estimate(theta_difference(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12)))#xL]
+- SubqueryAlias spark_catalog.default.t_int_1_5_through_7_11
   +- Relation spark_catalog.default.t_int_1_5_through_7_11[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_difference(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2, 5))) FROM t_long_1_5_through_7_11
-- !query analysis
Aggregate [theta_sketch_estimate(theta_difference(theta_sketch_agg(col1#xL, 12, 0, 0), theta_sketch_agg(col2#xL, 5, 0, 0))) AS theta_sketch_estimate(theta_difference(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 5)))#xL]
+- SubqueryAlias spark_catalog.default.t_long_1_5_through_7_11
   +- Relation spark_catalog.default.t_long_1_5_through_7_11[col1#xL,col2#xL] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_difference(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2))) FROM t_double_1_1_1_4_through_1_5_1_8
-- !query analysis
Aggregate [theta_sketch_estimate(theta_difference(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0))) AS theta_sketch_estimate(theta_difference(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12)))#xL]
+- SubqueryAlias spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8
   +- Relation spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_difference(
    theta_sketch_agg(col1, 12),
    theta_sketch_agg(col2))) FROM t_float_1_1_1_4_through_1_5_1_8
-- !query analysis
Aggregate [theta_sketch_estimate(theta_difference(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0))) AS theta_sketch_estimate(theta_difference(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12)))#xL]
+- SubqueryAlias spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8
   +- Relation spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_difference(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2))) FROM t_string_a_d_through_e_h
-- !query analysis
Aggregate [theta_sketch_estimate(theta_difference(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0))) AS theta_sketch_estimate(theta_difference(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12)))#xL]
+- SubqueryAlias spark_catalog.default.t_string_a_d_through_e_h
   +- Relation spark_catalog.default.t_string_a_d_through_e_h[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_difference(
    theta_sketch_agg(col1, 6),
    theta_sketch_agg(col2, 8))) FROM t_binary_a_b_through_e_f
-- !query analysis
Aggregate [theta_sketch_estimate(theta_difference(theta_sketch_agg(col1#x, 6, 0, 0), theta_sketch_agg(col2#x, 8, 0, 0))) AS theta_sketch_estimate(theta_difference(theta_sketch_agg(col1, 6), theta_sketch_agg(col2, 8)))#xL]
+- SubqueryAlias spark_catalog.default.t_binary_a_b_through_e_f
   +- Relation spark_catalog.default.t_binary_a_b_through_e_f[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_difference(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2))) FROM t_array_int_1_3_through_4_6
-- !query analysis
Aggregate [theta_sketch_estimate(theta_difference(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 12, 0, 0))) AS theta_sketch_estimate(theta_difference(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12)))#xL]
+- SubqueryAlias spark_catalog.default.t_array_int_1_3_through_4_6
   +- Relation spark_catalog.default.t_array_int_1_3_through_4_6[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(
  theta_difference(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2, 4))) FROM t_array_long_1_3_through_4_6
-- !query analysis
Aggregate [theta_sketch_estimate(theta_difference(theta_sketch_agg(col1#x, 12, 0, 0), theta_sketch_agg(col2#x, 4, 0, 0))) AS theta_sketch_estimate(theta_difference(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 4)))#xL]
+- SubqueryAlias spark_catalog.default.t_array_long_1_3_through_4_6
   +- Relation spark_catalog.default.t_array_long_1_3_through_4_6[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_union_agg(sketch, 15))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_int_1_5_through_7_11
          UNION ALL
          SELECT theta_sketch_agg(col2, 20) as sketch FROM t_int_1_5_through_7_11)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union_agg(sketch#x, 15, 0, 0)) AS theta_sketch_estimate(theta_union_agg(sketch, 15))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_int_1_5_through_7_11
      :     +- Relation spark_catalog.default.t_int_1_5_through_7_11[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 20, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_int_1_5_through_7_11
            +- Relation spark_catalog.default.t_int_1_5_through_7_11[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_union_agg(sketch, 12))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_double_1_1_1_4_through_1_5_1_8
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_double_1_1_1_4_through_1_5_1_8)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union_agg(sketch#x, 12, 0, 0)) AS theta_sketch_estimate(theta_union_agg(sketch, 12))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8
      :     +- Relation spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8
            +- Relation spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_union_agg(sketch, 14))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_string_a_d_through_e_h
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_string_a_d_through_e_h)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union_agg(sketch#x, 14, 0, 0)) AS theta_sketch_estimate(theta_union_agg(sketch, 14))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_string_a_d_through_e_h
      :     +- Relation spark_catalog.default.t_string_a_d_through_e_h[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_string_a_d_through_e_h
            +- Relation spark_catalog.default.t_string_a_d_through_e_h[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_union_agg(sketch, 10))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_long_1_5_through_7_11
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_long_1_5_through_7_11)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union_agg(sketch#x, 10, 0, 0)) AS theta_sketch_estimate(theta_union_agg(sketch, 10))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#xL, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_long_1_5_through_7_11
      :     +- Relation spark_catalog.default.t_long_1_5_through_7_11[col1#xL,col2#xL] parquet
      +- Aggregate [theta_sketch_agg(col2#xL, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_long_1_5_through_7_11
            +- Relation spark_catalog.default.t_long_1_5_through_7_11[col1#xL,col2#xL] parquet


-- !query
SELECT theta_sketch_estimate(theta_union_agg(sketch, 6))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_float_1_1_1_4_through_1_5_1_8
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_float_1_1_1_4_through_1_5_1_8)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union_agg(sketch#x, 6, 0, 0)) AS theta_sketch_estimate(theta_union_agg(sketch, 6))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8
      :     +- Relation spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8
            +- Relation spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_union_agg(sketch))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_binary_a_b_through_e_f
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_binary_a_b_through_e_f)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union_agg(sketch#x, 12, 0, 0)) AS theta_sketch_estimate(theta_union_agg(sketch, 12))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_binary_a_b_through_e_f
      :     +- Relation spark_catalog.default.t_binary_a_b_through_e_f[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_binary_a_b_through_e_f
            +- Relation spark_catalog.default.t_binary_a_b_through_e_f[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_union_agg(sketch, 12))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_array_int_1_3_through_4_6
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_array_int_1_3_through_4_6)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union_agg(sketch#x, 12, 0, 0)) AS theta_sketch_estimate(theta_union_agg(sketch, 12))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_array_int_1_3_through_4_6
      :     +- Relation spark_catalog.default.t_array_int_1_3_through_4_6[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_array_int_1_3_through_4_6
            +- Relation spark_catalog.default.t_array_int_1_3_through_4_6[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_union_agg(sketch, 16))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_array_long_1_3_through_4_6
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_array_long_1_3_through_4_6)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_union_agg(sketch#x, 16, 0, 0)) AS theta_sketch_estimate(theta_union_agg(sketch, 16))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_array_long_1_3_through_4_6
      :     +- Relation spark_catalog.default.t_array_long_1_3_through_4_6[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_array_long_1_3_through_4_6
            +- Relation spark_catalog.default.t_array_long_1_3_through_4_6[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_intersection_agg(sketch))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_int_1_5_through_7_11
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_int_1_5_through_7_11)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection_agg(sketch#x, 0, 0)) AS theta_sketch_estimate(theta_intersection_agg(sketch))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_int_1_5_through_7_11
      :     +- Relation spark_catalog.default.t_int_1_5_through_7_11[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_int_1_5_through_7_11
            +- Relation spark_catalog.default.t_int_1_5_through_7_11[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_intersection_agg(sketch))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_long_1_5_through_7_11
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_long_1_5_through_7_11)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection_agg(sketch#x, 0, 0)) AS theta_sketch_estimate(theta_intersection_agg(sketch))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#xL, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_long_1_5_through_7_11
      :     +- Relation spark_catalog.default.t_long_1_5_through_7_11[col1#xL,col2#xL] parquet
      +- Aggregate [theta_sketch_agg(col2#xL, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_long_1_5_through_7_11
            +- Relation spark_catalog.default.t_long_1_5_through_7_11[col1#xL,col2#xL] parquet


-- !query
SELECT theta_sketch_estimate(theta_intersection_agg(sketch))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_float_1_1_1_4_through_1_5_1_8
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_float_1_1_1_4_through_1_5_1_8)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection_agg(sketch#x, 0, 0)) AS theta_sketch_estimate(theta_intersection_agg(sketch))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8
      :     +- Relation spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8
            +- Relation spark_catalog.default.t_float_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_intersection_agg(sketch))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_double_1_1_1_4_through_1_5_1_8
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_double_1_1_1_4_through_1_5_1_8)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection_agg(sketch#x, 0, 0)) AS theta_sketch_estimate(theta_intersection_agg(sketch))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8
      :     +- Relation spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8
            +- Relation spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_intersection_agg(sketch))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_string_a_d_through_e_h
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_string_a_d_through_e_h)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection_agg(sketch#x, 0, 0)) AS theta_sketch_estimate(theta_intersection_agg(sketch))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_string_a_d_through_e_h
      :     +- Relation spark_catalog.default.t_string_a_d_through_e_h[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_string_a_d_through_e_h
            +- Relation spark_catalog.default.t_string_a_d_through_e_h[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_intersection_agg(sketch))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_binary_a_b_through_e_f
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_binary_a_b_through_e_f)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection_agg(sketch#x, 0, 0)) AS theta_sketch_estimate(theta_intersection_agg(sketch))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_binary_a_b_through_e_f
      :     +- Relation spark_catalog.default.t_binary_a_b_through_e_f[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_binary_a_b_through_e_f
            +- Relation spark_catalog.default.t_binary_a_b_through_e_f[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_intersection_agg(sketch))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_array_int_1_3_through_4_6
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_array_int_1_3_through_4_6)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection_agg(sketch#x, 0, 0)) AS theta_sketch_estimate(theta_intersection_agg(sketch))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_array_int_1_3_through_4_6
      :     +- Relation spark_catalog.default.t_array_int_1_3_through_4_6[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_array_int_1_3_through_4_6
            +- Relation spark_catalog.default.t_array_int_1_3_through_4_6[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_intersection_agg(sketch))
    FROM (SELECT theta_sketch_agg(col1) as sketch FROM t_array_long_1_3_through_4_6
          UNION ALL
          SELECT theta_sketch_agg(col2) as sketch FROM t_array_long_1_3_through_4_6)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_intersection_agg(sketch#x, 0, 0)) AS theta_sketch_estimate(theta_intersection_agg(sketch))#xL]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias spark_catalog.default.t_array_long_1_3_through_4_6
      :     +- Relation spark_catalog.default.t_array_long_1_3_through_4_6[col1#x,col2#x] parquet
      +- Aggregate [theta_sketch_agg(col2#x, 12, 0, 0) AS sketch#x]
         +- SubqueryAlias spark_catalog.default.t_array_long_1_3_through_4_6
            +- Relation spark_catalog.default.t_array_long_1_3_through_4_6[col1#x,col2#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col))
FROM VALUES (1), (null), (2), (null), (3) tab(col)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col, 12))#xL]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col))
FROM VALUES ('test'), (null), ('null'), (null) tab(col)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col, 12))#xL]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col))
FROM VALUES (100L), (null), (200L), (null), (300L) tab(col)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col#xL, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col, 12))#xL]
+- SubqueryAlias tab
   +- LocalRelation [col#xL]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(CAST(col AS DOUBLE)))
FROM VALUES (1.1), (null), (2.2), (null), (3.3) tab(col)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(cast(col#x as double), 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(CAST(col AS DOUBLE), 12))#xL]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(CAST(col AS FLOAT)))
FROM VALUES (1.5), (null), (2.5), (null), (3.5) tab(col)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(cast(col#x as float), 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(CAST(col AS FLOAT), 12))#xL]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col))
FROM VALUES (X'AA'), (null), (X'BB'), (null), (X'CC') tab(col)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col, 12))#xL]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col))
FROM VALUES (ARRAY(1, 2)), (null), (ARRAY(3, 4)), (null), (ARRAY(5, 6)) tab(col)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col, 12))#xL]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col))
FROM VALUES (ARRAY(10L, 20L)), (null), (ARRAY(30L, 40L)), (null), (ARRAY(50L, 60L)) tab(col)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col, 12))#xL]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col))
FROM VALUES (ARRAY(1, null)), (ARRAY(1)), (ARRAY(2, null, 3)), (ARRAY(4)) tab(col)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col, 12))#xL]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col))
FROM VALUES (ARRAY(10L, null)), (ARRAY(10L)), (ARRAY(20L, null, 30L)), (ARRAY(40L)) tab(col)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col, 12))#xL]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col))
FROM VALUES (ARRAY()), (ARRAY(1, 2)), (ARRAY()), (ARRAY(3, 4)) tab(col)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col, 12))#xL]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col))
FROM VALUES (''), ('a'), (''), ('b'), ('c') tab(col)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col, 12))#xL]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col))
FROM VALUES (X''), (X'01'), (X'02'), (X'03'), (CAST('  ' AS BINARY)), (X'e280'), (X'c1'), (X'c120') tab(col)
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col#x, 12, 0, 0)) AS theta_sketch_estimate(theta_sketch_agg(col, 12))#xL]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1)) utf8_b FROM t_string_collation
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(col1#x, 12, 0, 0)) AS utf8_b#xL]
+- SubqueryAlias spark_catalog.default.t_string_collation
   +- Relation spark_catalog.default.t_string_collation[col1#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1 COLLATE UTF8_LCASE)) utf8_lc FROM t_string_collation
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(collate(col1#x, UTF8_LCASE), 12, 0, 0)) AS utf8_lc#xL]
+- SubqueryAlias spark_catalog.default.t_string_collation
   +- Relation spark_catalog.default.t_string_collation[col1#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1 COLLATE UNICODE)) unicode FROM t_string_collation
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(collate(col1#x, UNICODE), 12, 0, 0)) AS unicode#xL]
+- SubqueryAlias spark_catalog.default.t_string_collation
   +- Relation spark_catalog.default.t_string_collation[col1#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1 COLLATE UNICODE_CI)) unicode_ci FROM t_string_collation
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(collate(col1#x, UNICODE_CI), 12, 0, 0)) AS unicode_ci#xL]
+- SubqueryAlias spark_catalog.default.t_string_collation
   +- Relation spark_catalog.default.t_string_collation[col1#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1 COLLATE UTF8_BINARY_RTRIM)) utf8_b_rt FROM t_string_collation
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(collate(col1#x, UTF8_BINARY_RTRIM), 12, 0, 0)) AS utf8_b_rt#xL]
+- SubqueryAlias spark_catalog.default.t_string_collation
   +- Relation spark_catalog.default.t_string_collation[col1#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1 COLLATE UTF8_LCASE_RTRIM)) utf8_lc_rt FROM t_string_collation
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(collate(col1#x, UTF8_LCASE_RTRIM), 12, 0, 0)) AS utf8_lc_rt#xL]
+- SubqueryAlias spark_catalog.default.t_string_collation
   +- Relation spark_catalog.default.t_string_collation[col1#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1 COLLATE UNICODE_RTRIM)) unicode_rt FROM t_string_collation
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(collate(col1#x, UNICODE_RTRIM), 12, 0, 0)) AS unicode_rt#xL]
+- SubqueryAlias spark_catalog.default.t_string_collation
   +- Relation spark_catalog.default.t_string_collation[col1#x] parquet


-- !query
SELECT theta_sketch_estimate(theta_sketch_agg(col1 COLLATE UNICODE_CI_RTRIM)) unicode_ci_rt FROM t_string_collation
-- !query analysis
Aggregate [theta_sketch_estimate(theta_sketch_agg(collate(col1#x, UNICODE_CI_RTRIM), 12, 0, 0)) AS unicode_ci_rt#xL]
+- SubqueryAlias spark_catalog.default.t_string_collation
   +- Relation spark_catalog.default.t_string_collation[col1#x] parquet


-- !query
WITH sketches AS (
  SELECT 'int_sketch' as sketch_type, theta_sketch_agg(col1, 12) as sketch FROM t_int_1_5_through_7_11
  UNION ALL
  SELECT 'long_sketch' as sketch_type, theta_sketch_agg(col1, 15) as sketch FROM t_long_1_5_through_7_11
  UNION ALL
  SELECT 'double_sketch' as sketch_type, theta_sketch_agg(col1, 10) as sketch FROM t_double_1_1_1_4_through_1_5_1_8
  UNION ALL
  SELECT 'string_sketch' as sketch_type, theta_sketch_agg(col1, 14) as sketch FROM t_string_a_d_through_e_h
),
union_result AS (
  SELECT theta_union_agg(sketch, 16) as union_sketch FROM sketches
),
individual_sketches AS (
  SELECT theta_sketch_agg(col1, 12) as sketch1, theta_sketch_agg(col2, 12) as sketch2 FROM t_int_1_5_through_7_11
)
SELECT 
  theta_sketch_estimate((SELECT union_sketch FROM union_result)) as union_estimate,
  theta_sketch_estimate(theta_union(sketch1, sketch2, 15)) as binary_union_estimate,
  theta_sketch_estimate(theta_intersection(sketch1, sketch2)) as intersection_estimate,
  theta_sketch_estimate(theta_difference(sketch1, sketch2)) as difference_estimate
FROM individual_sketches
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias sketches
:     +- Union false, false
:        :- Union false, false
:        :  :- Union false, false
:        :  :  :- Aggregate [int_sketch AS sketch_type#x, theta_sketch_agg(col1#x, 12, 0, 0) AS sketch#x]
:        :  :  :  +- SubqueryAlias spark_catalog.default.t_int_1_5_through_7_11
:        :  :  :     +- Relation spark_catalog.default.t_int_1_5_through_7_11[col1#x,col2#x] parquet
:        :  :  +- Aggregate [long_sketch AS sketch_type#x, theta_sketch_agg(col1#xL, 15, 0, 0) AS sketch#x]
:        :  :     +- SubqueryAlias spark_catalog.default.t_long_1_5_through_7_11
:        :  :        +- Relation spark_catalog.default.t_long_1_5_through_7_11[col1#xL,col2#xL] parquet
:        :  +- Aggregate [double_sketch AS sketch_type#x, theta_sketch_agg(col1#x, 10, 0, 0) AS sketch#x]
:        :     +- SubqueryAlias spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8
:        :        +- Relation spark_catalog.default.t_double_1_1_1_4_through_1_5_1_8[col1#x,col2#x] parquet
:        +- Aggregate [string_sketch AS sketch_type#x, theta_sketch_agg(col1#x, 14, 0, 0) AS sketch#x]
:           +- SubqueryAlias spark_catalog.default.t_string_a_d_through_e_h
:              +- Relation spark_catalog.default.t_string_a_d_through_e_h[col1#x,col2#x] parquet
:- CTERelationDef xxxx, false
:  +- SubqueryAlias union_result
:     +- Aggregate [theta_union_agg(sketch#x, 16, 0, 0) AS union_sketch#x]
:        +- SubqueryAlias sketches
:           +- CTERelationRef xxxx, true, [sketch_type#x, sketch#x], false, false, 4, false
:- CTERelationDef xxxx, false
:  +- SubqueryAlias individual_sketches
:     +- Aggregate [theta_sketch_agg(col1#x, 12, 0, 0) AS sketch1#x, theta_sketch_agg(col2#x, 12, 0, 0) AS sketch2#x]
:        +- SubqueryAlias spark_catalog.default.t_int_1_5_through_7_11
:           +- Relation spark_catalog.default.t_int_1_5_through_7_11[col1#x,col2#x] parquet
+- Project [theta_sketch_estimate(scalar-subquery#x []) AS union_estimate#xL, theta_sketch_estimate(theta_union(sketch1#x, sketch2#x, 15)) AS binary_union_estimate#xL, theta_sketch_estimate(theta_intersection(sketch1#x, sketch2#x)) AS intersection_estimate#xL, theta_sketch_estimate(theta_difference(sketch1#x, sketch2#x)) AS difference_estimate#xL]
   :  +- Project [union_sketch#x]
   :     +- SubqueryAlias union_result
   :        +- CTERelationRef xxxx, true, [union_sketch#x], false, false, 1, false
   +- SubqueryAlias individual_sketches
      +- CTERelationRef xxxx, true, [sketch1#x, sketch2#x], false, false, 1, false


-- !query
SELECT theta_sketch_agg(col, 2)
FROM VALUES (50), (60), (60) tab(col)
-- !query analysis
Aggregate [theta_sketch_agg(col#x, 2, 0, 0) AS theta_sketch_agg(col, 2)#x]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_sketch_agg(col, 40)
FROM VALUES (50), (60), (60) tab(col)
-- !query analysis
Aggregate [theta_sketch_agg(col#x, 40, 0, 0) AS theta_sketch_agg(col, 40)#x]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT theta_union_agg(sketch, 3)
FROM (SELECT theta_sketch_agg(col, 12) as sketch
        FROM VALUES (1) AS tab(col)
      UNION ALL
      SELECT theta_sketch_agg(col, 20) as sketch
        FROM VALUES (1) AS tab(col))
-- !query analysis
Aggregate [theta_union_agg(sketch#x, 3, 0, 0) AS theta_union_agg(sketch, 3)#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias tab
      :     +- LocalRelation [col#x]
      +- Aggregate [theta_sketch_agg(col#x, 20, 0, 0) AS sketch#x]
         +- SubqueryAlias tab
            +- LocalRelation [col#x]


-- !query
SELECT theta_union_agg(sketch, 27)
FROM (SELECT theta_sketch_agg(col, 12) as sketch
        FROM VALUES (1) AS tab(col)
      UNION ALL
      SELECT theta_sketch_agg(col, 20) as sketch
        FROM VALUES (1) AS tab(col))
-- !query analysis
Aggregate [theta_union_agg(sketch#x, 27, 0, 0) AS theta_union_agg(sketch, 27)#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Union false, false
      :- Aggregate [theta_sketch_agg(col#x, 12, 0, 0) AS sketch#x]
      :  +- SubqueryAlias tab
      :     +- LocalRelation [col#x]
      +- Aggregate [theta_sketch_agg(col#x, 20, 0, 0) AS sketch#x]
         +- SubqueryAlias tab
            +- LocalRelation [col#x]


-- !query
SELECT theta_union(1, 2)
  FROM VALUES
    (1, 4),
    (2, 5),
    (3, 6) AS tab(col1, col2)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"1\"",
    "inputType" : "\"INT\"",
    "paramIndex" : "first",
    "requiredType" : "\"BINARY\"",
    "sqlExpr" : "\"theta_union(1, 2, 12)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 24,
    "fragment" : "theta_union(1, 2)"
  } ]
}


-- !query
SELECT theta_intersection(1, 2)
  FROM VALUES
    (1, 4),
    (2, 5),
    (3, 6) AS tab(col1, col2)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"1\"",
    "inputType" : "\"INT\"",
    "paramIndex" : "first",
    "requiredType" : "\"BINARY\"",
    "sqlExpr" : "\"theta_intersection(1, 2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 31,
    "fragment" : "theta_intersection(1, 2)"
  } ]
}


-- !query
SELECT theta_difference(1, 2)
  FROM VALUES
    (1, 4),
    (2, 5),
    (3, 6) AS tab(col1, col2)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"1\"",
    "inputType" : "\"INT\"",
    "paramIndex" : "first",
    "requiredType" : "\"BINARY\"",
    "sqlExpr" : "\"theta_difference(1, 2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 29,
    "fragment" : "theta_difference(1, 2)"
  } ]
}


-- !query
SELECT theta_union(
    theta_sketch_agg(col1),
    theta_sketch_agg(col2), 'invalid')
  FROM VALUES
    (1, 4),
    (2, 5),
    (3, 6) AS tab(col1, col2)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"invalid\"",
    "inputType" : "\"STRING\"",
    "paramIndex" : "third",
    "requiredType" : "\"INT\"",
    "sqlExpr" : "\"theta_union(theta_sketch_agg(col1, 12), theta_sketch_agg(col2, 12), invalid)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 86,
    "fragment" : "theta_union(\n    theta_sketch_agg(col1),\n    theta_sketch_agg(col2), 'invalid')"
  } ]
}


-- !query
SELECT theta_intersection(
    theta_sketch_agg(col1),
    'invalid_sketch')
  FROM VALUES
    (1, 4),
    (2, 5),
    (3, 6) AS tab(col1, col2)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"invalid_sketch\"",
    "inputType" : "\"STRING\"",
    "paramIndex" : "second",
    "requiredType" : "\"BINARY\"",
    "sqlExpr" : "\"theta_intersection(theta_sketch_agg(col1, 12), invalid_sketch)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 76,
    "fragment" : "theta_intersection(\n    theta_sketch_agg(col1),\n    'invalid_sketch')"
  } ]
}


-- !query
SELECT theta_sketch_estimate(CAST('abc' AS BINARY))
-- !query analysis
Project [theta_sketch_estimate(cast(abc as binary)) AS theta_sketch_estimate(CAST(abc AS BINARY))#xL]
+- OneRowRelation


-- !query
SELECT theta_union(CAST('abc' AS BINARY), CAST('def' AS BINARY))
-- !query analysis
Project [theta_union(cast(abc as binary), cast(def as binary), 12) AS theta_union(CAST(abc AS BINARY), CAST(def AS BINARY), 12)#x]
+- OneRowRelation


-- !query
SELECT theta_intersection(CAST('abc' AS BINARY), CAST('def' AS BINARY))
-- !query analysis
Project [theta_intersection(cast(abc as binary), cast(def as binary)) AS theta_intersection(CAST(abc AS BINARY), CAST(def AS BINARY))#x]
+- OneRowRelation


-- !query
SELECT theta_difference(CAST('abc' AS BINARY), CAST('def' AS BINARY))
-- !query analysis
Project [theta_difference(cast(abc as binary), cast(def as binary)) AS theta_difference(CAST(abc AS BINARY), CAST(def AS BINARY))#x]
+- OneRowRelation


-- !query
SELECT theta_union_agg(buffer, 15)
FROM (SELECT CAST('abc' AS BINARY) AS buffer)
-- !query analysis
Aggregate [theta_union_agg(buffer#x, 15, 0, 0) AS theta_union_agg(buffer, 15)#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [cast(abc as binary) AS buffer#x]
      +- OneRowRelation


-- !query
SELECT theta_intersection_agg(buffer)
FROM (SELECT CAST('abc' AS BINARY) AS buffer)
-- !query analysis
Aggregate [theta_intersection_agg(buffer#x, 0, 0) AS theta_intersection_agg(buffer)#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [cast(abc as binary) AS buffer#x]
      +- OneRowRelation


-- !query
DROP TABLE IF EXISTS t_int_1_5_through_7_11
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_int_1_5_through_7_11


-- !query
DROP TABLE IF EXISTS t_long_1_5_through_7_11
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_long_1_5_through_7_11


-- !query
DROP TABLE IF EXISTS t_double_1_1_1_4_through_1_5_1_8
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_double_1_1_1_4_through_1_5_1_8


-- !query
DROP TABLE IF EXISTS t_float_1_1_1_4_through_1_5_1_8
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_float_1_1_1_4_through_1_5_1_8


-- !query
DROP TABLE IF EXISTS t_string_a_d_through_e_h
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_string_a_d_through_e_h


-- !query
DROP TABLE IF EXISTS t_binary_a_b_through_e_f
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_binary_a_b_through_e_f


-- !query
DROP TABLE IF EXISTS t_array_int_1_3_through_4_6
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_array_int_1_3_through_4_6


-- !query
DROP TABLE IF EXISTS t_array_long_1_3_through_4_6
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_array_long_1_3_through_4_6


-- !query
DROP TABLE IF EXISTS t_string_collation
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t_string_collation
