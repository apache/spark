-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE OR REPLACE TEMPORARY VIEW testData AS SELECT * FROM VALUES (1, 1), (1, 2), (2, 1) AS testData(a, b)
-- !query analysis
CreateViewCommand `testData`, SELECT * FROM VALUES (1, 1), (1, 2), (2, 1) AS testData(a, b), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [a#x, b#x]
      +- SubqueryAlias testData
         +- LocalRelation [a#x, b#x]


-- !query
SELECT * FROM testData AS t(col1, col2) WHERE col1 = 1
-- !query analysis
Project [col1#x, col2#x]
+- Filter (col1#x = 1)
   +- SubqueryAlias t
      +- Project [a#x AS col1#x, b#x AS col2#x]
         +- SubqueryAlias testdata
            +- View (`testData`, [a#x, b#x])
               +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x]
                  +- Project [a#x, b#x]
                     +- SubqueryAlias testData
                        +- LocalRelation [a#x, b#x]


-- !query
SELECT * FROM testData AS t(col1, col2) WHERE col1 = 2
-- !query analysis
Project [col1#x, col2#x]
+- Filter (col1#x = 2)
   +- SubqueryAlias t
      +- Project [a#x AS col1#x, b#x AS col2#x]
         +- SubqueryAlias testdata
            +- View (`testData`, [a#x, b#x])
               +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x]
                  +- Project [a#x, b#x]
                     +- SubqueryAlias testData
                        +- LocalRelation [a#x, b#x]


-- !query
SELECT col1 AS k, SUM(col2) FROM testData AS t(col1, col2) GROUP BY k
-- !query analysis
Aggregate [col1#x], [col1#x AS k#x, sum(col2#x) AS sum(col2)#xL]
+- SubqueryAlias t
   +- Project [a#x AS col1#x, b#x AS col2#x]
      +- SubqueryAlias testdata
         +- View (`testData`, [a#x, b#x])
            +- Project [cast(a#x as int) AS a#x, cast(b#x as int) AS b#x]
               +- Project [a#x, b#x]
                  +- SubqueryAlias testData
                     +- LocalRelation [a#x, b#x]


-- !query
SELECT * FROM testData AS t(col1, col2, col3)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "ASSIGNMENT_ARITY_MISMATCH",
  "sqlState" : "42802",
  "messageParameters" : {
    "numExpr" : "3",
    "numTarget" : "2"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 15,
    "stopIndex" : 45,
    "fragment" : "testData AS t(col1, col2, col3)"
  } ]
}


-- !query
SELECT * FROM testData AS t(col1)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "ASSIGNMENT_ARITY_MISMATCH",
  "sqlState" : "42802",
  "messageParameters" : {
    "numExpr" : "1",
    "numTarget" : "2"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 15,
    "stopIndex" : 33,
    "fragment" : "testData AS t(col1)"
  } ]
}


-- !query
SELECT a AS col1, b AS col2 FROM testData AS t(c, d)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`a`",
    "proposal" : "`c`, `d`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 8,
    "fragment" : "a"
  } ]
}


-- !query
SELECT * FROM (SELECT 1 AS a, 1 AS b) t(col1, col2)
-- !query analysis
Project [col1#x, col2#x]
+- SubqueryAlias t
   +- Project [a#x AS col1#x, b#x AS col2#x]
      +- Project [1 AS a#x, 1 AS b#x]
         +- OneRowRelation


-- !query
SELECT t.* FROM (SELECT 1 AS a, 1 AS b) t(col1, col2)
-- !query analysis
Project [col1#x, col2#x]
+- SubqueryAlias t
   +- Project [a#x AS col1#x, b#x AS col2#x]
      +- Project [1 AS a#x, 1 AS b#x]
         +- OneRowRelation


-- !query
SELECT col1, col2 FROM (SELECT 1 AS a, 1 AS b) t(col1, col2)
-- !query analysis
Project [col1#x, col2#x]
+- SubqueryAlias t
   +- Project [a#x AS col1#x, b#x AS col2#x]
      +- Project [1 AS a#x, 1 AS b#x]
         +- OneRowRelation


-- !query
SELECT t.col1, t.col2 FROM (SELECT 1 AS a, 1 AS b) t(col1, col2)
-- !query analysis
Project [col1#x, col2#x]
+- SubqueryAlias t
   +- Project [a#x AS col1#x, b#x AS col2#x]
      +- Project [1 AS a#x, 1 AS b#x]
         +- OneRowRelation


-- !query
CREATE OR REPLACE TEMPORARY VIEW src1 AS SELECT * FROM VALUES (1, "a"), (2, "b"), (3, "c") AS src1(id, v1)
-- !query analysis
CreateViewCommand `src1`, SELECT * FROM VALUES (1, "a"), (2, "b"), (3, "c") AS src1(id, v1), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [id#x, v1#x]
      +- SubqueryAlias src1
         +- LocalRelation [id#x, v1#x]


-- !query
CREATE OR REPLACE TEMPORARY VIEW src2 AS SELECT * FROM VALUES (2, 1.0), (3, 3.2), (1, 8.5) AS src2(id, v2)
-- !query analysis
CreateViewCommand `src2`, SELECT * FROM VALUES (2, 1.0), (3, 3.2), (1, 8.5) AS src2(id, v2), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [id#x, v2#x]
      +- SubqueryAlias src2
         +- LocalRelation [id#x, v2#x]


-- !query
SELECT * FROM (src1 s1 INNER JOIN src2 s2 ON s1.id = s2.id) dst(a, b, c, d)
-- !query analysis
Project [a#x, b#x, c#x, d#x]
+- SubqueryAlias dst
   +- Project [id#x AS a#x, v1#x AS b#x, id#x AS c#x, v2#x AS d#x]
      +- Join Inner, (id#x = id#x)
         :- SubqueryAlias s1
         :  +- SubqueryAlias src1
         :     +- View (`src1`, [id#x, v1#x])
         :        +- Project [cast(id#x as int) AS id#x, cast(v1#x as string) AS v1#x]
         :           +- Project [id#x, v1#x]
         :              +- SubqueryAlias src1
         :                 +- LocalRelation [id#x, v1#x]
         +- SubqueryAlias s2
            +- SubqueryAlias src2
               +- View (`src2`, [id#x, v2#x])
                  +- Project [cast(id#x as int) AS id#x, cast(v2#x as decimal(2,1)) AS v2#x]
                     +- Project [id#x, v2#x]
                        +- SubqueryAlias src2
                           +- LocalRelation [id#x, v2#x]


-- !query
SELECT dst.* FROM (src1 s1 INNER JOIN src2 s2 ON s1.id = s2.id) dst(a, b, c, d)
-- !query analysis
Project [a#x, b#x, c#x, d#x]
+- SubqueryAlias dst
   +- Project [id#x AS a#x, v1#x AS b#x, id#x AS c#x, v2#x AS d#x]
      +- Join Inner, (id#x = id#x)
         :- SubqueryAlias s1
         :  +- SubqueryAlias src1
         :     +- View (`src1`, [id#x, v1#x])
         :        +- Project [cast(id#x as int) AS id#x, cast(v1#x as string) AS v1#x]
         :           +- Project [id#x, v1#x]
         :              +- SubqueryAlias src1
         :                 +- LocalRelation [id#x, v1#x]
         +- SubqueryAlias s2
            +- SubqueryAlias src2
               +- View (`src2`, [id#x, v2#x])
                  +- Project [cast(id#x as int) AS id#x, cast(v2#x as decimal(2,1)) AS v2#x]
                     +- Project [id#x, v2#x]
                        +- SubqueryAlias src2
                           +- LocalRelation [id#x, v2#x]


-- !query
SELECT src1.* FROM src1 a ORDER BY id LIMIT 1
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "CANNOT_RESOLVE_STAR_EXPAND",
  "sqlState" : "42704",
  "messageParameters" : {
    "columns" : "`id`, `v1`",
    "targetString" : "`src1`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 13,
    "fragment" : "src1.*"
  } ]
}


-- !query
SELECT src1.id FROM (SELECT * FROM src1 ORDER BY id LIMIT 1) a
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`src1`.`id`",
    "proposal" : "`a`.`id`, `a`.`v1`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 14,
    "fragment" : "src1.id"
  } ]
}
