-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE OR REPLACE TEMPORARY VIEW testData AS SELECT * FROM VALUES
('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c', 1), ('c', 2), (null, 1), ('c', null), (null, null)
AS testData(ColumnA, ColumnB)
-- !query analysis
CreateViewCommand `testData`, SELECT * FROM VALUES
('a', 1), ('a', 2), ('b', 1), ('b', 2), ('c', 1), ('c', 2), (null, 1), ('c', null), (null, null)
AS testData(ColumnA, ColumnB), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [ColumnA#x, ColumnB#x]
      +- SubqueryAlias testData
         +- LocalRelation [ColumnA#x, ColumnB#x]


-- !query
SET spark.sql.ansi.enabled = false
-- !query analysis
SetCommand (spark.sql.ansi.enabled,Some(false))


-- !query
CREATE TEMPORARY VIEW view_ansi AS SELECT ColumnA + 1 FROM testData
-- !query analysis
CreateViewCommand `view_ansi`, SELECT ColumnA + 1 FROM testData, false, false, LocalTempView, UNSUPPORTED, true
   +- Project [(cast(ColumnA#x as double) + cast(1 as double)) AS (ColumnA + 1)#x]
      +- SubqueryAlias testdata
         +- View (`testData`, [ColumnA#x, ColumnB#x])
            +- Project [cast(ColumnA#x as string) AS ColumnA#x, cast(ColumnB#x as int) AS ColumnB#x]
               +- Project [ColumnA#x, ColumnB#x]
                  +- SubqueryAlias testData
                     +- LocalRelation [ColumnA#x, ColumnB#x]


-- !query
SET spark.sql.ansi.enabled = true
-- !query analysis
SetCommand (spark.sql.ansi.enabled,Some(true))


-- !query
SELECT * FROM view_ansi
-- !query analysis
Project [(ColumnA + 1)#x]
+- SubqueryAlias view_ansi
   +- View (`view_ansi`, [(ColumnA + 1)#x])
      +- Project [cast((ColumnA + 1)#x as double) AS (ColumnA + 1)#x]
         +- Project [(cast(ColumnA#x as double) + cast(1 as double)) AS (ColumnA + 1)#x]
            +- SubqueryAlias testdata
               +- View (`testData`, [ColumnA#x, ColumnB#x])
                  +- Project [cast(ColumnA#x as string) AS ColumnA#x, cast(ColumnB#x as int) AS ColumnB#x]
                     +- Project [ColumnA#x, ColumnB#x]
                        +- SubqueryAlias testData
                           +- LocalRelation [ColumnA#x, ColumnB#x]


-- !query
SET spark.sql.caseSensitive = false
-- !query analysis
SetCommand (spark.sql.caseSensitive,Some(false))


-- !query
CREATE TEMPORARY VIEW view_case_sensitivity AS SELECT CoLuMNa FROM testData
-- !query analysis
CreateViewCommand `view_case_sensitivity`, SELECT CoLuMNa FROM testData, false, false, LocalTempView, UNSUPPORTED, true
   +- Project [CoLuMNa#x]
      +- SubqueryAlias testdata
         +- View (`testData`, [ColumnA#x, ColumnB#x])
            +- Project [cast(ColumnA#x as string) AS ColumnA#x, cast(ColumnB#x as int) AS ColumnB#x]
               +- Project [ColumnA#x, ColumnB#x]
                  +- SubqueryAlias testData
                     +- LocalRelation [ColumnA#x, ColumnB#x]


-- !query
SET spark.sql.caseSensitive = true
-- !query analysis
SetCommand (spark.sql.caseSensitive,Some(true))


-- !query
SELECT * FROM view_case_sensitivity
-- !query analysis
Project [CoLuMNa#x]
+- SubqueryAlias view_case_sensitivity
   +- View (`view_case_sensitivity`, [CoLuMNa#x])
      +- Project [cast(CoLuMNa#x as string) AS CoLuMNa#x]
         +- Project [CoLuMNa#x]
            +- SubqueryAlias testdata
               +- View (`testData`, [ColumnA#x, ColumnB#x])
                  +- Project [cast(ColumnA#x as string) AS ColumnA#x, cast(ColumnB#x as int) AS ColumnB#x]
                     +- Project [ColumnA#x, ColumnB#x]
                        +- SubqueryAlias testData
                           +- LocalRelation [ColumnA#x, ColumnB#x]


-- !query
DROP VIEW IF EXISTS view_ansi
-- !query analysis
DropTempViewCommand view_ansi


-- !query
DROP VIEW IF EXISTS view_case_sensitivity
-- !query analysis
DropTempViewCommand view_case_sensitivity
