-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TEMP VIEW df AS
SELECT * FROM (VALUES ('a', 'b'), ('a', 'c'), ('b', 'c'), ('b', 'd'), (NULL, NULL))
-- !query analysis
CreateViewCommand `df`, SELECT * FROM (VALUES ('a', 'b'), ('a', 'c'), ('b', 'c'), ('b', 'd'), (NULL, NULL)), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [col1#x, col2#x]
      +- SubqueryAlias __auto_generated_subquery_name
         +- LocalRelation [col1#x, col2#x]


-- !query
CREATE TEMP VIEW df2 AS
SELECT * FROM (VALUES (1, true), (2, false), (3, false))
-- !query analysis
CreateViewCommand `df2`, SELECT * FROM (VALUES (1, true), (2, false), (3, false)), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [col1#x, col2#x]
      +- SubqueryAlias __auto_generated_subquery_name
         +- LocalRelation [col1#x, col2#x]


-- !query
WITH t(col) AS (SELECT listagg(col2) FROM df GROUP BY col1) SELECT len(col), regexp_count(col, 'a'), regexp_count(col, 'b'), regexp_count(col, 'c'), regexp_count(col, 'd') FROM t
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t
:     +- Project [listagg(col2, NULL)#x AS col#x]
:        +- Aggregate [col1#x], [listagg(col2#x, null, 0, 0) AS listagg(col2, NULL)#x]
:           +- SubqueryAlias df
:              +- View (`df`, [col1#x, col2#x])
:                 +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
:                    +- Project [col1#x, col2#x]
:                       +- SubqueryAlias __auto_generated_subquery_name
:                          +- LocalRelation [col1#x, col2#x]
+- Project [len(col#x) AS len(col)#x, regexp_count(col#x, a) AS regexp_count(col, a)#x, regexp_count(col#x, b) AS regexp_count(col, b)#x, regexp_count(col#x, c) AS regexp_count(col, c)#x, regexp_count(col#x, d) AS regexp_count(col, d)#x]
   +- SubqueryAlias t
      +- CTERelationRef xxxx, true, [col#x], false, false


-- !query
WITH t(col) AS (SELECT string_agg(col2) FROM df GROUP BY col1) SELECT len(col), regexp_count(col, 'a'), regexp_count(col, 'b'), regexp_count(col, 'c'), regexp_count(col, 'd') FROM t
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t
:     +- Project [string_agg(col2, NULL)#x AS col#x]
:        +- Aggregate [col1#x], [string_agg(col2#x, null, 0, 0) AS string_agg(col2, NULL)#x]
:           +- SubqueryAlias df
:              +- View (`df`, [col1#x, col2#x])
:                 +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
:                    +- Project [col1#x, col2#x]
:                       +- SubqueryAlias __auto_generated_subquery_name
:                          +- LocalRelation [col1#x, col2#x]
+- Project [len(col#x) AS len(col)#x, regexp_count(col#x, a) AS regexp_count(col, a)#x, regexp_count(col#x, b) AS regexp_count(col, b)#x, regexp_count(col#x, c) AS regexp_count(col, c)#x, regexp_count(col#x, d) AS regexp_count(col, d)#x]
   +- SubqueryAlias t
      +- CTERelationRef xxxx, true, [col#x], false, false


-- !query
WITH t(col) AS (SELECT listagg(col2, NULL) FROM df GROUP BY col1) SELECT len(col), regexp_count(col, 'a'), regexp_count(col, 'b'), regexp_count(col, 'c'), regexp_count(col, 'd') FROM t
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t
:     +- Project [listagg(col2, NULL)#x AS col#x]
:        +- Aggregate [col1#x], [listagg(col2#x, null, 0, 0) AS listagg(col2, NULL)#x]
:           +- SubqueryAlias df
:              +- View (`df`, [col1#x, col2#x])
:                 +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
:                    +- Project [col1#x, col2#x]
:                       +- SubqueryAlias __auto_generated_subquery_name
:                          +- LocalRelation [col1#x, col2#x]
+- Project [len(col#x) AS len(col)#x, regexp_count(col#x, a) AS regexp_count(col, a)#x, regexp_count(col#x, b) AS regexp_count(col, b)#x, regexp_count(col#x, c) AS regexp_count(col, c)#x, regexp_count(col#x, d) AS regexp_count(col, d)#x]
   +- SubqueryAlias t
      +- CTERelationRef xxxx, true, [col#x], false, false


-- !query
SELECT listagg(col2) FROM df WHERE 1 != 1
-- !query analysis
Aggregate [listagg(col2#x, null, 0, 0) AS listagg(col2, NULL)#x]
+- Filter NOT (1 = 1)
   +- SubqueryAlias df
      +- View (`df`, [col1#x, col2#x])
         +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
            +- Project [col1#x, col2#x]
               +- SubqueryAlias __auto_generated_subquery_name
                  +- LocalRelation [col1#x, col2#x]


-- !query
WITH t(col) AS (SELECT listagg(col2, '|') FROM df GROUP BY col1) SELECT len(col), regexp_count(col, 'a'), regexp_count(col, 'b'), regexp_count(col, 'c'), regexp_count(col, 'd') FROM t
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t
:     +- Project [listagg(col2, |)#x AS col#x]
:        +- Aggregate [col1#x], [listagg(col2#x, |, 0, 0) AS listagg(col2, |)#x]
:           +- SubqueryAlias df
:              +- View (`df`, [col1#x, col2#x])
:                 +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
:                    +- Project [col1#x, col2#x]
:                       +- SubqueryAlias __auto_generated_subquery_name
:                          +- LocalRelation [col1#x, col2#x]
+- Project [len(col#x) AS len(col)#x, regexp_count(col#x, a) AS regexp_count(col, a)#x, regexp_count(col#x, b) AS regexp_count(col, b)#x, regexp_count(col#x, c) AS regexp_count(col, c)#x, regexp_count(col#x, d) AS regexp_count(col, d)#x]
   +- SubqueryAlias t
      +- CTERelationRef xxxx, true, [col#x], false, false


-- !query
WITH t(col) AS (SELECT listagg(col1) FROM df) SELECT len(col), regexp_count(col, 'a'), regexp_count(col, 'b') FROM t
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t
:     +- Project [listagg(col1, NULL)#x AS col#x]
:        +- Aggregate [listagg(col1#x, null, 0, 0) AS listagg(col1, NULL)#x]
:           +- SubqueryAlias df
:              +- View (`df`, [col1#x, col2#x])
:                 +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
:                    +- Project [col1#x, col2#x]
:                       +- SubqueryAlias __auto_generated_subquery_name
:                          +- LocalRelation [col1#x, col2#x]
+- Project [len(col#x) AS len(col)#x, regexp_count(col#x, a) AS regexp_count(col, a)#x, regexp_count(col#x, b) AS regexp_count(col, b)#x]
   +- SubqueryAlias t
      +- CTERelationRef xxxx, true, [col#x], false, false, 1


-- !query
WITH t(col) AS (SELECT listagg(DISTINCT col1) FROM df) SELECT len(col), regexp_count(col, 'a'), regexp_count(col, 'b') FROM t
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t
:     +- Project [listagg(DISTINCT col1, NULL)#x AS col#x]
:        +- Aggregate [listagg(distinct col1#x, null, 0, 0) AS listagg(DISTINCT col1, NULL)#x]
:           +- SubqueryAlias df
:              +- View (`df`, [col1#x, col2#x])
:                 +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
:                    +- Project [col1#x, col2#x]
:                       +- SubqueryAlias __auto_generated_subquery_name
:                          +- LocalRelation [col1#x, col2#x]
+- Project [len(col#x) AS len(col)#x, regexp_count(col#x, a) AS regexp_count(col, a)#x, regexp_count(col#x, b) AS regexp_count(col, b)#x]
   +- SubqueryAlias t
      +- CTERelationRef xxxx, true, [col#x], false, false, 1


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col1) FROM df
-- !query analysis
Aggregate [listagg(col1#x, null, col1#x ASC NULLS FIRST, 0, 0) AS listagg(col1, NULL) WITHIN GROUP (ORDER BY col1 ASC NULLS FIRST)#x]
+- SubqueryAlias df
   +- View (`df`, [col1#x, col2#x])
      +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
         +- Project [col1#x, col2#x]
            +- SubqueryAlias __auto_generated_subquery_name
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col1 DESC) FROM df
-- !query analysis
Aggregate [listagg(col1#x, null, col1#x DESC NULLS LAST, 0, 0) AS listagg(col1, NULL) WITHIN GROUP (ORDER BY col1 DESC NULLS LAST)#x]
+- SubqueryAlias df
   +- View (`df`, [col1#x, col2#x])
      +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
         +- Project [col1#x, col2#x]
            +- SubqueryAlias __auto_generated_subquery_name
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col1 DESC) OVER (PARTITION BY col2) FROM df
-- !query analysis
Project [listagg(col1, NULL) WITHIN GROUP (ORDER BY col1 DESC NULLS LAST) OVER (PARTITION BY col2 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
+- Project [col1#x, col2#x, listagg(col1, NULL) WITHIN GROUP (ORDER BY col1 DESC NULLS LAST) OVER (PARTITION BY col2 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, listagg(col1, NULL) WITHIN GROUP (ORDER BY col1 DESC NULLS LAST) OVER (PARTITION BY col2 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
   +- Window [listagg(col1#x, null, col1#x DESC NULLS LAST, 0, 0) windowspecdefinition(col2#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS listagg(col1, NULL) WITHIN GROUP (ORDER BY col1 DESC NULLS LAST) OVER (PARTITION BY col2 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x], [col2#x]
      +- Project [col1#x, col2#x]
         +- SubqueryAlias df
            +- View (`df`, [col1#x, col2#x])
               +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
                  +- Project [col1#x, col2#x]
                     +- SubqueryAlias __auto_generated_subquery_name
                        +- LocalRelation [col1#x, col2#x]


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col2) FROM df
-- !query analysis
Aggregate [listagg(col1#x, null, col2#x ASC NULLS FIRST, 0, 0) AS listagg(col1, NULL) WITHIN GROUP (ORDER BY col2 ASC NULLS FIRST)#x]
+- SubqueryAlias df
   +- View (`df`, [col1#x, col2#x])
      +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
         +- Project [col1#x, col2#x]
            +- SubqueryAlias __auto_generated_subquery_name
               +- LocalRelation [col1#x, col2#x]


-- !query
WITH t(col) AS (SELECT listagg(col1) WITHIN GROUP (ORDER BY col2 DESC) FROM df) SELECT (col == 'baba') || (col == 'bbaa') FROM t
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t
:     +- Project [listagg(col1, NULL) WITHIN GROUP (ORDER BY col2 DESC NULLS LAST)#x AS col#x]
:        +- Aggregate [listagg(col1#x, null, col2#x DESC NULLS LAST, 0, 0) AS listagg(col1, NULL) WITHIN GROUP (ORDER BY col2 DESC NULLS LAST)#x]
:           +- SubqueryAlias df
:              +- View (`df`, [col1#x, col2#x])
:                 +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
:                    +- Project [col1#x, col2#x]
:                       +- SubqueryAlias __auto_generated_subquery_name
:                          +- LocalRelation [col1#x, col2#x]
+- Project [concat(cast((col#x = baba) as string), cast((col#x = bbaa) as string)) AS concat((col = baba), (col = bbaa))#x]
   +- SubqueryAlias t
      +- CTERelationRef xxxx, true, [col#x], false, false, 1


-- !query
WITH t(col) AS (SELECT listagg(col1, '|') WITHIN GROUP (ORDER BY col2 DESC) FROM df) SELECT (col == 'b|a|b|a') || (col == 'b|b|a|a') FROM t
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias t
:     +- Project [listagg(col1, |) WITHIN GROUP (ORDER BY col2 DESC NULLS LAST)#x AS col#x]
:        +- Aggregate [listagg(col1#x, |, col2#x DESC NULLS LAST, 0, 0) AS listagg(col1, |) WITHIN GROUP (ORDER BY col2 DESC NULLS LAST)#x]
:           +- SubqueryAlias df
:              +- View (`df`, [col1#x, col2#x])
:                 +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
:                    +- Project [col1#x, col2#x]
:                       +- SubqueryAlias __auto_generated_subquery_name
:                          +- LocalRelation [col1#x, col2#x]
+- Project [concat(cast((col#x = b|a|b|a) as string), cast((col#x = b|b|a|a) as string)) AS concat((col = b|a|b|a), (col = b|b|a|a))#x]
   +- SubqueryAlias t
      +- CTERelationRef xxxx, true, [col#x], false, false, 1


-- !query
SELECT listagg(col1, '|') WITHIN GROUP (ORDER BY col2 DESC) FROM df
-- !query analysis
Aggregate [listagg(col1#x, |, col2#x DESC NULLS LAST, 0, 0) AS listagg(col1, |) WITHIN GROUP (ORDER BY col2 DESC NULLS LAST)#x]
+- SubqueryAlias df
   +- View (`df`, [col1#x, col2#x])
      +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
         +- Project [col1#x, col2#x]
            +- SubqueryAlias __auto_generated_subquery_name
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col2 DESC, col1 ASC) FROM df
-- !query analysis
Aggregate [listagg(col1#x, null, col2#x DESC NULLS LAST, col1#x ASC NULLS FIRST, 0, 0) AS listagg(col1, NULL) WITHIN GROUP (ORDER BY col2 DESC NULLS LAST, col1 ASC NULLS FIRST)#x]
+- SubqueryAlias df
   +- View (`df`, [col1#x, col2#x])
      +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
         +- Project [col1#x, col2#x]
            +- SubqueryAlias __auto_generated_subquery_name
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col2 DESC, col1 DESC) FROM df
-- !query analysis
Aggregate [listagg(col1#x, null, col2#x DESC NULLS LAST, col1#x DESC NULLS LAST, 0, 0) AS listagg(col1, NULL) WITHIN GROUP (ORDER BY col2 DESC NULLS LAST, col1 DESC NULLS LAST)#x]
+- SubqueryAlias df
   +- View (`df`, [col1#x, col2#x])
      +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
         +- Project [col1#x, col2#x]
            +- SubqueryAlias __auto_generated_subquery_name
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT listagg(c1) FROM (VALUES (X'DEAD'), (X'BEEF')) AS t(c1)
-- !query analysis
Aggregate [listagg(c1#x, null, 0, 0) AS listagg(c1, NULL)#x]
+- SubqueryAlias t
   +- Project [col1#x AS c1#x]
      +- LocalRelation [col1#x]


-- !query
SELECT listagg(c1, NULL) FROM (VALUES (X'DEAD'), (X'BEEF')) AS t(c1)
-- !query analysis
Aggregate [listagg(c1#x, null, 0, 0) AS listagg(c1, NULL)#x]
+- SubqueryAlias t
   +- Project [col1#x AS c1#x]
      +- LocalRelation [col1#x]


-- !query
SELECT listagg(c1, X'42') FROM (VALUES (X'DEAD'), (X'BEEF')) AS t(c1)
-- !query analysis
Aggregate [listagg(c1#x, 0x42, 0, 0) AS listagg(c1, X'42')#x]
+- SubqueryAlias t
   +- Project [col1#x AS c1#x]
      +- LocalRelation [col1#x]


-- !query
SELECT listagg(col1), listagg(col2, ',') FROM df2
-- !query analysis
Aggregate [listagg(cast(col1#x as string), null, 0, 0) AS listagg(col1, NULL)#x, listagg(cast(col2#x as string), ,, 0, 0) AS listagg(col2, ,)#x]
+- SubqueryAlias df2
   +- View (`df2`, [col1#x, col2#x])
      +- Project [cast(col1#x as int) AS col1#x, cast(col2#x as boolean) AS col2#x]
         +- Project [col1#x, col2#x]
            +- SubqueryAlias __auto_generated_subquery_name
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT listagg(c1) FROM (VALUES (ARRAY('a', 'b'))) AS t(c1)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"c1\"",
    "inputType" : "\"ARRAY<STRING>\"",
    "paramIndex" : "first",
    "requiredType" : "(\"STRING\" or \"BINARY\")",
    "sqlExpr" : "\"listagg(c1, NULL)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 18,
    "fragment" : "listagg(c1)"
  } ]
}


-- !query
SELECT listagg(c1, ', ') FROM (VALUES (X'DEAD'), (X'BEEF')) AS t(c1)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.DATA_DIFF_TYPES",
  "sqlState" : "42K09",
  "messageParameters" : {
    "dataType" : "(\"BINARY\" or \"STRING\")",
    "functionName" : "`listagg`",
    "sqlExpr" : "\"listagg(c1, , )\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 24,
    "fragment" : "listagg(c1, ', ')"
  } ]
}


-- !query
SELECT listagg(col2, col1) FROM df GROUP BY col1
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.NON_FOLDABLE_INPUT",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputExpr" : "\"col1\"",
    "inputName" : "`delimiter`",
    "inputType" : "\"STRING\"",
    "sqlExpr" : "\"listagg(col2, col1)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 26,
    "fragment" : "listagg(col2, col1)"
  } ]
}


-- !query
SELECT listagg(col1) OVER (ORDER BY col1) FROM df
-- !query analysis
Project [listagg(col1, NULL) OVER (ORDER BY col1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x]
+- Project [col1#x, listagg(col1, NULL) OVER (ORDER BY col1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x, listagg(col1, NULL) OVER (ORDER BY col1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x]
   +- Window [listagg(col1#x, null, 0, 0) windowspecdefinition(col1#x ASC NULLS FIRST, specifiedwindowframe(RangeFrame, unboundedpreceding$(), currentrow$())) AS listagg(col1, NULL) OVER (ORDER BY col1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x], [col1#x ASC NULLS FIRST]
      +- Project [col1#x]
         +- SubqueryAlias df
            +- View (`df`, [col1#x, col2#x])
               +- Project [cast(col1#x as string) AS col1#x, cast(col2#x as string) AS col2#x]
                  +- Project [col1#x, col2#x]
                     +- SubqueryAlias __auto_generated_subquery_name
                        +- LocalRelation [col1#x, col2#x]


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col1) OVER (ORDER BY col1) FROM df
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_WINDOW_SPEC_FOR_AGGREGATION_FUNC",
  "sqlState" : "42601",
  "messageParameters" : {
    "aggFunc" : "\"listagg(col1, NULL, col1 ASC NULLS FIRST)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 70,
    "fragment" : "listagg(col1) WITHIN GROUP (ORDER BY col1) OVER (ORDER BY col1)"
  } ]
}


-- !query
SELECT string_agg(col1) WITHIN GROUP (ORDER BY col1) OVER (ORDER BY col1) FROM df
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_WINDOW_SPEC_FOR_AGGREGATION_FUNC",
  "sqlState" : "42601",
  "messageParameters" : {
    "aggFunc" : "\"listagg(col1, NULL, col1 ASC NULLS FIRST)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 73,
    "fragment" : "string_agg(col1) WITHIN GROUP (ORDER BY col1) OVER (ORDER BY col1)"
  } ]
}


-- !query
SELECT listagg(DISTINCT col1) OVER (ORDER BY col1) FROM df
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DISTINCT_WINDOW_FUNCTION_UNSUPPORTED",
  "sqlState" : "0A000",
  "messageParameters" : {
    "windowExpr" : "\"listagg(DISTINCT col1, NULL) OVER (ORDER BY col1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 50,
    "fragment" : "listagg(DISTINCT col1) OVER (ORDER BY col1)"
  } ]
}


-- !query
SELECT listagg(DISTINCT col1) WITHIN GROUP (ORDER BY col2) FROM df
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_WITHIN_GROUP_EXPRESSION.MISMATCH_WITH_DISTINCT_INPUT",
  "sqlState" : "42K0K",
  "messageParameters" : {
    "funcArg" : "\"col1\"",
    "funcName" : "`listagg`",
    "orderingExpr" : "\"col2\""
  }
}


-- !query
SELECT listagg(DISTINCT col1) WITHIN GROUP (ORDER BY col1, col2) FROM df
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_WITHIN_GROUP_EXPRESSION.MISMATCH_WITH_DISTINCT_INPUT",
  "sqlState" : "42K0K",
  "messageParameters" : {
    "funcArg" : "\"col1\"",
    "funcName" : "`listagg`",
    "orderingExpr" : "\"col1\", \"col2\""
  }
}
