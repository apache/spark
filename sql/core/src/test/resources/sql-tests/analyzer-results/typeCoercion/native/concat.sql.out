-- Automatically generated by SQLQueryTestSuite
-- !query
SELECT (col1 || col2 || col3) col
FROM (
  SELECT
    id col1,
    string(id + 1) col2,
    encode(string(id + 2), 'utf-8') col3
  FROM range(10)
)
-- !query analysis
Project [concat(concat(cast(col1#xL as string), col2#x), cast(col3#x as string)) AS col#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [id#xL AS col1#xL, cast((id#xL + cast(1 as bigint)) as string) AS col2#x, encode(cast((id#xL + cast(2 as bigint)) as string), utf-8) AS col3#x]
      +- Range (0, 10, step=1)


-- !query
SELECT ((col1 || col2) || (col3 || col4) || col5) col
FROM (
  SELECT
    'prefix_' col1,
    id col2,
    string(id + 1) col3,
    encode(string(id + 2), 'utf-8') col4,
    CAST(id AS DOUBLE) col5
  FROM range(10)
)
-- !query analysis
Project [concat(concat(concat(col1#x, cast(col2#xL as string)), concat(col3#x, cast(col4#x as string))), cast(col5#x as string)) AS col#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [prefix_ AS col1#x, id#xL AS col2#xL, cast((id#xL + cast(1 as bigint)) as string) AS col3#x, encode(cast((id#xL + cast(2 as bigint)) as string), utf-8) AS col4#x, cast(id#xL as double) AS col5#x]
      +- Range (0, 10, step=1)


-- !query
SELECT ((col1 || col2) || (col3 || col4)) col
FROM (
  SELECT
    string(id) col1,
    string(id + 1) col2,
    encode(string(id + 2), 'utf-8') col3,
    encode(string(id + 3), 'utf-8') col4
  FROM range(10)
)
-- !query analysis
Project [concat(concat(col1#x, col2#x), cast(concat(col3#x, col4#x) as string)) AS col#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [cast(id#xL as string) AS col1#x, cast((id#xL + cast(1 as bigint)) as string) AS col2#x, encode(cast((id#xL + cast(2 as bigint)) as string), utf-8) AS col3#x, encode(cast((id#xL + cast(3 as bigint)) as string), utf-8) AS col4#x]
      +- Range (0, 10, step=1)


-- !query
set spark.sql.function.concatBinaryAsString=true
-- !query analysis
SetCommand (spark.sql.function.concatBinaryAsString,Some(true))


-- !query
SELECT (col1 || col2) col
FROM (
  SELECT
    encode(string(id), 'utf-8') col1,
    encode(string(id + 1), 'utf-8') col2
  FROM range(10)
)
-- !query analysis
Project [concat(cast(col1#x as string), cast(col2#x as string)) AS col#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [encode(cast(id#xL as string), utf-8) AS col1#x, encode(cast((id#xL + cast(1 as bigint)) as string), utf-8) AS col2#x]
      +- Range (0, 10, step=1)


-- !query
SELECT (col1 || col2 || col3 || col4) col
FROM (
  SELECT
    encode(string(id), 'utf-8') col1,
    encode(string(id + 1), 'utf-8') col2,
    encode(string(id + 2), 'utf-8') col3,
    encode(string(id + 3), 'utf-8') col4
  FROM range(10)
)
-- !query analysis
Project [concat(concat(concat(cast(col1#x as string), cast(col2#x as string)), cast(col3#x as string)), cast(col4#x as string)) AS col#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [encode(cast(id#xL as string), utf-8) AS col1#x, encode(cast((id#xL + cast(1 as bigint)) as string), utf-8) AS col2#x, encode(cast((id#xL + cast(2 as bigint)) as string), utf-8) AS col3#x, encode(cast((id#xL + cast(3 as bigint)) as string), utf-8) AS col4#x]
      +- Range (0, 10, step=1)


-- !query
SELECT ((col1 || col2) || (col3 || col4)) col
FROM (
  SELECT
    encode(string(id), 'utf-8') col1,
    encode(string(id + 1), 'utf-8') col2,
    encode(string(id + 2), 'utf-8') col3,
    encode(string(id + 3), 'utf-8') col4
  FROM range(10)
)
-- !query analysis
Project [concat(concat(cast(col1#x as string), cast(col2#x as string)), concat(cast(col3#x as string), cast(col4#x as string))) AS col#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [encode(cast(id#xL as string), utf-8) AS col1#x, encode(cast((id#xL + cast(1 as bigint)) as string), utf-8) AS col2#x, encode(cast((id#xL + cast(2 as bigint)) as string), utf-8) AS col3#x, encode(cast((id#xL + cast(3 as bigint)) as string), utf-8) AS col4#x]
      +- Range (0, 10, step=1)


-- !query
set spark.sql.function.concatBinaryAsString=false
-- !query analysis
SetCommand (spark.sql.function.concatBinaryAsString,Some(false))


-- !query
SELECT (col1 || col2) col
FROM (
  SELECT
    encode(string(id), 'utf-8') col1,
    encode(string(id + 1), 'utf-8') col2
  FROM range(10)
)
-- !query analysis
Project [concat(col1#x, col2#x) AS col#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [encode(cast(id#xL as string), utf-8) AS col1#x, encode(cast((id#xL + cast(1 as bigint)) as string), utf-8) AS col2#x]
      +- Range (0, 10, step=1)


-- !query
SELECT (col1 || col2 || col3 || col4) col
FROM (
  SELECT
    encode(string(id), 'utf-8') col1,
    encode(string(id + 1), 'utf-8') col2,
    encode(string(id + 2), 'utf-8') col3,
    encode(string(id + 3), 'utf-8') col4
  FROM range(10)
)
-- !query analysis
Project [concat(concat(concat(col1#x, col2#x), col3#x), col4#x) AS col#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [encode(cast(id#xL as string), utf-8) AS col1#x, encode(cast((id#xL + cast(1 as bigint)) as string), utf-8) AS col2#x, encode(cast((id#xL + cast(2 as bigint)) as string), utf-8) AS col3#x, encode(cast((id#xL + cast(3 as bigint)) as string), utf-8) AS col4#x]
      +- Range (0, 10, step=1)


-- !query
SELECT ((col1 || col2) || (col3 || col4)) col
FROM (
  SELECT
    encode(string(id), 'utf-8') col1,
    encode(string(id + 1), 'utf-8') col2,
    encode(string(id + 2), 'utf-8') col3,
    encode(string(id + 3), 'utf-8') col4
  FROM range(10)
)
-- !query analysis
Project [concat(concat(col1#x, col2#x), concat(col3#x, col4#x)) AS col#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [encode(cast(id#xL as string), utf-8) AS col1#x, encode(cast((id#xL + cast(1 as bigint)) as string), utf-8) AS col2#x, encode(cast((id#xL + cast(2 as bigint)) as string), utf-8) AS col3#x, encode(cast((id#xL + cast(3 as bigint)) as string), utf-8) AS col4#x]
      +- Range (0, 10, step=1)


-- !query
CREATE TEMPORARY VIEW various_arrays AS SELECT * FROM VALUES (
  array(true, false), array(true),
  array(2Y, 1Y), array(3Y, 4Y),
  array(2S, 1S), array(3S, 4S),
  array(2, 1), array(3, 4),
  array(2L, 1L), array(3L, 4L),
  array(9223372036854775809, 9223372036854775808), array(9223372036854775808, 9223372036854775809),
  array(2.0D, 1.0D), array(3.0D, 4.0D),
  array(float(2.0), float(1.0)), array(float(3.0), float(4.0)),
  array(date '2016-03-14', date '2016-03-13'), array(date '2016-03-12', date '2016-03-11'),
  array(timestamp '2016-11-15 20:54:00.000', timestamp '2016-11-12 20:54:00.000'),
  array(timestamp '2016-11-11 20:54:00.000'),
  array('a', 'b'), array('c', 'd'),
  array(array('a', 'b'), array('c', 'd')), array(array('e'), array('f')),
  array(struct('a', 1), struct('b', 2)), array(struct('c', 3), struct('d', 4)),
  array(map('a', 1), map('b', 2)), array(map('c', 3), map('d', 4))
) AS various_arrays(
  boolean_array1, boolean_array2,
  tinyint_array1, tinyint_array2,
  smallint_array1, smallint_array2,
  int_array1, int_array2,
  bigint_array1, bigint_array2,
  decimal_array1, decimal_array2,
  double_array1, double_array2,
  float_array1, float_array2,
  date_array1, data_array2,
  timestamp_array1, timestamp_array2,
  string_array1, string_array2,
  array_array1, array_array2,
  struct_array1, struct_array2,
  map_array1, map_array2
)
-- !query analysis
CreateViewCommand `various_arrays`, SELECT * FROM VALUES (
  array(true, false), array(true),
  array(2Y, 1Y), array(3Y, 4Y),
  array(2S, 1S), array(3S, 4S),
  array(2, 1), array(3, 4),
  array(2L, 1L), array(3L, 4L),
  array(9223372036854775809, 9223372036854775808), array(9223372036854775808, 9223372036854775809),
  array(2.0D, 1.0D), array(3.0D, 4.0D),
  array(float(2.0), float(1.0)), array(float(3.0), float(4.0)),
  array(date '2016-03-14', date '2016-03-13'), array(date '2016-03-12', date '2016-03-11'),
  array(timestamp '2016-11-15 20:54:00.000', timestamp '2016-11-12 20:54:00.000'),
  array(timestamp '2016-11-11 20:54:00.000'),
  array('a', 'b'), array('c', 'd'),
  array(array('a', 'b'), array('c', 'd')), array(array('e'), array('f')),
  array(struct('a', 1), struct('b', 2)), array(struct('c', 3), struct('d', 4)),
  array(map('a', 1), map('b', 2)), array(map('c', 3), map('d', 4))
) AS various_arrays(
  boolean_array1, boolean_array2,
  tinyint_array1, tinyint_array2,
  smallint_array1, smallint_array2,
  int_array1, int_array2,
  bigint_array1, bigint_array2,
  decimal_array1, decimal_array2,
  double_array1, double_array2,
  float_array1, float_array2,
  date_array1, data_array2,
  timestamp_array1, timestamp_array2,
  string_array1, string_array2,
  array_array1, array_array2,
  struct_array1, struct_array2,
  map_array1, map_array2
), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [boolean_array1#x, boolean_array2#x, tinyint_array1#x, tinyint_array2#x, smallint_array1#x, smallint_array2#x, int_array1#x, int_array2#x, bigint_array1#x, bigint_array2#x, decimal_array1#x, decimal_array2#x, double_array1#x, double_array2#x, float_array1#x, float_array2#x, date_array1#x, data_array2#x, timestamp_array1#x, timestamp_array2#x, string_array1#x, string_array2#x, array_array1#x, array_array2#x, struct_array1#x, ... 3 more fields]
      +- SubqueryAlias various_arrays
         +- LocalRelation [boolean_array1#x, boolean_array2#x, tinyint_array1#x, tinyint_array2#x, smallint_array1#x, smallint_array2#x, int_array1#x, int_array2#x, bigint_array1#x, bigint_array2#x, decimal_array1#x, decimal_array2#x, double_array1#x, double_array2#x, float_array1#x, float_array2#x, date_array1#x, data_array2#x, timestamp_array1#x, timestamp_array2#x, string_array1#x, string_array2#x, array_array1#x, array_array2#x, struct_array1#x, ... 3 more fields]


-- !query
SELECT
    (boolean_array1 || boolean_array2) boolean_array,
    (tinyint_array1 || tinyint_array2) tinyint_array,
    (smallint_array1 || smallint_array2) smallint_array,
    (int_array1 || int_array2) int_array,
    (bigint_array1 || bigint_array2) bigint_array,
    (decimal_array1 || decimal_array2) decimal_array,
    (double_array1 || double_array2) double_array,
    (float_array1 || float_array2) float_array,
    (date_array1 || data_array2) data_array,
    (timestamp_array1 || timestamp_array2) timestamp_array,
    (string_array1 || string_array2) string_array,
    (array_array1 || array_array2) array_array,
    (struct_array1 || struct_array2) struct_array,
    (map_array1 || map_array2) map_array
FROM various_arrays
-- !query analysis
Project [concat(boolean_array1#x, boolean_array2#x) AS boolean_array#x, concat(tinyint_array1#x, tinyint_array2#x) AS tinyint_array#x, concat(smallint_array1#x, smallint_array2#x) AS smallint_array#x, concat(int_array1#x, int_array2#x) AS int_array#x, concat(bigint_array1#x, bigint_array2#x) AS bigint_array#x, concat(decimal_array1#x, decimal_array2#x) AS decimal_array#x, concat(double_array1#x, double_array2#x) AS double_array#x, concat(float_array1#x, float_array2#x) AS float_array#x, concat(date_array1#x, data_array2#x) AS data_array#x, concat(timestamp_array1#x, timestamp_array2#x) AS timestamp_array#x, concat(string_array1#x, string_array2#x) AS string_array#x, concat(array_array1#x, array_array2#x) AS array_array#x, concat(struct_array1#x, struct_array2#x) AS struct_array#x, concat(map_array1#x, map_array2#x) AS map_array#x]
+- SubqueryAlias various_arrays
   +- View (`various_arrays`, [boolean_array1#x, boolean_array2#x, tinyint_array1#x, tinyint_array2#x, smallint_array1#x, smallint_array2#x, int_array1#x, int_array2#x, bigint_array1#x, bigint_array2#x, decimal_array1#x, decimal_array2#x, double_array1#x, double_array2#x, float_array1#x, float_array2#x, date_array1#x, data_array2#x, timestamp_array1#x, timestamp_array2#x, string_array1#x, string_array2#x, array_array1#x, array_array2#x, struct_array1#x, ... 3 more fields])
      +- Project [cast(boolean_array1#x as array<boolean>) AS boolean_array1#x, cast(boolean_array2#x as array<boolean>) AS boolean_array2#x, cast(tinyint_array1#x as array<tinyint>) AS tinyint_array1#x, cast(tinyint_array2#x as array<tinyint>) AS tinyint_array2#x, cast(smallint_array1#x as array<smallint>) AS smallint_array1#x, cast(smallint_array2#x as array<smallint>) AS smallint_array2#x, cast(int_array1#x as array<int>) AS int_array1#x, cast(int_array2#x as array<int>) AS int_array2#x, cast(bigint_array1#x as array<bigint>) AS bigint_array1#x, cast(bigint_array2#x as array<bigint>) AS bigint_array2#x, cast(decimal_array1#x as array<decimal(19,0)>) AS decimal_array1#x, cast(decimal_array2#x as array<decimal(19,0)>) AS decimal_array2#x, cast(double_array1#x as array<double>) AS double_array1#x, cast(double_array2#x as array<double>) AS double_array2#x, cast(float_array1#x as array<float>) AS float_array1#x, cast(float_array2#x as array<float>) AS float_array2#x, cast(date_array1#x as array<date>) AS date_array1#x, cast(data_array2#x as array<date>) AS data_array2#x, cast(timestamp_array1#x as array<timestamp>) AS timestamp_array1#x, cast(timestamp_array2#x as array<timestamp>) AS timestamp_array2#x, cast(string_array1#x as array<string>) AS string_array1#x, cast(string_array2#x as array<string>) AS string_array2#x, cast(array_array1#x as array<array<string>>) AS array_array1#x, cast(array_array2#x as array<array<string>>) AS array_array2#x, cast(struct_array1#x as array<struct<col1:string,col2:int>>) AS struct_array1#x, ... 3 more fields]
         +- Project [boolean_array1#x, boolean_array2#x, tinyint_array1#x, tinyint_array2#x, smallint_array1#x, smallint_array2#x, int_array1#x, int_array2#x, bigint_array1#x, bigint_array2#x, decimal_array1#x, decimal_array2#x, double_array1#x, double_array2#x, float_array1#x, float_array2#x, date_array1#x, data_array2#x, timestamp_array1#x, timestamp_array2#x, string_array1#x, string_array2#x, array_array1#x, array_array2#x, struct_array1#x, ... 3 more fields]
            +- SubqueryAlias various_arrays
               +- LocalRelation [boolean_array1#x, boolean_array2#x, tinyint_array1#x, tinyint_array2#x, smallint_array1#x, smallint_array2#x, int_array1#x, int_array2#x, bigint_array1#x, bigint_array2#x, decimal_array1#x, decimal_array2#x, double_array1#x, double_array2#x, float_array1#x, float_array2#x, date_array1#x, data_array2#x, timestamp_array1#x, timestamp_array2#x, string_array1#x, string_array2#x, array_array1#x, array_array2#x, struct_array1#x, ... 3 more fields]


-- !query
SELECT
    (tinyint_array1 || smallint_array2) ts_array,
    (smallint_array1 || int_array2) si_array,
    (int_array1 || bigint_array2) ib_array,
    (bigint_array1 || decimal_array2) bd_array,
    (decimal_array1 || double_array2) dd_array,
    (double_array1 || float_array2) df_array,
    (string_array1 || data_array2) std_array,
    (timestamp_array1 || string_array2) tst_array,
    (string_array1 || int_array2) sti_array
FROM various_arrays
-- !query analysis
Project [concat(cast(tinyint_array1#x as array<smallint>), smallint_array2#x) AS ts_array#x, concat(cast(smallint_array1#x as array<int>), int_array2#x) AS si_array#x, concat(cast(int_array1#x as array<bigint>), bigint_array2#x) AS ib_array#x, concat(cast(bigint_array1#x as array<decimal(20,0)>), cast(decimal_array2#x as array<decimal(20,0)>)) AS bd_array#x, concat(cast(decimal_array1#x as array<double>), double_array2#x) AS dd_array#x, concat(double_array1#x, cast(float_array2#x as array<double>)) AS df_array#x, concat(cast(string_array1#x as array<date>), data_array2#x) AS std_array#x, concat(timestamp_array1#x, cast(string_array2#x as array<timestamp>)) AS tst_array#x, concat(cast(string_array1#x as array<bigint>), cast(int_array2#x as array<bigint>)) AS sti_array#x]
+- SubqueryAlias various_arrays
   +- View (`various_arrays`, [boolean_array1#x, boolean_array2#x, tinyint_array1#x, tinyint_array2#x, smallint_array1#x, smallint_array2#x, int_array1#x, int_array2#x, bigint_array1#x, bigint_array2#x, decimal_array1#x, decimal_array2#x, double_array1#x, double_array2#x, float_array1#x, float_array2#x, date_array1#x, data_array2#x, timestamp_array1#x, timestamp_array2#x, string_array1#x, string_array2#x, array_array1#x, array_array2#x, struct_array1#x, ... 3 more fields])
      +- Project [cast(boolean_array1#x as array<boolean>) AS boolean_array1#x, cast(boolean_array2#x as array<boolean>) AS boolean_array2#x, cast(tinyint_array1#x as array<tinyint>) AS tinyint_array1#x, cast(tinyint_array2#x as array<tinyint>) AS tinyint_array2#x, cast(smallint_array1#x as array<smallint>) AS smallint_array1#x, cast(smallint_array2#x as array<smallint>) AS smallint_array2#x, cast(int_array1#x as array<int>) AS int_array1#x, cast(int_array2#x as array<int>) AS int_array2#x, cast(bigint_array1#x as array<bigint>) AS bigint_array1#x, cast(bigint_array2#x as array<bigint>) AS bigint_array2#x, cast(decimal_array1#x as array<decimal(19,0)>) AS decimal_array1#x, cast(decimal_array2#x as array<decimal(19,0)>) AS decimal_array2#x, cast(double_array1#x as array<double>) AS double_array1#x, cast(double_array2#x as array<double>) AS double_array2#x, cast(float_array1#x as array<float>) AS float_array1#x, cast(float_array2#x as array<float>) AS float_array2#x, cast(date_array1#x as array<date>) AS date_array1#x, cast(data_array2#x as array<date>) AS data_array2#x, cast(timestamp_array1#x as array<timestamp>) AS timestamp_array1#x, cast(timestamp_array2#x as array<timestamp>) AS timestamp_array2#x, cast(string_array1#x as array<string>) AS string_array1#x, cast(string_array2#x as array<string>) AS string_array2#x, cast(array_array1#x as array<array<string>>) AS array_array1#x, cast(array_array2#x as array<array<string>>) AS array_array2#x, cast(struct_array1#x as array<struct<col1:string,col2:int>>) AS struct_array1#x, ... 3 more fields]
         +- Project [boolean_array1#x, boolean_array2#x, tinyint_array1#x, tinyint_array2#x, smallint_array1#x, smallint_array2#x, int_array1#x, int_array2#x, bigint_array1#x, bigint_array2#x, decimal_array1#x, decimal_array2#x, double_array1#x, double_array2#x, float_array1#x, float_array2#x, date_array1#x, data_array2#x, timestamp_array1#x, timestamp_array2#x, string_array1#x, string_array2#x, array_array1#x, array_array2#x, struct_array1#x, ... 3 more fields]
            +- SubqueryAlias various_arrays
               +- LocalRelation [boolean_array1#x, boolean_array2#x, tinyint_array1#x, tinyint_array2#x, smallint_array1#x, smallint_array2#x, int_array1#x, int_array2#x, bigint_array1#x, bigint_array2#x, decimal_array1#x, decimal_array2#x, double_array1#x, double_array2#x, float_array1#x, float_array2#x, date_array1#x, data_array2#x, timestamp_array1#x, timestamp_array2#x, string_array1#x, string_array2#x, array_array1#x, array_array2#x, struct_array1#x, ... 3 more fields]
