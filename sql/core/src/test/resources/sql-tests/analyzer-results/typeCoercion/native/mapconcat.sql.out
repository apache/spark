-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TEMPORARY VIEW various_maps AS SELECT * FROM VALUES (
  map(true, false), map(false, true),
  map(1Y, 2Y), map(3Y, 4Y),
  map(1S, 2S), map(3S, 4S),
  map(4, 6), map(7, 8),
  map(6L, 7L), map(8L, 9L),
  map(9223372036854775809, 9223372036854775808), map(9223372036854775808, 9223372036854775809),  
  map(1.0D, 2.0D), map(3.0D, 4.0D),
  map(float(1.0D), float(2.0D)), map(float(3.0D), float(4.0D)),
  map(date '2016-03-14', date '2016-03-13'), map(date '2016-03-12', date '2016-03-11'),
  map(timestamp '2016-11-15 20:54:00.000', timestamp '2016-11-12 20:54:00.000'),
  map(timestamp '2016-11-11 20:54:00.000', timestamp '2016-11-09 20:54:00.000'),
  map('a', 'b'), map('c', 'd'),
  map(array('a', 'b'), array('c', 'd')), map(array('e'), array('f')),
  map(struct('a', 1), struct('b', 2)), map(struct('c', 3), struct('d', 4)),
  map('a', 1), map('c', 2),
  map(1, 'a'), map(2, 'c')
) AS various_maps (
  boolean_map1, boolean_map2,
  tinyint_map1, tinyint_map2,
  smallint_map1, smallint_map2,
  int_map1, int_map2,
  bigint_map1, bigint_map2,
  decimal_map1, decimal_map2,
  double_map1, double_map2,
  float_map1, float_map2,
  date_map1, date_map2,
  timestamp_map1,
  timestamp_map2,
  string_map1, string_map2,
  array_map1, array_map2,
  struct_map1, struct_map2,
  string_int_map1, string_int_map2,
  int_string_map1, int_string_map2
)
-- !query analysis
CreateViewCommand `various_maps`, SELECT * FROM VALUES (
  map(true, false), map(false, true),
  map(1Y, 2Y), map(3Y, 4Y),
  map(1S, 2S), map(3S, 4S),
  map(4, 6), map(7, 8),
  map(6L, 7L), map(8L, 9L),
  map(9223372036854775809, 9223372036854775808), map(9223372036854775808, 9223372036854775809),  
  map(1.0D, 2.0D), map(3.0D, 4.0D),
  map(float(1.0D), float(2.0D)), map(float(3.0D), float(4.0D)),
  map(date '2016-03-14', date '2016-03-13'), map(date '2016-03-12', date '2016-03-11'),
  map(timestamp '2016-11-15 20:54:00.000', timestamp '2016-11-12 20:54:00.000'),
  map(timestamp '2016-11-11 20:54:00.000', timestamp '2016-11-09 20:54:00.000'),
  map('a', 'b'), map('c', 'd'),
  map(array('a', 'b'), array('c', 'd')), map(array('e'), array('f')),
  map(struct('a', 1), struct('b', 2)), map(struct('c', 3), struct('d', 4)),
  map('a', 1), map('c', 2),
  map(1, 'a'), map(2, 'c')
) AS various_maps (
  boolean_map1, boolean_map2,
  tinyint_map1, tinyint_map2,
  smallint_map1, smallint_map2,
  int_map1, int_map2,
  bigint_map1, bigint_map2,
  decimal_map1, decimal_map2,
  double_map1, double_map2,
  float_map1, float_map2,
  date_map1, date_map2,
  timestamp_map1,
  timestamp_map2,
  string_map1, string_map2,
  array_map1, array_map2,
  struct_map1, struct_map2,
  string_int_map1, string_int_map2,
  int_string_map1, int_string_map2
), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [boolean_map1#x, boolean_map2#x, tinyint_map1#x, tinyint_map2#x, smallint_map1#x, smallint_map2#x, int_map1#x, int_map2#x, bigint_map1#x, bigint_map2#x, decimal_map1#x, decimal_map2#x, double_map1#x, double_map2#x, float_map1#x, float_map2#x, date_map1#x, date_map2#x, timestamp_map1#x, timestamp_map2#x, string_map1#x, string_map2#x, array_map1#x, array_map2#x, struct_map1#x, ... 5 more fields]
      +- SubqueryAlias various_maps
         +- LocalRelation [boolean_map1#x, boolean_map2#x, tinyint_map1#x, tinyint_map2#x, smallint_map1#x, smallint_map2#x, int_map1#x, int_map2#x, bigint_map1#x, bigint_map2#x, decimal_map1#x, decimal_map2#x, double_map1#x, double_map2#x, float_map1#x, float_map2#x, date_map1#x, date_map2#x, timestamp_map1#x, timestamp_map2#x, string_map1#x, string_map2#x, array_map1#x, array_map2#x, struct_map1#x, ... 5 more fields]


-- !query
SELECT
    map_concat(boolean_map1, boolean_map2) boolean_map,
    map_concat(tinyint_map1, tinyint_map2) tinyint_map,
    map_concat(smallint_map1, smallint_map2) smallint_map,
    map_concat(int_map1, int_map2) int_map,
    map_concat(bigint_map1, bigint_map2) bigint_map,
    map_concat(decimal_map1, decimal_map2) decimal_map,
    map_concat(float_map1, float_map2) float_map,
    map_concat(double_map1, double_map2) double_map,
    map_concat(date_map1, date_map2) date_map,
    map_concat(timestamp_map1, timestamp_map2) timestamp_map,
    map_concat(string_map1, string_map2) string_map,
    map_concat(array_map1, array_map2) array_map,
    map_concat(struct_map1, struct_map2) struct_map,
    map_concat(string_int_map1, string_int_map2) string_int_map,
    map_concat(int_string_map1, int_string_map2) int_string_map
FROM various_maps
-- !query analysis
Project [map_concat(boolean_map1#x, boolean_map2#x) AS boolean_map#x, map_concat(tinyint_map1#x, tinyint_map2#x) AS tinyint_map#x, map_concat(smallint_map1#x, smallint_map2#x) AS smallint_map#x, map_concat(int_map1#x, int_map2#x) AS int_map#x, map_concat(bigint_map1#x, bigint_map2#x) AS bigint_map#x, map_concat(decimal_map1#x, decimal_map2#x) AS decimal_map#x, map_concat(float_map1#x, float_map2#x) AS float_map#x, map_concat(double_map1#x, double_map2#x) AS double_map#x, map_concat(date_map1#x, date_map2#x) AS date_map#x, map_concat(timestamp_map1#x, timestamp_map2#x) AS timestamp_map#x, map_concat(string_map1#x, string_map2#x) AS string_map#x, map_concat(array_map1#x, array_map2#x) AS array_map#x, map_concat(struct_map1#x, struct_map2#x) AS struct_map#x, map_concat(string_int_map1#x, string_int_map2#x) AS string_int_map#x, map_concat(int_string_map1#x, int_string_map2#x) AS int_string_map#x]
+- SubqueryAlias various_maps
   +- View (`various_maps`, [boolean_map1#x, boolean_map2#x, tinyint_map1#x, tinyint_map2#x, smallint_map1#x, smallint_map2#x, int_map1#x, int_map2#x, bigint_map1#x, bigint_map2#x, decimal_map1#x, decimal_map2#x, double_map1#x, double_map2#x, float_map1#x, float_map2#x, date_map1#x, date_map2#x, timestamp_map1#x, timestamp_map2#x, string_map1#x, string_map2#x, array_map1#x, array_map2#x, struct_map1#x, ... 5 more fields])
      +- Project [cast(boolean_map1#x as map<boolean,boolean>) AS boolean_map1#x, cast(boolean_map2#x as map<boolean,boolean>) AS boolean_map2#x, cast(tinyint_map1#x as map<tinyint,tinyint>) AS tinyint_map1#x, cast(tinyint_map2#x as map<tinyint,tinyint>) AS tinyint_map2#x, cast(smallint_map1#x as map<smallint,smallint>) AS smallint_map1#x, cast(smallint_map2#x as map<smallint,smallint>) AS smallint_map2#x, cast(int_map1#x as map<int,int>) AS int_map1#x, cast(int_map2#x as map<int,int>) AS int_map2#x, cast(bigint_map1#x as map<bigint,bigint>) AS bigint_map1#x, cast(bigint_map2#x as map<bigint,bigint>) AS bigint_map2#x, cast(decimal_map1#x as map<decimal(19,0),decimal(19,0)>) AS decimal_map1#x, cast(decimal_map2#x as map<decimal(19,0),decimal(19,0)>) AS decimal_map2#x, cast(double_map1#x as map<double,double>) AS double_map1#x, cast(double_map2#x as map<double,double>) AS double_map2#x, cast(float_map1#x as map<float,float>) AS float_map1#x, cast(float_map2#x as map<float,float>) AS float_map2#x, cast(date_map1#x as map<date,date>) AS date_map1#x, cast(date_map2#x as map<date,date>) AS date_map2#x, cast(timestamp_map1#x as map<timestamp,timestamp>) AS timestamp_map1#x, cast(timestamp_map2#x as map<timestamp,timestamp>) AS timestamp_map2#x, cast(string_map1#x as map<string,string>) AS string_map1#x, cast(string_map2#x as map<string,string>) AS string_map2#x, cast(array_map1#x as map<array<string>,array<string>>) AS array_map1#x, cast(array_map2#x as map<array<string>,array<string>>) AS array_map2#x, cast(struct_map1#x as map<struct<col1:string,col2:int>,struct<col1:string,col2:int>>) AS struct_map1#x, ... 5 more fields]
         +- Project [boolean_map1#x, boolean_map2#x, tinyint_map1#x, tinyint_map2#x, smallint_map1#x, smallint_map2#x, int_map1#x, int_map2#x, bigint_map1#x, bigint_map2#x, decimal_map1#x, decimal_map2#x, double_map1#x, double_map2#x, float_map1#x, float_map2#x, date_map1#x, date_map2#x, timestamp_map1#x, timestamp_map2#x, string_map1#x, string_map2#x, array_map1#x, array_map2#x, struct_map1#x, ... 5 more fields]
            +- SubqueryAlias various_maps
               +- LocalRelation [boolean_map1#x, boolean_map2#x, tinyint_map1#x, tinyint_map2#x, smallint_map1#x, smallint_map2#x, int_map1#x, int_map2#x, bigint_map1#x, bigint_map2#x, decimal_map1#x, decimal_map2#x, double_map1#x, double_map2#x, float_map1#x, float_map2#x, date_map1#x, date_map2#x, timestamp_map1#x, timestamp_map2#x, string_map1#x, string_map2#x, array_map1#x, array_map2#x, struct_map1#x, ... 5 more fields]


-- !query
SELECT
    map_concat(tinyint_map1, smallint_map2) ts_map,
    map_concat(smallint_map1, int_map2) si_map,
    map_concat(int_map1, bigint_map2) ib_map,
    map_concat(bigint_map1, decimal_map2) bd_map,
    map_concat(decimal_map1, float_map2) df_map,
    map_concat(string_map1, date_map2) std_map,
    map_concat(timestamp_map1, string_map2) tst_map,
    map_concat(string_map1, int_map2) sti_map,
    map_concat(int_string_map1, tinyint_map2) istt_map
FROM various_maps
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.DATA_DIFF_TYPES",
  "sqlState" : "42K09",
  "messageParameters" : {
    "dataType" : "(\"MAP<STRING, STRING>\" or \"MAP<DATE, DATE>\")",
    "functionName" : "`map_concat`",
    "sqlExpr" : "\"map_concat(string_map1, date_map2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 257,
    "stopIndex" : 290,
    "fragment" : "map_concat(string_map1, date_map2)"
  } ]
}


-- !query
SELECT
    map_concat(tinyint_map1, array_map1) tm_map
FROM various_maps
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.DATA_DIFF_TYPES",
  "sqlState" : "42K09",
  "messageParameters" : {
    "dataType" : "(\"MAP<TINYINT, TINYINT>\" or \"MAP<ARRAY<STRING>, ARRAY<STRING>>\")",
    "functionName" : "`map_concat`",
    "sqlExpr" : "\"map_concat(tinyint_map1, array_map1)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 47,
    "fragment" : "map_concat(tinyint_map1, array_map1)"
  } ]
}


-- !query
SELECT
    map_concat(boolean_map1, int_map2) bi_map
FROM various_maps
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.DATA_DIFF_TYPES",
  "sqlState" : "42K09",
  "messageParameters" : {
    "dataType" : "(\"MAP<BOOLEAN, BOOLEAN>\" or \"MAP<INT, INT>\")",
    "functionName" : "`map_concat`",
    "sqlExpr" : "\"map_concat(boolean_map1, int_map2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 45,
    "fragment" : "map_concat(boolean_map1, int_map2)"
  } ]
}


-- !query
SELECT
    map_concat(int_map1, struct_map2) is_map
FROM various_maps
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.DATA_DIFF_TYPES",
  "sqlState" : "42K09",
  "messageParameters" : {
    "dataType" : "(\"MAP<INT, INT>\" or \"MAP<STRUCT<col1: STRING NOT NULL, col2: INT NOT NULL>, STRUCT<col1: STRING NOT NULL, col2: INT NOT NULL>>\")",
    "functionName" : "`map_concat`",
    "sqlExpr" : "\"map_concat(int_map1, struct_map2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 44,
    "fragment" : "map_concat(int_map1, struct_map2)"
  } ]
}


-- !query
SELECT
    map_concat(struct_map1, array_map2) ma_map
FROM various_maps
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.DATA_DIFF_TYPES",
  "sqlState" : "42K09",
  "messageParameters" : {
    "dataType" : "(\"MAP<STRUCT<col1: STRING NOT NULL, col2: INT NOT NULL>, STRUCT<col1: STRING NOT NULL, col2: INT NOT NULL>>\" or \"MAP<ARRAY<STRING>, ARRAY<STRING>>\")",
    "functionName" : "`map_concat`",
    "sqlExpr" : "\"map_concat(struct_map1, array_map2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 46,
    "fragment" : "map_concat(struct_map1, array_map2)"
  } ]
}


-- !query
SELECT
    map_concat(int_map1, array_map2) ms_map
FROM various_maps
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.DATA_DIFF_TYPES",
  "sqlState" : "42K09",
  "messageParameters" : {
    "dataType" : "(\"MAP<INT, INT>\" or \"MAP<ARRAY<STRING>, ARRAY<STRING>>\")",
    "functionName" : "`map_concat`",
    "sqlExpr" : "\"map_concat(int_map1, array_map2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 43,
    "fragment" : "map_concat(int_map1, array_map2)"
  } ]
}
