-- Automatically generated by SQLQueryTestSuite
-- !query
SELECT mask('AbCD123-@$#', lowerChar => 'q', upperChar => 'Q', otherChar => 'o', digitChar => 'd')
-- !query analysis
Project [mask(AbCD123-@$#, Q, q, d, o) AS mask(AbCD123-@$#, Q, q, d, o)#x]
+- OneRowRelation


-- !query
SELECT mask(lowerChar => 'q', upperChar => 'Q', otherChar => 'o', digitChar => 'd', str => 'AbCD123-@$#')
-- !query analysis
Project [mask(AbCD123-@$#, Q, q, d, o) AS mask(AbCD123-@$#, Q, q, d, o)#x]
+- OneRowRelation


-- !query
SELECT mask('AbCD123-@$#', lowerChar => 'q', upperChar => 'Q', digitChar => 'd')
-- !query analysis
Project [mask(AbCD123-@$#, Q, q, d, null) AS mask(AbCD123-@$#, Q, q, d, NULL)#x]
+- OneRowRelation


-- !query
SELECT mask(lowerChar => 'q', upperChar => 'Q', digitChar => 'd', str => 'AbCD123-@$#')
-- !query analysis
Project [mask(AbCD123-@$#, Q, q, d, null) AS mask(AbCD123-@$#, Q, q, d, NULL)#x]
+- OneRowRelation


-- !query
create temporary view t2 as select * from values
  ('val2a', 6S, 12, 14L, float(15), 20D, 20E2, timestamp '2014-04-04 01:01:00.000', date '2014-04-04'),
  ('val1b', 10S, 12, 19L, float(17), 25D, 26E2, timestamp '2014-05-04 01:01:00.000', date '2014-05-04'),
  ('val1b', 8S, 16, 119L, float(17), 25D, 26E2, timestamp '2015-05-04 01:01:00.000', date '2015-05-04'),
  ('val1c', 12S, 16, 219L, float(17), 25D, 26E2, timestamp '2016-05-04 01:01:00.000', date '2016-05-04'),
  ('val1b', null, 16, 319L, float(17), 25D, 26E2, timestamp '2017-05-04 01:01:00.000', null),
  ('val2e', 8S, null, 419L, float(17), 25D, 26E2, timestamp '2014-06-04 01:01:00.000', date '2014-06-04'),
  ('val1f', 19S, null, 519L, float(17), 25D, 26E2, timestamp '2014-05-04 01:01:00.000', date '2014-05-04'),
  ('val1b', 10S, 12, 19L, float(17), 25D, 26E2, timestamp '2014-06-04 01:01:00.000', date '2014-06-04'),
  ('val1b', 8S, 16, 19L, float(17), 25D, 26E2, timestamp '2014-07-04 01:01:00.000', date '2014-07-04'),
  ('val1c', 12S, 16, 19L, float(17), 25D, 26E2, timestamp '2014-08-04 01:01:00.000', date '2014-08-05'),
  ('val1e', 8S, null, 19L, float(17), 25D, 26E2, timestamp '2014-09-04 01:01:00.000', date '2014-09-04'),
  ('val1f', 19S, null, 19L, float(17), 25D, 26E2, timestamp '2014-10-04 01:01:00.000', date '2014-10-04'),
  ('val1b', null, 16, 19L, float(17), 25D, 26E2, timestamp '2014-05-04 01:01:00.000', null)
  as t2(t2a, t2b, t2c, t2d, t2e, t2f, t2g, t2h, t2i)
-- !query analysis
CreateViewCommand `t2`, select * from values
  ('val2a', 6S, 12, 14L, float(15), 20D, 20E2, timestamp '2014-04-04 01:01:00.000', date '2014-04-04'),
  ('val1b', 10S, 12, 19L, float(17), 25D, 26E2, timestamp '2014-05-04 01:01:00.000', date '2014-05-04'),
  ('val1b', 8S, 16, 119L, float(17), 25D, 26E2, timestamp '2015-05-04 01:01:00.000', date '2015-05-04'),
  ('val1c', 12S, 16, 219L, float(17), 25D, 26E2, timestamp '2016-05-04 01:01:00.000', date '2016-05-04'),
  ('val1b', null, 16, 319L, float(17), 25D, 26E2, timestamp '2017-05-04 01:01:00.000', null),
  ('val2e', 8S, null, 419L, float(17), 25D, 26E2, timestamp '2014-06-04 01:01:00.000', date '2014-06-04'),
  ('val1f', 19S, null, 519L, float(17), 25D, 26E2, timestamp '2014-05-04 01:01:00.000', date '2014-05-04'),
  ('val1b', 10S, 12, 19L, float(17), 25D, 26E2, timestamp '2014-06-04 01:01:00.000', date '2014-06-04'),
  ('val1b', 8S, 16, 19L, float(17), 25D, 26E2, timestamp '2014-07-04 01:01:00.000', date '2014-07-04'),
  ('val1c', 12S, 16, 19L, float(17), 25D, 26E2, timestamp '2014-08-04 01:01:00.000', date '2014-08-05'),
  ('val1e', 8S, null, 19L, float(17), 25D, 26E2, timestamp '2014-09-04 01:01:00.000', date '2014-09-04'),
  ('val1f', 19S, null, 19L, float(17), 25D, 26E2, timestamp '2014-10-04 01:01:00.000', date '2014-10-04'),
  ('val1b', null, 16, 19L, float(17), 25D, 26E2, timestamp '2014-05-04 01:01:00.000', null)
  as t2(t2a, t2b, t2c, t2d, t2e, t2f, t2g, t2h, t2i), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [t2a#x, t2b#x, t2c#x, t2d#xL, t2e#x, t2f#x, t2g#x, t2h#x, t2i#x]
      +- SubqueryAlias t2
         +- LocalRelation [t2a#x, t2b#x, t2c#x, t2d#xL, t2e#x, t2f#x, t2g#x, t2h#x, t2i#x]


-- !query
SELECT hex(count_min_sketch(t2d, seed => 1, epsilon => 0.5d, confidence => 0.5d)) FROM t2
-- !query analysis
Aggregate [hex(count_min_sketch(t2d#xL, 0.5, 0.5, 1, 0, 0)) AS hex(count_min_sketch(t2d, 0.5, 0.5, 1))#x]
+- SubqueryAlias t2
   +- View (`t2`, [t2a#x, t2b#x, t2c#x, t2d#xL, t2e#x, t2f#x, t2g#x, t2h#x, t2i#x])
      +- Project [cast(t2a#x as string) AS t2a#x, cast(t2b#x as smallint) AS t2b#x, cast(t2c#x as int) AS t2c#x, cast(t2d#xL as bigint) AS t2d#xL, cast(t2e#x as float) AS t2e#x, cast(t2f#x as double) AS t2f#x, cast(t2g#x as double) AS t2g#x, cast(t2h#x as timestamp) AS t2h#x, cast(t2i#x as date) AS t2i#x]
         +- Project [t2a#x, t2b#x, t2c#x, t2d#xL, t2e#x, t2f#x, t2g#x, t2h#x, t2i#x]
            +- SubqueryAlias t2
               +- LocalRelation [t2a#x, t2b#x, t2c#x, t2d#xL, t2e#x, t2f#x, t2g#x, t2h#x, t2i#x]


-- !query
SELECT hex(count_min_sketch(seed => 1, epsilon => 0.5d, confidence => 0.5d, column => t2d)) FROM t2
-- !query analysis
Aggregate [hex(count_min_sketch(t2d#xL, 0.5, 0.5, 1, 0, 0)) AS hex(count_min_sketch(t2d, 0.5, 0.5, 1))#x]
+- SubqueryAlias t2
   +- View (`t2`, [t2a#x, t2b#x, t2c#x, t2d#xL, t2e#x, t2f#x, t2g#x, t2h#x, t2i#x])
      +- Project [cast(t2a#x as string) AS t2a#x, cast(t2b#x as smallint) AS t2b#x, cast(t2c#x as int) AS t2c#x, cast(t2d#xL as bigint) AS t2d#xL, cast(t2e#x as float) AS t2e#x, cast(t2f#x as double) AS t2f#x, cast(t2g#x as double) AS t2g#x, cast(t2h#x as timestamp) AS t2h#x, cast(t2i#x as date) AS t2i#x]
         +- Project [t2a#x, t2b#x, t2c#x, t2d#xL, t2e#x, t2f#x, t2g#x, t2h#x, t2i#x]
            +- SubqueryAlias t2
               +- LocalRelation [t2a#x, t2b#x, t2c#x, t2d#xL, t2e#x, t2f#x, t2g#x, t2h#x, t2i#x]


-- !query
SELECT hex(count_min_sketch(t2d, 0.5d, seed => 1, confidence => 0.5d)) FROM t2
-- !query analysis
Aggregate [hex(count_min_sketch(t2d#xL, 0.5, 0.5, 1, 0, 0)) AS hex(count_min_sketch(t2d, 0.5, 0.5, 1))#x]
+- SubqueryAlias t2
   +- View (`t2`, [t2a#x, t2b#x, t2c#x, t2d#xL, t2e#x, t2f#x, t2g#x, t2h#x, t2i#x])
      +- Project [cast(t2a#x as string) AS t2a#x, cast(t2b#x as smallint) AS t2b#x, cast(t2c#x as int) AS t2c#x, cast(t2d#xL as bigint) AS t2d#xL, cast(t2e#x as float) AS t2e#x, cast(t2f#x as double) AS t2f#x, cast(t2g#x as double) AS t2g#x, cast(t2h#x as timestamp) AS t2h#x, cast(t2i#x as date) AS t2i#x]
         +- Project [t2a#x, t2b#x, t2c#x, t2d#xL, t2e#x, t2f#x, t2g#x, t2h#x, t2i#x]
            +- SubqueryAlias t2
               +- LocalRelation [t2a#x, t2b#x, t2c#x, t2d#xL, t2e#x, t2f#x, t2g#x, t2h#x, t2i#x]


-- !query
SELECT * FROM explode(collection => array(1, 2))
-- !query analysis
Project [col#x]
+- Generate explode(array(1, 2)), false, [col#x]
   +- OneRowRelation


-- !query
SELECT * FROM explode_outer(collection => map('a', 1, 'b', 2))
-- !query analysis
Project [key#x, value#x]
+- Generate explode(map(a, 1, b, 2)), true, [key#x, value#x]
   +- OneRowRelation


-- !query
SELECT * FROM explode(array(1, 2)), explode(array(3, 4))
-- !query analysis
Project [col#x, col#x]
+- Join Inner
   :- Generate explode(array(1, 2)), false, [col#x]
   :  +- OneRowRelation
   +- Generate explode(array(3, 4)), false, [col#x]
      +- OneRowRelation


-- !query
SELECT * FROM explode(array(1, 2)) AS t, LATERAL explode(array(3 * t.col, 4 * t.col))
-- !query analysis
Project [col#x, col#x]
+- LateralJoin lateral-subquery#x [col#x && col#x], Inner
   :  +- Generate explode(array((3 * outer(col#x)), (4 * outer(col#x)))), false, [col#x]
   :     +- OneRowRelation
   +- SubqueryAlias t
      +- Generate explode(array(1, 2)), false, [col#x]
         +- OneRowRelation


-- !query
SELECT num, val, 'Spark' FROM explode(map(1, 'a', 2, 'b')) AS t(num, val)
-- !query analysis
Project [num#x, val#x, Spark AS Spark#x]
+- SubqueryAlias t
   +- Project [key#x AS num#x, value#x AS val#x]
      +- Generate explode(map(1, a, 2, b)), false, [key#x, value#x]
         +- OneRowRelation


-- !query
SELECT * FROM posexplode(collection => array(1, 2))
-- !query analysis
Project [pos#x, col#x]
+- Generate posexplode(array(1, 2)), false, [pos#x, col#x]
   +- OneRowRelation


-- !query
SELECT * FROM posexplode_outer(collection => map('a', 1, 'b', 2))
-- !query analysis
Project [pos#x, key#x, value#x]
+- Generate posexplode(map(a, 1, b, 2)), true, [pos#x, key#x, value#x]
   +- OneRowRelation


-- !query
SELECT * FROM posexplode(array(1, 2)), posexplode(array(3, 4))
-- !query analysis
Project [pos#x, col#x, pos#x, col#x]
+- Join Inner
   :- Generate posexplode(array(1, 2)), false, [pos#x, col#x]
   :  +- OneRowRelation
   +- Generate posexplode(array(3, 4)), false, [pos#x, col#x]
      +- OneRowRelation


-- !query
SELECT * FROM posexplode(array(1, 2)) AS t, LATERAL posexplode(array(3 * t.col, 4 * t.col))
-- !query analysis
Project [pos#x, col#x, pos#x, col#x]
+- LateralJoin lateral-subquery#x [col#x && col#x], Inner
   :  +- Generate posexplode(array((3 * outer(col#x)), (4 * outer(col#x)))), false, [pos#x, col#x]
   :     +- OneRowRelation
   +- SubqueryAlias t
      +- Generate posexplode(array(1, 2)), false, [pos#x, col#x]
         +- OneRowRelation


-- !query
SELECT pos, num, val, 'Spark' FROM posexplode(map(1, 'a', 2, 'b')) AS t(pos, num, val)
-- !query analysis
Project [pos#x, num#x, val#x, Spark AS Spark#x]
+- SubqueryAlias t
   +- Project [pos#x AS pos#x, key#x AS num#x, value#x AS val#x]
      +- Generate posexplode(map(1, a, 2, b)), false, [pos#x, key#x, value#x]
         +- OneRowRelation


-- !query
SELECT * FROM inline(input => array(struct(1, 'a'), struct(2, 'b')))
-- !query analysis
Project [col1#x, col2#x]
+- Generate inline(array(struct(col1, 1, col2, a), struct(col1, 2, col2, b))), false, [col1#x, col2#x]
   +- OneRowRelation


-- !query
SELECT * FROM inline_outer(input => array(struct(1, 'a'), struct(2, 'b')))
-- !query analysis
Project [col1#x, col2#x]
+- Generate inline(array(struct(col1, 1, col2, a), struct(col1, 2, col2, b))), true, [col1#x, col2#x]
   +- OneRowRelation


-- !query
SELECT * FROM inline(array(struct(1, 'a'), struct(2, 'b'))), inline(array(struct(3, 'c'), struct(4, 'd')))
-- !query analysis
Project [col1#x, col2#x, col1#x, col2#x]
+- Join Inner
   :- Generate inline(array(struct(col1, 1, col2, a), struct(col1, 2, col2, b))), false, [col1#x, col2#x]
   :  +- OneRowRelation
   +- Generate inline(array(struct(col1, 3, col2, c), struct(col1, 4, col2, d))), false, [col1#x, col2#x]
      +- OneRowRelation


-- !query
SELECT * FROM inline(array(struct(1, 'a'), struct(2, 'b'))) AS t, LATERAL inline(array(struct(3 * t.col1, 4 * t.col1)))
-- !query analysis
Project [col1#x, col2#x, col1#x, col2#x]
+- LateralJoin lateral-subquery#x [col1#x && col1#x], Inner
   :  +- Generate inline(array(struct(col1, (3 * outer(col1#x)), col2, (4 * outer(col1#x))))), false, [col1#x, col2#x]
   :     +- OneRowRelation
   +- SubqueryAlias t
      +- Generate inline(array(struct(col1, 1, col2, a), struct(col1, 2, col2, b))), false, [col1#x, col2#x]
         +- OneRowRelation


-- !query
SELECT num, val, 'Spark' FROM inline(array(struct(1, 'a'), struct(2, 'b'))) AS t(num, val)
-- !query analysis
Project [num#x, val#x, Spark AS Spark#x]
+- SubqueryAlias t
   +- Project [col1#x AS num#x, col2#x AS val#x]
      +- Generate inline(array(struct(col1, 1, col2, a), struct(col1, 2, col2, b))), false, [col1#x, col2#x]
         +- OneRowRelation


-- !query
SELECT * FROM explode(collection => explode(array(1)))
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_GENERATOR.NESTED_IN_EXPRESSIONS",
  "sqlState" : "42K0E",
  "messageParameters" : {
    "expression" : "\"explode(explode(array(1)))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 15,
    "stopIndex" : 54,
    "fragment" : "explode(collection => explode(array(1)))"
  } ]
}


-- !query
SELECT * FROM explode(collection => explode(collection => array(1)))
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_GENERATOR.NESTED_IN_EXPRESSIONS",
  "sqlState" : "42K0E",
  "messageParameters" : {
    "expression" : "\"explode(explode(array(1)))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 15,
    "stopIndex" : 68,
    "fragment" : "explode(collection => explode(collection => array(1)))"
  } ]
}


-- !query
CREATE OR REPLACE TEMPORARY VIEW v AS SELECT id FROM range(0, 8)
-- !query analysis
CreateViewCommand `v`, SELECT id FROM range(0, 8), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [id#xL]
      +- Range (0, 8, step=1)


-- !query
SELECT * FROM explode(collection => TABLE(v))
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"functiontablesubqueryargumentexpression()\"",
    "inputType" : "\"STRUCT<id: BIGINT NOT NULL>\"",
    "paramIndex" : "first",
    "requiredType" : "(\"ARRAY\" or \"MAP\")",
    "sqlExpr" : "\"explode(functiontablesubqueryargumentexpression())\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 15,
    "stopIndex" : 45,
    "fragment" : "explode(collection => TABLE(v))"
  } ]
}


-- !query
SELECT mask(lowerChar => 'q', 'AbCD123-@$#', upperChar => 'Q', otherChar => 'o', digitChar => 'd')
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNEXPECTED_POSITIONAL_ARGUMENT",
  "sqlState" : "4274K",
  "messageParameters" : {
    "parameterName" : "`lowerChar`",
    "routineName" : "`mask`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 98,
    "fragment" : "mask(lowerChar => 'q', 'AbCD123-@$#', upperChar => 'Q', otherChar => 'o', digitChar => 'd')"
  } ]
}


-- !query
SELECT mask('AbCD123-@$#', lowerChar => 'q', upperChar => 'Q', otherChar => 'o', digitChar => 'd', digitChar => 'e')
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "DUPLICATE_ROUTINE_PARAMETER_ASSIGNMENT.DOUBLE_NAMED_ARGUMENT_REFERENCE",
  "sqlState" : "4274K",
  "messageParameters" : {
    "parameterName" : "`digitChar`",
    "routineName" : "`mask`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 116,
    "fragment" : "mask('AbCD123-@$#', lowerChar => 'q', upperChar => 'Q', otherChar => 'o', digitChar => 'd', digitChar => 'e')"
  } ]
}


-- !query
SELECT mask('AbCD123-@$#', lowerChar => 'q', upperChar => 'Q', otherChar => 'o', digitChar => 'd', str => 'AbC')
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "DUPLICATE_ROUTINE_PARAMETER_ASSIGNMENT.BOTH_POSITIONAL_AND_NAMED",
  "sqlState" : "4274K",
  "messageParameters" : {
    "parameterName" : "`str`",
    "routineName" : "`mask`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 112,
    "fragment" : "mask('AbCD123-@$#', lowerChar => 'q', upperChar => 'Q', otherChar => 'o', digitChar => 'd', str => 'AbC')"
  } ]
}


-- !query
SELECT mask(lowerChar => 'q', upperChar => 'Q', otherChar => 'o', digitChar => 'd')
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "REQUIRED_PARAMETER_NOT_FOUND",
  "sqlState" : "4274K",
  "messageParameters" : {
    "index" : "0",
    "parameterName" : "`str`",
    "routineName" : "`mask`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 83,
    "fragment" : "mask(lowerChar => 'q', upperChar => 'Q', otherChar => 'o', digitChar => 'd')"
  } ]
}


-- !query
SELECT mask('AbCD123-@$#', lowerChar => 'q', upperChar => 'Q', otherChar => 'o', digitChar => 'd', cellular => 'automata')
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNRECOGNIZED_PARAMETER_NAME",
  "sqlState" : "4274K",
  "messageParameters" : {
    "argumentName" : "`cellular`",
    "proposal" : "`str` `upperChar` `otherChar`",
    "routineName" : "`mask`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 122,
    "fragment" : "mask('AbCD123-@$#', lowerChar => 'q', upperChar => 'Q', otherChar => 'o', digitChar => 'd', cellular => 'automata')"
  } ]
}


-- !query
SELECT encode(str => 'a', charset => 'utf-8')
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "NAMED_PARAMETERS_NOT_SUPPORTED",
  "sqlState" : "4274K",
  "messageParameters" : {
    "functionName" : "`encode`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 45,
    "fragment" : "encode(str => 'a', charset => 'utf-8')"
  } ]
}


-- !query
SELECT mask('AbCD123-@$#', 'Q', 'q', 'd', 'o', 'k')
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "WRONG_NUM_ARGS.WITHOUT_SUGGESTION",
  "sqlState" : "42605",
  "messageParameters" : {
    "actualNum" : "6",
    "docroot" : "https://spark.apache.org/docs/latest",
    "expectedNum" : "[1, 2, 3, 4, 5]",
    "functionName" : "`mask`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 51,
    "fragment" : "mask('AbCD123-@$#', 'Q', 'q', 'd', 'o', 'k')"
  } ]
}
