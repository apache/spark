-- Automatically generated by SQLQueryTestSuite
-- !query
drop table if exists t
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t


-- !query
create table t(x int, y string) using csv
-- !query analysis
CreateDataSourceTableCommand `spark_catalog`.`default`.`t`, false


-- !query
insert into t values (0, 'abc'), (1, 'def')
-- !query analysis
InsertIntoHadoopFsRelationCommand file:[not included in comparison]/{warehouse_dir}/t, false, CSV, [path=file:[not included in comparison]/{warehouse_dir}/t], Append, `spark_catalog`.`default`.`t`, org.apache.spark.sql.execution.datasources.InMemoryFileIndex(file:[not included in comparison]/{warehouse_dir}/t), [x, y]
+- Project [cast(col1#x as int) AS x#x, cast(col2#x as string) AS y#x]
   +- LocalRelation [col1#x, col2#x]


-- !query
drop table if exists other
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.other


-- !query
create table other(a int, b int) using json
-- !query analysis
CreateDataSourceTableCommand `spark_catalog`.`default`.`other`, false


-- !query
insert into other values (1, 1), (1, 2), (2, 4)
-- !query analysis
InsertIntoHadoopFsRelationCommand file:[not included in comparison]/{warehouse_dir}/other, false, JSON, [path=file:[not included in comparison]/{warehouse_dir}/other], Append, `spark_catalog`.`default`.`other`, org.apache.spark.sql.execution.datasources.InMemoryFileIndex(file:[not included in comparison]/{warehouse_dir}/other), [a, b]
+- Project [cast(col1#x as int) AS a#x, cast(col2#x as int) AS b#x]
   +- LocalRelation [col1#x, col2#x]


-- !query
drop table if exists st
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.st


-- !query
create table st(x int, col struct<i1:int, i2:int>) using parquet
-- !query analysis
CreateDataSourceTableCommand `spark_catalog`.`default`.`st`, false


-- !query
insert into st values (1, (2, 3))
-- !query analysis
InsertIntoHadoopFsRelationCommand file:[not included in comparison]/{warehouse_dir}/st, false, Parquet, [path=file:[not included in comparison]/{warehouse_dir}/st], Append, `spark_catalog`.`default`.`st`, org.apache.spark.sql.execution.datasources.InMemoryFileIndex(file:[not included in comparison]/{warehouse_dir}/st), [x, col]
+- Project [cast(col1#x as int) AS x#x, named_struct(i1, cast(col2#x.col1 as int), i2, cast(col2#x.col2 as int)) AS col#x]
   +- LocalRelation [col1#x, col2#x]


-- !query
create temporary view courseSales as select * from values
  ("dotNET", 2012, 10000),
  ("Java", 2012, 20000),
  ("dotNET", 2012, 5000),
  ("dotNET", 2013, 48000),
  ("Java", 2013, 30000)
  as courseSales(course, year, earnings)
-- !query analysis
CreateViewCommand `courseSales`, select * from values
  ("dotNET", 2012, 10000),
  ("Java", 2012, 20000),
  ("dotNET", 2012, 5000),
  ("dotNET", 2013, 48000),
  ("Java", 2013, 30000)
  as courseSales(course, year, earnings), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [course#x, year#x, earnings#x]
      +- SubqueryAlias courseSales
         +- LocalRelation [course#x, year#x, earnings#x]


-- !query
create temporary view courseEarnings as select * from values
  ("dotNET", 15000, 48000, 22500),
  ("Java", 20000, 30000, NULL)
  as courseEarnings(course, `2012`, `2013`, `2014`)
-- !query analysis
CreateViewCommand `courseEarnings`, select * from values
  ("dotNET", 15000, 48000, 22500),
  ("Java", 20000, 30000, NULL)
  as courseEarnings(course, `2012`, `2013`, `2014`), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [course#x, 2012#x, 2013#x, 2014#x]
      +- SubqueryAlias courseEarnings
         +- LocalRelation [course#x, 2012#x, 2013#x, 2014#x]


-- !query
create temporary view courseEarningsAndSales as select * from values
  ("dotNET", 15000, NULL, 48000, 1, 22500, 1),
  ("Java", 20000, 1, 30000, 2, NULL, NULL)
  as courseEarningsAndSales(
    course, earnings2012, sales2012, earnings2013, sales2013, earnings2014, sales2014)
-- !query analysis
CreateViewCommand `courseEarningsAndSales`, select * from values
  ("dotNET", 15000, NULL, 48000, 1, 22500, 1),
  ("Java", 20000, 1, 30000, 2, NULL, NULL)
  as courseEarningsAndSales(
    course, earnings2012, sales2012, earnings2013, sales2013, earnings2014, sales2014), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [course#x, earnings2012#x, sales2012#x, earnings2013#x, sales2013#x, earnings2014#x, sales2014#x]
      +- SubqueryAlias courseEarningsAndSales
         +- LocalRelation [course#x, earnings2012#x, sales2012#x, earnings2013#x, sales2013#x, earnings2014#x, sales2014#x]


-- !query
create temporary view yearsWithComplexTypes as select * from values
  (2012, array(1, 1), map('1', 1), struct(1, 'a')),
  (2013, array(2, 2), map('2', 2), struct(2, 'b'))
  as yearsWithComplexTypes(y, a, m, s)
-- !query analysis
CreateViewCommand `yearsWithComplexTypes`, select * from values
  (2012, array(1, 1), map('1', 1), struct(1, 'a')),
  (2013, array(2, 2), map('2', 2), struct(2, 'b'))
  as yearsWithComplexTypes(y, a, m, s), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [y#x, a#x, m#x, s#x]
      +- SubqueryAlias yearsWithComplexTypes
         +- LocalRelation [y#x, a#x, m#x, s#x]


-- !query
create temporary view join_test_t1 as select * from values (1) as grouping(a)
-- !query analysis
CreateViewCommand `join_test_t1`, select * from values (1) as grouping(a), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [a#x]
      +- SubqueryAlias grouping
         +- LocalRelation [a#x]


-- !query
create temporary view join_test_t2 as select * from values (1) as grouping(a)
-- !query analysis
CreateViewCommand `join_test_t2`, select * from values (1) as grouping(a), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [a#x]
      +- SubqueryAlias grouping
         +- LocalRelation [a#x]


-- !query
create temporary view join_test_t3 as select * from values (1) as grouping(a)
-- !query analysis
CreateViewCommand `join_test_t3`, select * from values (1) as grouping(a), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [a#x]
      +- SubqueryAlias grouping
         +- LocalRelation [a#x]


-- !query
create temporary view join_test_empty_table as select a from join_test_t2 where false
-- !query analysis
CreateViewCommand `join_test_empty_table`, select a from join_test_t2 where false, false, false, LocalTempView, UNSUPPORTED, true
   +- Project [a#x]
      +- Filter false
         +- SubqueryAlias join_test_t2
            +- View (`join_test_t2`, [a#x])
               +- Project [cast(a#x as int) AS a#x]
                  +- Project [a#x]
                     +- SubqueryAlias grouping
                        +- LocalRelation [a#x]


-- !query
create temporary view lateral_test_t1(c1, c2)
  as values (0, 1), (1, 2)
-- !query analysis
CreateViewCommand `lateral_test_t1`, [(c1,None), (c2,None)], values (0, 1), (1, 2), false, false, LocalTempView, UNSUPPORTED, true
   +- LocalRelation [col1#x, col2#x]


-- !query
create temporary view lateral_test_t2(c1, c2)
  as values (0, 2), (0, 3)
-- !query analysis
CreateViewCommand `lateral_test_t2`, [(c1,None), (c2,None)], values (0, 2), (0, 3), false, false, LocalTempView, UNSUPPORTED, true
   +- LocalRelation [col1#x, col2#x]


-- !query
create temporary view lateral_test_t3(c1, c2)
  as values (0, array(0, 1)), (1, array(2)), (2, array()), (null, array(4))
-- !query analysis
CreateViewCommand `lateral_test_t3`, [(c1,None), (c2,None)], values (0, array(0, 1)), (1, array(2)), (2, array()), (null, array(4)), false, false, LocalTempView, UNSUPPORTED, true
   +- LocalRelation [col1#x, col2#x]


-- !query
create temporary view lateral_test_t4(c1, c2)
  as values (0, 1), (0, 2), (1, 1), (1, 3)
-- !query analysis
CreateViewCommand `lateral_test_t4`, [(c1,None), (c2,None)], values (0, 1), (0, 2), (1, 1), (1, 3), false, false, LocalTempView, UNSUPPORTED, true
   +- LocalRelation [col1#x, col2#x]


-- !query
create temporary view natural_join_test_t1 as select * from values
  ("one", 1), ("two", 2), ("three", 3) as natural_join_test_t1(k, v1)
-- !query analysis
CreateViewCommand `natural_join_test_t1`, select * from values
  ("one", 1), ("two", 2), ("three", 3) as natural_join_test_t1(k, v1), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [k#x, v1#x]
      +- SubqueryAlias natural_join_test_t1
         +- LocalRelation [k#x, v1#x]


-- !query
create temporary view natural_join_test_t2 as select * from values
  ("one", 1), ("two", 22), ("one", 5) as natural_join_test_t2(k, v2)
-- !query analysis
CreateViewCommand `natural_join_test_t2`, select * from values
  ("one", 1), ("two", 22), ("one", 5) as natural_join_test_t2(k, v2), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [k#x, v2#x]
      +- SubqueryAlias natural_join_test_t2
         +- LocalRelation [k#x, v2#x]


-- !query
create temporary view natural_join_test_t3 as select * from values
  ("one", 4), ("two", 5), ("one", 6) as natural_join_test_t3(k, v3)
-- !query analysis
CreateViewCommand `natural_join_test_t3`, select * from values
  ("one", 4), ("two", 5), ("one", 6) as natural_join_test_t3(k, v3), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [k#x, v3#x]
      +- SubqueryAlias natural_join_test_t3
         +- LocalRelation [k#x, v3#x]


-- !query
create temporary view windowTestData as select * from values
  (null, 1L, 1.0D, date("2017-08-01"), timestamp_seconds(1501545600), "a"),
  (1, 1L, 1.0D, date("2017-08-01"), timestamp_seconds(1501545600), "a"),
  (1, 2L, 2.5D, date("2017-08-02"), timestamp_seconds(1502000000), "a"),
  (2, 2147483650L, 100.001D, date("2020-12-31"), timestamp_seconds(1609372800), "a"),
  (1, null, 1.0D, date("2017-08-01"), timestamp_seconds(1501545600), "b"),
  (2, 3L, 3.3D, date("2017-08-03"), timestamp_seconds(1503000000), "b"),
  (3, 2147483650L, 100.001D, date("2020-12-31"), timestamp_seconds(1609372800), "b"),
  (null, null, null, null, null, null),
  (3, 1L, 1.0D, date("2017-08-01"), timestamp_seconds(1501545600), null)
  AS testData(val, val_long, val_double, val_date, val_timestamp, cate)
-- !query analysis
CreateViewCommand `windowTestData`, select * from values
  (null, 1L, 1.0D, date("2017-08-01"), timestamp_seconds(1501545600), "a"),
  (1, 1L, 1.0D, date("2017-08-01"), timestamp_seconds(1501545600), "a"),
  (1, 2L, 2.5D, date("2017-08-02"), timestamp_seconds(1502000000), "a"),
  (2, 2147483650L, 100.001D, date("2020-12-31"), timestamp_seconds(1609372800), "a"),
  (1, null, 1.0D, date("2017-08-01"), timestamp_seconds(1501545600), "b"),
  (2, 3L, 3.3D, date("2017-08-03"), timestamp_seconds(1503000000), "b"),
  (3, 2147483650L, 100.001D, date("2020-12-31"), timestamp_seconds(1609372800), "b"),
  (null, null, null, null, null, null),
  (3, 1L, 1.0D, date("2017-08-01"), timestamp_seconds(1501545600), null)
  AS testData(val, val_long, val_double, val_date, val_timestamp, cate), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [val#x, val_long#xL, val_double#x, val_date#x, val_timestamp#x, cate#x]
      +- SubqueryAlias testData
         +- LocalRelation [val#x, val_long#xL, val_double#x, val_date#x, val_timestamp#x, cate#x]


-- !query
table t
|> select 1 as x
-- !query analysis
Project [pipeselect(1) AS x#x]
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> select x, y
-- !query analysis
Project [x#x, y#x]
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> select x, y
|> select x + length(y) as z
-- !query analysis
Project [pipeselect((x#x + length(y#x))) AS z#x]
+- Project [x#x, y#x]
   +- SubqueryAlias spark_catalog.default.t
      +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
values (0), (1) tab(col)
|> select col * 2 as result
-- !query analysis
Project [pipeselect((col#x * 2)) AS result#x]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
(select * from t union all select * from t)
|> select x + length(y) as result
-- !query analysis
Project [pipeselect((x#x + length(y#x))) AS result#x]
+- Union false, false
   :- Project [x#x, y#x]
   :  +- SubqueryAlias spark_catalog.default.t
   :     +- Relation spark_catalog.default.t[x#x,y#x] csv
   +- Project [x#x, y#x]
      +- SubqueryAlias spark_catalog.default.t
         +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
(table t
 |> select x, y
 |> select x)
union all
select x from t where x < 1
-- !query analysis
Union false, false
:- Project [x#x]
:  +- Project [x#x, y#x]
:     +- SubqueryAlias spark_catalog.default.t
:        +- Relation spark_catalog.default.t[x#x,y#x] csv
+- Project [x#x]
   +- Filter (x#x < 1)
      +- SubqueryAlias spark_catalog.default.t
         +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
(select col from st)
|> select col.i1
-- !query analysis
Project [col#x.i1 AS i1#x]
+- Project [col#x]
   +- SubqueryAlias spark_catalog.default.st
      +- Relation spark_catalog.default.st[x#x,col#x] parquet


-- !query
table st
|> select st.col.i1
-- !query analysis
Project [col#x.i1 AS i1#x]
+- SubqueryAlias spark_catalog.default.st
   +- Relation spark_catalog.default.st[x#x,col#x] parquet


-- !query
table t
|> select (select a from other where x = a limit 1) as result
-- !query analysis
Project [pipeselect(scalar-subquery#x [x#x]) AS result#x]
:  +- GlobalLimit 1
:     +- LocalLimit 1
:        +- Project [a#x]
:           +- Filter (outer(x#x) = a#x)
:              +- SubqueryAlias spark_catalog.default.other
:                 +- Relation spark_catalog.default.other[a#x,b#x] json
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
select (values (0) tab(col) |> select col) as result
-- !query analysis
Project [scalar-subquery#x [] AS result#x]
:  +- Project [col#x]
:     +- SubqueryAlias tab
:        +- LocalRelation [col#x]
+- OneRowRelation


-- !query
table t
|> select (select any_value(a) from other where x = a limit 1) as result
-- !query analysis
Project [pipeselect(scalar-subquery#x [x#x]) AS result#x]
:  +- GlobalLimit 1
:     +- LocalLimit 1
:        +- Aggregate [any_value(a#x, false) AS any_value(a)#x]
:           +- Filter (outer(x#x) = a#x)
:              +- SubqueryAlias spark_catalog.default.other
:                 +- Relation spark_catalog.default.other[a#x,b#x] json
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> select x + length(x) as z, z + 1 as plus_one
-- !query analysis
Project [z#x, pipeselect((z#x + 1)) AS plus_one#x]
+- Project [x#x, y#x, pipeselect((x#x + length(cast(x#x as string)))) AS z#x]
   +- SubqueryAlias spark_catalog.default.t
      +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> select first_value(x) over (partition by y) as result
-- !query analysis
Project [result#x]
+- Project [x#x, y#x, _we0#x, pipeselect(_we0#x) AS result#x]
   +- Window [first_value(x#x, false) windowspecdefinition(y#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#x], [y#x]
      +- Project [x#x, y#x]
         +- SubqueryAlias spark_catalog.default.t
            +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
select 1 x, 2 y, 3 z
|> select 1 + sum(x) over (),
     avg(y) over (),
     x,
     avg(x+1) over (partition by y order by z) AS a2
|> select a2
-- !query analysis
Project [a2#x]
+- Project [(1 + sum(x) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))#xL, avg(y) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, x#x, a2#x]
   +- Project [x#x, y#x, _w1#x, z#x, _we0#xL, avg(y) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, _we2#x, (cast(1 as bigint) + _we0#xL) AS (1 + sum(x) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))#xL, avg(y) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, pipeselect(_we2#x) AS a2#x]
      +- Window [avg(_w1#x) windowspecdefinition(y#x, z#x ASC NULLS FIRST, specifiedwindowframe(RangeFrame, unboundedpreceding$(), currentrow$())) AS _we2#x], [y#x], [z#x ASC NULLS FIRST]
         +- Window [sum(x#x) windowspecdefinition(specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#xL, avg(y#x) windowspecdefinition(specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg(y) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
            +- Project [x#x, y#x, (x#x + 1) AS _w1#x, z#x]
               +- Project [1 AS x#x, 2 AS y#x, 3 AS z#x]
                  +- OneRowRelation


-- !query
table t
|> select x, count(*) over ()
|> select x
-- !query analysis
Project [x#x]
+- Project [x#x, count(1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#xL]
   +- Project [x#x, count(1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#xL, count(1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#xL]
      +- Window [count(1) windowspecdefinition(specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS count(1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#xL]
         +- Project [x#x]
            +- SubqueryAlias spark_catalog.default.t
               +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> select distinct x, y
-- !query analysis
Distinct
+- Project [x#x, y#x]
   +- SubqueryAlias spark_catalog.default.t
      +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> select *
-- !query analysis
Project [x#x, y#x]
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> select * except (y)
-- !query analysis
Project [x#x]
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> select /*+ repartition(3) */ *
-- !query analysis
Repartition 3, true
+- Project [x#x, y#x]
   +- SubqueryAlias spark_catalog.default.t
      +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> select /*+ repartition(3) */ distinct x
-- !query analysis
Repartition 3, true
+- Distinct
   +- Project [x#x]
      +- SubqueryAlias spark_catalog.default.t
         +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> select /*+ repartition(3) */ all x
-- !query analysis
Repartition 3, true
+- Project [x#x]
   +- SubqueryAlias spark_catalog.default.t
      +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> select sum(x) as result
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "PIPE_OPERATOR_SELECT_CONTAINS_AGGREGATE_FUNCTION",
  "sqlState" : "0A000",
  "messageParameters" : {
    "expr" : "sum(x#x)"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 19,
    "stopIndex" : 24,
    "fragment" : "sum(x)"
  } ]
}


-- !query
table t
|> select y, length(y) + sum(x) as result
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "PIPE_OPERATOR_SELECT_CONTAINS_AGGREGATE_FUNCTION",
  "sqlState" : "0A000",
  "messageParameters" : {
    "expr" : "sum(x#x)"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 34,
    "stopIndex" : 39,
    "fragment" : "sum(x)"
  } ]
}


-- !query
table t
|> where true
-- !query analysis
Filter true
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> where x + length(y) < 4
-- !query analysis
Filter ((x#x + length(y#x)) < 4)
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> where x + length(y) < 4
|> where x + length(y) < 3
-- !query analysis
Filter ((x#x + length(y#x)) < 3)
+- SubqueryAlias __auto_generated_subquery_name
   +- Filter ((x#x + length(y#x)) < 4)
      +- SubqueryAlias spark_catalog.default.t
         +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
(select x, sum(length(y)) as sum_len from t group by x)
|> where x = 1
-- !query analysis
Filter (x#x = 1)
+- SubqueryAlias __auto_generated_subquery_name
   +- Aggregate [x#x], [x#x, sum(length(y#x)) AS sum_len#xL]
      +- SubqueryAlias spark_catalog.default.t
         +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> where t.x = 1
-- !query analysis
Filter (x#x = 1)
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> where spark_catalog.default.t.x = 1
-- !query analysis
Filter (x#x = 1)
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
(select col from st)
|> where col.i1 = 1
-- !query analysis
Filter (col#x.i1 = 1)
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [col#x]
      +- SubqueryAlias spark_catalog.default.st
         +- Relation spark_catalog.default.st[x#x,col#x] parquet


-- !query
table st
|> where st.col.i1 = 2
-- !query analysis
Filter (col#x.i1 = 2)
+- SubqueryAlias spark_catalog.default.st
   +- Relation spark_catalog.default.st[x#x,col#x] parquet


-- !query
table t
|> where exists (select a from other where x = a limit 1)
-- !query analysis
Filter exists#x [x#x]
:  +- GlobalLimit 1
:     +- LocalLimit 1
:        +- Project [a#x]
:           +- Filter (outer(x#x) = a#x)
:              +- SubqueryAlias spark_catalog.default.other
:                 +- Relation spark_catalog.default.other[a#x,b#x] json
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> where (select any_value(a) from other where x = a limit 1) = 1
-- !query analysis
Filter (scalar-subquery#x [x#x] = 1)
:  +- GlobalLimit 1
:     +- LocalLimit 1
:        +- Aggregate [any_value(a#x, false) AS any_value(a)#x]
:           +- Filter (outer(x#x) = a#x)
:              +- SubqueryAlias spark_catalog.default.other
:                 +- Relation spark_catalog.default.other[a#x,b#x] json
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> where sum(x) = 1
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_WHERE_CONDITION",
  "sqlState" : "42903",
  "messageParameters" : {
    "condition" : "\"(sum(x) = 1)\"",
    "expressionList" : "sum(spark_catalog.default.t.x)"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 27,
    "fragment" : "table t\n|> where sum(x) = 1"
  } ]
}


-- !query
table t
|> where y = 'abc' or length(y) + sum(x) = 1
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_WHERE_CONDITION",
  "sqlState" : "42903",
  "messageParameters" : {
    "condition" : "\"((y = abc) OR ((length(y) + sum(x)) = 1))\"",
    "expressionList" : "sum(spark_catalog.default.t.x)"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 52,
    "fragment" : "table t\n|> where y = 'abc' or length(y) + sum(x) = 1"
  } ]
}


-- !query
table t
|> where first_value(x) over (partition by y) = 1
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_1034",
  "messageParameters" : {
    "clauseName" : "WHERE"
  }
}


-- !query
select * from t where first_value(x) over (partition by y) = 1
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_1034",
  "messageParameters" : {
    "clauseName" : "WHERE"
  }
}


-- !query
table t
|> select x, length(y) as z
|> where x + length(y) < 4
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`y`",
    "proposal" : "`x`, `z`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 57,
    "stopIndex" : 57,
    "fragment" : "y"
  } ]
}


-- !query
(select x, sum(length(y)) as sum_len from t group by x)
|> where sum(length(y)) = 3
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`y`",
    "proposal" : "`x`, `sum_len`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 77,
    "stopIndex" : 77,
    "fragment" : "y"
  } ]
}


-- !query
table courseSales
|> select `year`, course, earnings
|> pivot (
     sum(earnings)
     for course in ('dotNET', 'Java')
  )
-- !query analysis
Project [year#x, __pivot_sum(coursesales.earnings) AS `sum(coursesales.earnings)`#x[0] AS dotNET#xL, __pivot_sum(coursesales.earnings) AS `sum(coursesales.earnings)`#x[1] AS Java#xL]
+- Aggregate [year#x], [year#x, pivotfirst(course#x, sum(coursesales.earnings)#xL, dotNET, Java, 0, 0) AS __pivot_sum(coursesales.earnings) AS `sum(coursesales.earnings)`#x]
   +- Aggregate [year#x, course#x], [year#x, course#x, sum(earnings#x) AS sum(coursesales.earnings)#xL]
      +- Project [year#x, course#x, earnings#x]
         +- SubqueryAlias coursesales
            +- View (`courseSales`, [course#x, year#x, earnings#x])
               +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                  +- Project [course#x, year#x, earnings#x]
                     +- SubqueryAlias courseSales
                        +- LocalRelation [course#x, year#x, earnings#x]


-- !query
table courseSales
|> select `year` as y, course as c, earnings as e
|> pivot (
     sum(e) as s, avg(e) as a
     for y in (2012 as firstYear, 2013 as secondYear)
   )
-- !query analysis
Project [c#x, __pivot_sum(e) AS s AS `sum(e) AS s`#x[0] AS firstYear_s#xL, __pivot_avg(e) AS a AS `avg(e) AS a`#x[0] AS firstYear_a#x, __pivot_sum(e) AS s AS `sum(e) AS s`#x[1] AS secondYear_s#xL, __pivot_avg(e) AS a AS `avg(e) AS a`#x[1] AS secondYear_a#x]
+- Aggregate [c#x], [c#x, pivotfirst(y#x, sum(e) AS s#xL, 2012, 2013, 0, 0) AS __pivot_sum(e) AS s AS `sum(e) AS s`#x, pivotfirst(y#x, avg(e) AS a#x, 2012, 2013, 0, 0) AS __pivot_avg(e) AS a AS `avg(e) AS a`#x]
   +- Aggregate [c#x, y#x], [c#x, y#x, sum(e#x) AS sum(e) AS s#xL, avg(e#x) AS avg(e) AS a#x]
      +- Project [pipeselect(year#x) AS y#x, pipeselect(course#x) AS c#x, pipeselect(earnings#x) AS e#x]
         +- SubqueryAlias coursesales
            +- View (`courseSales`, [course#x, year#x, earnings#x])
               +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
                  +- Project [course#x, year#x, earnings#x]
                     +- SubqueryAlias courseSales
                        +- LocalRelation [course#x, year#x, earnings#x]


-- !query
select course, `year`, y, a
from courseSales
join yearsWithComplexTypes on `year` = y
|> pivot (
     max(a)
     for (y, course) in ((2012, 'dotNET'), (2013, 'Java'))
   )
-- !query analysis
Aggregate [year#x], [year#x, max(if ((named_struct(y, y#x, course, course#x) <=> cast(named_struct(col1, 2012, col2, dotNET) as struct<y:int,course:string>))) a#x else cast(null as array<int>)) AS {2012, dotNET}#x, max(if ((named_struct(y, y#x, course, course#x) <=> cast(named_struct(col1, 2013, col2, Java) as struct<y:int,course:string>))) a#x else cast(null as array<int>)) AS {2013, Java}#x]
+- Project [course#x, year#x, y#x, a#x]
   +- Join Inner, (year#x = y#x)
      :- SubqueryAlias coursesales
      :  +- View (`courseSales`, [course#x, year#x, earnings#x])
      :     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
      :        +- Project [course#x, year#x, earnings#x]
      :           +- SubqueryAlias courseSales
      :              +- LocalRelation [course#x, year#x, earnings#x]
      +- SubqueryAlias yearswithcomplextypes
         +- View (`yearsWithComplexTypes`, [y#x, a#x, m#x, s#x])
            +- Project [cast(y#x as int) AS y#x, cast(a#x as array<int>) AS a#x, cast(m#x as map<string,int>) AS m#x, cast(s#x as struct<col1:int,col2:string>) AS s#x]
               +- Project [y#x, a#x, m#x, s#x]
                  +- SubqueryAlias yearsWithComplexTypes
                     +- LocalRelation [y#x, a#x, m#x, s#x]


-- !query
select earnings, `year`, s
from courseSales
join yearsWithComplexTypes on `year` = y
|> pivot (
     sum(earnings)
     for s in ((1, 'a'), (2, 'b'))
   )
-- !query analysis
Project [year#x, __pivot_sum(coursesales.earnings) AS `sum(coursesales.earnings)`#x[0] AS {1, a}#xL, __pivot_sum(coursesales.earnings) AS `sum(coursesales.earnings)`#x[1] AS {2, b}#xL]
+- Aggregate [year#x], [year#x, pivotfirst(s#x, sum(coursesales.earnings)#xL, [1,a], [2,b], 0, 0) AS __pivot_sum(coursesales.earnings) AS `sum(coursesales.earnings)`#x]
   +- Aggregate [year#x, s#x], [year#x, s#x, sum(earnings#x) AS sum(coursesales.earnings)#xL]
      +- Project [earnings#x, year#x, s#x]
         +- Join Inner, (year#x = y#x)
            :- SubqueryAlias coursesales
            :  +- View (`courseSales`, [course#x, year#x, earnings#x])
            :     +- Project [cast(course#x as string) AS course#x, cast(year#x as int) AS year#x, cast(earnings#x as int) AS earnings#x]
            :        +- Project [course#x, year#x, earnings#x]
            :           +- SubqueryAlias courseSales
            :              +- LocalRelation [course#x, year#x, earnings#x]
            +- SubqueryAlias yearswithcomplextypes
               +- View (`yearsWithComplexTypes`, [y#x, a#x, m#x, s#x])
                  +- Project [cast(y#x as int) AS y#x, cast(a#x as array<int>) AS a#x, cast(m#x as map<string,int>) AS m#x, cast(s#x as struct<col1:int,col2:string>) AS s#x]
                     +- Project [y#x, a#x, m#x, s#x]
                        +- SubqueryAlias yearsWithComplexTypes
                           +- LocalRelation [y#x, a#x, m#x, s#x]


-- !query
table courseEarnings
|> unpivot (
     earningsYear for `year` in (`2012`, `2013`, `2014`)
   )
-- !query analysis
Filter isnotnull(coalesce(earningsYear#x))
+- Expand [[course#x, 2012, 2012#x], [course#x, 2013, 2013#x], [course#x, 2014, 2014#x]], [course#x, year#x, earningsYear#x]
   +- SubqueryAlias courseearnings
      +- View (`courseEarnings`, [course#x, 2012#x, 2013#x, 2014#x])
         +- Project [cast(course#x as string) AS course#x, cast(2012#x as int) AS 2012#x, cast(2013#x as int) AS 2013#x, cast(2014#x as int) AS 2014#x]
            +- Project [course#x, 2012#x, 2013#x, 2014#x]
               +- SubqueryAlias courseEarnings
                  +- LocalRelation [course#x, 2012#x, 2013#x, 2014#x]


-- !query
table courseEarnings
|> unpivot include nulls (
     earningsYear for `year` in (`2012`, `2013`, `2014`)
   )
-- !query analysis
Expand [[course#x, 2012, 2012#x], [course#x, 2013, 2013#x], [course#x, 2014, 2014#x]], [course#x, year#x, earningsYear#x]
+- SubqueryAlias courseearnings
   +- View (`courseEarnings`, [course#x, 2012#x, 2013#x, 2014#x])
      +- Project [cast(course#x as string) AS course#x, cast(2012#x as int) AS 2012#x, cast(2013#x as int) AS 2013#x, cast(2014#x as int) AS 2014#x]
         +- Project [course#x, 2012#x, 2013#x, 2014#x]
            +- SubqueryAlias courseEarnings
               +- LocalRelation [course#x, 2012#x, 2013#x, 2014#x]


-- !query
table courseEarningsAndSales
|> unpivot include nulls (
     (earnings, sales) for `year` in (
       (earnings2012, sales2012) as `2012`,
       (earnings2013, sales2013) as `2013`,
       (earnings2014, sales2014) as `2014`)
   )
-- !query analysis
Expand [[course#x, 2012, earnings2012#x, sales2012#x], [course#x, 2013, earnings2013#x, sales2013#x], [course#x, 2014, earnings2014#x, sales2014#x]], [course#x, year#x, earnings#x, sales#x]
+- SubqueryAlias courseearningsandsales
   +- View (`courseEarningsAndSales`, [course#x, earnings2012#x, sales2012#x, earnings2013#x, sales2013#x, earnings2014#x, sales2014#x])
      +- Project [cast(course#x as string) AS course#x, cast(earnings2012#x as int) AS earnings2012#x, cast(sales2012#x as int) AS sales2012#x, cast(earnings2013#x as int) AS earnings2013#x, cast(sales2013#x as int) AS sales2013#x, cast(earnings2014#x as int) AS earnings2014#x, cast(sales2014#x as int) AS sales2014#x]
         +- Project [course#x, earnings2012#x, sales2012#x, earnings2013#x, sales2013#x, earnings2014#x, sales2014#x]
            +- SubqueryAlias courseEarningsAndSales
               +- LocalRelation [course#x, earnings2012#x, sales2012#x, earnings2013#x, sales2013#x, earnings2014#x, sales2014#x]


-- !query
table courseSales
|> select course, earnings
|> pivot (
     sum(earnings)
     for `year` in (2012, 2013)
   )
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`year`",
    "proposal" : "`course`, `earnings`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 49,
    "stopIndex" : 111,
    "fragment" : "pivot (\n     sum(earnings)\n     for `year` in (2012, 2013)\n   )"
  } ]
}


-- !query
table courseSales
|> pivot (
     sum(earnings)
     for `year` in (course, 2013)
   )
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "NON_LITERAL_PIVOT_VALUES",
  "sqlState" : "42K08",
  "messageParameters" : {
    "expression" : "\"course\""
  }
}


-- !query
table courseSales
|> select course, earnings
|> pivot (
     sum(earnings)
     for `year` in (2012, 2013)
   )
   unpivot (
     earningsYear for `year` in (`2012`, `2013`, `2014`)
   )
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "NOT_ALLOWED_IN_FROM.UNPIVOT_WITH_PIVOT",
  "sqlState" : "42601",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 186,
    "fragment" : "table courseSales\n|> select course, earnings\n|> pivot (\n     sum(earnings)\n     for `year` in (2012, 2013)\n   )\n   unpivot (\n     earningsYear for `year` in (`2012`, `2013`, `2014`)\n   )"
  } ]
}


-- !query
table courseSales
|> select course, earnings
|> unpivot (
     earningsYear for `year` in (`2012`, `2013`, `2014`)
   )
   pivot (
     sum(earnings)
     for `year` in (2012, 2013)
   )
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "NOT_ALLOWED_IN_FROM.UNPIVOT_WITH_PIVOT",
  "sqlState" : "42601",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 186,
    "fragment" : "table courseSales\n|> select course, earnings\n|> unpivot (\n     earningsYear for `year` in (`2012`, `2013`, `2014`)\n   )\n   pivot (\n     sum(earnings)\n     for `year` in (2012, 2013)\n   )"
  } ]
}


-- !query
table courseSales
|> select course, earnings
|> pivot (
     sum(earnings)
     for `year` in (2012, 2013)
   )
   pivot (
     sum(earnings)
     for `year` in (2012, 2013)
   )
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'pivot'",
    "hint" : ""
  }
}


-- !query
table courseSales
|> select course, earnings
|> unpivot (
     earningsYear for `year` in (`2012`, `2013`, `2014`)
   )
   unpivot (
     earningsYear for `year` in (`2012`, `2013`, `2014`)
   )
   pivot (
     sum(earnings)
     for `year` in (2012, 2013)
   )
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'unpivot'",
    "hint" : ""
  }
}


-- !query
table t
|> tablesample (100 percent) repeatable (0)
-- !query analysis
Sample 0.0, 1.0, false, 0
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> tablesample (2 rows) repeatable (0)
-- !query analysis
GlobalLimit 2
+- LocalLimit 2
   +- SubqueryAlias spark_catalog.default.t
      +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> tablesample (bucket 1 out of 1) repeatable (0)
-- !query analysis
Sample 0.0, 1.0, false, 0
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> tablesample (100 percent) repeatable (0)
|> tablesample (5 rows) repeatable (0)
|> tablesample (bucket 1 out of 1) repeatable (0)
-- !query analysis
Sample 0.0, 1.0, false, 0
+- GlobalLimit 5
   +- LocalLimit 5
      +- Sample 0.0, 1.0, false, 0
         +- SubqueryAlias spark_catalog.default.t
            +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> tablesample ()
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_0014",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 25,
    "fragment" : "tablesample ()"
  } ]
}


-- !query
table t
|> tablesample (-100 percent) repeatable (0)
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_0064",
  "messageParameters" : {
    "msg" : "Sampling fraction (-1.0) must be on interval [0, 1]"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 52,
    "fragment" : "tablesample (-100 percent) repeatable (0)"
  } ]
}


-- !query
table t
|> tablesample (-5 rows)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_LIMIT_LIKE_EXPRESSION.IS_NEGATIVE",
  "sqlState" : "42K0E",
  "messageParameters" : {
    "expr" : "\"-5\"",
    "name" : "limit",
    "v" : "-5"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 25,
    "stopIndex" : 26,
    "fragment" : "-5"
  } ]
}


-- !query
table t
|> tablesample (x rows)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_LIMIT_LIKE_EXPRESSION.IS_UNFOLDABLE",
  "sqlState" : "42K0E",
  "messageParameters" : {
    "expr" : "\"x\"",
    "name" : "limit"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 25,
    "stopIndex" : 25,
    "fragment" : "x"
  } ]
}


-- !query
table t
|> tablesample (bucket 2 out of 1)
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_0064",
  "messageParameters" : {
    "msg" : "Sampling fraction (2.0) must be on interval [0, 1]"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 42,
    "fragment" : "tablesample (bucket 2 out of 1)"
  } ]
}


-- !query
table t
|> tablesample (200b) repeatable (0)
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_0015",
  "messageParameters" : {
    "msg" : "byteLengthLiteral"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 44,
    "fragment" : "tablesample (200b) repeatable (0)"
  } ]
}


-- !query
table t
|> tablesample (200) repeatable (0)
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_0016",
  "messageParameters" : {
    "bytesStr" : "200"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 43,
    "fragment" : "tablesample (200) repeatable (0)"
  } ]
}


-- !query
table join_test_t1
|> inner join join_test_empty_table
-- !query analysis
Join Inner
:- SubqueryAlias join_test_t1
:  +- View (`join_test_t1`, [a#x])
:     +- Project [cast(a#x as int) AS a#x]
:        +- Project [a#x]
:           +- SubqueryAlias grouping
:              +- LocalRelation [a#x]
+- SubqueryAlias join_test_empty_table
   +- View (`join_test_empty_table`, [a#x])
      +- Project [cast(a#x as int) AS a#x]
         +- Project [a#x]
            +- Filter false
               +- SubqueryAlias join_test_t2
                  +- View (`join_test_t2`, [a#x])
                     +- Project [cast(a#x as int) AS a#x]
                        +- Project [a#x]
                           +- SubqueryAlias grouping
                              +- LocalRelation [a#x]


-- !query
table join_test_t1
|> cross join join_test_empty_table
-- !query analysis
Join Cross
:- SubqueryAlias join_test_t1
:  +- View (`join_test_t1`, [a#x])
:     +- Project [cast(a#x as int) AS a#x]
:        +- Project [a#x]
:           +- SubqueryAlias grouping
:              +- LocalRelation [a#x]
+- SubqueryAlias join_test_empty_table
   +- View (`join_test_empty_table`, [a#x])
      +- Project [cast(a#x as int) AS a#x]
         +- Project [a#x]
            +- Filter false
               +- SubqueryAlias join_test_t2
                  +- View (`join_test_t2`, [a#x])
                     +- Project [cast(a#x as int) AS a#x]
                        +- Project [a#x]
                           +- SubqueryAlias grouping
                              +- LocalRelation [a#x]


-- !query
table join_test_t1
|> left outer join join_test_empty_table
-- !query analysis
Join LeftOuter
:- SubqueryAlias join_test_t1
:  +- View (`join_test_t1`, [a#x])
:     +- Project [cast(a#x as int) AS a#x]
:        +- Project [a#x]
:           +- SubqueryAlias grouping
:              +- LocalRelation [a#x]
+- SubqueryAlias join_test_empty_table
   +- View (`join_test_empty_table`, [a#x])
      +- Project [cast(a#x as int) AS a#x]
         +- Project [a#x]
            +- Filter false
               +- SubqueryAlias join_test_t2
                  +- View (`join_test_t2`, [a#x])
                     +- Project [cast(a#x as int) AS a#x]
                        +- Project [a#x]
                           +- SubqueryAlias grouping
                              +- LocalRelation [a#x]


-- !query
table join_test_t1
|> right outer join join_test_empty_table
-- !query analysis
Join RightOuter
:- SubqueryAlias join_test_t1
:  +- View (`join_test_t1`, [a#x])
:     +- Project [cast(a#x as int) AS a#x]
:        +- Project [a#x]
:           +- SubqueryAlias grouping
:              +- LocalRelation [a#x]
+- SubqueryAlias join_test_empty_table
   +- View (`join_test_empty_table`, [a#x])
      +- Project [cast(a#x as int) AS a#x]
         +- Project [a#x]
            +- Filter false
               +- SubqueryAlias join_test_t2
                  +- View (`join_test_t2`, [a#x])
                     +- Project [cast(a#x as int) AS a#x]
                        +- Project [a#x]
                           +- SubqueryAlias grouping
                              +- LocalRelation [a#x]


-- !query
table join_test_t1
|> full outer join join_test_empty_table using (a)
-- !query analysis
Project [coalesce(a#x, a#x) AS a#x]
+- Join FullOuter, (a#x = a#x)
   :- SubqueryAlias join_test_t1
   :  +- View (`join_test_t1`, [a#x])
   :     +- Project [cast(a#x as int) AS a#x]
   :        +- Project [a#x]
   :           +- SubqueryAlias grouping
   :              +- LocalRelation [a#x]
   +- SubqueryAlias join_test_empty_table
      +- View (`join_test_empty_table`, [a#x])
         +- Project [cast(a#x as int) AS a#x]
            +- Project [a#x]
               +- Filter false
                  +- SubqueryAlias join_test_t2
                     +- View (`join_test_t2`, [a#x])
                        +- Project [cast(a#x as int) AS a#x]
                           +- Project [a#x]
                              +- SubqueryAlias grouping
                                 +- LocalRelation [a#x]


-- !query
table join_test_t1
|> full outer join join_test_empty_table on (join_test_t1.a = join_test_empty_table.a)
-- !query analysis
Join FullOuter, (a#x = a#x)
:- SubqueryAlias join_test_t1
:  +- View (`join_test_t1`, [a#x])
:     +- Project [cast(a#x as int) AS a#x]
:        +- Project [a#x]
:           +- SubqueryAlias grouping
:              +- LocalRelation [a#x]
+- SubqueryAlias join_test_empty_table
   +- View (`join_test_empty_table`, [a#x])
      +- Project [cast(a#x as int) AS a#x]
         +- Project [a#x]
            +- Filter false
               +- SubqueryAlias join_test_t2
                  +- View (`join_test_t2`, [a#x])
                     +- Project [cast(a#x as int) AS a#x]
                        +- Project [a#x]
                           +- SubqueryAlias grouping
                              +- LocalRelation [a#x]


-- !query
table join_test_t1
|> left semi join join_test_empty_table
-- !query analysis
Join LeftSemi
:- SubqueryAlias join_test_t1
:  +- View (`join_test_t1`, [a#x])
:     +- Project [cast(a#x as int) AS a#x]
:        +- Project [a#x]
:           +- SubqueryAlias grouping
:              +- LocalRelation [a#x]
+- SubqueryAlias join_test_empty_table
   +- View (`join_test_empty_table`, [a#x])
      +- Project [cast(a#x as int) AS a#x]
         +- Project [a#x]
            +- Filter false
               +- SubqueryAlias join_test_t2
                  +- View (`join_test_t2`, [a#x])
                     +- Project [cast(a#x as int) AS a#x]
                        +- Project [a#x]
                           +- SubqueryAlias grouping
                              +- LocalRelation [a#x]


-- !query
table join_test_t1
|> left anti join join_test_empty_table
-- !query analysis
Join LeftAnti
:- SubqueryAlias join_test_t1
:  +- View (`join_test_t1`, [a#x])
:     +- Project [cast(a#x as int) AS a#x]
:        +- Project [a#x]
:           +- SubqueryAlias grouping
:              +- LocalRelation [a#x]
+- SubqueryAlias join_test_empty_table
   +- View (`join_test_empty_table`, [a#x])
      +- Project [cast(a#x as int) AS a#x]
         +- Project [a#x]
            +- Filter false
               +- SubqueryAlias join_test_t2
                  +- View (`join_test_t2`, [a#x])
                     +- Project [cast(a#x as int) AS a#x]
                        +- Project [a#x]
                           +- SubqueryAlias grouping
                              +- LocalRelation [a#x]


-- !query
select * from join_test_t1 where true
|> inner join join_test_empty_table
-- !query analysis
Join Inner
:- Project [a#x]
:  +- Filter true
:     +- SubqueryAlias join_test_t1
:        +- View (`join_test_t1`, [a#x])
:           +- Project [cast(a#x as int) AS a#x]
:              +- Project [a#x]
:                 +- SubqueryAlias grouping
:                    +- LocalRelation [a#x]
+- SubqueryAlias join_test_empty_table
   +- View (`join_test_empty_table`, [a#x])
      +- Project [cast(a#x as int) AS a#x]
         +- Project [a#x]
            +- Filter false
               +- SubqueryAlias join_test_t2
                  +- View (`join_test_t2`, [a#x])
                     +- Project [cast(a#x as int) AS a#x]
                        +- Project [a#x]
                           +- SubqueryAlias grouping
                              +- LocalRelation [a#x]


-- !query
select 1 as x, 2 as y
|> inner join (select 1 as x, 4 as y) using (x)
-- !query analysis
Project [x#x, y#x, y#x]
+- Join Inner, (x#x = x#x)
   :- Project [1 AS x#x, 2 AS y#x]
   :  +- OneRowRelation
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [1 AS x#x, 4 AS y#x]
         +- OneRowRelation


-- !query
table join_test_t1
|> inner join (join_test_t2 jt2 inner join join_test_t3 jt3 using (a)) using (a)
|> select a, join_test_t1.a, jt2.a, jt3.a
-- !query analysis
Project [a#x, a#x, a#x, a#x]
+- Project [a#x, a#x, a#x]
   +- Join Inner, (a#x = a#x)
      :- SubqueryAlias join_test_t1
      :  +- View (`join_test_t1`, [a#x])
      :     +- Project [cast(a#x as int) AS a#x]
      :        +- Project [a#x]
      :           +- SubqueryAlias grouping
      :              +- LocalRelation [a#x]
      +- Project [a#x, a#x]
         +- Join Inner, (a#x = a#x)
            :- SubqueryAlias jt2
            :  +- SubqueryAlias join_test_t2
            :     +- View (`join_test_t2`, [a#x])
            :        +- Project [cast(a#x as int) AS a#x]
            :           +- Project [a#x]
            :              +- SubqueryAlias grouping
            :                 +- LocalRelation [a#x]
            +- SubqueryAlias jt3
               +- SubqueryAlias join_test_t3
                  +- View (`join_test_t3`, [a#x])
                     +- Project [cast(a#x as int) AS a#x]
                        +- Project [a#x]
                           +- SubqueryAlias grouping
                              +- LocalRelation [a#x]


-- !query
table join_test_t1
|> inner join join_test_t2 tablesample (100 percent) repeatable (0) jt2 using (a)
-- !query analysis
Project [a#x]
+- Join Inner, (a#x = a#x)
   :- SubqueryAlias join_test_t1
   :  +- View (`join_test_t1`, [a#x])
   :     +- Project [cast(a#x as int) AS a#x]
   :        +- Project [a#x]
   :           +- SubqueryAlias grouping
   :              +- LocalRelation [a#x]
   +- Sample 0.0, 1.0, false, 0
      +- SubqueryAlias jt2
         +- SubqueryAlias join_test_t2
            +- View (`join_test_t2`, [a#x])
               +- Project [cast(a#x as int) AS a#x]
                  +- Project [a#x]
                     +- SubqueryAlias grouping
                        +- LocalRelation [a#x]


-- !query
table join_test_t1
|> inner join (select 1 as a) tablesample (100 percent) repeatable (0) jt2 using (a)
-- !query analysis
Project [a#x]
+- Join Inner, (a#x = a#x)
   :- SubqueryAlias join_test_t1
   :  +- View (`join_test_t1`, [a#x])
   :     +- Project [cast(a#x as int) AS a#x]
   :        +- Project [a#x]
   :           +- SubqueryAlias grouping
   :              +- LocalRelation [a#x]
   +- SubqueryAlias jt2
      +- Sample 0.0, 1.0, false, 0
         +- Project [1 AS a#x]
            +- OneRowRelation


-- !query
table join_test_t1
|> join join_test_t1 using (a)
-- !query analysis
Project [a#x]
+- Join Inner, (a#x = a#x)
   :- SubqueryAlias join_test_t1
   :  +- View (`join_test_t1`, [a#x])
   :     +- Project [cast(a#x as int) AS a#x]
   :        +- Project [a#x]
   :           +- SubqueryAlias grouping
   :              +- LocalRelation [a#x]
   +- SubqueryAlias join_test_t1
      +- View (`join_test_t1`, [a#x])
         +- Project [cast(a#x as int) AS a#x]
            +- Project [a#x]
               +- SubqueryAlias grouping
                  +- LocalRelation [a#x]


-- !query
table lateral_test_t1
|> join lateral (select c1)
-- !query analysis
LateralJoin lateral-subquery#x [c1#x], Inner
:  +- SubqueryAlias __auto_generated_subquery_name
:     +- Project [outer(c1#x) AS c1#x]
:        +- OneRowRelation
+- SubqueryAlias lateral_test_t1
   +- View (`lateral_test_t1`, [c1#x, c2#x])
      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
table lateral_test_t1
|> join lateral (select c1 from lateral_test_t2)
-- !query analysis
LateralJoin lateral-subquery#x [], Inner
:  +- SubqueryAlias __auto_generated_subquery_name
:     +- Project [c1#x]
:        +- SubqueryAlias lateral_test_t2
:           +- View (`lateral_test_t2`, [c1#x, c2#x])
:              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias lateral_test_t1
   +- View (`lateral_test_t1`, [c1#x, c2#x])
      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
table lateral_test_t1
|> join lateral (select lateral_test_t1.c1 from lateral_test_t2)
-- !query analysis
LateralJoin lateral-subquery#x [c1#x], Inner
:  +- SubqueryAlias __auto_generated_subquery_name
:     +- Project [outer(c1#x) AS c1#x]
:        +- SubqueryAlias lateral_test_t2
:           +- View (`lateral_test_t2`, [c1#x, c2#x])
:              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias lateral_test_t1
   +- View (`lateral_test_t1`, [c1#x, c2#x])
      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
table lateral_test_t1
|> join lateral (select lateral_test_t1.c1 + t2.c1 from lateral_test_t2 t2)
-- !query analysis
LateralJoin lateral-subquery#x [c1#x], Inner
:  +- SubqueryAlias __auto_generated_subquery_name
:     +- Project [(outer(c1#x) + c1#x) AS (outer(lateral_test_t1.c1) + c1)#x]
:        +- SubqueryAlias t2
:           +- SubqueryAlias lateral_test_t2
:              +- View (`lateral_test_t2`, [c1#x, c2#x])
:                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:                    +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias lateral_test_t1
   +- View (`lateral_test_t1`, [c1#x, c2#x])
      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
table lateral_test_t1
|> join lateral (select *)
-- !query analysis
LateralJoin lateral-subquery#x [], Inner
:  +- SubqueryAlias __auto_generated_subquery_name
:     +- Project
:        +- OneRowRelation
+- SubqueryAlias lateral_test_t1
   +- View (`lateral_test_t1`, [c1#x, c2#x])
      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
table lateral_test_t1
|> join lateral (select * from lateral_test_t2)
-- !query analysis
LateralJoin lateral-subquery#x [], Inner
:  +- SubqueryAlias __auto_generated_subquery_name
:     +- Project [c1#x, c2#x]
:        +- SubqueryAlias lateral_test_t2
:           +- View (`lateral_test_t2`, [c1#x, c2#x])
:              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias lateral_test_t1
   +- View (`lateral_test_t1`, [c1#x, c2#x])
      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
table lateral_test_t1
|> join lateral (select lateral_test_t1.* from lateral_test_t2)
-- !query analysis
LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
:  +- SubqueryAlias __auto_generated_subquery_name
:     +- Project [outer(c1#x) AS c1#x, outer(c2#x) AS c2#x]
:        +- SubqueryAlias lateral_test_t2
:           +- View (`lateral_test_t2`, [c1#x, c2#x])
:              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias lateral_test_t1
   +- View (`lateral_test_t1`, [c1#x, c2#x])
      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
table lateral_test_t1
|> join lateral (select lateral_test_t1.*, t2.* from lateral_test_t2 t2)
-- !query analysis
LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
:  +- SubqueryAlias __auto_generated_subquery_name
:     +- Project [outer(c1#x) AS c1#x, outer(c2#x) AS c2#x, c1#x, c2#x]
:        +- SubqueryAlias t2
:           +- SubqueryAlias lateral_test_t2
:              +- View (`lateral_test_t2`, [c1#x, c2#x])
:                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:                    +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias lateral_test_t1
   +- View (`lateral_test_t1`, [c1#x, c2#x])
      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
table lateral_test_t1
|> join lateral_test_t2
|> join lateral (select lateral_test_t1.c2 + lateral_test_t2.c2)
-- !query analysis
LateralJoin lateral-subquery#x [c2#x && c2#x], Inner
:  +- SubqueryAlias __auto_generated_subquery_name
:     +- Project [(outer(c2#x) + outer(c2#x)) AS (outer(lateral_test_t1.c2) + outer(lateral_test_t2.c2))#x]
:        +- OneRowRelation
+- Join Inner
   :- SubqueryAlias lateral_test_t1
   :  +- View (`lateral_test_t1`, [c1#x, c2#x])
   :     +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias lateral_test_t2
      +- View (`lateral_test_t2`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
table natural_join_test_t1
|> natural join natural_join_test_t2
|> where k = "one"
-- !query analysis
Filter (k#x = one)
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [k#x, v1#x, v2#x]
      +- Join Inner, (k#x = k#x)
         :- SubqueryAlias natural_join_test_t1
         :  +- View (`natural_join_test_t1`, [k#x, v1#x])
         :     +- Project [cast(k#x as string) AS k#x, cast(v1#x as int) AS v1#x]
         :        +- Project [k#x, v1#x]
         :           +- SubqueryAlias natural_join_test_t1
         :              +- LocalRelation [k#x, v1#x]
         +- SubqueryAlias natural_join_test_t2
            +- View (`natural_join_test_t2`, [k#x, v2#x])
               +- Project [cast(k#x as string) AS k#x, cast(v2#x as int) AS v2#x]
                  +- Project [k#x, v2#x]
                     +- SubqueryAlias natural_join_test_t2
                        +- LocalRelation [k#x, v2#x]


-- !query
table natural_join_test_t1
|> natural join natural_join_test_t2 nt2
|> select natural_join_test_t1.*
-- !query analysis
Project [k#x, v1#x]
+- Project [k#x, v1#x, v2#x]
   +- Join Inner, (k#x = k#x)
      :- SubqueryAlias natural_join_test_t1
      :  +- View (`natural_join_test_t1`, [k#x, v1#x])
      :     +- Project [cast(k#x as string) AS k#x, cast(v1#x as int) AS v1#x]
      :        +- Project [k#x, v1#x]
      :           +- SubqueryAlias natural_join_test_t1
      :              +- LocalRelation [k#x, v1#x]
      +- SubqueryAlias nt2
         +- SubqueryAlias natural_join_test_t2
            +- View (`natural_join_test_t2`, [k#x, v2#x])
               +- Project [cast(k#x as string) AS k#x, cast(v2#x as int) AS v2#x]
                  +- Project [k#x, v2#x]
                     +- SubqueryAlias natural_join_test_t2
                        +- LocalRelation [k#x, v2#x]


-- !query
table natural_join_test_t1
|> natural join natural_join_test_t2 nt2
|> natural join natural_join_test_t3 nt3
|> select natural_join_test_t1.*, nt2.*, nt3.*
-- !query analysis
Project [k#x, v1#x, k#x, v2#x, k#x, v3#x]
+- Project [k#x, v1#x, v2#x, v3#x, k#x, k#x]
   +- Join Inner, (k#x = k#x)
      :- Project [k#x, v1#x, v2#x, k#x]
      :  +- Join Inner, (k#x = k#x)
      :     :- SubqueryAlias natural_join_test_t1
      :     :  +- View (`natural_join_test_t1`, [k#x, v1#x])
      :     :     +- Project [cast(k#x as string) AS k#x, cast(v1#x as int) AS v1#x]
      :     :        +- Project [k#x, v1#x]
      :     :           +- SubqueryAlias natural_join_test_t1
      :     :              +- LocalRelation [k#x, v1#x]
      :     +- SubqueryAlias nt2
      :        +- SubqueryAlias natural_join_test_t2
      :           +- View (`natural_join_test_t2`, [k#x, v2#x])
      :              +- Project [cast(k#x as string) AS k#x, cast(v2#x as int) AS v2#x]
      :                 +- Project [k#x, v2#x]
      :                    +- SubqueryAlias natural_join_test_t2
      :                       +- LocalRelation [k#x, v2#x]
      +- SubqueryAlias nt3
         +- SubqueryAlias natural_join_test_t3
            +- View (`natural_join_test_t3`, [k#x, v3#x])
               +- Project [cast(k#x as string) AS k#x, cast(v3#x as int) AS v3#x]
                  +- Project [k#x, v3#x]
                     +- SubqueryAlias natural_join_test_t3
                        +- LocalRelation [k#x, v3#x]


-- !query
table join_test_t1
|> inner join join_test_empty_table
   inner join join_test_empty_table
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'inner'",
    "hint" : ""
  }
}


-- !query
table join_test_t1
|> select 1 + 2 as result
|> full outer join join_test_empty_table on (join_test_t1.a = join_test_empty_table.a)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`join_test_t1`.`a`",
    "proposal" : "`result`, `join_test_empty_table`.`a`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 91,
    "stopIndex" : 104,
    "fragment" : "join_test_t1.a"
  } ]
}


-- !query
table join_test_t1 jt
|> cross join (select * from jt)
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'jt'",
    "hint" : ""
  }
}


-- !query
table t
|> union all table t
-- !query analysis
Union false, false
:- SubqueryAlias spark_catalog.default.t
:  +- Relation spark_catalog.default.t[x#x,y#x] csv
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> union table t
-- !query analysis
Distinct
+- Union false, false
   :- SubqueryAlias spark_catalog.default.t
   :  +- Relation spark_catalog.default.t[x#x,y#x] csv
   +- SubqueryAlias spark_catalog.default.t
      +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
(select * from t)
|> union all table t
-- !query analysis
Union false, false
:- Project [x#x, y#x]
:  +- SubqueryAlias spark_catalog.default.t
:     +- Relation spark_catalog.default.t[x#x,y#x] csv
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
(select * from t)
|> union table t
-- !query analysis
Distinct
+- Union false, false
   :- Project [x#x, y#x]
   :  +- SubqueryAlias spark_catalog.default.t
   :     +- Relation spark_catalog.default.t[x#x,y#x] csv
   +- SubqueryAlias spark_catalog.default.t
      +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
values (0, 'abc') tab(x, y)
|> union all table t
-- !query analysis
Union false, false
:- SubqueryAlias tab
:  +- LocalRelation [x#x, y#x]
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
values (0, 1) tab(x, y)
|> union table t
-- !query analysis
Distinct
+- Union false, false
   :- Project [x#x, cast(y#x as string) AS y#x]
   :  +- SubqueryAlias tab
   :     +- LocalRelation [x#x, y#x]
   +- SubqueryAlias spark_catalog.default.t
      +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
(select * from t)
|> union all (select * from t)
-- !query analysis
Union false, false
:- Project [x#x, y#x]
:  +- SubqueryAlias spark_catalog.default.t
:     +- Relation spark_catalog.default.t[x#x,y#x] csv
+- Project [x#x, y#x]
   +- SubqueryAlias spark_catalog.default.t
      +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> except all table t
-- !query analysis
Except All true
:- SubqueryAlias spark_catalog.default.t
:  +- Relation spark_catalog.default.t[x#x,y#x] csv
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> except table t
-- !query analysis
Except false
:- SubqueryAlias spark_catalog.default.t
:  +- Relation spark_catalog.default.t[x#x,y#x] csv
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> intersect all table t
-- !query analysis
Intersect All true
:- SubqueryAlias spark_catalog.default.t
:  +- Relation spark_catalog.default.t[x#x,y#x] csv
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> intersect table t
-- !query analysis
Intersect false
:- SubqueryAlias spark_catalog.default.t
:  +- Relation spark_catalog.default.t[x#x,y#x] csv
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> minus all table t
-- !query analysis
Except All true
:- SubqueryAlias spark_catalog.default.t
:  +- Relation spark_catalog.default.t[x#x,y#x] csv
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> minus table t
-- !query analysis
Except false
:- SubqueryAlias spark_catalog.default.t
:  +- Relation spark_catalog.default.t[x#x,y#x] csv
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> select x
|> union all table t
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "NUM_COLUMNS_MISMATCH",
  "sqlState" : "42826",
  "messageParameters" : {
    "firstNumColumns" : "1",
    "invalidNumColumns" : "2",
    "invalidOrdinalNum" : "second",
    "operator" : "UNION"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 40,
    "fragment" : "table t\n|> select x\n|> union all table t"
  } ]
}


-- !query
table t
|> union all table st
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "second",
    "dataType1" : "\"STRUCT<i1: INT, i2: INT>\"",
    "dataType2" : "\"STRING\"",
    "hint" : "",
    "operator" : "UNION",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 29,
    "fragment" : "table t\n|> union all table st"
  } ]
}


-- !query
table t
|> order by x
-- !query analysis
Sort [x#x ASC NULLS FIRST], true
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
(select * from t)
|> order by x
-- !query analysis
Sort [x#x ASC NULLS FIRST], true
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [x#x, y#x]
      +- SubqueryAlias spark_catalog.default.t
         +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
values (0, 'abc') tab(x, y)
|> order by x
-- !query analysis
Sort [x#x ASC NULLS FIRST], true
+- SubqueryAlias tab
   +- LocalRelation [x#x, y#x]


-- !query
table t
|> order by x
|> limit 1
-- !query analysis
GlobalLimit 1
+- LocalLimit 1
   +- SubqueryAlias __auto_generated_subquery_name
      +- Sort [x#x ASC NULLS FIRST], true
         +- SubqueryAlias spark_catalog.default.t
            +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> where x = 1
|> select y
|> limit 2 offset 1
-- !query analysis
GlobalLimit 2
+- LocalLimit 2
   +- Offset 1
      +- SubqueryAlias __auto_generated_subquery_name
         +- Project [y#x]
            +- Filter (x#x = 1)
               +- SubqueryAlias spark_catalog.default.t
                  +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> where x = 1
|> select y
|> offset 1
-- !query analysis
Offset 1
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [y#x]
      +- Filter (x#x = 1)
         +- SubqueryAlias spark_catalog.default.t
            +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> limit all offset 0
-- !query analysis
Offset 0
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> distribute by x
-- !query analysis
RepartitionByExpression [x#x]
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> cluster by x
-- !query analysis
Sort [x#x ASC NULLS FIRST], false
+- RepartitionByExpression [x#x]
   +- SubqueryAlias spark_catalog.default.t
      +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> sort by x distribute by x
-- !query analysis
RepartitionByExpression [x#x]
+- Sort [x#x ASC NULLS FIRST], false
   +- SubqueryAlias spark_catalog.default.t
      +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> order by x desc
order by y
-- !query analysis
Sort [y#x ASC NULLS FIRST], true
+- Sort [x#x DESC NULLS LAST], true
   +- SubqueryAlias spark_catalog.default.t
      +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> order by x desc order by x + y
order by y
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'order'",
    "hint" : ""
  }
}


-- !query
table t
|> select 1 + 2 as result
|> order by x
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`x`",
    "proposal" : "`result`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 47,
    "stopIndex" : 47,
    "fragment" : "x"
  } ]
}


-- !query
table t
|> select 1 + 2 as result
|> distribute by x
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`x`",
    "proposal" : "`result`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 52,
    "stopIndex" : 52,
    "fragment" : "x"
  } ]
}


-- !query
table t
|> order by x limit 1
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "MULTIPLE_QUERY_RESULT_CLAUSES_WITH_PIPE_OPERATORS",
  "sqlState" : "42000",
  "messageParameters" : {
    "clause1" : "ORDER BY",
    "clause2" : "LIMIT"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 29,
    "fragment" : "order by x limit 1"
  } ]
}


-- !query
table t
|> order by x sort by x
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.COMBINATION_QUERY_RESULT_CLAUSES",
  "sqlState" : "0A000",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 12,
    "stopIndex" : 31,
    "fragment" : "order by x sort by x"
  } ]
}


-- !query
table windowTestData
|> window w as (partition by cte order by val)
|> select cate, sum(val) over w
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.CLAUSE_WITH_PIPE_OPERATORS",
  "sqlState" : "0A000",
  "messageParameters" : {
    "clauses" : "the WINDOW clause"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 25,
    "stopIndex" : 67,
    "fragment" : "window w as (partition by cte order by val)"
  } ]
}


-- !query
table windowTestData
|> window w as (partition by cate order by val) limit 5
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.CLAUSE_WITH_PIPE_OPERATORS",
  "sqlState" : "0A000",
  "messageParameters" : {
    "clauses" : "the WINDOW clause"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 25,
    "stopIndex" : 76,
    "fragment" : "window w as (partition by cate order by val) limit 5"
  } ]
}


-- !query
table other
|> aggregate sum(b) as result group by a
-- !query analysis
Aggregate [a#x], [a#x, sum(b#x) AS result#xL]
+- SubqueryAlias spark_catalog.default.other
   +- Relation spark_catalog.default.other[a#x,b#x] json


-- !query
table other
|> aggregate sum(b) as result group by a
|> select result
-- !query analysis
Project [result#xL]
+- Aggregate [a#x], [a#x, sum(b#x) AS result#xL]
   +- SubqueryAlias spark_catalog.default.other
      +- Relation spark_catalog.default.other[a#x,b#x] json


-- !query
table other
|> aggregate sum(b) group by a + 1 as gkey
|> select gkey
-- !query analysis
Project [gkey#x]
+- Aggregate [(a#x + 1)], [(a#x + 1) AS gkey#x, sum(b#x) AS sum(b)#xL]
   +- SubqueryAlias spark_catalog.default.other
      +- Relation spark_catalog.default.other[a#x,b#x] json


-- !query
select 1 as x, 2 as y
|> aggregate group by x, y
-- !query analysis
Aggregate [x#x, y#x], [x#x, y#x]
+- Project [1 AS x#x, 2 AS y#x]
   +- OneRowRelation


-- !query
select 3 as x, 4 as y
|> aggregate group by 1, 2
-- !query analysis
Aggregate [1, 2], [1 AS 1#x, 2 AS 2#x]
+- Project [3 AS x#x, 4 AS y#x]
   +- OneRowRelation


-- !query
table t
|> aggregate sum(x)
-- !query analysis
Aggregate [sum(x#x) AS sum(x)#xL]
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table t
|> aggregate sum(x) + 1 as result_plus_one
-- !query analysis
Aggregate [(sum(x#x) + cast(1 as bigint)) AS result_plus_one#xL]
+- SubqueryAlias spark_catalog.default.t
   +- Relation spark_catalog.default.t[x#x,y#x] csv


-- !query
table other
|> aggregate group by a
|> where a = 1
-- !query analysis
Filter (a#x = 1)
+- SubqueryAlias __auto_generated_subquery_name
   +- Aggregate [a#x], [a#x]
      +- SubqueryAlias spark_catalog.default.other
         +- Relation spark_catalog.default.other[a#x,b#x] json


-- !query
select 1 as x, 2 as y, 3 as z
|> aggregate group by x, y, x + y as z
-- !query analysis
Aggregate [x#x, y#x, (x#x + y#x)], [x#x, y#x, (x#x + y#x) AS z#x]
+- Project [1 AS x#x, 2 AS y#x, 3 AS z#x]
   +- OneRowRelation


-- !query
select 1 as x, 2 as y, 3 as z
|> aggregate group by x as z, x + y as z
-- !query analysis
Aggregate [x#x, (x#x + y#x)], [x#x AS z#x, (x#x + y#x) AS z#x]
+- Project [1 AS x#x, 2 AS y#x, 3 AS z#x]
   +- OneRowRelation


-- !query
select 1 as x, 2 as y, named_struct('z', 3) as st
|> aggregate group by x, y, x, x, st.z, (st).z, 1 + x, 2 + x
-- !query analysis
Aggregate [x#x, y#x, x#x, x#x, st#x.z, st#x.z, (1 + x#x), (2 + x#x)], [x#x, y#x, x#x, x#x, st#x.z AS z#x, st#x.z AS z#x, (1 + x#x) AS (1 + x)#x, (2 + x#x) AS (2 + x)#x]
+- Project [1 AS x#x, 2 AS y#x, named_struct(z, 3) AS st#x]
   +- OneRowRelation


-- !query
select 1 x, 2 y, 3 z
|> aggregate sum(z) z group by x, y
|> aggregate avg(z) z group by x
|> aggregate count(distinct z) c
-- !query analysis
Aggregate [count(distinct z#x) AS c#xL]
+- Aggregate [x#x], [x#x, avg(z#xL) AS z#x]
   +- Aggregate [x#x, y#x], [x#x, y#x, sum(z#x) AS z#xL]
      +- Project [1 AS x#x, 2 AS y#x, 3 AS z#x]
         +- OneRowRelation


-- !query
select 1 x, 3 z
|> aggregate count(*) group by x, z, x
|> select x
-- !query analysis
Project [x#x]
+- Aggregate [x#x, z#x, x#x], [x#x, z#x, x#x, count(1) AS count(1)#xL]
   +- Project [1 AS x#x, 3 AS z#x]
      +- OneRowRelation


-- !query
table other
|> aggregate a group by a
-- !query analysis
Aggregate [a#x], [a#x, a#x]
+- SubqueryAlias spark_catalog.default.other
   +- Relation spark_catalog.default.other[a#x,b#x] json


-- !query
table other
|> aggregate a + count(b) group by a
-- !query analysis
Aggregate [a#x], [a#x, (cast(a#x as bigint) + count(b#x)) AS (a + count(b))#xL]
+- SubqueryAlias spark_catalog.default.other
   +- Relation spark_catalog.default.other[a#x,b#x] json


-- !query
select 3 as x, 4 as y
|> aggregate group by all
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.PIPE_OPERATOR_AGGREGATE_UNSUPPORTED_CASE",
  "sqlState" : "0A000",
  "messageParameters" : {
    "case" : "GROUP BY ALL"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 47,
    "fragment" : "select 3 as x, 4 as y\n|> aggregate group by all"
  } ]
}


-- !query
table courseSales
|> aggregate sum(earnings) group by rollup(course, `year`)
|> where course = 'dotNET' and `year` = '2013'
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.PIPE_OPERATOR_AGGREGATE_UNSUPPORTED_CASE",
  "sqlState" : "0A000",
  "messageParameters" : {
    "case" : "GROUP BY ROLLUP"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 123,
    "fragment" : "table courseSales\n|> aggregate sum(earnings) group by rollup(course, `year`)\n|> where course = 'dotNET' and `year` = '2013'"
  } ]
}


-- !query
table courseSales
|> aggregate sum(earnings) group by cube(course, `year`)
|> where course = 'dotNET' and `year` = '2013'
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.PIPE_OPERATOR_AGGREGATE_UNSUPPORTED_CASE",
  "sqlState" : "0A000",
  "messageParameters" : {
    "case" : "GROUP BY CUBE"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 121,
    "fragment" : "table courseSales\n|> aggregate sum(earnings) group by cube(course, `year`)\n|> where course = 'dotNET' and `year` = '2013'"
  } ]
}


-- !query
table courseSales
|> aggregate sum(earnings) group by course, `year` grouping sets(course, `year`)
|> where course = 'dotNET' and `year` = '2013'
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.PIPE_OPERATOR_AGGREGATE_UNSUPPORTED_CASE",
  "sqlState" : "0A000",
  "messageParameters" : {
    "case" : "GROUPING SETS"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 145,
    "fragment" : "table courseSales\n|> aggregate sum(earnings) group by course, `year` grouping sets(course, `year`)\n|> where course = 'dotNET' and `year` = '2013'"
  } ]
}


-- !query
table courseSales
|> aggregate sum(earnings), grouping(course) + 1
   group by course
|> where course = 'dotNET' and `year` = '2013'
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.PIPE_OPERATOR_AGGREGATE_UNSUPPORTED_CASE",
  "sqlState" : "0A000",
  "messageParameters" : {
    "case" : "GROUPING"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 132,
    "fragment" : "table courseSales\n|> aggregate sum(earnings), grouping(course) + 1\n   group by course\n|> where course = 'dotNET' and `year` = '2013'"
  } ]
}


-- !query
table courseSales
|> aggregate sum(earnings), grouping_id(course)
   group by course
|> where course = 'dotNET' and `year` = '2013'
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.PIPE_OPERATOR_AGGREGATE_UNSUPPORTED_CASE",
  "sqlState" : "0A000",
  "messageParameters" : {
    "case" : "GROUPING_ID"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 131,
    "fragment" : "table courseSales\n|> aggregate sum(earnings), grouping_id(course)\n   group by course\n|> where course = 'dotNET' and `year` = '2013'"
  } ]
}


-- !query
select 1 as x, 2 as y
|> aggregate group by ()
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "')'",
    "hint" : ""
  }
}


-- !query
table other
|> aggregate a
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "MISSING_GROUP_BY",
  "sqlState" : "42803",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 26,
    "fragment" : "table other\n|> aggregate a"
  } ]
}


-- !query
table other
|> select sum(a) as result
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "PIPE_OPERATOR_SELECT_CONTAINS_AGGREGATE_FUNCTION",
  "sqlState" : "0A000",
  "messageParameters" : {
    "expr" : "sum(a#x)"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 23,
    "stopIndex" : 28,
    "fragment" : "sum(a)"
  } ]
}


-- !query
table other
|> aggregate
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_0035",
  "messageParameters" : {
    "message" : "The AGGREGATE clause requires a list of aggregate expressions or a list of grouping expressions, or both"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 24,
    "fragment" : "table other\n|> aggregate"
  } ]
}


-- !query
table other
|> aggregate group by
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`group`",
    "proposal" : "`a`, `b`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 26,
    "stopIndex" : 30,
    "fragment" : "group"
  } ]
}


-- !query
table other
|> group by a
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'group'",
    "hint" : ""
  }
}


-- !query
table other
|> aggregate sum(a) over () group by b
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.PIPE_OPERATOR_AGGREGATE_UNSUPPORTED_CASE",
  "sqlState" : "0A000",
  "messageParameters" : {
    "case" : "window functions"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 50,
    "fragment" : "table other\n|> aggregate sum(a) over () group by b"
  } ]
}


-- !query
select 1 x, 2 y, 3 z
|> aggregate count(*) AS c, sum(x) AS x group by x
|> where c = 1
|> where x = 1
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "AMBIGUOUS_REFERENCE",
  "sqlState" : "42704",
  "messageParameters" : {
    "name" : "`x`",
    "referenceNames" : "[`x`, `x`]"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 97,
    "stopIndex" : 97,
    "fragment" : "x"
  } ]
}


-- !query
table other
|> aggregate b group by a
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "MISSING_AGGREGATION",
  "sqlState" : "42803",
  "messageParameters" : {
    "expression" : "\"b\"",
    "expressionAnyValue" : "\"any_value(b)\""
  }
}


-- !query
drop table t
-- !query analysis
DropTable false, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.t


-- !query
drop table other
-- !query analysis
DropTable false, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.other


-- !query
drop table st
-- !query analysis
DropTable false, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.st
