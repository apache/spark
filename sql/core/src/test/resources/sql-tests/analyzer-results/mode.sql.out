-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE OR REPLACE TEMPORARY VIEW basic_pays AS SELECT * FROM VALUES
('Diane Murphy','Accounting',8435),
('Mary Patterson','Accounting',9998),
('Jeff Firrelli','Accounting',8992),
('William Patterson','Accounting',8870),
('Gerard Bondur','Accounting',11472),
('Anthony Bow','Accounting',6627),
('Leslie Jennings','IT',8113),
('Leslie Thompson','IT',5186),
('Julie Firrelli','Sales',9181),
('Steve Patterson','Sales',9441),
('Foon Yue Tseng','Sales',6660),
('George Vanauf','Sales',10563),
('Loui Bondur','SCM',10449),
('Gerard Hernandez','SCM',6949),
('Pamela Castillo','SCM',11303),
('Larry Bott','SCM',11798),
('Barry Jones','SCM',10586)
AS basic_pays(employee_name, department, salary)
-- !query analysis
CreateViewCommand `basic_pays`, SELECT * FROM VALUES
('Diane Murphy','Accounting',8435),
('Mary Patterson','Accounting',9998),
('Jeff Firrelli','Accounting',8992),
('William Patterson','Accounting',8870),
('Gerard Bondur','Accounting',11472),
('Anthony Bow','Accounting',6627),
('Leslie Jennings','IT',8113),
('Leslie Thompson','IT',5186),
('Julie Firrelli','Sales',9181),
('Steve Patterson','Sales',9441),
('Foon Yue Tseng','Sales',6660),
('George Vanauf','Sales',10563),
('Loui Bondur','SCM',10449),
('Gerard Hernandez','SCM',6949),
('Pamela Castillo','SCM',11303),
('Larry Bott','SCM',11798),
('Barry Jones','SCM',10586)
AS basic_pays(employee_name, department, salary), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [employee_name#x, department#x, salary#x]
      +- SubqueryAlias basic_pays
         +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT mode(department), mode(salary) FROM basic_pays
-- !query analysis
Aggregate [mode(department#x, 0, 0, None) AS mode(department)#x, mode(salary#x, 0, 0, None) AS mode(salary)#x]
+- SubqueryAlias basic_pays
   +- View (`basic_pays`, [employee_name#x, department#x, salary#x])
      +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
         +- Project [employee_name#x, department#x, salary#x]
            +- SubqueryAlias basic_pays
               +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT department, mode(salary) FROM basic_pays GROUP BY department ORDER BY department
-- !query analysis
Sort [department#x ASC NULLS FIRST], true
+- Aggregate [department#x], [department#x, mode(salary#x, 0, 0, None) AS mode(salary)#x]
   +- SubqueryAlias basic_pays
      +- View (`basic_pays`, [employee_name#x, department#x, salary#x])
         +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
            +- Project [employee_name#x, department#x, salary#x]
               +- SubqueryAlias basic_pays
                  +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT department, mode(DISTINCT salary) FROM basic_pays GROUP BY department ORDER BY department
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_WITHIN_GROUP_EXPRESSION.DISTINCT_UNSUPPORTED",
  "sqlState" : "42K0K",
  "messageParameters" : {
    "funcName" : "`mode`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 20,
    "stopIndex" : 40,
    "fragment" : "mode(DISTINCT salary)"
  } ]
}


-- !query
SELECT mode(col) FROM VALUES (-10), (0), (10) AS tab(col)
-- !query analysis
Aggregate [mode(col#x, 0, 0, None) AS mode(col)#x]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT mode(col, false) FROM VALUES (-10), (0), (10) AS tab(col)
-- !query analysis
Aggregate [mode(col#x, 0, 0, None) AS mode(col)#x]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT mode(col, true) FROM VALUES (-10), (0), (10) AS tab(col)
-- !query analysis
Aggregate [mode(col#x, 0, 0, Some(true)) AS mode() WITHIN GROUP (ORDER BY col DESC)#x]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT mode(col, 'true') FROM VALUES (-10), (0), (10) AS tab(col)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "functionName" : "`mode`",
    "inputSql" : "\"true\"",
    "inputType" : "\"STRING\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 24,
    "fragment" : "mode(col, 'true')"
  } ]
}


-- !query
SELECT mode(col, null) FROM VALUES (-10), (0), (10) AS tab(col)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_NULL",
  "sqlState" : "42K09",
  "messageParameters" : {
    "exprName" : "`deterministic`",
    "sqlExpr" : "\"NULL\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 22,
    "fragment" : "mode(col, null)"
  } ]
}


-- !query
SELECT mode(col, b) FROM VALUES (-10, false), (0, false), (10, false) AS tab(col, b)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "NON_FOLDABLE_ARGUMENT",
  "sqlState" : "42K08",
  "messageParameters" : {
    "funcName" : "`mode`",
    "paramName" : "`deterministic`",
    "paramType" : "\"BOOLEAN\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 19,
    "fragment" : "mode(col, b)"
  } ]
}


-- !query
SELECT mode(col) FROM VALUES (map(1, 'a')) AS tab(col)
-- !query analysis
Aggregate [mode(col#x, 0, 0, None) AS mode(col)#x]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT mode(col, false) FROM VALUES (map(1, 'a')) AS tab(col)
-- !query analysis
Aggregate [mode(col#x, 0, 0, None) AS mode(col)#x]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT mode(col, true) FROM VALUES (map(1, 'a')) AS tab(col)
-- !query analysis
Aggregate [mode(col#x, 0, 0, Some(true)) AS mode() WITHIN GROUP (ORDER BY col DESC)#x]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY col),
  mode() WITHIN GROUP (ORDER BY col DESC)
FROM VALUES (null), (null), (null) AS tab(col)
-- !query analysis
Aggregate [mode(col#x, 0, 0, Some(true)) AS mode() WITHIN GROUP (ORDER BY col DESC)#x, mode(col#x, 0, 0, Some(false)) AS mode() WITHIN GROUP (ORDER BY col)#x]
+- SubqueryAlias tab
   +- LocalRelation [col#x]


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY salary),
  mode() WITHIN GROUP (ORDER BY salary DESC)
FROM basic_pays
WHERE salary > 20000
-- !query analysis
Aggregate [mode(salary#x, 0, 0, Some(true)) AS mode() WITHIN GROUP (ORDER BY salary DESC)#x, mode(salary#x, 0, 0, Some(false)) AS mode() WITHIN GROUP (ORDER BY salary)#x]
+- Filter (salary#x > 20000)
   +- SubqueryAlias basic_pays
      +- View (`basic_pays`, [employee_name#x, department#x, salary#x])
         +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
            +- Project [employee_name#x, department#x, salary#x]
               +- SubqueryAlias basic_pays
                  +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY salary),
  mode() WITHIN GROUP (ORDER BY salary DESC)
FROM basic_pays
-- !query analysis
Aggregate [mode(salary#x, 0, 0, Some(true)) AS mode() WITHIN GROUP (ORDER BY salary DESC)#x, mode(salary#x, 0, 0, Some(false)) AS mode() WITHIN GROUP (ORDER BY salary)#x]
+- SubqueryAlias basic_pays
   +- View (`basic_pays`, [employee_name#x, department#x, salary#x])
      +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
         +- Project [employee_name#x, department#x, salary#x]
            +- SubqueryAlias basic_pays
               +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY salary),
  mode() WITHIN GROUP (ORDER BY salary) FILTER (WHERE salary > 10000)
FROM basic_pays
-- !query analysis
Aggregate [mode(salary#x, 0, 0, Some(true)) AS mode() WITHIN GROUP (ORDER BY salary DESC)#x, mode(salary#x, 0, 0, Some(true)) FILTER (WHERE (salary#x > 10000)) AS mode() WITHIN GROUP (ORDER BY salary DESC) FILTER (WHERE (salary > 10000))#x]
+- SubqueryAlias basic_pays
   +- View (`basic_pays`, [employee_name#x, department#x, salary#x])
      +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
         +- Project [employee_name#x, department#x, salary#x]
            +- SubqueryAlias basic_pays
               +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT
  department,
  mode() WITHIN GROUP (ORDER BY salary),
  mode() WITHIN GROUP (ORDER BY salary) FILTER (WHERE salary > 10000)
FROM basic_pays
GROUP BY department
ORDER BY department
-- !query analysis
Sort [department#x ASC NULLS FIRST], true
+- Aggregate [department#x], [department#x, mode(salary#x, 0, 0, Some(true)) AS mode() WITHIN GROUP (ORDER BY salary DESC)#x, mode(salary#x, 0, 0, Some(true)) FILTER (WHERE (salary#x > 10000)) AS mode() WITHIN GROUP (ORDER BY salary DESC) FILTER (WHERE (salary > 10000))#x]
   +- SubqueryAlias basic_pays
      +- View (`basic_pays`, [employee_name#x, department#x, salary#x])
         +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
            +- Project [employee_name#x, department#x, salary#x]
               +- SubqueryAlias basic_pays
                  +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department)
FROM basic_pays
ORDER BY salary
-- !query analysis
Sort [salary#x ASC NULLS FIRST], true
+- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
   +- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
      +- Window [mode(salary#x, 0, 0, Some(true)) windowspecdefinition(department#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x], [department#x]
         +- Project [employee_name#x, department#x, salary#x]
            +- SubqueryAlias basic_pays
               +- View (`basic_pays`, [employee_name#x, department#x, salary#x])
                  +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
                     +- Project [employee_name#x, department#x, salary#x]
                        +- SubqueryAlias basic_pays
                           +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ORDER BY salary)
FROM basic_pays
ORDER BY salary
-- !query analysis
Sort [salary#x ASC NULLS FIRST], true
+- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ORDER BY salary ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x]
   +- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ORDER BY salary ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x, mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ORDER BY salary ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x]
      +- Window [mode(salary#x, 0, 0, Some(true)) windowspecdefinition(department#x, salary#x ASC NULLS FIRST, specifiedwindowframe(RangeFrame, unboundedpreceding$(), currentrow$())) AS mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ORDER BY salary ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x], [department#x], [salary#x ASC NULLS FIRST]
         +- Project [employee_name#x, department#x, salary#x]
            +- SubqueryAlias basic_pays
               +- View (`basic_pays`, [employee_name#x, department#x, salary#x])
                  +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
                     +- Project [employee_name#x, department#x, salary#x]
                        +- SubqueryAlias basic_pays
                           +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING)
FROM basic_pays
ORDER BY salary
-- !query analysis
Sort [salary#x ASC NULLS FIRST], true
+- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING)#x]
   +- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING)#x, mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING)#x]
      +- Window [mode(salary#x, 0, 0, Some(true)) windowspecdefinition(department#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), 1)) AS mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING)#x], [department#x]
         +- Project [employee_name#x, department#x, salary#x]
            +- SubqueryAlias basic_pays
               +- View (`basic_pays`, [employee_name#x, department#x, salary#x])
                  +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
                     +- Project [employee_name#x, department#x, salary#x]
                        +- SubqueryAlias basic_pays
                           +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER w
FROM basic_pays
WHERE salary > 8900
WINDOW w AS (PARTITION BY department)
ORDER BY salary
-- !query analysis
Sort [salary#x ASC NULLS FIRST], true
+- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
   +- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
      +- Window [mode(salary#x, 0, 0, Some(true)) windowspecdefinition(department#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x], [department#x]
         +- Project [employee_name#x, department#x, salary#x]
            +- Filter (salary#x > 8900)
               +- SubqueryAlias basic_pays
                  +- View (`basic_pays`, [employee_name#x, department#x, salary#x])
                     +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
                        +- Project [employee_name#x, department#x, salary#x]
                           +- SubqueryAlias basic_pays
                              +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT
  mode(DISTINCT salary) WITHIN GROUP (ORDER BY salary)
FROM basic_pays
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_WITHIN_GROUP_EXPRESSION.DISTINCT_UNSUPPORTED",
  "sqlState" : "42K0K",
  "messageParameters" : {
    "funcName" : "`mode`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 10,
    "stopIndex" : 61,
    "fragment" : "mode(DISTINCT salary) WITHIN GROUP (ORDER BY salary)"
  } ]
}


-- !query
SELECT
  mode()
FROM basic_pays
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_WITHIN_GROUP_EXPRESSION.WITHIN_GROUP_MISSING",
  "sqlState" : "42K0K",
  "messageParameters" : {
    "funcName" : "`mode`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 10,
    "stopIndex" : 15,
    "fragment" : "mode()"
  } ]
}


-- !query
SELECT
  mode(salary) WITHIN GROUP (ORDER BY salary)
FROM basic_pays
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_WITHIN_GROUP_EXPRESSION.WRONG_NUM_ORDERINGS",
  "sqlState" : "42K0K",
  "messageParameters" : {
    "actualNum" : "1",
    "expectedNum" : "0",
    "funcName" : "`mode`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 10,
    "stopIndex" : 52,
    "fragment" : "mode(salary) WITHIN GROUP (ORDER BY salary)"
  } ]
}


-- !query
CREATE OR REPLACE TEMPORARY VIEW intervals AS SELECT * FROM VALUES
(0, INTERVAL '0' MONTH, INTERVAL '0' SECOND, INTERVAL '0' MINUTE),
(0, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(0, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(0, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(0, INTERVAL '40' MONTH, INTERVAL '40' SECOND, INTERVAL '40' MINUTE),
(1, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(1, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(2, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '25' MONTH, INTERVAL '25' SECOND, INTERVAL '25' MINUTE),
(2, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(3, INTERVAL '60' MONTH, INTERVAL '60' SECOND, INTERVAL '60' MINUTE),
(4, null, null, null)
AS intervals(k, dt, ym, dt2)
-- !query analysis
CreateViewCommand `intervals`, SELECT * FROM VALUES
(0, INTERVAL '0' MONTH, INTERVAL '0' SECOND, INTERVAL '0' MINUTE),
(0, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(0, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(0, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(0, INTERVAL '40' MONTH, INTERVAL '40' SECOND, INTERVAL '40' MINUTE),
(1, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(1, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(2, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '25' MONTH, INTERVAL '25' SECOND, INTERVAL '25' MINUTE),
(2, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(3, INTERVAL '60' MONTH, INTERVAL '60' SECOND, INTERVAL '60' MINUTE),
(4, null, null, null)
AS intervals(k, dt, ym, dt2), false, true, LocalTempView, UNSUPPORTED, true
   +- Project [k#x, dt#x, ym#x, dt2#x]
      +- SubqueryAlias intervals
         +- LocalRelation [k#x, dt#x, ym#x, dt2#x]


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY dt),
  mode() WITHIN GROUP (ORDER BY dt DESC)
FROM intervals
-- !query analysis
Aggregate [mode(dt#x, 0, 0, Some(true)) AS mode() WITHIN GROUP (ORDER BY dt DESC)#x, mode(dt#x, 0, 0, Some(false)) AS mode() WITHIN GROUP (ORDER BY dt)#x]
+- SubqueryAlias intervals
   +- View (`intervals`, [k#x, dt#x, ym#x, dt2#x])
      +- Project [cast(k#x as int) AS k#x, cast(dt#x as interval month) AS dt#x, cast(ym#x as interval second) AS ym#x, cast(dt2#x as interval minute) AS dt2#x]
         +- Project [k#x, dt#x, ym#x, dt2#x]
            +- SubqueryAlias intervals
               +- LocalRelation [k#x, dt#x, ym#x, dt2#x]


-- !query
SELECT
  k,
  mode() WITHIN GROUP (ORDER BY ym),
  mode() WITHIN GROUP (ORDER BY dt DESC)
FROM intervals
GROUP BY k
ORDER BY k
-- !query analysis
Sort [k#x ASC NULLS FIRST], true
+- Aggregate [k#x], [k#x, mode(ym#x, 0, 0, Some(true)) AS mode() WITHIN GROUP (ORDER BY ym DESC)#x, mode(dt#x, 0, 0, Some(false)) AS mode() WITHIN GROUP (ORDER BY dt)#x]
   +- SubqueryAlias intervals
      +- View (`intervals`, [k#x, dt#x, ym#x, dt2#x])
         +- Project [cast(k#x as int) AS k#x, cast(dt#x as interval month) AS dt#x, cast(ym#x as interval second) AS ym#x, cast(dt2#x as interval minute) AS dt2#x]
            +- Project [k#x, dt#x, ym#x, dt2#x]
               +- SubqueryAlias intervals
                  +- LocalRelation [k#x, dt#x, ym#x, dt2#x]
