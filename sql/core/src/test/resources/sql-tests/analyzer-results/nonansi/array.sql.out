-- Automatically generated by SQLQueryTestSuite
-- !query
create temporary view data as select * from values
  ("one", array(11, 12, 13), array(array(111, 112, 113), array(121, 122, 123))),
  ("two", array(21, 22, 23), array(array(211, 212, 213), array(221, 222, 223)))
  as data(a, b, c)
-- !query analysis
CreateViewCommand `data`, select * from values
  ("one", array(11, 12, 13), array(array(111, 112, 113), array(121, 122, 123))),
  ("two", array(21, 22, 23), array(array(211, 212, 213), array(221, 222, 223)))
  as data(a, b, c), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [a#x, b#x, c#x]
      +- SubqueryAlias data
         +- LocalRelation [a#x, b#x, c#x]


-- !query
select * from data
-- !query analysis
Project [a#x, b#x, c#x]
+- SubqueryAlias data
   +- View (`data`, [a#x, b#x, c#x])
      +- Project [cast(a#x as string) AS a#x, cast(b#x as array<int>) AS b#x, cast(c#x as array<array<int>>) AS c#x]
         +- Project [a#x, b#x, c#x]
            +- SubqueryAlias data
               +- LocalRelation [a#x, b#x, c#x]


-- !query
select a, b[0], b[0] + b[1] from data
-- !query analysis
Project [a#x, b#x[0] AS b[0]#x, (b#x[0] + b#x[1]) AS (b[0] + b[1])#x]
+- SubqueryAlias data
   +- View (`data`, [a#x, b#x, c#x])
      +- Project [cast(a#x as string) AS a#x, cast(b#x as array<int>) AS b#x, cast(c#x as array<array<int>>) AS c#x]
         +- Project [a#x, b#x, c#x]
            +- SubqueryAlias data
               +- LocalRelation [a#x, b#x, c#x]


-- !query
select a, c[0][0] + c[0][0 + 1] from data
-- !query analysis
Project [a#x, (c#x[0][0] + c#x[0][(0 + 1)]) AS (c[0][0] + c[0][(0 + 1)])#x]
+- SubqueryAlias data
   +- View (`data`, [a#x, b#x, c#x])
      +- Project [cast(a#x as string) AS a#x, cast(b#x as array<int>) AS b#x, cast(c#x as array<array<int>>) AS c#x]
         +- Project [a#x, b#x, c#x]
            +- SubqueryAlias data
               +- LocalRelation [a#x, b#x, c#x]


-- !query
create temporary view primitive_arrays as select * from values (
  array(true),
  array(2Y, 1Y),
  array(2S, 1S),
  array(2, 1),
  array(2L, 1L),
  array(9223372036854775809, 9223372036854775808),
  array(2.0D, 1.0D),
  array(float(2.0), float(1.0)),
  array(date '2016-03-14', date '2016-03-13'),
  array(timestamp '2016-11-15 20:54:00.000',  timestamp '2016-11-12 20:54:00.000')
) as primitive_arrays(
  boolean_array,
  tinyint_array,
  smallint_array,
  int_array,
  bigint_array,
  decimal_array,
  double_array,
  float_array,
  date_array,
  timestamp_array
)
-- !query analysis
CreateViewCommand `primitive_arrays`, select * from values (
  array(true),
  array(2Y, 1Y),
  array(2S, 1S),
  array(2, 1),
  array(2L, 1L),
  array(9223372036854775809, 9223372036854775808),
  array(2.0D, 1.0D),
  array(float(2.0), float(1.0)),
  array(date '2016-03-14', date '2016-03-13'),
  array(timestamp '2016-11-15 20:54:00.000',  timestamp '2016-11-12 20:54:00.000')
) as primitive_arrays(
  boolean_array,
  tinyint_array,
  smallint_array,
  int_array,
  bigint_array,
  decimal_array,
  double_array,
  float_array,
  date_array,
  timestamp_array
), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [boolean_array#x, tinyint_array#x, smallint_array#x, int_array#x, bigint_array#x, decimal_array#x, double_array#x, float_array#x, date_array#x, timestamp_array#x]
      +- SubqueryAlias primitive_arrays
         +- LocalRelation [boolean_array#x, tinyint_array#x, smallint_array#x, int_array#x, bigint_array#x, decimal_array#x, double_array#x, float_array#x, date_array#x, timestamp_array#x]


-- !query
select * from primitive_arrays
-- !query analysis
Project [boolean_array#x, tinyint_array#x, smallint_array#x, int_array#x, bigint_array#x, decimal_array#x, double_array#x, float_array#x, date_array#x, timestamp_array#x]
+- SubqueryAlias primitive_arrays
   +- View (`primitive_arrays`, [boolean_array#x, tinyint_array#x, smallint_array#x, int_array#x, bigint_array#x, decimal_array#x, double_array#x, float_array#x, date_array#x, timestamp_array#x])
      +- Project [cast(boolean_array#x as array<boolean>) AS boolean_array#x, cast(tinyint_array#x as array<tinyint>) AS tinyint_array#x, cast(smallint_array#x as array<smallint>) AS smallint_array#x, cast(int_array#x as array<int>) AS int_array#x, cast(bigint_array#x as array<bigint>) AS bigint_array#x, cast(decimal_array#x as array<decimal(19,0)>) AS decimal_array#x, cast(double_array#x as array<double>) AS double_array#x, cast(float_array#x as array<float>) AS float_array#x, cast(date_array#x as array<date>) AS date_array#x, cast(timestamp_array#x as array<timestamp>) AS timestamp_array#x]
         +- Project [boolean_array#x, tinyint_array#x, smallint_array#x, int_array#x, bigint_array#x, decimal_array#x, double_array#x, float_array#x, date_array#x, timestamp_array#x]
            +- SubqueryAlias primitive_arrays
               +- LocalRelation [boolean_array#x, tinyint_array#x, smallint_array#x, int_array#x, bigint_array#x, decimal_array#x, double_array#x, float_array#x, date_array#x, timestamp_array#x]


-- !query
select
  array_contains(boolean_array, true), array_contains(boolean_array, false),
  array_contains(tinyint_array, 2Y), array_contains(tinyint_array, 0Y),
  array_contains(smallint_array, 2S), array_contains(smallint_array, 0S),
  array_contains(int_array, 2), array_contains(int_array, 0),
  array_contains(bigint_array, 2L), array_contains(bigint_array, 0L),
  array_contains(decimal_array, 9223372036854775809), array_contains(decimal_array, 1),
  array_contains(double_array, 2.0D), array_contains(double_array, 0.0D),
  array_contains(float_array, float(2.0)), array_contains(float_array, float(0.0)),
  array_contains(date_array, date '2016-03-14'), array_contains(date_array, date '2016-01-01'),
  array_contains(timestamp_array, timestamp '2016-11-15 20:54:00.000'), array_contains(timestamp_array, timestamp '2016-01-01 20:54:00.000')
from primitive_arrays
-- !query analysis
[Analyzer test output redacted due to nondeterminism]


-- !query
select array_contains(b, 11), array_contains(c, array(111, 112, 113)) from data
-- !query analysis
Project [array_contains(b#x, 11) AS array_contains(b, 11)#x, array_contains(c#x, array(111, 112, 113)) AS array_contains(c, array(111, 112, 113))#x]
+- SubqueryAlias data
   +- View (`data`, [a#x, b#x, c#x])
      +- Project [cast(a#x as string) AS a#x, cast(b#x as array<int>) AS b#x, cast(c#x as array<array<int>>) AS c#x]
         +- Project [a#x, b#x, c#x]
            +- SubqueryAlias data
               +- LocalRelation [a#x, b#x, c#x]


-- !query
select
  sort_array(boolean_array),
  sort_array(tinyint_array),
  sort_array(smallint_array),
  sort_array(int_array),
  sort_array(bigint_array),
  sort_array(decimal_array),
  sort_array(double_array),
  sort_array(float_array),
  sort_array(date_array),
  sort_array(timestamp_array)
from primitive_arrays
-- !query analysis
Project [sort_array(boolean_array#x, true) AS sort_array(boolean_array, true)#x, sort_array(tinyint_array#x, true) AS sort_array(tinyint_array, true)#x, sort_array(smallint_array#x, true) AS sort_array(smallint_array, true)#x, sort_array(int_array#x, true) AS sort_array(int_array, true)#x, sort_array(bigint_array#x, true) AS sort_array(bigint_array, true)#x, sort_array(decimal_array#x, true) AS sort_array(decimal_array, true)#x, sort_array(double_array#x, true) AS sort_array(double_array, true)#x, sort_array(float_array#x, true) AS sort_array(float_array, true)#x, sort_array(date_array#x, true) AS sort_array(date_array, true)#x, sort_array(timestamp_array#x, true) AS sort_array(timestamp_array, true)#x]
+- SubqueryAlias primitive_arrays
   +- View (`primitive_arrays`, [boolean_array#x, tinyint_array#x, smallint_array#x, int_array#x, bigint_array#x, decimal_array#x, double_array#x, float_array#x, date_array#x, timestamp_array#x])
      +- Project [cast(boolean_array#x as array<boolean>) AS boolean_array#x, cast(tinyint_array#x as array<tinyint>) AS tinyint_array#x, cast(smallint_array#x as array<smallint>) AS smallint_array#x, cast(int_array#x as array<int>) AS int_array#x, cast(bigint_array#x as array<bigint>) AS bigint_array#x, cast(decimal_array#x as array<decimal(19,0)>) AS decimal_array#x, cast(double_array#x as array<double>) AS double_array#x, cast(float_array#x as array<float>) AS float_array#x, cast(date_array#x as array<date>) AS date_array#x, cast(timestamp_array#x as array<timestamp>) AS timestamp_array#x]
         +- Project [boolean_array#x, tinyint_array#x, smallint_array#x, int_array#x, bigint_array#x, decimal_array#x, double_array#x, float_array#x, date_array#x, timestamp_array#x]
            +- SubqueryAlias primitive_arrays
               +- LocalRelation [boolean_array#x, tinyint_array#x, smallint_array#x, int_array#x, bigint_array#x, decimal_array#x, double_array#x, float_array#x, date_array#x, timestamp_array#x]


-- !query
select sort_array(array('b', 'd'), '1')
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"1\"",
    "inputType" : "\"STRING\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\"",
    "sqlExpr" : "\"sort_array(array(b, d), 1)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 39,
    "fragment" : "sort_array(array('b', 'd'), '1')"
  } ]
}


-- !query
select sort_array(array('b', 'd'), cast(NULL as boolean))
-- !query analysis
Project [sort_array(array(b, d), cast(null as boolean)) AS sort_array(array(b, d), CAST(NULL AS BOOLEAN))#x]
+- OneRowRelation


-- !query
select
  size(boolean_array),
  size(tinyint_array),
  size(smallint_array),
  size(int_array),
  size(bigint_array),
  size(decimal_array),
  size(double_array),
  size(float_array),
  size(date_array),
  size(timestamp_array)
from primitive_arrays
-- !query analysis
Project [size(boolean_array#x, true) AS size(boolean_array)#x, size(tinyint_array#x, true) AS size(tinyint_array)#x, size(smallint_array#x, true) AS size(smallint_array)#x, size(int_array#x, true) AS size(int_array)#x, size(bigint_array#x, true) AS size(bigint_array)#x, size(decimal_array#x, true) AS size(decimal_array)#x, size(double_array#x, true) AS size(double_array)#x, size(float_array#x, true) AS size(float_array)#x, size(date_array#x, true) AS size(date_array)#x, size(timestamp_array#x, true) AS size(timestamp_array)#x]
+- SubqueryAlias primitive_arrays
   +- View (`primitive_arrays`, [boolean_array#x, tinyint_array#x, smallint_array#x, int_array#x, bigint_array#x, decimal_array#x, double_array#x, float_array#x, date_array#x, timestamp_array#x])
      +- Project [cast(boolean_array#x as array<boolean>) AS boolean_array#x, cast(tinyint_array#x as array<tinyint>) AS tinyint_array#x, cast(smallint_array#x as array<smallint>) AS smallint_array#x, cast(int_array#x as array<int>) AS int_array#x, cast(bigint_array#x as array<bigint>) AS bigint_array#x, cast(decimal_array#x as array<decimal(19,0)>) AS decimal_array#x, cast(double_array#x as array<double>) AS double_array#x, cast(float_array#x as array<float>) AS float_array#x, cast(date_array#x as array<date>) AS date_array#x, cast(timestamp_array#x as array<timestamp>) AS timestamp_array#x]
         +- Project [boolean_array#x, tinyint_array#x, smallint_array#x, int_array#x, bigint_array#x, decimal_array#x, double_array#x, float_array#x, date_array#x, timestamp_array#x]
            +- SubqueryAlias primitive_arrays
               +- LocalRelation [boolean_array#x, tinyint_array#x, smallint_array#x, int_array#x, bigint_array#x, decimal_array#x, double_array#x, float_array#x, date_array#x, timestamp_array#x]


-- !query
select element_at(array(1, 2, 3), 5)
-- !query analysis
Project [element_at(array(1, 2, 3), 5, None, false) AS element_at(array(1, 2, 3), 5)#x]
+- OneRowRelation


-- !query
select element_at(array(1, 2, 3), -5)
-- !query analysis
Project [element_at(array(1, 2, 3), -5, None, false) AS element_at(array(1, 2, 3), -5)#x]
+- OneRowRelation


-- !query
select element_at(array(1, 2, 3), 0)
-- !query analysis
Project [element_at(array(1, 2, 3), 0, None, false) AS element_at(array(1, 2, 3), 0)#x]
+- OneRowRelation


-- !query
select elt(4, '123', '456')
-- !query analysis
Project [elt(4, 123, 456, false) AS elt(4, 123, 456)#x]
+- OneRowRelation


-- !query
select elt(0, '123', '456')
-- !query analysis
Project [elt(0, 123, 456, false) AS elt(0, 123, 456)#x]
+- OneRowRelation


-- !query
select elt(-1, '123', '456')
-- !query analysis
Project [elt(-1, 123, 456, false) AS elt(-1, 123, 456)#x]
+- OneRowRelation


-- !query
select elt(null, '123', '456')
-- !query analysis
Project [elt(cast(null as int), 123, 456, false) AS elt(NULL, 123, 456)#x]
+- OneRowRelation


-- !query
select elt(null, '123', null)
-- !query analysis
Project [elt(cast(null as int), 123, cast(null as string), false) AS elt(NULL, 123, NULL)#x]
+- OneRowRelation


-- !query
select elt(1, '123', null)
-- !query analysis
Project [elt(1, 123, cast(null as string), false) AS elt(1, 123, NULL)#x]
+- OneRowRelation


-- !query
select elt(2, '123', null)
-- !query analysis
Project [elt(2, 123, cast(null as string), false) AS elt(2, 123, NULL)#x]
+- OneRowRelation


-- !query
select array(1, 2, 3)[5]
-- !query analysis
Project [array(1, 2, 3)[5] AS array(1, 2, 3)[5]#x]
+- OneRowRelation


-- !query
select array(1, 2, 3)[-1]
-- !query analysis
Project [array(1, 2, 3)[-1] AS array(1, 2, 3)[-1]#x]
+- OneRowRelation


-- !query
select array_size(array())
-- !query analysis
Project [array_size(array()) AS array_size(array())#x]
+- OneRowRelation


-- !query
select array_size(array(true))
-- !query analysis
Project [array_size(array(true)) AS array_size(array(true))#x]
+- OneRowRelation


-- !query
select array_size(array(2, 1))
-- !query analysis
Project [array_size(array(2, 1)) AS array_size(array(2, 1))#x]
+- OneRowRelation


-- !query
select array_size(NULL)
-- !query analysis
Project [array_size(cast(null as array<void>)) AS array_size(NULL)#x]
+- OneRowRelation


-- !query
select array_size(map('a', 1, 'b', 2))
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"map(a, 1, b, 2)\"",
    "inputType" : "\"MAP<STRING, INT>\"",
    "paramIndex" : "first",
    "requiredType" : "\"ARRAY\"",
    "sqlExpr" : "\"array_size(map(a, 1, b, 2))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 38,
    "fragment" : "array_size(map('a', 1, 'b', 2))"
  } ]
}


-- !query
select size(arrays_zip(array(1, 2, 3), array(4), array(7, 8, 9, 10)))
-- !query analysis
Project [size(arrays_zip(array(1, 2, 3), array(4), array(7, 8, 9, 10), 0, 1, 2), true) AS size(arrays_zip(array(1, 2, 3), array(4), array(7, 8, 9, 10)))#x]
+- OneRowRelation


-- !query
select size(arrays_zip(array(), array(1, 2, 3), array(4), array(7, 8, 9, 10)))
-- !query analysis
Project [size(arrays_zip(array(), array(1, 2, 3), array(4), array(7, 8, 9, 10), 0, 1, 2, 3), true) AS size(arrays_zip(array(), array(1, 2, 3), array(4), array(7, 8, 9, 10)))#x]
+- OneRowRelation


-- !query
select size(arrays_zip(array(1, 2, 3), array(4), null, array(7, 8, 9, 10)))
-- !query analysis
Project [size(arrays_zip(array(1, 2, 3), array(4), null, array(7, 8, 9, 10), 0, 1, 2, 3), true) AS size(arrays_zip(array(1, 2, 3), array(4), NULL, array(7, 8, 9, 10)))#x]
+- OneRowRelation


-- !query
select isnotnull(arrays_zip(array(), array(4), array(7, 8, 9, 10)))
-- !query analysis
Project [isnotnull(arrays_zip(array(), array(4), array(7, 8, 9, 10), 0, 1, 2)) AS (arrays_zip(array(), array(4), array(7, 8, 9, 10)) IS NOT NULL)#x]
+- OneRowRelation


-- !query
select isnotnull(arrays_zip(array(1, 2, 3), array(4), array(7, 8, 9, 10)))
-- !query analysis
Project [isnotnull(arrays_zip(array(1, 2, 3), array(4), array(7, 8, 9, 10), 0, 1, 2)) AS (arrays_zip(array(1, 2, 3), array(4), array(7, 8, 9, 10)) IS NOT NULL)#x]
+- OneRowRelation


-- !query
select isnotnull(arrays_zip(array(1, 2, 3), NULL, array(4), array(7, 8, 9, 10)))
-- !query analysis
Project [isnotnull(arrays_zip(array(1, 2, 3), null, array(4), array(7, 8, 9, 10), 0, 1, 2, 3)) AS (arrays_zip(array(1, 2, 3), NULL, array(4), array(7, 8, 9, 10)) IS NOT NULL)#x]
+- OneRowRelation


-- !query
select get(array(1, 2, 3), 0)
-- !query analysis
Project [get(array(1, 2, 3), 0) AS get(array(1, 2, 3), 0)#x]
+- OneRowRelation


-- !query
select get(array(1, 2, 3), 3)
-- !query analysis
Project [get(array(1, 2, 3), 3) AS get(array(1, 2, 3), 3)#x]
+- OneRowRelation


-- !query
select get(array(1, 2, 3), null)
-- !query analysis
Project [get(array(1, 2, 3), null) AS get(array(1, 2, 3), NULL)#x]
+- OneRowRelation


-- !query
select get(array(1, 2, 3), -1)
-- !query analysis
Project [get(array(1, 2, 3), -1) AS get(array(1, 2, 3), -1)#x]
+- OneRowRelation


-- !query
select array_insert(array(1, 2, 3), 3, 4)
-- !query analysis
Project [array_insert(array(1, 2, 3), 3, 4, false) AS array_insert(array(1, 2, 3), 3, 4)#x]
+- OneRowRelation


-- !query
select array_insert(array(2, 3, 4), 0, 1)
-- !query analysis
Project [array_insert(array(2, 3, 4), 0, 1, false) AS array_insert(array(2, 3, 4), 0, 1)#x]
+- OneRowRelation


-- !query
select array_insert(array(2, 3, 4), 1, 1)
-- !query analysis
Project [array_insert(array(2, 3, 4), 1, 1, false) AS array_insert(array(2, 3, 4), 1, 1)#x]
+- OneRowRelation


-- !query
select array_insert(array(1, 3, 4), -2, 2)
-- !query analysis
Project [array_insert(array(1, 3, 4), -2, 2, false) AS array_insert(array(1, 3, 4), -2, 2)#x]
+- OneRowRelation


-- !query
select array_insert(array(1, 2, 3), 3, "4")
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.ARRAY_FUNCTION_DIFF_TYPES",
  "sqlState" : "42K09",
  "messageParameters" : {
    "dataType" : "\"ARRAY\"",
    "functionName" : "`array_insert`",
    "leftType" : "\"ARRAY<INT>\"",
    "rightType" : "\"STRING\"",
    "sqlExpr" : "\"array_insert(array(1, 2, 3), 3, 4)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 43,
    "fragment" : "array_insert(array(1, 2, 3), 3, \"4\")"
  } ]
}


-- !query
select array_insert(cast(NULL as ARRAY<INT>), 1, 1)
-- !query analysis
Project [array_insert(cast(null as array<int>), 1, 1, false) AS array_insert(NULL, 1, 1)#x]
+- OneRowRelation


-- !query
select array_insert(array(1, 2, 3, NULL), cast(NULL as INT), 4)
-- !query analysis
Project [array_insert(array(1, 2, 3, cast(null as int)), cast(null as int), 4, false) AS array_insert(array(1, 2, 3, NULL), CAST(NULL AS INT), 4)#x]
+- OneRowRelation


-- !query
select array_insert(array(1, 2, 3, NULL), 4, cast(NULL as INT))
-- !query analysis
Project [array_insert(array(1, 2, 3, cast(null as int)), 4, cast(null as int), false) AS array_insert(array(1, 2, 3, NULL), 4, CAST(NULL AS INT))#x]
+- OneRowRelation


-- !query
select array_insert(array(2, 3, NULL, 4), 5, 5)
-- !query analysis
Project [array_insert(array(2, 3, cast(null as int), 4), 5, 5, false) AS array_insert(array(2, 3, NULL, 4), 5, 5)#x]
+- OneRowRelation


-- !query
select array_insert(array(2, 3, NULL, 4), -5, 1)
-- !query analysis
Project [array_insert(array(2, 3, cast(null as int), 4), -5, 1, false) AS array_insert(array(2, 3, NULL, 4), -5, 1)#x]
+- OneRowRelation


-- !query
select array_insert(array(1), 2, cast(2 as tinyint))
-- !query analysis
Project [array_insert(array(1), 2, cast(cast(2 as tinyint) as int), false) AS array_insert(array(1), 2, CAST(2 AS TINYINT))#x]
+- OneRowRelation


-- !query
set spark.sql.legacy.negativeIndexInArrayInsert=true
-- !query analysis
SetCommand (spark.sql.legacy.negativeIndexInArrayInsert,Some(true))


-- !query
select array_insert(array(1, 3, 4), -2, 2)
-- !query analysis
Project [array_insert(array(1, 3, 4), -2, 2, true) AS array_insert(array(1, 3, 4), -2, 2)#x]
+- OneRowRelation


-- !query
select array_insert(array(2, 3, NULL, 4), -5, 1)
-- !query analysis
Project [array_insert(array(2, 3, cast(null as int), 4), -5, 1, true) AS array_insert(array(2, 3, NULL, 4), -5, 1)#x]
+- OneRowRelation


-- !query
set spark.sql.legacy.negativeIndexInArrayInsert=false
-- !query analysis
SetCommand (spark.sql.legacy.negativeIndexInArrayInsert,Some(false))


-- !query
select array_compact(id) from values (1) as t(id)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"id\"",
    "inputType" : "\"INT\"",
    "paramIndex" : "first",
    "requiredType" : "\"ARRAY\"",
    "sqlExpr" : "\"array_compact(id)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 24,
    "fragment" : "array_compact(id)"
  } ]
}


-- !query
select array_compact(array("1", null, "2", null))
-- !query analysis
Project [array_compact(array(1, cast(null as string), 2, cast(null as string))) AS array_compact(array(1, NULL, 2, NULL))#x]
+- OneRowRelation


-- !query
select array_compact(array("a", "b", "c"))
-- !query analysis
Project [array_compact(array(a, b, c)) AS array_compact(array(a, b, c))#x]
+- OneRowRelation


-- !query
select array_compact(array(1D, null, 2D, null))
-- !query analysis
Project [array_compact(array(1.0, cast(null as double), 2.0, cast(null as double))) AS array_compact(array(1.0, NULL, 2.0, NULL))#x]
+- OneRowRelation


-- !query
select array_compact(array(array(1, 2, 3, null), null, array(4, null, 6)))
-- !query analysis
Project [array_compact(array(array(1, 2, 3, cast(null as int)), cast(null as array<int>), array(4, cast(null as int), 6))) AS array_compact(array(array(1, 2, 3, NULL), NULL, array(4, NULL, 6)))#x]
+- OneRowRelation


-- !query
select array_compact(array(null))
-- !query analysis
Project [array_compact(array(null)) AS array_compact(array(NULL))#x]
+- OneRowRelation


-- !query
select array_append(array(1, 2, 3), 4)
-- !query analysis
Project [array_append(array(1, 2, 3), 4) AS array_append(array(1, 2, 3), 4)#x]
+- OneRowRelation


-- !query
select array_append(array('a', 'b', 'c'), 'd')
-- !query analysis
Project [array_append(array(a, b, c), d) AS array_append(array(a, b, c), d)#x]
+- OneRowRelation


-- !query
select array_append(array(1, 2, 3, NULL), NULL)
-- !query analysis
Project [array_append(array(1, 2, 3, cast(null as int)), cast(null as int)) AS array_append(array(1, 2, 3, NULL), NULL)#x]
+- OneRowRelation


-- !query
select array_append(array('a', 'b', 'c', NULL), NULL)
-- !query analysis
Project [array_append(array(a, b, c, cast(null as string)), cast(null as string)) AS array_append(array(a, b, c, NULL), NULL)#x]
+- OneRowRelation


-- !query
select array_append(CAST(null AS ARRAY<String>), 'a')
-- !query analysis
Project [array_append(cast(null as array<string>), a) AS array_append(NULL, a)#x]
+- OneRowRelation


-- !query
select array_append(CAST(null AS ARRAY<String>), CAST(null as String))
-- !query analysis
Project [array_append(cast(null as array<string>), cast(null as string)) AS array_append(NULL, CAST(NULL AS STRING))#x]
+- OneRowRelation


-- !query
select array_append(array(), 1)
-- !query analysis
Project [array_append(cast(array() as array<int>), 1) AS array_append(array(), 1)#x]
+- OneRowRelation


-- !query
select array_append(CAST(array() AS ARRAY<String>), CAST(NULL AS String))
-- !query analysis
Project [array_append(cast(array() as array<string>), cast(null as string)) AS array_append(array(), CAST(NULL AS STRING))#x]
+- OneRowRelation


-- !query
select array_append(array(CAST(NULL AS String)), CAST(NULL AS String))
-- !query analysis
Project [array_append(array(cast(null as string)), cast(null as string)) AS array_append(array(CAST(NULL AS STRING)), CAST(NULL AS STRING))#x]
+- OneRowRelation


-- !query
select array_prepend(array(1, 2, 3), 4)
-- !query analysis
Project [array_prepend(array(1, 2, 3), 4) AS array_prepend(array(1, 2, 3), 4)#x]
+- OneRowRelation


-- !query
select array_prepend(array('a', 'b', 'c'), 'd')
-- !query analysis
Project [array_prepend(array(a, b, c), d) AS array_prepend(array(a, b, c), d)#x]
+- OneRowRelation


-- !query
select array_prepend(array(1, 2, 3, NULL), NULL)
-- !query analysis
Project [array_prepend(array(1, 2, 3, cast(null as int)), cast(null as int)) AS array_prepend(array(1, 2, 3, NULL), NULL)#x]
+- OneRowRelation


-- !query
select array_prepend(array('a', 'b', 'c', NULL), NULL)
-- !query analysis
Project [array_prepend(array(a, b, c, cast(null as string)), cast(null as string)) AS array_prepend(array(a, b, c, NULL), NULL)#x]
+- OneRowRelation


-- !query
select array_prepend(CAST(null AS ARRAY<String>), 'a')
-- !query analysis
Project [array_prepend(cast(null as array<string>), a) AS array_prepend(NULL, a)#x]
+- OneRowRelation


-- !query
select array_prepend(CAST(null AS ARRAY<String>), CAST(null as String))
-- !query analysis
Project [array_prepend(cast(null as array<string>), cast(null as string)) AS array_prepend(NULL, CAST(NULL AS STRING))#x]
+- OneRowRelation


-- !query
select array_prepend(array(), 1)
-- !query analysis
Project [array_prepend(cast(array() as array<int>), 1) AS array_prepend(array(), 1)#x]
+- OneRowRelation


-- !query
select array_prepend(CAST(array() AS ARRAY<String>), CAST(NULL AS String))
-- !query analysis
Project [array_prepend(cast(array() as array<string>), cast(null as string)) AS array_prepend(array(), CAST(NULL AS STRING))#x]
+- OneRowRelation


-- !query
select array_prepend(array(CAST(NULL AS String)), CAST(NULL AS String))
-- !query analysis
Project [array_prepend(array(cast(null as string)), cast(null as string)) AS array_prepend(array(CAST(NULL AS STRING)), CAST(NULL AS STRING))#x]
+- OneRowRelation


-- !query
select array_union(array(0.0, -0.0, DOUBLE("NaN")), array(0.0, -0.0, DOUBLE("NaN")))
-- !query analysis
Project [array_union(array(cast(0.0 as double), cast(0.0 as double), cast(NaN as double)), array(cast(0.0 as double), cast(0.0 as double), cast(NaN as double))) AS array_union(array(0.0, 0.0, NaN), array(0.0, 0.0, NaN))#x]
+- OneRowRelation


-- !query
select array_distinct(array(0.0, -0.0, -0.0, DOUBLE("NaN"), DOUBLE("NaN")))
-- !query analysis
Project [array_distinct(array(cast(0.0 as double), cast(0.0 as double), cast(0.0 as double), cast(NaN as double), cast(NaN as double))) AS array_distinct(array(0.0, 0.0, 0.0, NaN, NaN))#x]
+- OneRowRelation
