-- Automatically generated by SQLQueryTestSuite
-- !query
select typeof(null)
-- !query analysis
Project [typeof(null) AS typeof(NULL)#x]
+- OneRowRelation


-- !query
select typeof(true)
-- !query analysis
Project [typeof(true) AS typeof(true)#x]
+- OneRowRelation


-- !query
select typeof(1Y), typeof(1S), typeof(1), typeof(1L)
-- !query analysis
Project [typeof(1) AS typeof(1)#x, typeof(1) AS typeof(1)#x, typeof(1) AS typeof(1)#x, typeof(1) AS typeof(1)#x]
+- OneRowRelation


-- !query
select typeof(cast(1.0 as float)), typeof(1.0D), typeof(1.2)
-- !query analysis
Project [typeof(cast(1.0 as float)) AS typeof(CAST(1.0 AS FLOAT))#x, typeof(1.0) AS typeof(1.0)#x, typeof(1.2) AS typeof(1.2)#x]
+- OneRowRelation


-- !query
select typeof(date '1986-05-23'),  typeof(timestamp '1986-05-23'), typeof(interval '23 days')
-- !query analysis
[Analyzer test output redacted due to nondeterminism]


-- !query
select typeof(x'ABCD'), typeof('SPARK')
-- !query analysis
Project [typeof(0xABCD) AS typeof(X'ABCD')#x, typeof(SPARK) AS typeof(SPARK)#x]
+- OneRowRelation


-- !query
select typeof(array(1, 2)), typeof(map(1, 2)), typeof(named_struct('a', 1, 'b', 'spark'))
-- !query analysis
Project [typeof(array(1, 2)) AS typeof(array(1, 2))#x, typeof(map(1, 2)) AS typeof(map(1, 2))#x, typeof(named_struct(a, 1, b, spark)) AS typeof(named_struct(a, 1, b, spark))#x]
+- OneRowRelation


-- !query
SELECT assert_true(true), assert_true(boolean(1))
-- !query analysis
Project [assert_true(true, 'true' is not true!) AS assert_true(true, 'true' is not true!)#x, assert_true(cast(1 as boolean), 'cast(1 as boolean)' is not true!) AS assert_true(1, 'cast(1 as boolean)' is not true!)#x]
+- OneRowRelation


-- !query
SELECT assert_true(false)
-- !query analysis
Project [assert_true(false, 'false' is not true!) AS assert_true(false, 'false' is not true!)#x]
+- OneRowRelation


-- !query
SELECT assert_true(boolean(0))
-- !query analysis
Project [assert_true(cast(0 as boolean), 'cast(0 as boolean)' is not true!) AS assert_true(0, 'cast(0 as boolean)' is not true!)#x]
+- OneRowRelation


-- !query
SELECT assert_true(null)
-- !query analysis
Project [assert_true(null, 'null' is not true!) AS assert_true(NULL, 'null' is not true!)#x]
+- OneRowRelation


-- !query
SELECT assert_true(boolean(null))
-- !query analysis
Project [assert_true(cast(null as boolean), 'cast(null as boolean)' is not true!) AS assert_true(NULL, 'cast(null as boolean)' is not true!)#x]
+- OneRowRelation


-- !query
SELECT assert_true(false, 'custom error message')
-- !query analysis
Project [assert_true(false, custom error message) AS assert_true(false, custom error message)#x]
+- OneRowRelation


-- !query
CREATE TEMPORARY VIEW tbl_misc AS SELECT * FROM (VALUES (1), (8), (2)) AS T(v)
-- !query analysis
CreateViewCommand `tbl_misc`, SELECT * FROM (VALUES (1), (8), (2)) AS T(v), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [v#x]
      +- SubqueryAlias T
         +- Project [col1#x AS v#x]
            +- LocalRelation [col1#x]


-- !query
SELECT raise_error('error message')
-- !query analysis
Project [raise_error(USER_RAISED_EXCEPTION, map(errorMessage, error message), NullType) AS raise_error(USER_RAISED_EXCEPTION, map(errorMessage, error message))#x]
+- OneRowRelation


-- !query
SELECT if(v > 5, raise_error('too big: ' || v), v + 1) FROM tbl_misc
-- !query analysis
Project [if ((v#x > 5)) cast(raise_error(USER_RAISED_EXCEPTION, map(errorMessage, concat(too big: , cast(v#x as string))), NullType) as int) else (v#x + 1) AS (IF((v > 5), raise_error(USER_RAISED_EXCEPTION, map(errorMessage, concat(too big: , v))), (v + 1)))#x]
+- SubqueryAlias tbl_misc
   +- View (`tbl_misc`, [v#x])
      +- Project [cast(v#x as int) AS v#x]
         +- Project [v#x]
            +- SubqueryAlias T
               +- Project [col1#x AS v#x]
                  +- LocalRelation [col1#x]


-- !query
SELECT raise_error('error message', Map())
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "WRONG_NUM_ARGS.WITHOUT_SUGGESTION",
  "sqlState" : "42605",
  "messageParameters" : {
    "actualNum" : "2",
    "docroot" : "https://spark.apache.org/docs/latest",
    "expectedNum" : "1",
    "functionName" : "`raise_error`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 42,
    "fragment" : "raise_error('error message', Map())"
  } ]
}


-- !query
SELECT raise_error('error message', 'some args')
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "WRONG_NUM_ARGS.WITHOUT_SUGGESTION",
  "sqlState" : "42605",
  "messageParameters" : {
    "actualNum" : "2",
    "docroot" : "https://spark.apache.org/docs/latest",
    "expectedNum" : "1",
    "functionName" : "`raise_error`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 48,
    "fragment" : "raise_error('error message', 'some args')"
  } ]
}


-- !query
SELECT raise_error()
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "WRONG_NUM_ARGS.WITHOUT_SUGGESTION",
  "sqlState" : "42605",
  "messageParameters" : {
    "actualNum" : "0",
    "docroot" : "https://spark.apache.org/docs/latest",
    "expectedNum" : "1",
    "functionName" : "`raise_error`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 20,
    "fragment" : "raise_error()"
  } ]
}


-- !query
SELECT raise_error(NULL)
-- !query analysis
Project [raise_error(USER_RAISED_EXCEPTION, cast(map(errorMessage, null) as map<string,string>), NullType) AS raise_error(USER_RAISED_EXCEPTION, map(errorMessage, NULL))#x]
+- OneRowRelation


-- !query
SELECT raise_error(1)
-- !query analysis
Project [raise_error(USER_RAISED_EXCEPTION, cast(map(errorMessage, 1) as map<string,string>), NullType) AS raise_error(USER_RAISED_EXCEPTION, map(errorMessage, 1))#x]
+- OneRowRelation


-- !query
SET spark.sql.legacy.raiseErrorWithoutErrorClass=true
-- !query analysis
SetCommand (spark.sql.legacy.raiseErrorWithoutErrorClass,Some(true))


-- !query
SELECT assert_true(false)
-- !query analysis
Project [assert_true(false, 'false' is not true!) AS assert_true(false, 'false' is not true!)#x]
+- OneRowRelation


-- !query
SELECT raise_error('hello')
-- !query analysis
Project [raise_error(_LEGACY_ERROR_USER_RAISED_EXCEPTION, map(errorMessage, hello), NullType) AS raise_error(_LEGACY_ERROR_USER_RAISED_EXCEPTION, map(errorMessage, hello))#x]
+- OneRowRelation


-- !query
SET spark.sql.legacy.raiseErrorWithoutErrorClass=false
-- !query analysis
SetCommand (spark.sql.legacy.raiseErrorWithoutErrorClass,Some(false))
