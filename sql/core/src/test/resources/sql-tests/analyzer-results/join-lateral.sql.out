-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE VIEW t1(c1, c2) AS VALUES (0, 1), (1, 2)
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`t1`, [(c1,None), (c2,None)], VALUES (0, 1), (1, 2), false, false, PersistedView, COMPENSATION, true
   +- LocalRelation [col1#x, col2#x]


-- !query
CREATE VIEW t2(c1, c2) AS VALUES (0, 2), (0, 3)
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`t2`, [(c1,None), (c2,None)], VALUES (0, 2), (0, 3), false, false, PersistedView, COMPENSATION, true
   +- LocalRelation [col1#x, col2#x]


-- !query
CREATE VIEW t3(c1, c2) AS VALUES (0, ARRAY(0, 1)), (1, ARRAY(2)), (2, ARRAY()), (null, ARRAY(4))
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`t3`, [(c1,None), (c2,None)], VALUES (0, ARRAY(0, 1)), (1, ARRAY(2)), (2, ARRAY()), (null, ARRAY(4)), false, false, PersistedView, COMPENSATION, true
   +- LocalRelation [col1#x, col2#x]


-- !query
CREATE VIEW t4(c1, c2) AS VALUES (0, 1), (0, 2), (1, 1), (1, 3)
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`t4`, [(c1,None), (c2,None)], VALUES (0, 1), (0, 2), (1, 1), (1, 3), false, false, PersistedView, COMPENSATION, true
   +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT c1)
-- !query analysis
Project [c1#x, c2#x, c1#x]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [outer(c1#x) AS c1#x]
   :        +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT c1 FROM t2)
-- !query analysis
Project [c1#x, c2#x, c1#x]
+- LateralJoin lateral-subquery#x [], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c1#x]
   :        +- SubqueryAlias spark_catalog.default.t2
   :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                 +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.c1 FROM t2)
-- !query analysis
Project [c1#x, c2#x, c1#x]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [outer(c1#x) AS c1#x]
   :        +- SubqueryAlias spark_catalog.default.t2
   :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                 +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.c1 + t2.c1 FROM t2)
-- !query analysis
Project [c1#x, c2#x, (outer(spark_catalog.default.t1.c1) + c1)#x]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [(outer(c1#x) + c1#x) AS (outer(spark_catalog.default.t1.c1) + c1)#x]
   :        +- SubqueryAlias spark_catalog.default.t2
   :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                 +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT *)
-- !query analysis
Project [c1#x, c2#x]
+- LateralJoin lateral-subquery#x [], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project
   :        +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM t2)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c1#x, c2#x]
   :        +- SubqueryAlias spark_catalog.default.t2
   :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                 +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.*)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [outer(c1#x) AS c1#x, outer(c2#x) AS c2#x]
   :        +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.*, t2.* FROM t2)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [outer(c1#x) AS c1#x, outer(c2#x) AS c2#x, c1#x, c2#x]
   :        +- SubqueryAlias spark_catalog.default.t2
   :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                 +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.* FROM t2 AS t1)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c1#x, c2#x]
   :        +- SubqueryAlias t1
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.*, t2.* FROM t2, LATERAL (SELECT t1.*, t2.*, t3.* FROM t2 AS t3))
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "CANNOT_RESOLVE_STAR_EXPAND",
  "sqlState" : "42704",
  "messageParameters" : {
    "columns" : "`c1`, `c2`",
    "targetString" : "`t1`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 71,
    "stopIndex" : 74,
    "fragment" : "t1.*"
  } ]
}


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT c1 + c2 AS c3) ON c2 = c3
-- !query analysis
Project [c1#x, c2#x, c3#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner, (c2#x = c3#x)
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [(outer(c1#x) + outer(c2#x)) AS c3#x]
   :        +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 LEFT JOIN LATERAL (SELECT c1 + c2 AS c3) ON c2 = c3
-- !query analysis
Project [c1#x, c2#x, c3#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], LeftOuter, (c2#x = c3#x)
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [(outer(c1#x) + outer(c2#x)) AS c3#x]
   :        +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 CROSS JOIN LATERAL (SELECT c1 + c2 AS c3)
-- !query analysis
Project [c1#x, c2#x, c3#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Cross
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [(outer(c1#x) + outer(c2#x)) AS c3#x]
   :        +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 NATURAL JOIN LATERAL (SELECT c1 + c2 AS c2)
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "INCOMPATIBLE_JOIN_TYPES",
  "sqlState" : "42613",
  "messageParameters" : {
    "joinType1" : "LATERAL",
    "joinType2" : "NATURAL"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 18,
    "stopIndex" : 60,
    "fragment" : "NATURAL JOIN LATERAL (SELECT c1 + c2 AS c2)"
  } ]
}


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT c1 + c2 AS c2) USING (c2)
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.LATERAL_JOIN_USING",
  "sqlState" : "0A000",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 18,
    "stopIndex" : 63,
    "fragment" : "JOIN LATERAL (SELECT c1 + c2 AS c2) USING (c2)"
  } ]
}


-- !query
SELECT * FROM LATERAL (SELECT * FROM t1)
-- !query analysis
Project [c1#x, c2#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [c1#x, c2#x]
      +- SubqueryAlias spark_catalog.default.t1
         +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
            +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM t2)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c1#x, c2#x]
   :        +- SubqueryAlias spark_catalog.default.t2
   :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                 +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM LATERAL (SELECT * FROM t1), LATERAL (SELECT * FROM t2)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c1#x, c2#x]
   :        +- SubqueryAlias spark_catalog.default.t2
   :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                 +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [c1#x, c2#x]
         +- SubqueryAlias spark_catalog.default.t1
            +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
               +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
                  +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM LATERAL (SELECT * FROM t1) JOIN LATERAL (SELECT * FROM t2)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c1#x, c2#x]
   :        +- SubqueryAlias spark_catalog.default.t2
   :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                 +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [c1#x, c2#x]
         +- SubqueryAlias spark_catalog.default.t1
            +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
               +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
                  +- LocalRelation [col1#x, col2#x]


-- !query
SELECT a, b FROM t1, LATERAL (SELECT c1, c2) s(a, b)
-- !query analysis
Project [a#x, b#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias s
   :     +- Project [c1#x AS a#x, c2#x AS b#x]
   :        +- Project [outer(c1#x), outer(c2#x)]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM (SELECT 1 AS c1, 2 AS c2), LATERAL (SELECT c1, c2)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [outer(c1#x) AS c1#x, outer(c2#x) AS c2#x]
   :        +- OneRowRelation
   +- SubqueryAlias __auto_generated_subquery_name
      +- Project [1 AS c1#x, 2 AS c2#x]
         +- OneRowRelation


-- !query
SELECT * FROM t1, LATERAL (SELECT c2 FROM t2 WHERE t1.c1 = t2.c1)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c2#x]
   :        +- Filter (outer(c1#x) = c1#x)
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT c2 FROM t2 WHERE t1.c2 < t2.c2)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c2#x]
   :        +- Filter (outer(c2#x) < c2#x)
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT max(c2) AS m FROM t2 WHERE t1.c2 < t2.c2)
-- !query analysis
Project [c1#x, c2#x, m#x]
+- LateralJoin lateral-subquery#x [c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [max(c2#x) AS m#x]
   :        +- Filter (outer(c2#x) < c2#x)
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN t2 JOIN LATERAL (SELECT t1.c2 + t2.c2)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x, (outer(spark_catalog.default.t1.c2) + outer(spark_catalog.default.t2.c2))#x]
+- LateralJoin lateral-subquery#x [c2#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [(outer(c2#x) + outer(c2#x)) AS (outer(spark_catalog.default.t1.c2) + outer(spark_catalog.default.t2.c2))#x]
   :        +- OneRowRelation
   +- Join Inner
      :- SubqueryAlias spark_catalog.default.t1
      :  +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
      :     +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
      :        +- LocalRelation [col1#x, col2#x]
      +- SubqueryAlias spark_catalog.default.t2
         +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
            +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT t1.c1 AS a, t2.c1 AS b) s JOIN t2 ON s.b = t2.c1
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITHOUT_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`t2`.`c1`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 51,
    "stopIndex" : 55,
    "fragment" : "t2.c1"
  } ]
}


-- !query
SELECT x FROM VALUES (0) t(x) JOIN LATERAL (SELECT x + rand(0) AS y)
-- !query analysis
[Analyzer test output redacted due to nondeterminism]


-- !query
SELECT x FROM (SELECT SUM(c1) AS x FROM t1), LATERAL (SELECT x + rand(0) AS y)
-- !query analysis
[Analyzer test output redacted due to nondeterminism]


-- !query
SELECT * FROM t1, LATERAL (SELECT c1 + c2 + rand(0) AS c3)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.NON_DETERMINISTIC_LATERAL_SUBQUERIES",
  "sqlState" : "0A000",
  "messageParameters" : {
    "treeNode" : "LateralJoin lateral-subquery#x [c1#x && c2#x], Inner\n:  +- SubqueryAlias __auto_generated_subquery_name\n:     +- Project [(cast((outer(c1#x) + outer(c2#x)) as double) + rand(number)) AS c3#x]\n:        +- OneRowRelation\n+- SubqueryAlias spark_catalog.default.t1\n   +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])\n      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]\n         +- LocalRelation [col1#x, col2#x]\n"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 10,
    "stopIndex" : 58,
    "fragment" : "FROM t1, LATERAL (SELECT c1 + c2 + rand(0) AS c3)"
  } ]
}


-- !query
SELECT * FROM t1, LATERAL (SELECT rand(0) FROM t2)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.NON_DETERMINISTIC_LATERAL_SUBQUERIES",
  "sqlState" : "0A000",
  "messageParameters" : {
    "treeNode" : "LateralJoin lateral-subquery#x [], Inner\n:  +- SubqueryAlias __auto_generated_subquery_name\n:     +- Project [rand(number) AS rand(number)#x]\n:        +- SubqueryAlias spark_catalog.default.t2\n:           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])\n:              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]\n:                 +- LocalRelation [col1#x, col2#x]\n+- SubqueryAlias spark_catalog.default.t1\n   +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])\n      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]\n         +- LocalRelation [col1#x, col2#x]\n"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 10,
    "stopIndex" : 50,
    "fragment" : "FROM t1, LATERAL (SELECT rand(0) FROM t2)"
  } ]
}


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT * FROM t2) s ON t1.c1 + rand(0) = s.c1
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.LATERAL_JOIN_CONDITION_NON_DETERMINISTIC",
  "sqlState" : "0A000",
  "messageParameters" : {
    "condition" : "((CAST(spark_catalog.default.t1.c1 AS DOUBLE) + rand(0)) = CAST(s.c1 AS DOUBLE))"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 55,
    "stopIndex" : 76,
    "fragment" : "t1.c1 + rand(0) = s.c1"
  } ]
}


-- !query
SELECT * FROM t1,
LATERAL (SELECT c1 + c2 AS a),
LATERAL (SELECT c1 - c2 AS b),
LATERAL (SELECT a * b AS c)
-- !query analysis
Project [c1#x, c2#x, a#x, b#x, c#x]
+- LateralJoin lateral-subquery#x [a#x && b#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [(outer(a#x) * outer(b#x)) AS c#x]
   :        +- OneRowRelation
   +- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
      :  +- SubqueryAlias __auto_generated_subquery_name
      :     +- Project [(outer(c1#x) - outer(c2#x)) AS b#x]
      :        +- OneRowRelation
      +- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
         :  +- SubqueryAlias __auto_generated_subquery_name
         :     +- Project [(outer(c1#x) + outer(c2#x)) AS a#x]
         :        +- OneRowRelation
         +- SubqueryAlias spark_catalog.default.t1
            +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
               +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
                  +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1
LEFT OUTER JOIN LATERAL (SELECT c2 FROM t2 WHERE t1.c1 = t2.c1) s
LEFT OUTER JOIN t1 t3 ON s.c2 = t3.c2
-- !query analysis
Project [c1#x, c2#x, c2#x, c1#x, c2#x]
+- Join LeftOuter, (c2#x = c2#x)
   :- LateralJoin lateral-subquery#x [c1#x], LeftOuter
   :  :  +- SubqueryAlias s
   :  :     +- Project [c2#x]
   :  :        +- Filter (outer(c1#x) = c1#x)
   :  :           +- SubqueryAlias spark_catalog.default.t2
   :  :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :  :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :  :                    +- LocalRelation [col1#x, col2#x]
   :  +- SubqueryAlias spark_catalog.default.t1
   :     +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
   :        +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias t3
      +- SubqueryAlias spark_catalog.default.t1
         +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
            +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM t2, LATERAL (SELECT c1))
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x, c1#x]
+- LateralJoin lateral-subquery#x [], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c1#x, c2#x, c1#x]
   :        +- LateralJoin lateral-subquery#x [c1#x], Inner
   :           :  +- SubqueryAlias __auto_generated_subquery_name
   :           :     +- Project [outer(c1#x) AS c1#x]
   :           :        +- OneRowRelation
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM (SELECT c1 + 1 AS c1), LATERAL (SELECT c1))
-- !query analysis
Project [c1#x, c2#x, c1#x, c1#x]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c1#x, c1#x]
   :        +- LateralJoin lateral-subquery#x [c1#x], Inner
   :           :  +- SubqueryAlias __auto_generated_subquery_name
   :           :     +- Project [outer(c1#x) AS c1#x]
   :           :        +- OneRowRelation
   :           +- SubqueryAlias __auto_generated_subquery_name
   :              +- Project [(outer(c1#x) + 1) AS c1#x]
   :                 +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (
  SELECT * FROM (SELECT c1, MIN(c2) m FROM t2 WHERE t1.c1 = t2.c1 GROUP BY c1) s,
  LATERAL (SELECT m WHERE m > c1)
)
-- !query analysis
Project [c1#x, c2#x, c1#x, m#x, m#x]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c1#x, m#x, m#x]
   :        +- LateralJoin lateral-subquery#x [m#x && m#x && c1#x], Inner
   :           :  +- SubqueryAlias __auto_generated_subquery_name
   :           :     +- Project [outer(m#x) AS m#x]
   :           :        +- Filter (outer(m#x) > outer(c1#x))
   :           :           +- OneRowRelation
   :           +- SubqueryAlias s
   :              +- Aggregate [c1#x], [c1#x, min(c2#x) AS m#x]
   :                 +- Filter (outer(c1#x) = c1#x)
   :                    +- SubqueryAlias spark_catalog.default.t2
   :                       +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                          +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM t2, LATERAL (SELECT t1.c1 + t2.c1))
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITHOUT_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`t1`.`c1`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 62,
    "stopIndex" : 66,
    "fragment" : "t1.c1"
  } ]
}


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM (SELECT c1), LATERAL (SELECT c2))
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITHOUT_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`c2`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 71,
    "stopIndex" : 72,
    "fragment" : "c2"
  } ]
}


-- !query
SELECT * FROM t1, LATERAL (SELECT c2, (SELECT MIN(c2) FROM t2))
-- !query analysis
Project [c1#x, c2#x, c2#x, scalarsubquery()#x]
+- LateralJoin lateral-subquery#x [c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [outer(c2#x) AS c2#x, scalar-subquery#x [] AS scalarsubquery()#x]
   :        :  +- Aggregate [min(c2#x) AS min(c2)#x]
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT (SELECT SUM(c2) FROM t2 WHERE c1 = a) FROM (SELECT c1 AS a))
-- !query analysis
Project [c1#x, c2#x, scalarsubquery(a)#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [scalar-subquery#x [a#x] AS scalarsubquery(a)#xL]
   :        :  +- Aggregate [sum(c2#x) AS sum(c2)#xL]
   :        :     +- Filter (c1#x = outer(a#x))
   :        :        +- SubqueryAlias spark_catalog.default.t2
   :        :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :                 +- LocalRelation [col1#x, col2#x]
   :        +- SubqueryAlias __auto_generated_subquery_name
   :           +- Project [outer(c1#x) AS a#x]
   :              +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT c1, (SELECT SUM(c2) FROM t2 WHERE c1 = t1.c1))
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`t1`.`c1`",
    "proposal" : "`t2`.`c1`, `t2`.`c2`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 74,
    "stopIndex" : 78,
    "fragment" : "t1.c1"
  } ]
}


-- !query
SELECT * FROM t1 WHERE c1 = (SELECT MIN(a) FROM t2, LATERAL (SELECT c1 AS a))
-- !query analysis
Project [c1#x, c2#x]
+- Filter (c1#x = scalar-subquery#x [])
   :  +- Aggregate [min(a#x) AS min(a)#x]
   :     +- LateralJoin lateral-subquery#x [c1#x], Inner
   :        :  +- SubqueryAlias __auto_generated_subquery_name
   :        :     +- Project [outer(c1#x) AS a#x]
   :        :        +- OneRowRelation
   :        +- SubqueryAlias spark_catalog.default.t2
   :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                 +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 WHERE c1 = (SELECT MIN(a) FROM t2, LATERAL (SELECT c1 AS a) WHERE c1 = t1.c1)
-- !query analysis
Project [c1#x, c2#x]
+- Filter (c1#x = scalar-subquery#x [c1#x])
   :  +- Aggregate [min(a#x) AS min(a)#x]
   :     +- Filter (c1#x = outer(c1#x))
   :        +- LateralJoin lateral-subquery#x [c1#x], Inner
   :           :  +- SubqueryAlias __auto_generated_subquery_name
   :           :     +- Project [outer(c1#x) AS a#x]
   :           :        +- OneRowRelation
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN lateral (SELECT * FROM t2 JOIN t4 ON t2.c1 = t4.c1 AND t2.c1 = t1.c1)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c1#x, c2#x, c1#x, c2#x]
   :        +- Join Inner, ((c1#x = c1#x) AND (c1#x = outer(c1#x)))
   :           :- SubqueryAlias spark_catalog.default.t2
   :           :  +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :           :     +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           :        +- LocalRelation [col1#x, col2#x]
   :           +- SubqueryAlias spark_catalog.default.t4
   :              +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN lateral (SELECT * FROM t2 JOIN t4 ON t2.c1 != t4.c1 AND t2.c1 != t1.c1)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c1#x, c2#x, c1#x, c2#x]
   :        +- Join Inner, (NOT (c1#x = c1#x) AND NOT (c1#x = outer(c1#x)))
   :           :- SubqueryAlias spark_catalog.default.t2
   :           :  +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :           :     +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           :        +- LocalRelation [col1#x, col2#x]
   :           +- SubqueryAlias spark_catalog.default.t4
   :              +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 LEFT JOIN lateral (SELECT * FROM t4 LEFT JOIN t2 ON t2.c1 = t4.c1 AND t2.c1 = t1.c1)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x], LeftOuter
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [c1#x, c2#x, c1#x, c2#x]
   :        +- Join LeftOuter, ((c1#x = c1#x) AND (c1#x = outer(c1#x)))
   :           :- SubqueryAlias spark_catalog.default.t4
   :           :  +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :           :     +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           :        +- LocalRelation [col1#x, col2#x]
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(*) cnt FROM t2 WHERE c1 = t1.c1)
-- !query analysis
Project [c1#x, c2#x, cnt#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [count(1) AS cnt#xL]
   :        +- Filter (c1#x = outer(c1#x))
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(*) cnt, SUM(c2) sum FROM t2 WHERE c1 = t1.c1)
-- !query analysis
Project [c1#x, c2#x, cnt#xL, sum#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [count(1) AS cnt#xL, sum(c2#x) AS sum#xL]
   :        +- Filter (c1#x = outer(c1#x))
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT SUM(c2) IS NULL FROM t2 WHERE t1.c1 = t2.c1)
-- !query analysis
Project [c1#x, c2#x, (sum(c2) IS NULL)#x]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [isnull(sum(c2#x)) AS (sum(c2) IS NULL)#x]
   :        +- Filter (outer(c1#x) = c1#x)
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(*) + CASE WHEN sum(c2) IS NULL THEN 0 ELSE sum(c2) END FROM t2 WHERE t1.c1 = t2.c1)
-- !query analysis
Project [c1#x, c2#x, (count(1) + CASE WHEN (sum(c2) IS NULL) THEN 0 ELSE sum(c2) END)#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [(count(1) + CASE WHEN isnull(sum(c2#x)) THEN cast(0 as bigint) ELSE sum(c2#x) END) AS (count(1) + CASE WHEN (sum(c2) IS NULL) THEN 0 ELSE sum(c2) END)#xL]
   :        +- Filter (outer(c1#x) = c1#x)
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT c1, COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1 GROUP BY c1)
-- !query analysis
Project [c1#x, c2#x, c1#x, cnt#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [c1#x], [c1#x, count(1) AS cnt#xL]
   :        +- Filter (outer(c1#x) = c1#x)
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT c2, COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1 GROUP BY c2)
-- !query analysis
Project [c1#x, c2#x, c2#x, cnt#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [c2#x], [c2#x, count(1) AS cnt#xL]
   :        +- Filter (outer(c1#x) = c1#x)
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1)
-- !query analysis
Project [c1#x, c2#x, cnt#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [count(1) AS cnt#xL]
   :        +- Filter (outer(c1#x) = c1#x)
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 LEFT JOIN LATERAL (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1)
-- !query analysis
Project [c1#x, c2#x, cnt#xL]
+- LateralJoin lateral-subquery#x [c1#x], LeftOuter
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [count(1) AS cnt#xL]
   :        +- Filter (outer(c1#x) = c1#x)
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 CROSS JOIN LATERAL (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1)
-- !query analysis
Project [c1#x, c2#x, cnt#xL]
+- LateralJoin lateral-subquery#x [c1#x], Cross
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [count(1) AS cnt#xL]
   :        +- Filter (outer(c1#x) = c1#x)
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 LEFT JOIN LATERAL (SELECT c1, COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1 GROUP BY c1)
-- !query analysis
Project [c1#x, c2#x, c1#x, cnt#xL]
+- LateralJoin lateral-subquery#x [c1#x], LeftOuter
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [c1#x], [c1#x, count(1) AS cnt#xL]
   :        +- Filter (outer(c1#x) = c1#x)
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 CROSS JOIN LATERAL (SELECT c1, COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1 GROUP BY c1)
-- !query analysis
Project [c1#x, c2#x, c1#x, cnt#xL]
+- LateralJoin lateral-subquery#x [c1#x], Cross
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [c1#x], [c1#x, count(1) AS cnt#xL]
   :        +- Filter (outer(c1#x) = c1#x)
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1) ON cnt + 1 = c1
-- !query analysis
Project [c1#x, c2#x, cnt#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner, ((cnt#xL + cast(1 as bigint)) = cast(c1#x as bigint))
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [count(1) AS cnt#xL]
   :        +- Filter (outer(c1#x) = c1#x)
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(*) cnt FROM t1 t2 WHERE t1.c1 = t2.c1)
-- !query analysis
Project [c1#x, c2#x, cnt#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [count(1) AS cnt#xL]
   :        +- Filter (outer(c1#x) = c1#x)
   :           +- SubqueryAlias t2
   :              +- SubqueryAlias spark_catalog.default.t1
   :                 +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(*) cnt FROM t1 t2 WHERE t1.c1 = t2.c1 HAVING cnt > 0)
-- !query analysis
Project [c1#x, c2#x, cnt#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Filter (cnt#xL > cast(0 as bigint))
   :        +- Aggregate [count(1) AS cnt#xL]
   :           +- Filter (outer(c1#x) = c1#x)
   :              +- SubqueryAlias t2
   :                 +- SubqueryAlias spark_catalog.default.t1
   :                    +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
   :                       +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                          +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT SUM(cnt) FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1))
-- !query analysis
Project [c1#x, c2#x, sum(cnt)#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [sum(cnt#xL) AS sum(cnt)#xL]
   :        +- SubqueryAlias __auto_generated_subquery_name
   :           +- Aggregate [count(1) AS cnt#xL]
   :              +- Filter (outer(c1#x) = c1#x)
   :                 +- SubqueryAlias spark_catalog.default.t2
   :                    +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                       +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                          +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(cnt) FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1))
-- !query analysis
Project [c1#x, c2#x, count(cnt)#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [count(cnt#xL) AS count(cnt)#xL]
   :        +- SubqueryAlias __auto_generated_subquery_name
   :           +- Aggregate [count(1) AS cnt#xL]
   :              +- Filter (outer(c1#x) = c1#x)
   :                 +- SubqueryAlias spark_catalog.default.t2
   :                    +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                       +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                          +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT SUM(cnt) FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1 GROUP BY c1))
-- !query analysis
Project [c1#x, c2#x, sum(cnt)#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [sum(cnt#xL) AS sum(cnt)#xL]
   :        +- SubqueryAlias __auto_generated_subquery_name
   :           +- Aggregate [c1#x], [count(1) AS cnt#xL]
   :              +- Filter (outer(c1#x) = c1#x)
   :                 +- SubqueryAlias spark_catalog.default.t2
   :                    +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                       +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                          +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (
  SELECT COUNT(*) FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1)
  JOIN t2 ON cnt = t2.c1
)
-- !query analysis
Project [c1#x, c2#x, count(1)#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [count(1) AS count(1)#xL]
   :        +- Join Inner, (cnt#xL = cast(c1#x as bigint))
   :           :- SubqueryAlias __auto_generated_subquery_name
   :           :  +- Aggregate [count(1) AS cnt#xL]
   :           :     +- Filter (outer(c1#x) = c1#x)
   :           :        +- SubqueryAlias spark_catalog.default.t2
   :           :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :           :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           :                 +- LocalRelation [col1#x, col2#x]
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1) WHERE cnt = c1 - 1)
-- !query analysis
Project [c1#x, c2#x, cnt#xL]
+- LateralJoin lateral-subquery#x [c1#x && c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [cnt#xL]
   :        +- Filter (cnt#xL = cast((outer(c1#x) - 1) as bigint))
   :           +- SubqueryAlias __auto_generated_subquery_name
   :              +- Aggregate [count(1) AS cnt#xL]
   :                 +- Filter (outer(c1#x) = c1#x)
   :                    +- SubqueryAlias spark_catalog.default.t2
   :                       +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                          +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(*) FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1) WHERE cnt = c1 - 1)
-- !query analysis
Project [c1#x, c2#x, count(1)#xL]
+- LateralJoin lateral-subquery#x [c1#x && c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [count(1) AS count(1)#xL]
   :        +- Filter (cnt#xL = cast((outer(c1#x) - 1) as bigint))
   :           +- SubqueryAlias __auto_generated_subquery_name
   :              +- Aggregate [count(1) AS cnt#xL]
   :                 +- Filter (outer(c1#x) = c1#x)
   :                    +- SubqueryAlias spark_catalog.default.t2
   :                       +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                          +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (
  SELECT COUNT(*) FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1)
  WHERE cnt = c1 - 1 GROUP BY cnt
)
-- !query analysis
Project [c1#x, c2#x, count(1)#xL]
+- LateralJoin lateral-subquery#x [c1#x && c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [cnt#xL], [count(1) AS count(1)#xL]
   :        +- Filter (cnt#xL = cast((outer(c1#x) - 1) as bigint))
   :           +- SubqueryAlias __auto_generated_subquery_name
   :              +- Aggregate [count(1) AS cnt#xL]
   :                 +- Filter (outer(c1#x) = c1#x)
   :                    +- SubqueryAlias spark_catalog.default.t2
   :                       +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                          +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (
  SELECT * FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1)
  JOIN t2 ON cnt = t2.c1
)
-- !query analysis
Project [c1#x, c2#x, cnt#xL, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [cnt#xL, c1#x, c2#x]
   :        +- Join Inner, (cnt#xL = cast(c1#x as bigint))
   :           :- SubqueryAlias __auto_generated_subquery_name
   :           :  +- Aggregate [count(1) AS cnt#xL]
   :           :     +- Filter (outer(c1#x) = c1#x)
   :           :        +- SubqueryAlias spark_catalog.default.t2
   :           :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :           :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           :                 +- LocalRelation [col1#x, col2#x]
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (
  SELECT l.cnt + r.cnt
  FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1) l
  JOIN (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1) r
)
-- !query analysis
Project [c1#x, c2#x, (cnt + cnt)#xL]
+- LateralJoin lateral-subquery#x [c1#x && c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [(cnt#xL + cnt#xL) AS (cnt + cnt)#xL]
   :        +- Join Inner
   :           :- SubqueryAlias l
   :           :  +- Aggregate [count(1) AS cnt#xL]
   :           :     +- Filter (outer(c1#x) = c1#x)
   :           :        +- SubqueryAlias spark_catalog.default.t2
   :           :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :           :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           :                 +- LocalRelation [col1#x, col2#x]
   :           +- SubqueryAlias r
   :              +- Aggregate [count(1) AS cnt#xL]
   :                 +- Filter (outer(c1#x) = c1#x)
   :                    +- SubqueryAlias spark_catalog.default.t2
   :                       +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                          +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 LEFT JOIN LATERAL (SELECT MIN(c2) FROM t2 WHERE c1 = t1.c1 GROUP BY c1)
-- !query analysis
Project [c1#x, c2#x, min(c2)#x]
+- LateralJoin lateral-subquery#x [c1#x], LeftOuter
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [c1#x], [min(c2#x) AS min(c2)#x]
   :        +- Filter (c1#x = outer(c1#x))
   :           +- SubqueryAlias spark_catalog.default.t2
   :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
WITH cte1 AS (
  SELECT c1 FROM t1
), cte2 AS (
  SELECT s.* FROM cte1, LATERAL (SELECT * FROM t2 WHERE c1 = cte1.c1) s
)
SELECT * FROM cte2
-- !query analysis
WithCTE
:- CTERelationDef xxxx, false
:  +- SubqueryAlias cte1
:     +- Project [c1#x]
:        +- SubqueryAlias spark_catalog.default.t1
:           +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
:              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:                 +- LocalRelation [col1#x, col2#x]
:- CTERelationDef xxxx, false
:  +- SubqueryAlias cte2
:     +- Project [c1#x, c2#x]
:        +- LateralJoin lateral-subquery#x [c1#x], Inner
:           :  +- SubqueryAlias s
:           :     +- Project [c1#x, c2#x]
:           :        +- Filter (c1#x = outer(c1#x))
:           :           +- SubqueryAlias spark_catalog.default.t2
:           :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
:           :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:           :                    +- LocalRelation [col1#x, col2#x]
:           +- SubqueryAlias cte1
:              +- CTERelationRef xxxx, true, [c1#x], false
+- Project [c1#x, c2#x]
   +- SubqueryAlias cte2
      +- CTERelationRef xxxx, true, [c1#x, c2#x], false


-- !query
SELECT * FROM t3 JOIN LATERAL (SELECT EXPLODE(c2))
-- !query analysis
Project [c1#x, c2#x, col#x]
+- LateralJoin lateral-subquery#x [c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [col#x]
   :        +- Generate explode(outer(c2#x)), false, [col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t3
      +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t3 JOIN LATERAL (SELECT EXPLODE_OUTER(c2))
-- !query analysis
Project [c1#x, c2#x, col#x]
+- LateralJoin lateral-subquery#x [c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [col#x]
   :        +- Generate explode(outer(c2#x)), true, [col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t3
      +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t3 JOIN LATERAL (SELECT EXPLODE(c2)) t(c3) ON c1 = c3
-- !query analysis
Project [c1#x, c2#x, c3#x]
+- LateralJoin lateral-subquery#x [c2#x], Inner, (c1#x = c3#x)
   :  +- SubqueryAlias t
   :     +- Project [col#x AS c3#x]
   :        +- Project [col#x]
   :           +- Generate explode(outer(c2#x)), false, [col#x]
   :              +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t3
      +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t3 LEFT JOIN LATERAL (SELECT EXPLODE(c2)) t(c3) ON c1 = c3
-- !query analysis
Project [c1#x, c2#x, c3#x]
+- LateralJoin lateral-subquery#x [c2#x], LeftOuter, (c1#x = c3#x)
   :  +- SubqueryAlias t
   :     +- Project [col#x AS c3#x]
   :        +- Project [col#x]
   :           +- Generate explode(outer(c2#x)), false, [col#x]
   :              +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t3
      +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT sum(t2.c2) over (order by t2.c1)
  FROM   t2
  WHERE  t2.c1 >= t1.c1)
-- !query analysis
Project [c1#x, c2#x, sum(c2) OVER (ORDER BY c1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [sum(c2) OVER (ORDER BY c1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#xL]
   :        +- Project [c2#x, c1#x, sum(c2) OVER (ORDER BY c1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#xL, sum(c2) OVER (ORDER BY c1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#xL]
   :           +- Window [sum(c2#x) windowspecdefinition(c1#x ASC NULLS FIRST, specifiedwindowframe(RangeFrame, unboundedpreceding$(), currentrow$())) AS sum(c2) OVER (ORDER BY c1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#xL], [c1#x ASC NULLS FIRST]
   :              +- Project [c2#x, c1#x]
   :                 +- Filter (c1#x >= outer(c1#x))
   :                    +- SubqueryAlias spark_catalog.default.t2
   :                       +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                          +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  UNION ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 = t1.c1)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Union false, false
   :        :- Project [c2#x]
   :        :  +- Filter (c1#x = outer(c1#x))
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- Project [c2#x]
   :           +- Filter (c1#x = outer(c1#x))
   :              +- SubqueryAlias spark_catalog.default.t4
   :                 +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  UNION DISTINCT
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 > t1.c2)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Distinct
   :        +- Union false, false
   :           :- Project [c2#x]
   :           :  +- Filter (c1#x = outer(c1#x))
   :           :     +- SubqueryAlias spark_catalog.default.t2
   :           :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :           :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           :              +- LocalRelation [col1#x, col2#x]
   :           +- Project [c2#x]
   :              +- Filter (c1#x > outer(c2#x))
   :                 +- SubqueryAlias spark_catalog.default.t4
   :                    +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                       +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                          +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  INTERSECT ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 = t1.c1)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Intersect All true
   :        :- Project [c2#x]
   :        :  +- Filter (c1#x = outer(c1#x))
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- Project [c2#x]
   :           +- Filter (c1#x = outer(c1#x))
   :              +- SubqueryAlias spark_catalog.default.t4
   :                 +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  INTERSECT DISTINCT
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 > t1.c2)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Intersect false
   :        :- Project [c2#x]
   :        :  +- Filter (c1#x = outer(c1#x))
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- Project [c2#x]
   :           +- Filter (c1#x > outer(c2#x))
   :              +- SubqueryAlias spark_catalog.default.t4
   :                 +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  EXCEPT ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 = t1.c1)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Except All true
   :        :- Project [c2#x]
   :        :  +- Filter (c1#x = outer(c1#x))
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- Project [c2#x]
   :           +- Filter (c1#x = outer(c1#x))
   :              +- SubqueryAlias spark_catalog.default.t4
   :                 +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  EXCEPT DISTINCT
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 > t1.c2)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Except false
   :        :- Project [c2#x]
   :        :  +- Filter (c1#x = outer(c1#x))
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- Project [c2#x]
   :           +- Filter (c1#x > outer(c2#x))
   :              +- SubqueryAlias spark_catalog.default.t4
   :                 +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT COUNT(t2.c2)
  FROM   t2
  WHERE  t2.c1 = t1.c1
  UNION DISTINCT
  SELECT COUNT(t4.c2)
  FROM   t4
  WHERE  t4.c1 > t1.c2)
-- !query analysis
Project [c1#x, c2#x, count(c2)#xL]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Distinct
   :        +- Union false, false
   :           :- Aggregate [count(c2#x) AS count(c2)#xL]
   :           :  +- Filter (c1#x = outer(c1#x))
   :           :     +- SubqueryAlias spark_catalog.default.t2
   :           :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :           :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           :              +- LocalRelation [col1#x, col2#x]
   :           +- Aggregate [count(c2#x) AS count(c2)#xL]
   :              +- Filter (c1#x > outer(c2#x))
   :                 +- SubqueryAlias spark_catalog.default.t4
   :                    +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                       +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                          +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c1, t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  UNION ALL
  SELECT t4.c2, t4.c1
  FROM   t4
  WHERE  t4.c1 = t1.c1)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Union false, false
   :        :- Project [c1#x, c2#x]
   :        :  +- Filter (c1#x = outer(c1#x))
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- Project [c2#x, c1#x]
   :           +- Filter (c1#x = outer(c1#x))
   :              +- SubqueryAlias spark_catalog.default.t4
   :                 +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1 and t2.c2 >= t1.c2
  UNION ALL
  SELECT t4.c2
  FROM   t4)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Union false, false
   :        :- Project [c2#x]
   :        :  +- Filter ((c1#x = outer(c1#x)) AND (c2#x >= outer(c2#x)))
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- Project [c2#x]
   :           +- SubqueryAlias spark_catalog.default.t4
   :              +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  UNION ALL
  SELECT t4.c2
  FROM   t4)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Union false, false
   :        :- Project [c2#x]
   :        :  +- Filter (c1#x = outer(c1#x))
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- Project [c2#x]
   :           +- SubqueryAlias spark_catalog.default.t4
   :              +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1 and t2.c2 >= t1.c2
  UNION DISTINCT
  SELECT t4.c2
  FROM   t4)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Distinct
   :        +- Union false, false
   :           :- Project [c2#x]
   :           :  +- Filter ((c1#x = outer(c1#x)) AND (c2#x >= outer(c2#x)))
   :           :     +- SubqueryAlias spark_catalog.default.t2
   :           :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :           :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           :              +- LocalRelation [col1#x, col2#x]
   :           +- Project [c2#x]
   :              +- SubqueryAlias spark_catalog.default.t4
   :                 +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1 and t2.c2 >= t1.c2
  INTERSECT ALL
  SELECT t4.c2
  FROM   t4)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Intersect All true
   :        :- Project [c2#x]
   :        :  +- Filter ((c1#x = outer(c1#x)) AND (c2#x >= outer(c2#x)))
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- Project [c2#x]
   :           +- SubqueryAlias spark_catalog.default.t4
   :              +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1 and t2.c2 >= t1.c2
  INTERSECT DISTINCT
  SELECT t4.c2
  FROM   t4)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Intersect false
   :        :- Project [c2#x]
   :        :  +- Filter ((c1#x = outer(c1#x)) AND (c2#x >= outer(c2#x)))
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- Project [c2#x]
   :           +- SubqueryAlias spark_catalog.default.t4
   :              +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1 and t2.c2 >= t1.c2
  EXCEPT ALL
  SELECT t4.c2
  FROM   t4)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Except All true
   :        :- Project [c2#x]
   :        :  +- Filter ((c1#x = outer(c1#x)) AND (c2#x >= outer(c2#x)))
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- Project [c2#x]
   :           +- SubqueryAlias spark_catalog.default.t4
   :              +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1 and t2.c2 >= t1.c2
  EXCEPT DISTINCT
  SELECT t4.c2
  FROM   t4)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Except false
   :        :- Project [c2#x]
   :        :  +- Filter ((c1#x = outer(c1#x)) AND (c2#x >= outer(c2#x)))
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- Project [c2#x]
   :           +- SubqueryAlias spark_catalog.default.t4
   :              +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                    +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  GROUP BY t2.c2
  UNION ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 > t1.c2
  GROUP BY t4.c2)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Union false, false
   :        :- Aggregate [c2#x], [c2#x]
   :        :  +- Filter (c1#x = outer(c1#x))
   :        :     +- SubqueryAlias spark_catalog.default.t2
   :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :              +- LocalRelation [col1#x, col2#x]
   :        +- Aggregate [c2#x], [c2#x]
   :           +- Filter (c1#x > outer(c2#x))
   :              +- SubqueryAlias spark_catalog.default.t4
   :                 +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c1 - t1.c1
  FROM   t2
  GROUP BY t2.c1 - t1.c1
  UNION ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 > t1.c2
  GROUP BY t4.c2)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.CORRELATED_REFERENCE",
  "sqlState" : "0A000",
  "messageParameters" : {
    "sqlExprs" : "\"(c1 - c1)\",\"(c1 - c1) AS `(c1 - outer(spark_catalog.default.t1.c1))`\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 69,
    "stopIndex" : 90,
    "fragment" : "GROUP BY t2.c1 - t1.c1"
  } ]
}


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT sum(t2.c2) over (order by t2.c1)
  FROM   t2
  WHERE  t2.c1 >= t1.c1
  UNION ALL
  SELECT t4.c2
  FROM   t4)
-- !query analysis
Project [c1#x, c2#x, sum(c2) OVER (ORDER BY c1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Union false, false
   :        :- Project [sum(c2) OVER (ORDER BY c1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#xL]
   :        :  +- Project [c2#x, c1#x, sum(c2) OVER (ORDER BY c1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#xL, sum(c2) OVER (ORDER BY c1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#xL]
   :        :     +- Window [sum(c2#x) windowspecdefinition(c1#x ASC NULLS FIRST, specifiedwindowframe(RangeFrame, unboundedpreceding$(), currentrow$())) AS sum(c2) OVER (ORDER BY c1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#xL], [c1#x ASC NULLS FIRST]
   :        :        +- Project [c2#x, c1#x]
   :        :           +- Filter (c1#x >= outer(c1#x))
   :        :              +- SubqueryAlias spark_catalog.default.t2
   :        :                 +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :                       +- LocalRelation [col1#x, col2#x]
   :        +- Project [cast(c2#x as bigint) AS c2#xL]
   :           +- Project [c2#x]
   :              +- SubqueryAlias spark_catalog.default.t4
   :                 +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT * FROM t2 WHERE t2.c1 = t1.c1)
UNION ALL
SELECT * FROM t1 JOIN t4
-- !query analysis
Union false, false
:- Project [c1#x, c2#x, c1#x, c2#x]
:  +- LateralJoin lateral-subquery#x [c1#x], Inner
:     :  +- SubqueryAlias __auto_generated_subquery_name
:     :     +- Project [c1#x, c2#x]
:     :        +- Filter (c1#x = outer(c1#x))
:     :           +- SubqueryAlias spark_catalog.default.t2
:     :              +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
:     :                 +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:     :                    +- LocalRelation [col1#x, col2#x]
:     +- SubqueryAlias spark_catalog.default.t1
:        +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
:           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:              +- LocalRelation [col1#x, col2#x]
+- Project [c1#x, c2#x, c1#x, c2#x]
   +- Join Inner
      :- SubqueryAlias spark_catalog.default.t1
      :  +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
      :     +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
      :        +- LocalRelation [col1#x, col2#x]
      +- SubqueryAlias spark_catalog.default.t4
         +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
            +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  UNION ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 = t1.c1)
UNION ALL
SELECT * FROM t2 JOIN LATERAL
  (SELECT t1.c2
  FROM   t1
  WHERE  t2.c1 <= t1.c1
  UNION ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 < t2.c1)
-- !query analysis
Union false, false
:- Project [c1#x, c2#x, c2#x]
:  +- LateralJoin lateral-subquery#x [c1#x && c1#x], Inner
:     :  +- SubqueryAlias __auto_generated_subquery_name
:     :     +- Union false, false
:     :        :- Project [c2#x]
:     :        :  +- Filter (c1#x = outer(c1#x))
:     :        :     +- SubqueryAlias spark_catalog.default.t2
:     :        :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
:     :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:     :        :              +- LocalRelation [col1#x, col2#x]
:     :        +- Project [c2#x]
:     :           +- Filter (c1#x = outer(c1#x))
:     :              +- SubqueryAlias spark_catalog.default.t4
:     :                 +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
:     :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:     :                       +- LocalRelation [col1#x, col2#x]
:     +- SubqueryAlias spark_catalog.default.t1
:        +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
:           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
:              +- LocalRelation [col1#x, col2#x]
+- Project [c1#x, c2#x, c2#x]
   +- LateralJoin lateral-subquery#x [c1#x && c1#x], Inner
      :  +- SubqueryAlias __auto_generated_subquery_name
      :     +- Union false, false
      :        :- Project [c2#x]
      :        :  +- Filter (outer(c1#x) <= c1#x)
      :        :     +- SubqueryAlias spark_catalog.default.t1
      :        :        +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
      :        :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
      :        :              +- LocalRelation [col1#x, col2#x]
      :        +- Project [c2#x]
      :           +- Filter (c1#x < outer(c1#x))
      :              +- SubqueryAlias spark_catalog.default.t4
      :                 +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
      :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
      :                       +- LocalRelation [col1#x, col2#x]
      +- SubqueryAlias spark_catalog.default.t2
         +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
            +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  ((SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  EXCEPT DISTINCT
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 > t1.c2)
  UNION DISTINCT
  (SELECT t4.c1
  FROM   t4
  WHERE  t4.c1 <= t1.c2
  INTERSECT ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 <> t1.c1)
)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x && c2#x && c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Distinct
   :        +- Union false, false
   :           :- Except false
   :           :  :- Project [c2#x]
   :           :  :  +- Filter (c1#x = outer(c1#x))
   :           :  :     +- SubqueryAlias spark_catalog.default.t2
   :           :  :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :           :  :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           :  :              +- LocalRelation [col1#x, col2#x]
   :           :  +- Project [c2#x]
   :           :     +- Filter (c1#x > outer(c2#x))
   :           :        +- SubqueryAlias spark_catalog.default.t4
   :           :           +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :           :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           :                 +- LocalRelation [col1#x, col2#x]
   :           +- Intersect All true
   :              :- Project [c1#x]
   :              :  +- Filter (c1#x <= outer(c2#x))
   :              :     +- SubqueryAlias spark_catalog.default.t4
   :              :        +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :              :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :              :              +- LocalRelation [col1#x, col2#x]
   :              +- Project [c2#x]
   :                 +- Filter NOT (c1#x = outer(c1#x))
   :                    +- SubqueryAlias spark_catalog.default.t4
   :                       +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                          +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL
  ((SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  UNION ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 > t1.c2)
  INTERSECT DISTINCT
  (SELECT t4.c1
  FROM   t4
  WHERE  t4.c1 <= t1.c2
  EXCEPT ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 <> t1.c1)
)
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x && c2#x && c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Intersect false
   :        :- Union false, false
   :        :  :- Project [c2#x]
   :        :  :  +- Filter (c1#x = outer(c1#x))
   :        :  :     +- SubqueryAlias spark_catalog.default.t2
   :        :  :        +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :        :  :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :  :              +- LocalRelation [col1#x, col2#x]
   :        :  +- Project [c2#x]
   :        :     +- Filter (c1#x > outer(c2#x))
   :        :        +- SubqueryAlias spark_catalog.default.t4
   :        :           +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :        :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :                 +- LocalRelation [col1#x, col2#x]
   :        +- Except All true
   :           :- Project [c1#x]
   :           :  +- Filter (c1#x <= outer(c2#x))
   :           :     +- SubqueryAlias spark_catalog.default.t4
   :           :        +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :           :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           :              +- LocalRelation [col1#x, col2#x]
   :           +- Project [c2#x]
   :              +- Filter NOT (c1#x = outer(c1#x))
   :                 +- SubqueryAlias spark_catalog.default.t4
   :                    +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                       +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                          +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT sum(c1) FROM
  (SELECT *
  FROM   t2
  WHERE  t2.c1 <= t1.c1) lhs
  LEFT SEMI JOIN
  (SELECT *
  FROM   t4) rhs
  ON lhs.c1 <=> rhs.c1 and lhs.c2 <=> rhs.c2
)
-- !query analysis
Project [c1#x, c2#x, sum(c1)#xL]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Aggregate [sum(c1#x) AS sum(c1)#xL]
   :        +- Join LeftSemi, ((c1#x <=> c1#x) AND (c2#x <=> c2#x))
   :           :- SubqueryAlias lhs
   :           :  +- Project [c1#x, c2#x]
   :           :     +- Filter (c1#x <= outer(c1#x))
   :           :        +- SubqueryAlias spark_catalog.default.t2
   :           :           +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :           :              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :           :                 +- LocalRelation [col1#x, col2#x]
   :           +- SubqueryAlias rhs
   :              +- Project [c1#x, c2#x]
   :                 +- SubqueryAlias spark_catalog.default.t4
   :                    +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                       +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                          +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT sum(c1) FROM
  (SELECT *
  FROM   t2
  WHERE  t2.c1 <= t1.c1) lhs
  LEFT SEMI JOIN
  (SELECT *
  FROM   t4
  WHERE t4.c1 > t1.c2) rhs
  ON lhs.c1 <=> rhs.c1 and lhs.c2 <=> rhs.c2
)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.ACCESSING_OUTER_QUERY_COLUMN_IS_NOT_ALLOWED",
  "sqlState" : "0A000",
  "messageParameters" : {
    "treeNode" : "Filter (c1#x > outer(c2#x))\n+- SubqueryAlias spark_catalog.default.t4\n   +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])\n      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]\n         +- LocalRelation [col1#x, col2#x]\n"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 125,
    "stopIndex" : 166,
    "fragment" : "SELECT *\n  FROM   t4\n  WHERE t4.c1 > t1.c2"
  } ]
}


-- !query
SELECT * FROM LATERAL EXPLODE(ARRAY(1, 2))
-- !query analysis
Project [col#x]
+- Generate explode(array(1, 2)), false, [col#x]
   +- OneRowRelation


-- !query
SELECT * FROM t1, LATERAL RANGE(3)
-- !query analysis
Project [c1#x, c2#x, id#xL]
+- LateralJoin lateral-subquery#x [], Inner
   :  +- Range (0, 3, step=1)
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL EXPLODE(ARRAY(c1, c2)) t2(c3)
-- !query analysis
Project [c1#x, c2#x, c3#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias t2
   :     +- Project [col#x AS c3#x]
   :        +- Generate explode(array(outer(c1#x), outer(c2#x))), false, [col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t3, LATERAL EXPLODE(c2) t2(v)
-- !query analysis
Project [c1#x, c2#x, v#x]
+- LateralJoin lateral-subquery#x [c2#x], Inner
   :  +- SubqueryAlias t2
   :     +- Project [col#x AS v#x]
   :        +- Generate explode(outer(c2#x)), false, [col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t3
      +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t3, LATERAL EXPLODE_OUTER(c2) t2(v)
-- !query analysis
Project [c1#x, c2#x, v#x]
+- LateralJoin lateral-subquery#x [c2#x], Inner
   :  +- SubqueryAlias t2
   :     +- Project [col#x AS v#x]
   :        +- Generate explode(outer(c2#x)), true, [col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t3
      +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM EXPLODE(ARRAY(1, 2)) t(v), LATERAL (SELECT v + 1)
-- !query analysis
Project [v#x, (outer(t.v) + 1)#x]
+- LateralJoin lateral-subquery#x [v#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [(outer(v#x) + 1) AS (outer(t.v) + 1)#x]
   :        +- OneRowRelation
   +- SubqueryAlias t
      +- Project [col#x AS v#x]
         +- Generate explode(array(1, 2)), false, [col#x]
            +- OneRowRelation


-- !query
SELECT * FROM t1 JOIN LATERAL EXPLODE(ARRAY(c1, c2)) t(c3) ON t1.c1 = c3
-- !query analysis
Project [c1#x, c2#x, c3#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner, (c1#x = c3#x)
   :  +- SubqueryAlias t
   :     +- Project [col#x AS c3#x]
   :        +- Generate explode(array(outer(c1#x), outer(c2#x))), false, [col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t3 JOIN LATERAL EXPLODE(c2) t(c3) ON t3.c1 = c3
-- !query analysis
Project [c1#x, c2#x, c3#x]
+- LateralJoin lateral-subquery#x [c2#x], Inner, (c1#x = c3#x)
   :  +- SubqueryAlias t
   :     +- Project [col#x AS c3#x]
   :        +- Generate explode(outer(c2#x)), false, [col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t3
      +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t3 LEFT JOIN LATERAL EXPLODE(c2) t(c3) ON t3.c1 = c3
-- !query analysis
Project [c1#x, c2#x, c3#x]
+- LateralJoin lateral-subquery#x [c2#x], LeftOuter, (c1#x = c3#x)
   :  +- SubqueryAlias t
   :     +- Project [col#x AS c3#x]
   :        +- Generate explode(outer(c2#x)), false, [col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t3
      +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM EXPLODE(ARRAY(c1, c2)))
-- !query analysis
Project [c1#x, c2#x, col#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [col#x]
   :        +- Generate explode(array(outer(c1#x), outer(c2#x))), false, [col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.c1 + c3 FROM EXPLODE(ARRAY(c1, c2)) t(c3))
-- !query analysis
Project [c1#x, c2#x, (outer(spark_catalog.default.t1.c1) + c3)#x]
+- LateralJoin lateral-subquery#x [c1#x && c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [(outer(c1#x) + c3#x) AS (outer(spark_catalog.default.t1.c1) + c3)#x]
   :        +- SubqueryAlias t
   :           +- Project [col#x AS c3#x]
   :              +- Generate explode(array(outer(c1#x), outer(c2#x))), false, [col#x]
   :                 +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.c1 + c3 FROM EXPLODE(ARRAY(c1, c2)) t(c3) WHERE t1.c2 > 1)
-- !query analysis
Project [c1#x, c2#x, (outer(spark_catalog.default.t1.c1) + c3)#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x && c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [(outer(c1#x) + c3#x) AS (outer(spark_catalog.default.t1.c1) + c3)#x]
   :        +- Filter (outer(c2#x) > 1)
   :           +- SubqueryAlias t
   :              +- Project [col#x AS c3#x]
   :                 +- Generate explode(array(outer(c1#x), outer(c2#x))), false, [col#x]
   :                    +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM EXPLODE(ARRAY(c1, c2)) l(x) JOIN EXPLODE(ARRAY(c2, c1)) r(y) ON x = y)
-- !query analysis
Project [c1#x, c2#x, x#x, y#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x && c2#x && c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Project [x#x, y#x]
   :        +- Join Inner, (x#x = y#x)
   :           :- SubqueryAlias l
   :           :  +- Project [col#x AS x#x]
   :           :     +- Generate explode(array(outer(c1#x), outer(c2#x))), false, [col#x]
   :           :        +- OneRowRelation
   :           +- SubqueryAlias r
   :              +- Project [col#x AS y#x]
   :                 +- Generate explode(array(outer(c2#x), outer(c1#x))), false, [col#x]
   :                    +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
CREATE OR REPLACE TEMPORARY VIEW array_struct(id, arr) AS VALUES
    (1, ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))),
    (2, ARRAY()),
    (3, ARRAY(STRUCT(3, 'c')))
-- !query analysis
CreateViewCommand `array_struct`, [(id,None), (arr,None)], VALUES
    (1, ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))),
    (2, ARRAY()),
    (3, ARRAY(STRUCT(3, 'c'))), false, true, LocalTempView, UNSUPPORTED, true
   +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1, LATERAL INLINE(ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b')))
-- !query analysis
Project [c1#x, c2#x, col1#x, col2#x]
+- LateralJoin lateral-subquery#x [], Inner
   :  +- Generate inline(array(struct(col1, 1, col2, a), struct(col1, 2, col2, b))), false, [col1#x, col2#x]
   :     +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT c1, t.* FROM t1, LATERAL INLINE(ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))) t(x, y)
-- !query analysis
Project [c1#x, x#x, y#x]
+- LateralJoin lateral-subquery#x [], Inner
   :  +- SubqueryAlias t
   :     +- Project [col1#x AS x#x, col2#x AS y#x]
   :        +- Generate inline(array(struct(col1, 1, col2, a), struct(col1, 2, col2, b))), false, [col1#x, col2#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM array_struct JOIN LATERAL INLINE(arr)
-- !query analysis
Project [id#x, arr#x, col1#x, col2#x]
+- LateralJoin lateral-subquery#x [arr#x], Inner
   :  +- Generate inline(outer(arr#x)), false, [col1#x, col2#x]
   :     +- OneRowRelation
   +- SubqueryAlias array_struct
      +- View (`array_struct`, [id#x, arr#x])
         +- Project [cast(col1#x as int) AS id#x, cast(col2#x as array<struct<col1:int,col2:string>>) AS arr#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM array_struct LEFT JOIN LATERAL INLINE(arr) t(k, v) ON id = k
-- !query analysis
Project [id#x, arr#x, k#x, v#x]
+- LateralJoin lateral-subquery#x [arr#x], LeftOuter, (id#x = k#x)
   :  +- SubqueryAlias t
   :     +- Project [col1#x AS k#x, col2#x AS v#x]
   :        +- Generate inline(outer(arr#x)), false, [col1#x, col2#x]
   :           +- OneRowRelation
   +- SubqueryAlias array_struct
      +- View (`array_struct`, [id#x, arr#x])
         +- Project [cast(col1#x as int) AS id#x, cast(col2#x as array<struct<col1:int,col2:string>>) AS arr#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM array_struct JOIN LATERAL INLINE_OUTER(arr)
-- !query analysis
Project [id#x, arr#x, col1#x, col2#x]
+- LateralJoin lateral-subquery#x [arr#x], Inner
   :  +- Generate inline(outer(arr#x)), true, [col1#x, col2#x]
   :     +- OneRowRelation
   +- SubqueryAlias array_struct
      +- View (`array_struct`, [id#x, arr#x])
         +- Project [cast(col1#x as int) AS id#x, cast(col2#x as array<struct<col1:int,col2:string>>) AS arr#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
DROP VIEW array_struct
-- !query analysis
DropTempViewCommand array_struct


-- !query
SELECT * FROM LATERAL posexplode(ARRAY(1, 2))
-- !query analysis
Project [pos#x, col#x]
+- Generate posexplode(array(1, 2)), false, [pos#x, col#x]
   +- OneRowRelation


-- !query
SELECT * FROM t1, LATERAL posexplode(ARRAY(c1, c2)) t2(pos, c3)
-- !query analysis
Project [c1#x, c2#x, pos#x, c3#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias t2
   :     +- Project [pos#x AS pos#x, col#x AS c3#x]
   :        +- Generate posexplode(array(outer(c1#x), outer(c2#x))), false, [pos#x, col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t1 JOIN LATERAL posexplode(ARRAY(c1, c2)) t(pos, c3) ON t1.c1 = c3
-- !query analysis
Project [c1#x, c2#x, pos#x, c3#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner, (c1#x = c3#x)
   :  +- SubqueryAlias t
   :     +- Project [pos#x AS pos#x, col#x AS c3#x]
   :        +- Generate posexplode(array(outer(c1#x), outer(c2#x))), false, [pos#x, col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t3, LATERAL posexplode(c2) t2(pos, v)
-- !query analysis
Project [c1#x, c2#x, pos#x, v#x]
+- LateralJoin lateral-subquery#x [c2#x], Inner
   :  +- SubqueryAlias t2
   :     +- Project [pos#x AS pos#x, col#x AS v#x]
   :        +- Generate posexplode(outer(c2#x)), false, [pos#x, col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t3
      +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t3 JOIN LATERAL posexplode(c2) t(pos, c3) ON t3.c1 = c3
-- !query analysis
Project [c1#x, c2#x, pos#x, c3#x]
+- LateralJoin lateral-subquery#x [c2#x], Inner, (c1#x = c3#x)
   :  +- SubqueryAlias t
   :     +- Project [pos#x AS pos#x, col#x AS c3#x]
   :        +- Generate posexplode(outer(c2#x)), false, [pos#x, col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t3
      +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t3, LATERAL posexplode_outer(c2) t2(pos, v)
-- !query analysis
Project [c1#x, c2#x, pos#x, v#x]
+- LateralJoin lateral-subquery#x [c2#x], Inner
   :  +- SubqueryAlias t2
   :     +- Project [pos#x AS pos#x, col#x AS v#x]
   :        +- Generate posexplode(outer(c2#x)), true, [pos#x, col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t3
      +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t3 LEFT JOIN LATERAL posexplode(c2) t(pos, c3) ON t3.c1 = c3
-- !query analysis
Project [c1#x, c2#x, pos#x, c3#x]
+- LateralJoin lateral-subquery#x [c2#x], LeftOuter, (c1#x = c3#x)
   :  +- SubqueryAlias t
   :     +- Project [pos#x AS pos#x, col#x AS c3#x]
   :        +- Generate posexplode(outer(c2#x)), false, [pos#x, col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t3
      +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT * FROM t3 LEFT JOIN LATERAL posexplode_outer(c2) t(pos, c3) ON t3.c1 = c3
-- !query analysis
Project [c1#x, c2#x, pos#x, c3#x]
+- LateralJoin lateral-subquery#x [c2#x], LeftOuter, (c1#x = c3#x)
   :  +- SubqueryAlias t
   :     +- Project [pos#x AS pos#x, col#x AS c3#x]
   :        +- Generate posexplode(outer(c2#x)), true, [pos#x, col#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t3
      +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
CREATE OR REPLACE TEMP VIEW json_table(key, jstring) AS VALUES
    ('1', '{"f1": "1", "f2": "2", "f3": 3, "f5": 5.23}'),
    ('2', '{"f1": "1", "f3": "3", "f2": 2, "f4": 4.01}'),
    ('3', '{"f1": 3, "f4": "4", "f3": "3", "f2": 2, "f5": 5.01}'),
    ('4', cast(null as string)),
    ('5', '{"f1": null, "f5": ""}'),
    ('6', '[invalid JSON string]')
-- !query analysis
CreateViewCommand `json_table`, [(key,None), (jstring,None)], VALUES
    ('1', '{"f1": "1", "f2": "2", "f3": 3, "f5": 5.23}'),
    ('2', '{"f1": "1", "f3": "3", "f2": 2, "f4": 4.01}'),
    ('3', '{"f1": 3, "f4": "4", "f3": "3", "f2": 2, "f5": 5.01}'),
    ('4', cast(null as string)),
    ('5', '{"f1": null, "f5": ""}'),
    ('6', '[invalid JSON string]'), false, true, LocalTempView, UNSUPPORTED, true
   +- LocalRelation [col1#x, col2#x]


-- !query
SELECT t1.key, t2.* FROM json_table t1, LATERAL json_tuple(t1.jstring, 'f1', 'f2', 'f3', 'f4', 'f5') t2
-- !query analysis
Project [key#x, c0#x, c1#x, c2#x, c3#x, c4#x]
+- LateralJoin lateral-subquery#x [jstring#x], Inner
   :  +- SubqueryAlias t2
   :     +- Generate json_tuple(outer(jstring#x), f1, f2, f3, f4, f5), false, [c0#x, c1#x, c2#x, c3#x, c4#x]
   :        +- OneRowRelation
   +- SubqueryAlias t1
      +- SubqueryAlias json_table
         +- View (`json_table`, [key#x, jstring#x])
            +- Project [cast(col1#x as string) AS key#x, cast(col2#x as string) AS jstring#x]
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT t1.key, t2.* FROM json_table t1, LATERAL json_tuple(t1.jstring, 'f1', 'f2', 'f3', 'f4', 'f5') t2 WHERE t2.c0 IS NOT NULL
-- !query analysis
Project [key#x, c0#x, c1#x, c2#x, c3#x, c4#x]
+- Filter isnotnull(c0#x)
   +- LateralJoin lateral-subquery#x [jstring#x], Inner
      :  +- SubqueryAlias t2
      :     +- Generate json_tuple(outer(jstring#x), f1, f2, f3, f4, f5), false, [c0#x, c1#x, c2#x, c3#x, c4#x]
      :        +- OneRowRelation
      +- SubqueryAlias t1
         +- SubqueryAlias json_table
            +- View (`json_table`, [key#x, jstring#x])
               +- Project [cast(col1#x as string) AS key#x, cast(col2#x as string) AS jstring#x]
                  +- LocalRelation [col1#x, col2#x]


-- !query
SELECT t1.key, t2.* FROM json_table t1
  JOIN LATERAL json_tuple(t1.jstring, 'f1', 'f2', 'f3', 'f4', 'f5') t2(f1, f2, f3, f4, f5)
  ON t1.key = t2.f1
-- !query analysis
Project [key#x, f1#x, f2#x, f3#x, f4#x, f5#x]
+- LateralJoin lateral-subquery#x [jstring#x], Inner, (key#x = f1#x)
   :  +- SubqueryAlias t2
   :     +- Project [c0#x AS f1#x, c1#x AS f2#x, c2#x AS f3#x, c3#x AS f4#x, c4#x AS f5#x]
   :        +- Generate json_tuple(outer(jstring#x), f1, f2, f3, f4, f5), false, [c0#x, c1#x, c2#x, c3#x, c4#x]
   :           +- OneRowRelation
   +- SubqueryAlias t1
      +- SubqueryAlias json_table
         +- View (`json_table`, [key#x, jstring#x])
            +- Project [cast(col1#x as string) AS key#x, cast(col2#x as string) AS jstring#x]
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT t1.key, t2.* FROM json_table t1
  LEFT JOIN LATERAL json_tuple(t1.jstring, 'f1', 'f2', 'f3', 'f4', 'f5') t2(f1, f2, f3, f4, f5)
  ON t1.key = t2.f1
-- !query analysis
Project [key#x, f1#x, f2#x, f3#x, f4#x, f5#x]
+- LateralJoin lateral-subquery#x [jstring#x], LeftOuter, (key#x = f1#x)
   :  +- SubqueryAlias t2
   :     +- Project [c0#x AS f1#x, c1#x AS f2#x, c2#x AS f3#x, c3#x AS f4#x, c4#x AS f5#x]
   :        +- Generate json_tuple(outer(jstring#x), f1, f2, f3, f4, f5), false, [c0#x, c1#x, c2#x, c3#x, c4#x]
   :           +- OneRowRelation
   +- SubqueryAlias t1
      +- SubqueryAlias json_table
         +- View (`json_table`, [key#x, jstring#x])
            +- Project [cast(col1#x as string) AS key#x, cast(col2#x as string) AS jstring#x]
               +- LocalRelation [col1#x, col2#x]


-- !query
DROP VIEW json_table
-- !query analysis
DropTempViewCommand json_table


-- !query
SELECT t.* FROM t1, LATERAL stack(2, 'Key', c1, 'Value', c2) t
-- !query analysis
Project [col0#x, col1#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias t
   :     +- Generate stack(2, Key, outer(c1#x), Value, outer(c2#x)), false, [col0#x, col1#x]
   :        +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT t.* FROM t1 JOIN LATERAL stack(1, c1, c2) t(x, y)
-- !query analysis
Project [x#x, y#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias t
   :     +- Project [col0#x AS x#x, col1#x AS y#x]
   :        +- Generate stack(1, outer(c1#x), outer(c2#x)), false, [col0#x, col1#x]
   :           +- OneRowRelation
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
SELECT t.* FROM t1 JOIN t3 ON t1.c1 = t3.c1 JOIN LATERAL stack(1, t1.c2, t3.c2) t
-- !query analysis
Project [col0#x, col1#x]
+- LateralJoin lateral-subquery#x [c2#x && c2#x], Inner
   :  +- SubqueryAlias t
   :     +- Generate stack(1, outer(c2#x), outer(c2#x)), false, [col0#x, col1#x]
   :        +- OneRowRelation
   +- Join Inner, (c1#x = c1#x)
      :- SubqueryAlias spark_catalog.default.t1
      :  +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
      :     +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
      :        +- LocalRelation [col1#x, col2#x]
      +- SubqueryAlias spark_catalog.default.t3
         +- View (`spark_catalog`.`default`.`t3`, [c1#x, c2#x])
            +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as array<int>) AS c2#x]
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT t.* FROM t1, LATERAL stack(c1, c2)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.NON_FOLDABLE_INPUT",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputExpr" : "\"outer(spark_catalog.default.t1.c1)\"",
    "inputName" : "`n`",
    "inputType" : "\"INT\"",
    "sqlExpr" : "\"stack(outer(spark_catalog.default.t1.c1), outer(spark_catalog.default.t1.c2))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 29,
    "stopIndex" : 41,
    "fragment" : "stack(c1, c2)"
  } ]
}


-- !query
select * from t1 join lateral (select * from t2 where t1.c1 = t2.c1 and t1.c2 < t2.c2 limit 1)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- GlobalLimit 1
   :        +- LocalLimit 1
   :           +- Project [c1#x, c2#x]
   :              +- Filter ((outer(c1#x) = c1#x) AND (outer(c2#x) < c2#x))
   :                 +- SubqueryAlias spark_catalog.default.t2
   :                    +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                       +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                          +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 join lateral (select * from t4 where t1.c1 <= t4.c1 order by t4.c2 limit 10)
-- !query analysis
Project [c1#x, c2#x, c1#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- GlobalLimit 10
   :        +- LocalLimit 10
   :           +- Sort [c2#x ASC NULLS FIRST], true
   :              +- Project [c1#x, c2#x]
   :                 +- Filter (outer(c1#x) <= c1#x)
   :                    +- SubqueryAlias spark_catalog.default.t4
   :                       +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                          +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 join lateral (select c1, min(c2) as m
                               from t2 where t1.c1 = t2.c1 and t1.c2 < t2.c2
                               group by t2.c1
                               order by m)
-- !query analysis
Project [c1#x, c2#x, c1#x, m#x]
+- LateralJoin lateral-subquery#x [c1#x && c2#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Sort [m#x ASC NULLS FIRST], true
   :        +- Aggregate [c1#x], [c1#x, min(c2#x) AS m#x]
   :           +- Filter ((outer(c1#x) = c1#x) AND (outer(c2#x) < c2#x))
   :              +- SubqueryAlias spark_catalog.default.t2
   :                 +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 join lateral (select c1, min(c2) as m
                               from t4 where t1.c1 = t4.c1
                               group by t4.c1
                               limit 1)
-- !query analysis
Project [c1#x, c2#x, c1#x, m#x]
+- LateralJoin lateral-subquery#x [c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- GlobalLimit 1
   :        +- LocalLimit 1
   :           +- Aggregate [c1#x], [c1#x, min(c2#x) AS m#x]
   :              +- Filter (outer(c1#x) = c1#x)
   :                 +- SubqueryAlias spark_catalog.default.t4
   :                    +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                       +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                          +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 join lateral
  ((select t4.c2 from t4 where t1.c1 <= t4.c1 order by t4.c2 limit 1)
   union all
   (select t4.c1 from t4 where t1.c1 = t4.c1 order by t4.c1 limit 3))
-- !query analysis
Project [c1#x, c2#x, c2#x]
+- LateralJoin lateral-subquery#x [c1#x && c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- Union false, false
   :        :- GlobalLimit 1
   :        :  +- LocalLimit 1
   :        :     +- Sort [c2#x ASC NULLS FIRST], true
   :        :        +- Project [c2#x]
   :        :           +- Filter (outer(c1#x) <= c1#x)
   :        :              +- SubqueryAlias spark_catalog.default.t4
   :        :                 +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :        :                    +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :        :                       +- LocalRelation [col1#x, col2#x]
   :        +- GlobalLimit 3
   :           +- LocalLimit 3
   :              +- Sort [c1#x ASC NULLS FIRST], true
   :                 +- Project [c1#x]
   :                    +- Filter (outer(c1#x) = c1#x)
   :                       +- SubqueryAlias spark_catalog.default.t4
   :                          +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                             +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                                +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select * from t1 join lateral
  (select * from
   ((select t4.c2 as t from t4 where t1.c1 <= t4.c1)
   union all
   (select t4.c1 as t from t4 where t1.c1 = t4.c1)) as foo
   order by foo.t limit 5)
-- !query analysis
Project [c1#x, c2#x, t#x]
+- LateralJoin lateral-subquery#x [c1#x && c1#x], Inner
   :  +- SubqueryAlias __auto_generated_subquery_name
   :     +- GlobalLimit 5
   :        +- LocalLimit 5
   :           +- Sort [t#x ASC NULLS FIRST], true
   :              +- Project [t#x]
   :                 +- SubqueryAlias foo
   :                    +- Union false, false
   :                       :- Project [c2#x AS t#x]
   :                       :  +- Filter (outer(c1#x) <= c1#x)
   :                       :     +- SubqueryAlias spark_catalog.default.t4
   :                       :        +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                       :           +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                       :              +- LocalRelation [col1#x, col2#x]
   :                       +- Project [c1#x AS t#x]
   :                          +- Filter (outer(c1#x) = c1#x)
   :                             +- SubqueryAlias spark_catalog.default.t4
   :                                +- View (`spark_catalog`.`default`.`t4`, [c1#x, c2#x])
   :                                   +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                                      +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
         +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select 1
from t1 as t_outer
left join
 lateral(
     select b1,b2
     from
     (
         select
             t2.c1 as b1,
             1 as b2
         from t2
         union
         select t_outer.c1 as b1,
                null as b2
     ) as t_inner
     where (t_inner.b1 < t_outer.c2  or t_inner.b1 is null)
      and  t_inner.b1 = t_outer.c1
     order by t_inner.b1,t_inner.b2 desc limit 1
 ) as lateral_table
-- !query analysis
Project [1 AS 1#x]
+- LateralJoin lateral-subquery#x [c2#x && c1#x && c1#x], LeftOuter
   :  +- SubqueryAlias lateral_table
   :     +- GlobalLimit 1
   :        +- LocalLimit 1
   :           +- Sort [b1#x ASC NULLS FIRST, b2#x DESC NULLS LAST], true
   :              +- Project [b1#x, b2#x]
   :                 +- Filter (((b1#x < outer(c2#x)) OR isnull(b1#x)) AND (b1#x = outer(c1#x)))
   :                    +- SubqueryAlias t_inner
   :                       +- Distinct
   :                          +- Union false, false
   :                             :- Project [c1#x AS b1#x, 1 AS b2#x]
   :                             :  +- SubqueryAlias spark_catalog.default.t2
   :                             :     +- View (`spark_catalog`.`default`.`t2`, [c1#x, c2#x])
   :                             :        +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             :           +- LocalRelation [col1#x, col2#x]
   :                             +- Project [b1#x, cast(b2#x as int) AS b2#x]
   :                                +- Project [outer(c1#x) AS b1#x, null AS b2#x]
   :                                   +- OneRowRelation
   +- SubqueryAlias t_outer
      +- SubqueryAlias spark_catalog.default.t1
         +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])
            +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
               +- LocalRelation [col1#x, col2#x]


-- !query
DROP VIEW t1
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`t1`, false, true, false


-- !query
DROP VIEW t2
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`t2`, false, true, false


-- !query
DROP VIEW t3
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`t3`, false, true, false


-- !query
DROP VIEW t4
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`t4`, false, true, false
