-- Automatically generated by SQLQueryTestSuite
-- !query
select to_json(named_struct('a', 1, 'b', 2))
-- !query analysis
Project [to_json(named_struct(a, 1, b, 2), Some(America/Los_Angeles)) AS to_json(named_struct(a, 1, b, 2))#x]
+- OneRowRelation


-- !query
select to_json(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy'))
-- !query analysis
Project [to_json((timestampFormat,dd/MM/yyyy), named_struct(time, to_timestamp(2015-08-26, Some(yyyy-MM-dd), TimestampType, Some(America/Los_Angeles), true)), Some(America/Los_Angeles)) AS to_json(named_struct(time, to_timestamp(2015-08-26, yyyy-MM-dd)))#x]
+- OneRowRelation


-- !query
select to_json(array(named_struct('a', 1, 'b', 2)))
-- !query analysis
Project [to_json(array(named_struct(a, 1, b, 2)), Some(America/Los_Angeles)) AS to_json(array(named_struct(a, 1, b, 2)))#x]
+- OneRowRelation


-- !query
select to_json(map(named_struct('a', 1, 'b', 2), named_struct('a', 1, 'b', 2)))
-- !query analysis
Project [to_json(map(named_struct(a, 1, b, 2), named_struct(a, 1, b, 2)), Some(America/Los_Angeles)) AS to_json(map(named_struct(a, 1, b, 2), named_struct(a, 1, b, 2)))#x]
+- OneRowRelation


-- !query
select to_json(map('a', named_struct('a', 1, 'b', 2)))
-- !query analysis
Project [to_json(map(a, named_struct(a, 1, b, 2)), Some(America/Los_Angeles)) AS to_json(map(a, named_struct(a, 1, b, 2)))#x]
+- OneRowRelation


-- !query
select to_json(map('a', 1))
-- !query analysis
Project [to_json(map(a, 1), Some(America/Los_Angeles)) AS to_json(map(a, 1))#x]
+- OneRowRelation


-- !query
select to_json(array(map('a',1)))
-- !query analysis
Project [to_json(array(map(a, 1)), Some(America/Los_Angeles)) AS to_json(array(map(a, 1)))#x]
+- OneRowRelation


-- !query
select to_json(array(map('a',1), map('b',2)))
-- !query analysis
Project [to_json(array(map(a, 1), map(b, 2)), Some(America/Los_Angeles)) AS to_json(array(map(a, 1), map(b, 2)))#x]
+- OneRowRelation


-- !query
select to_json(named_struct('a', 1, 'b', 2), named_struct('mode', 'PERMISSIVE'))
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_OPTIONS.NON_MAP_FUNCTION",
  "sqlState" : "42K06",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 80,
    "fragment" : "to_json(named_struct('a', 1, 'b', 2), named_struct('mode', 'PERMISSIVE'))"
  } ]
}


-- !query
select to_json(named_struct('a', 1, 'b', 2), map('mode', 1))
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_OPTIONS.NON_STRING_TYPE",
  "sqlState" : "42K06",
  "messageParameters" : {
    "mapType" : "\"MAP<STRING, INT>\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 60,
    "fragment" : "to_json(named_struct('a', 1, 'b', 2), map('mode', 1))"
  } ]
}


-- !query
select to_json()
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "WRONG_NUM_ARGS.WITHOUT_SUGGESTION",
  "sqlState" : "42605",
  "messageParameters" : {
    "actualNum" : "0",
    "docroot" : "https://spark.apache.org/docs/latest",
    "expectedNum" : "[1, 2]",
    "functionName" : "`to_json`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 16,
    "fragment" : "to_json()"
  } ]
}


-- !query
select from_json('{"a":1}', 'a INT')
-- !query analysis
Project [from_json(StructField(a,IntegerType,true), {"a":1}, Some(America/Los_Angeles), false) AS from_json({"a":1})#x]
+- OneRowRelation


-- !query
select from_json('{"time":"26/08/2015"}', 'time Timestamp', map('timestampFormat', 'dd/MM/yyyy'))
-- !query analysis
Project [from_json(StructField(time,TimestampType,true), (timestampFormat,dd/MM/yyyy), {"time":"26/08/2015"}, Some(America/Los_Angeles), false) AS from_json({"time":"26/08/2015"})#x]
+- OneRowRelation


-- !query
select from_json('{"a":1}', 1)
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_SCHEMA.NON_STRING_LITERAL",
  "sqlState" : "42K07",
  "messageParameters" : {
    "inputSchema" : "\"1\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 30,
    "fragment" : "from_json('{\"a\":1}', 1)"
  } ]
}


-- !query
select from_json('{"a":1}', 'a InvalidType')
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'InvalidType'",
    "hint" : ": extra input 'InvalidType'"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 44,
    "fragment" : "from_json('{\"a\":1}', 'a InvalidType')"
  } ]
}


-- !query
select from_json('{"a":1}', 'a INT', named_struct('mode', 'PERMISSIVE'))
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_OPTIONS.NON_MAP_FUNCTION",
  "sqlState" : "42K06",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 72,
    "fragment" : "from_json('{\"a\":1}', 'a INT', named_struct('mode', 'PERMISSIVE'))"
  } ]
}


-- !query
select from_json('{"a":1}', 'a INT', map('mode', 1))
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_OPTIONS.NON_STRING_TYPE",
  "sqlState" : "42K06",
  "messageParameters" : {
    "mapType" : "\"MAP<STRING, INT>\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 52,
    "fragment" : "from_json('{\"a\":1}', 'a INT', map('mode', 1))"
  } ]
}


-- !query
select from_json()
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "WRONG_NUM_ARGS.WITHOUT_SUGGESTION",
  "sqlState" : "42605",
  "messageParameters" : {
    "actualNum" : "0",
    "docroot" : "https://spark.apache.org/docs/latest",
    "expectedNum" : "[2, 3]",
    "functionName" : "`from_json`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 18,
    "fragment" : "from_json()"
  } ]
}


-- !query
SELECT json_tuple('{"a" : 1, "b" : 2}', CAST(NULL AS STRING), 'b', CAST(NULL AS STRING), 'a')
-- !query analysis
Project [c0#x, c1#x, c2#x, c3#x]
+- Generate json_tuple({"a" : 1, "b" : 2}, cast(null as string), b, cast(null as string), a), false, [c0#x, c1#x, c2#x, c3#x]
   +- OneRowRelation


-- !query
CREATE TEMPORARY VIEW jsonTable(jsonField, a) AS SELECT * FROM VALUES ('{"a": 1, "b": 2}', 'a')
-- !query analysis
CreateViewCommand `jsonTable`, [(jsonField,None), (a,None)], SELECT * FROM VALUES ('{"a": 1, "b": 2}', 'a'), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [col1#x, col2#x]
      +- LocalRelation [col1#x, col2#x]


-- !query
SELECT json_tuple(jsonField, 'b', CAST(NULL AS STRING), a) FROM jsonTable
-- !query analysis
Project [c0#x, c1#x, c2#x]
+- Generate json_tuple(jsonField#x, b, cast(null as string), a#x), false, [c0#x, c1#x, c2#x]
   +- SubqueryAlias jsontable
      +- View (`jsonTable`, [jsonField#x, a#x])
         +- Project [cast(col1#x as string) AS jsonField#x, cast(col2#x as string) AS a#x]
            +- Project [col1#x, col2#x]
               +- LocalRelation [col1#x, col2#x]


-- !query
SELECT json_tuple('{"a":"1"}', if(c1 < 1, null, 'a')) FROM ( SELECT rand() AS c1 )
-- !query analysis
[Analyzer test output redacted due to nondeterminism]


-- !query
SELECT json_tuple('{"a":"1"}', if(c1 < 1, null, 'a'), if(c2 < 1, null, 'a')) FROM ( SELECT 0 AS c1, rand() AS c2 )
-- !query analysis
[Analyzer test output redacted due to nondeterminism]


-- !query
DROP VIEW IF EXISTS jsonTable
-- !query analysis
DropTempViewCommand jsonTable


-- !query
select from_json('{"a":1, "b":2}', 'map<string, int>')
-- !query analysis
Project [from_json(MapType(StringType,IntegerType,true), {"a":1, "b":2}, Some(America/Los_Angeles), false) AS entries#x]
+- OneRowRelation


-- !query
select from_json('{"a":1, "b":"2"}', 'struct<a:int,b:string>')
-- !query analysis
Project [from_json(StructField(a,IntegerType,true), StructField(b,StringType,true), {"a":1, "b":"2"}, Some(America/Los_Angeles), false) AS from_json({"a":1, "b":"2"})#x]
+- OneRowRelation


-- !query
select schema_of_json('{"c1":0, "c2":[1]}')
-- !query analysis
Project [schema_of_json({"c1":0, "c2":[1]}) AS schema_of_json({"c1":0, "c2":[1]})#x]
+- OneRowRelation


-- !query
select from_json('{"c1":[1, 2, 3]}', schema_of_json('{"c1":[0]}'))
-- !query analysis
Project [from_json(StructField(c1,ArrayType(LongType,true),true), {"c1":[1, 2, 3]}, Some(America/Los_Angeles), false) AS from_json({"c1":[1, 2, 3]})#x]
+- OneRowRelation


-- !query
select from_json('[1, 2, 3]', 'array<int>')
-- !query analysis
Project [from_json(ArrayType(IntegerType,true), [1, 2, 3], Some(America/Los_Angeles), false) AS from_json([1, 2, 3])#x]
+- OneRowRelation


-- !query
select from_json('[1, "2", 3]', 'array<int>')
-- !query analysis
Project [from_json(ArrayType(IntegerType,true), [1, "2", 3], Some(America/Los_Angeles), false) AS from_json([1, "2", 3])#x]
+- OneRowRelation


-- !query
select from_json('[1, 2, null]', 'array<int>')
-- !query analysis
Project [from_json(ArrayType(IntegerType,true), [1, 2, null], Some(America/Los_Angeles), false) AS from_json([1, 2, null])#x]
+- OneRowRelation


-- !query
select from_json('[{"a": 1}, {"a":2}]', 'array<struct<a:int>>')
-- !query analysis
Project [from_json(ArrayType(StructType(StructField(a,IntegerType,true)),true), [{"a": 1}, {"a":2}], Some(America/Los_Angeles), false) AS from_json([{"a": 1}, {"a":2}])#x]
+- OneRowRelation


-- !query
select from_json('{"a": 1}', 'array<struct<a:int>>')
-- !query analysis
Project [from_json(ArrayType(StructType(StructField(a,IntegerType,true)),true), {"a": 1}, Some(America/Los_Angeles), false) AS from_json({"a": 1})#x]
+- OneRowRelation


-- !query
select from_json('[null, {"a":2}]', 'array<struct<a:int>>')
-- !query analysis
Project [from_json(ArrayType(StructType(StructField(a,IntegerType,true)),true), [null, {"a":2}], Some(America/Los_Angeles), false) AS from_json([null, {"a":2}])#x]
+- OneRowRelation


-- !query
select from_json('[{"a": 1}, {"b":2}]', 'array<map<string,int>>')
-- !query analysis
Project [from_json(ArrayType(MapType(StringType,IntegerType,true),true), [{"a": 1}, {"b":2}], Some(America/Los_Angeles), false) AS from_json([{"a": 1}, {"b":2}])#x]
+- OneRowRelation


-- !query
select from_json('[{"a": 1}, 2]', 'array<map<string,int>>')
-- !query analysis
Project [from_json(ArrayType(MapType(StringType,IntegerType,true),true), [{"a": 1}, 2], Some(America/Los_Angeles), false) AS from_json([{"a": 1}, 2])#x]
+- OneRowRelation


-- !query
select from_json('{"d": "2012-12-15", "t": "2012-12-15 15:15:15"}', 'd date, t timestamp')
-- !query analysis
Project [from_json(StructField(d,DateType,true), StructField(t,TimestampType,true), {"d": "2012-12-15", "t": "2012-12-15 15:15:15"}, Some(America/Los_Angeles), false) AS from_json({"d": "2012-12-15", "t": "2012-12-15 15:15:15"})#x]
+- OneRowRelation


-- !query
select from_json(
  '{"d": "12/15 2012", "t": "12/15 2012 15:15:15"}',
  'd date, t timestamp',
  map('dateFormat', 'MM/dd yyyy', 'timestampFormat', 'MM/dd yyyy HH:mm:ss'))
-- !query analysis
Project [from_json(StructField(d,DateType,true), StructField(t,TimestampType,true), (dateFormat,MM/dd yyyy), (timestampFormat,MM/dd yyyy HH:mm:ss), {"d": "12/15 2012", "t": "12/15 2012 15:15:15"}, Some(America/Los_Angeles), false) AS from_json({"d": "12/15 2012", "t": "12/15 2012 15:15:15"})#x]
+- OneRowRelation


-- !query
select from_json(
  '{"d": "02-29"}',
  'd date',
  map('dateFormat', 'MM-dd'))
-- !query analysis
Project [from_json(StructField(d,DateType,true), (dateFormat,MM-dd), {"d": "02-29"}, Some(America/Los_Angeles), false) AS from_json({"d": "02-29"})#x]
+- OneRowRelation


-- !query
select from_json(
  '{"t": "02-29"}',
  't timestamp',
  map('timestampFormat', 'MM-dd'))
-- !query analysis
Project [from_json(StructField(t,TimestampType,true), (timestampFormat,MM-dd), {"t": "02-29"}, Some(America/Los_Angeles), false) AS from_json({"t": "02-29"})#x]
+- OneRowRelation


-- !query
select to_json(array('1', '2', '3'))
-- !query analysis
Project [to_json(array(1, 2, 3), Some(America/Los_Angeles)) AS to_json(array(1, 2, 3))#x]
+- OneRowRelation


-- !query
select to_json(array(array(1, 2, 3), array(4)))
-- !query analysis
Project [to_json(array(array(1, 2, 3), array(4)), Some(America/Los_Angeles)) AS to_json(array(array(1, 2, 3), array(4)))#x]
+- OneRowRelation


-- !query
select schema_of_json('{"c1":1}', map('primitivesAsString', 'true'))
-- !query analysis
Project [schema_of_json({"c1":1}, (primitivesAsString,true)) AS schema_of_json({"c1":1})#x]
+- OneRowRelation


-- !query
select schema_of_json('{"c1":01, "c2":0.1}', map('allowNumericLeadingZeros', 'true', 'prefersDecimal', 'true'))
-- !query analysis
Project [schema_of_json({"c1":01, "c2":0.1}, (allowNumericLeadingZeros,true), (prefersDecimal,true)) AS schema_of_json({"c1":01, "c2":0.1})#x]
+- OneRowRelation


-- !query
select schema_of_json(null)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_NULL",
  "sqlState" : "42K09",
  "messageParameters" : {
    "exprName" : "json",
    "sqlExpr" : "\"schema_of_json(NULL)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 27,
    "fragment" : "schema_of_json(null)"
  } ]
}


-- !query
CREATE TEMPORARY VIEW jsonTable(jsonField, a) AS SELECT * FROM VALUES ('{"a": 1, "b": 2}', 'a')
-- !query analysis
CreateViewCommand `jsonTable`, [(jsonField,None), (a,None)], SELECT * FROM VALUES ('{"a": 1, "b": 2}', 'a'), false, false, LocalTempView, UNSUPPORTED, true
   +- Project [col1#x, col2#x]
      +- LocalRelation [col1#x, col2#x]


-- !query
SELECT schema_of_json(jsonField) FROM jsonTable
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.NON_FOLDABLE_INPUT",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputExpr" : "\"jsonField\"",
    "inputName" : "`json`",
    "inputType" : "\"STRING\"",
    "sqlExpr" : "\"schema_of_json(jsonField)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 32,
    "fragment" : "schema_of_json(jsonField)"
  } ]
}


-- !query
select json_array_length(null)
-- !query analysis
Project [json_array_length(null) AS json_array_length(NULL)#x]
+- OneRowRelation


-- !query
select json_array_length(2)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"2\"",
    "inputType" : "\"INT\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"json_array_length(2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 27,
    "fragment" : "json_array_length(2)"
  } ]
}


-- !query
select json_array_length()
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "WRONG_NUM_ARGS.WITHOUT_SUGGESTION",
  "sqlState" : "42605",
  "messageParameters" : {
    "actualNum" : "0",
    "docroot" : "https://spark.apache.org/docs/latest",
    "expectedNum" : "1",
    "functionName" : "`json_array_length`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 26,
    "fragment" : "json_array_length()"
  } ]
}


-- !query
select json_array_length('')
-- !query analysis
Project [json_array_length() AS json_array_length()#x]
+- OneRowRelation


-- !query
select json_array_length('[]')
-- !query analysis
Project [json_array_length([]) AS json_array_length([])#x]
+- OneRowRelation


-- !query
select json_array_length('[1,2,3]')
-- !query analysis
Project [json_array_length([1,2,3]) AS json_array_length([1,2,3])#x]
+- OneRowRelation


-- !query
select json_array_length('[[1,2],[5,6,7]]')
-- !query analysis
Project [json_array_length([[1,2],[5,6,7]]) AS json_array_length([[1,2],[5,6,7]])#x]
+- OneRowRelation


-- !query
select json_array_length('[{"a":123},{"b":"hello"}]')
-- !query analysis
Project [json_array_length([{"a":123},{"b":"hello"}]) AS json_array_length([{"a":123},{"b":"hello"}])#x]
+- OneRowRelation


-- !query
select json_array_length('[1,2,3,[33,44],{"key":[2,3,4]}]')
-- !query analysis
Project [json_array_length([1,2,3,[33,44],{"key":[2,3,4]}]) AS json_array_length([1,2,3,[33,44],{"key":[2,3,4]}])#x]
+- OneRowRelation


-- !query
select json_array_length('{"key":"not a json array"}')
-- !query analysis
Project [json_array_length({"key":"not a json array"}) AS json_array_length({"key":"not a json array"})#x]
+- OneRowRelation


-- !query
select json_array_length('[1,2,3,4,5')
-- !query analysis
Project [json_array_length([1,2,3,4,5) AS json_array_length([1,2,3,4,5)#x]
+- OneRowRelation


-- !query
select json_object_keys()
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "WRONG_NUM_ARGS.WITHOUT_SUGGESTION",
  "sqlState" : "42605",
  "messageParameters" : {
    "actualNum" : "0",
    "docroot" : "https://spark.apache.org/docs/latest",
    "expectedNum" : "1",
    "functionName" : "`json_object_keys`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 25,
    "fragment" : "json_object_keys()"
  } ]
}


-- !query
select json_object_keys(null)
-- !query analysis
Project [json_object_keys(null) AS json_object_keys(NULL)#x]
+- OneRowRelation


-- !query
select json_object_keys(200)
-- !query analysis
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"200\"",
    "inputType" : "\"INT\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"json_object_keys(200)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 28,
    "fragment" : "json_object_keys(200)"
  } ]
}


-- !query
select json_object_keys('')
-- !query analysis
Project [json_object_keys() AS json_object_keys()#x]
+- OneRowRelation


-- !query
select json_object_keys('{}')
-- !query analysis
Project [json_object_keys({}) AS json_object_keys({})#x]
+- OneRowRelation


-- !query
select json_object_keys('{"key": 1}')
-- !query analysis
Project [json_object_keys({"key": 1}) AS json_object_keys({"key": 1})#x]
+- OneRowRelation


-- !query
select json_object_keys('{"key": "value", "key2": 2}')
-- !query analysis
Project [json_object_keys({"key": "value", "key2": 2}) AS json_object_keys({"key": "value", "key2": 2})#x]
+- OneRowRelation


-- !query
select json_object_keys('{"arrayKey": [1, 2, 3]}')
-- !query analysis
Project [json_object_keys({"arrayKey": [1, 2, 3]}) AS json_object_keys({"arrayKey": [1, 2, 3]})#x]
+- OneRowRelation


-- !query
select json_object_keys('{"key":[1,2,3,{"key":"value"},[1,2,3]]}')
-- !query analysis
Project [json_object_keys({"key":[1,2,3,{"key":"value"},[1,2,3]]}) AS json_object_keys({"key":[1,2,3,{"key":"value"},[1,2,3]]})#x]
+- OneRowRelation


-- !query
select json_object_keys('{"f1":"abc","f2":{"f3":"a", "f4":"b"}}')
-- !query analysis
Project [json_object_keys({"f1":"abc","f2":{"f3":"a", "f4":"b"}}) AS json_object_keys({"f1":"abc","f2":{"f3":"a", "f4":"b"}})#x]
+- OneRowRelation


-- !query
select json_object_keys('{"k1": [1, 2, {"key": 5}], "k2": {"key2": [1, 2]}}')
-- !query analysis
Project [json_object_keys({"k1": [1, 2, {"key": 5}], "k2": {"key2": [1, 2]}}) AS json_object_keys({"k1": [1, 2, {"key": 5}], "k2": {"key2": [1, 2]}})#x]
+- OneRowRelation


-- !query
select json_object_keys('{[1,2]}')
-- !query analysis
Project [json_object_keys({[1,2]}) AS json_object_keys({[1,2]})#x]
+- OneRowRelation


-- !query
select json_object_keys('{"key": 45, "random_string"}')
-- !query analysis
Project [json_object_keys({"key": 45, "random_string"}) AS json_object_keys({"key": 45, "random_string"})#x]
+- OneRowRelation


-- !query
select json_object_keys('[1, 2, 3]')
-- !query analysis
Project [json_object_keys([1, 2, 3]) AS json_object_keys([1, 2, 3])#x]
+- OneRowRelation


-- !query
DROP VIEW IF EXISTS jsonTable
-- !query analysis
DropTempViewCommand jsonTable
