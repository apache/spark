-- Automatically generated by SQLQueryTestSuite
-- !query
set spark.sql.optimizer.supportNestedCorrelatedSubqueries.enabled=true
-- !query analysis
SetCommand (spark.sql.optimizer.supportNestedCorrelatedSubqueries.enabled,Some(true))


-- !query
set spark.sql.optimizer.supportNestedCorrelatedSubqueriesForScalarSubqueries.enabled=true
-- !query analysis
SetCommand (spark.sql.optimizer.supportNestedCorrelatedSubqueriesForScalarSubqueries.enabled,Some(true))


-- !query
set spark.sql.optimizer.supportNestedCorrelatedSubqueriesForINSubqueries.enabled=true
-- !query analysis
SetCommand (spark.sql.optimizer.supportNestedCorrelatedSubqueriesForINSubqueries.enabled,Some(true))


-- !query
set spark.sql.optimizer.supportNestedCorrelatedSubqueriesForEXISTSSubqueries.enabled=true
-- !query analysis
SetCommand (spark.sql.optimizer.supportNestedCorrelatedSubqueriesForEXISTSSubqueries.enabled,Some(true))


-- !query
SELECT 1 FROM (SELECT 1) t0(c0) WHERE (SELECT (SELECT c0)) = 1
-- !query analysis
Project [1 AS 1#x]
+- Filter (scalar-subquery#x [c0#x] = 1)
   :  +- Project [scalar-subquery#x [c0#x] AS scalarsubquery(c0)#x]
   :     :  +- Project [outer(c0#x)]
   :     :     +- OneRowRelation
   :     +- OneRowRelation
   +- SubqueryAlias t0
      +- Project [1#x AS c0#x]
         +- Project [1 AS 1#x]
            +- OneRowRelation


-- !query
DROP TABLE IF EXISTS table_integers
-- !query analysis
DropTable true, false
+- ResolvedIdentifier V2SessionCatalog(spark_catalog), default.table_integers


-- !query
CREATE TABLE table_integers(i INTEGER)
-- !query analysis
CreateDataSourceTableCommand `spark_catalog`.`default`.`table_integers`, false


-- !query
INSERT INTO table_integers VALUES (1), (2), (3), (NULL)
-- !query analysis
InsertIntoHadoopFsRelationCommand file:[not included in comparison]/{warehouse_dir}/table_integers, false, Parquet, [path=file:[not included in comparison]/{warehouse_dir}/table_integers], Append, `spark_catalog`.`default`.`table_integers`, org.apache.spark.sql.execution.datasources.InMemoryFileIndex(file:[not included in comparison]/{warehouse_dir}/table_integers), [i]
+- Project [cast(col1#x as int) AS i#x]
   +- LocalRelation [col1#x]


-- !query
SELECT i, (SELECT (SELECT 42+i1.i)+42+i1.i) AS j FROM table_integers i1 ORDER BY i
-- !query analysis
Sort [i#x ASC NULLS FIRST], true
+- Project [i#x, scalar-subquery#x [i#x] AS j#x]
   :  +- Project [((scalar-subquery#x [i#x] + 42) + outer(i#x)) AS ((scalarsubquery(i) + 42) + outer(i1.i))#x]
   :     :  +- Project [(42 + outer(i#x)) AS (42 + outer(i1.i))#x]
   :     :     +- OneRowRelation
   :     +- OneRowRelation
   +- SubqueryAlias i1
      +- SubqueryAlias spark_catalog.default.table_integers
         +- Relation spark_catalog.default.table_integers[i#x] parquet


-- !query
SELECT i, (SELECT (SELECT (SELECT (SELECT 42+i1.i)++i1.i)+42+i1.i)+42+i1.i) AS j FROM table_integers i1 ORDER BY i
-- !query analysis
Sort [i#x ASC NULLS FIRST], true
+- Project [i#x, scalar-subquery#x [i#x] AS j#x]
   :  +- Project [((scalar-subquery#x [i#x] + 42) + outer(i#x)) AS ((scalarsubquery(i) + 42) + outer(i1.i))#x]
   :     :  +- Project [((scalar-subquery#x [i#x] + 42) + outer(i#x)) AS ((scalarsubquery(i) + 42) + outer(i1.i))#x]
   :     :     :  +- Project [(scalar-subquery#x [i#x] + positive(outer(i#x))) AS (scalarsubquery(i) + (+ outer(i1.i)))#x]
   :     :     :     :  +- Project [(42 + outer(i#x)) AS (42 + outer(i1.i))#x]
   :     :     :     :     +- OneRowRelation
   :     :     :     +- OneRowRelation
   :     :     +- OneRowRelation
   :     +- OneRowRelation
   +- SubqueryAlias i1
      +- SubqueryAlias spark_catalog.default.table_integers
         +- Relation spark_catalog.default.table_integers[i#x] parquet


-- !query
SELECT i, (SELECT (SELECT (SELECT (SELECT i1.i+i1.i+i1.i+i1.i+i1.i)))) AS j FROM table_integers i1 ORDER BY i
-- !query analysis
Sort [i#x ASC NULLS FIRST], true
+- Project [i#x, scalar-subquery#x [i#x] AS j#x]
   :  +- Project [scalar-subquery#x [i#x] AS scalarsubquery(i)#x]
   :     :  +- Project [scalar-subquery#x [i#x] AS scalarsubquery(i)#x]
   :     :     :  +- Project [scalar-subquery#x [i#x] AS scalarsubquery(i)#x]
   :     :     :     :  +- Project [((((outer(i#x) + outer(i#x)) + outer(i#x)) + outer(i#x)) + outer(i#x)) AS ((((outer(i1.i) + outer(i1.i)) + outer(i1.i)) + outer(i1.i)) + outer(i1.i))#x]
   :     :     :     :     +- OneRowRelation
   :     :     :     +- OneRowRelation
   :     :     +- OneRowRelation
   :     +- OneRowRelation
   +- SubqueryAlias i1
      +- SubqueryAlias spark_catalog.default.table_integers
         +- Relation spark_catalog.default.table_integers[i#x] parquet


-- !query
SELECT i, (SELECT (SELECT (SELECT (SELECT i1.i+i1.i+i1.i+i1.i+i1.i+i2.i) FROM table_integers i2 WHERE i2.i=i1.i))) AS j FROM table_integers i1 ORDER BY i
-- !query analysis
Sort [i#x ASC NULLS FIRST], true
+- Project [i#x, scalar-subquery#x [i#x] AS j#x]
   :  +- Project [scalar-subquery#x [i#x] AS scalarsubquery(i)#x]
   :     :  +- Project [scalar-subquery#x [i#x] AS scalarsubquery(i)#x]
   :     :     :  +- Project [scalar-subquery#x [i#x && i#x] AS scalarsubquery(i, i)#x]
   :     :     :     :  +- Project [(((((outer(i#x) + outer(i#x)) + outer(i#x)) + outer(i#x)) + outer(i#x)) + outer(i#x)) AS (((((outer(i1.i) + outer(i1.i)) + outer(i1.i)) + outer(i1.i)) + outer(i1.i)) + outer(i2.i))#x]
   :     :     :     :     +- OneRowRelation
   :     :     :     +- Filter (i#x = outer(i#x))
   :     :     :        +- SubqueryAlias i2
   :     :     :           +- SubqueryAlias spark_catalog.default.table_integers
   :     :     :              +- Relation spark_catalog.default.table_integers[i#x] parquet
   :     :     +- OneRowRelation
   :     +- OneRowRelation
   +- SubqueryAlias i1
      +- SubqueryAlias spark_catalog.default.table_integers
         +- Relation spark_catalog.default.table_integers[i#x] parquet


-- !query
SELECT i, (SELECT SUM(s1.i) FROM (SELECT i FROM table_integers WHERE i=i1.i) s1 LEFT OUTER JOIN table_integers s2 ON s1.i=s2.i) AS j FROM table_integers i1 ORDER BY i
-- !query analysis
Sort [i#x ASC NULLS FIRST], true
+- Project [i#x, scalar-subquery#x [i#x] AS j#xL]
   :  +- Aggregate [sum(i#x) AS sum(i)#xL]
   :     +- Join LeftOuter, (i#x = i#x)
   :        :- SubqueryAlias s1
   :        :  +- Project [i#x]
   :        :     +- Filter (i#x = outer(i#x))
   :        :        +- SubqueryAlias spark_catalog.default.table_integers
   :        :           +- Relation spark_catalog.default.table_integers[i#x] parquet
   :        +- SubqueryAlias s2
   :           +- SubqueryAlias spark_catalog.default.table_integers
   :              +- Relation spark_catalog.default.table_integers[i#x] parquet
   +- SubqueryAlias i1
      +- SubqueryAlias spark_catalog.default.table_integers
         +- Relation spark_catalog.default.table_integers[i#x] parquet


-- !query
SELECT i, (SELECT SUM(s1.i) FROM (SELECT i FROM table_integers WHERE i<>i1.i) s1 LEFT OUTER JOIN table_integers s2 ON s1.i=s2.i) AS j FROM table_integers i1 ORDER BY i
-- !query analysis
Sort [i#x ASC NULLS FIRST], true
+- Project [i#x, scalar-subquery#x [i#x] AS j#xL]
   :  +- Aggregate [sum(i#x) AS sum(i)#xL]
   :     +- Join LeftOuter, (i#x = i#x)
   :        :- SubqueryAlias s1
   :        :  +- Project [i#x]
   :        :     +- Filter NOT (i#x = outer(i#x))
   :        :        +- SubqueryAlias spark_catalog.default.table_integers
   :        :           +- Relation spark_catalog.default.table_integers[i#x] parquet
   :        +- SubqueryAlias s2
   :           +- SubqueryAlias spark_catalog.default.table_integers
   :              +- Relation spark_catalog.default.table_integers[i#x] parquet
   +- SubqueryAlias i1
      +- SubqueryAlias spark_catalog.default.table_integers
         +- Relation spark_catalog.default.table_integers[i#x] parquet


-- !query
SELECT i, (SELECT SUM(ss2.i) FROM (SELECT i FROM table_integers s1 WHERE i=i1.i) ss2) AS j FROM table_integers i1 ORDER BY i
-- !query analysis
Sort [i#x ASC NULLS FIRST], true
+- Project [i#x, scalar-subquery#x [i#x] AS j#xL]
   :  +- Aggregate [sum(i#x) AS sum(i)#xL]
   :     +- SubqueryAlias ss2
   :        +- Project [i#x]
   :           +- Filter (i#x = outer(i#x))
   :              +- SubqueryAlias s1
   :                 +- SubqueryAlias spark_catalog.default.table_integers
   :                    +- Relation spark_catalog.default.table_integers[i#x] parquet
   +- SubqueryAlias i1
      +- SubqueryAlias spark_catalog.default.table_integers
         +- Relation spark_catalog.default.table_integers[i#x] parquet


-- !query
SELECT i, (SELECT * FROM (SELECT (SELECT 42+i1.i)) s1) AS j FROM table_integers i1 ORDER BY i
-- !query analysis
Sort [i#x ASC NULLS FIRST], true
+- Project [i#x, scalar-subquery#x [i#x] AS j#x]
   :  +- Project [scalarsubquery(i)#x]
   :     +- SubqueryAlias s1
   :        +- Project [scalar-subquery#x [i#x] AS scalarsubquery(i)#x]
   :           :  +- Project [(42 + outer(i#x)) AS (42 + outer(i1.i))#x]
   :           :     +- OneRowRelation
   :           +- OneRowRelation
   +- SubqueryAlias i1
      +- SubqueryAlias spark_catalog.default.table_integers
         +- Relation spark_catalog.default.table_integers[i#x] parquet


-- !query
SELECT i, (SELECT s1.k+s2.k FROM (SELECT (SELECT 42+i1.i) AS k) s1, (SELECT (SELECT 42+i1.i) AS k) s2) AS j FROM table_integers i1 ORDER BY i
-- !query analysis
Sort [i#x ASC NULLS FIRST], true
+- Project [i#x, scalar-subquery#x [i#x] AS j#x]
   :  +- Project [(k#x + k#x) AS (k + k)#x]
   :     +- Join Inner
   :        :- SubqueryAlias s1
   :        :  +- Project [scalar-subquery#x [i#x] AS k#x]
   :        :     :  +- Project [(42 + outer(i#x)) AS (42 + outer(i1.i))#x]
   :        :     :     +- OneRowRelation
   :        :     +- OneRowRelation
   :        +- SubqueryAlias s2
   :           +- Project [scalar-subquery#x [i#x] AS k#x]
   :              :  +- Project [(42 + outer(i#x)) AS (42 + outer(i1.i))#x]
   :              :     +- OneRowRelation
   :              +- OneRowRelation
   +- SubqueryAlias i1
      +- SubqueryAlias spark_catalog.default.table_integers
         +- Relation spark_catalog.default.table_integers[i#x] parquet


-- !query
SELECT i, (SELECT s1.k+s2.k FROM (SELECT (SELECT 42+i1.i) AS k) s1 LEFT OUTER JOIN (SELECT (SELECT 42+i1.i) AS k) s2 ON s1.k=s2.k) AS j FROM table_integers i1 ORDER BY i
-- !query analysis
Sort [i#x ASC NULLS FIRST], true
+- Project [i#x, scalar-subquery#x [i#x] AS j#x]
   :  +- Project [(k#x + k#x) AS (k + k)#x]
   :     +- Join LeftOuter, (k#x = k#x)
   :        :- SubqueryAlias s1
   :        :  +- Project [scalar-subquery#x [i#x] AS k#x]
   :        :     :  +- Project [(42 + outer(i#x)) AS (42 + outer(i1.i))#x]
   :        :     :     +- OneRowRelation
   :        :     +- OneRowRelation
   :        +- SubqueryAlias s2
   :           +- Project [scalar-subquery#x [i#x] AS k#x]
   :              :  +- Project [(42 + outer(i#x)) AS (42 + outer(i1.i))#x]
   :              :     +- OneRowRelation
   :              +- OneRowRelation
   +- SubqueryAlias i1
      +- SubqueryAlias spark_catalog.default.table_integers
         +- Relation spark_catalog.default.table_integers[i#x] parquet


-- !query
SELECT i, (SELECT i1.i IN (1, 2, 3, 4, 5, 6, 7, 8)) AS j FROM table_integers i1 ORDER BY i
-- !query analysis
Sort [i#x ASC NULLS FIRST], true
+- Project [i#x, scalar-subquery#x [i#x] AS j#x]
   :  +- Project [outer(i#x) IN (1,2,3,4,5,6,7,8) AS (outer(i1.i) IN (1, 2, 3, 4, 5, 6, 7, 8))#x]
   :     +- OneRowRelation
   +- SubqueryAlias i1
      +- SubqueryAlias spark_catalog.default.table_integers
         +- Relation spark_catalog.default.table_integers[i#x] parquet
