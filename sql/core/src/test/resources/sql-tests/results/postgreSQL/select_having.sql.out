-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TABLE test_having (a int, b int, c string, d string) USING parquet
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO test_having VALUES (0, 1, 'XXXX', 'A')
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO test_having VALUES (1, 2, 'AAAA', 'b')
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO test_having VALUES (2, 2, 'AAAA', 'c')
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO test_having VALUES (3, 3, 'BBBB', 'D')
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO test_having VALUES (4, 3, 'BBBB', 'e')
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO test_having VALUES (5, 3, 'bbbb', 'F')
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO test_having VALUES (6, 4, 'cccc', 'g')
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO test_having VALUES (7, 4, 'cccc', 'h')
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO test_having VALUES (8, 4, 'CCCC', 'I')
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO test_having VALUES (9, 4, 'CCCC', 'j')
-- !query schema
struct<>
-- !query output



-- !query
SELECT b, c FROM test_having
	GROUP BY b, c HAVING count(*) = 1 ORDER BY b, c
-- !query schema
struct<b:int,c:string>
-- !query output
1	XXXX
3	bbbb


-- !query
SELECT b, c FROM test_having
	GROUP BY b, c HAVING b = 3 ORDER BY b, c
-- !query schema
struct<b:int,c:string>
-- !query output
3	BBBB
3	bbbb


-- !query
SELECT c, max(a) FROM test_having
	GROUP BY c HAVING count(*) > 2 OR min(a) = max(a)
	ORDER BY c
-- !query schema
struct<c:string,max(a):int>
-- !query output
XXXX	0
bbbb	5


-- !query
SELECT min(a), max(a) FROM test_having HAVING min(a) = max(a)
-- !query schema
struct<min(a):int,max(a):int>
-- !query output



-- !query
SELECT min(a), max(a) FROM test_having HAVING min(a) < max(a)
-- !query schema
struct<min(a):int,max(a):int>
-- !query output
0	9


-- !query
SELECT a FROM test_having HAVING min(a) < max(a)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "MISSING_GROUP_BY",
  "sqlState" : "42803",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 48,
    "fragment" : "SELECT a FROM test_having HAVING min(a) < max(a)"
  } ]
}


-- !query
SELECT 1 AS one FROM test_having HAVING a > 1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`a`",
    "proposal" : "`one`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 41,
    "stopIndex" : 41,
    "fragment" : "a"
  } ]
}


-- !query
SELECT 1 AS one FROM test_having HAVING 1 > 2
-- !query schema
struct<one:int>
-- !query output



-- !query
SELECT 1 AS one FROM test_having HAVING 1 < 2
-- !query schema
struct<one:int>
-- !query output
1


-- !query
SELECT 1 AS one FROM test_having WHERE 1/a = 1 HAVING 1 < 2
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkArithmeticException
{
  "errorClass" : "DIVIDE_BY_ZERO",
  "sqlState" : "22012",
  "messageParameters" : {
    "config" : "\"spark.sql.ansi.enabled\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 40,
    "stopIndex" : 42,
    "fragment" : "1/a"
  } ]
}


-- !query
DROP TABLE test_having
-- !query schema
struct<>
-- !query output

