-- Automatically generated by SQLQueryTestSuite
-- !query
SELECT '' AS two, unique1, unique2, stringu1
		FROM onek WHERE unique1 > 50
		ORDER BY unique1 LIMIT 2
-- !query schema
struct<two:string,unique1:int,unique2:int,stringu1:string>
-- !query output
	51	76	ZBAAAA
	52	985	ACAAAA


-- !query
SELECT '' AS five, unique1, unique2, stringu1
		FROM onek WHERE unique1 > 60
		ORDER BY unique1 LIMIT 5
-- !query schema
struct<five:string,unique1:int,unique2:int,stringu1:string>
-- !query output
	61	560	JCAAAA
	62	633	KCAAAA
	63	296	LCAAAA
	64	479	MCAAAA
	65	64	NCAAAA


-- !query
SELECT '' AS two, unique1, unique2, stringu1
		FROM onek WHERE unique1 > 60 AND unique1 < 63
		ORDER BY unique1 LIMIT 5
-- !query schema
struct<two:string,unique1:int,unique2:int,stringu1:string>
-- !query output
	61	560	JCAAAA
	62	633	KCAAAA


-- !query
SELECT '' AS three, unique1, unique2, stringu1
 		FROM onek WHERE unique1 > 100
 		ORDER BY unique1 LIMIT 3 OFFSET 20
-- !query schema
struct<three:string,unique1:int,unique2:int,stringu1:string>
-- !query output
	121	700	REAAAA
	122	519	SEAAAA
	123	777	TEAAAA


-- !query
SELECT '' AS zero, unique1, unique2, stringu1
		FROM onek WHERE unique1 < 50
		ORDER BY unique1 DESC LIMIT 8 OFFSET 99
-- !query schema
struct<zero:string,unique1:int,unique2:int,stringu1:string>
-- !query output



-- !query
SELECT '' AS eleven, unique1, unique2, stringu1
		FROM onek WHERE unique1 < 50
 		ORDER BY unique1 DESC LIMIT 20 OFFSET 39
-- !query schema
struct<eleven:string,unique1:int,unique2:int,stringu1:string>
-- !query output
	10	520	KAAAAA
	9	49	JAAAAA
	8	653	IAAAAA
	7	647	HAAAAA
	6	978	GAAAAA
	5	541	FAAAAA
	4	833	EAAAAA
	3	431	DAAAAA
	2	326	CAAAAA
	1	214	BAAAAA
	0	998	AAAAAA


-- !query
SELECT '' AS ten, unique1, unique2, stringu1
 		FROM onek
 		ORDER BY unique1 OFFSET 990
-- !query schema
struct<ten:string,unique1:int,unique2:int,stringu1:string>
-- !query output
	990	369	CMAAAA
	991	426	DMAAAA
	992	363	EMAAAA
	993	661	FMAAAA
	994	695	GMAAAA
	995	144	HMAAAA
	996	258	IMAAAA
	997	21	JMAAAA
	998	549	KMAAAA
	999	152	LMAAAA


-- !query
SELECT '' AS five, unique1, unique2, stringu1
 		FROM onek
 		ORDER BY unique1 LIMIT 5 OFFSET 900
-- !query schema
struct<five:string,unique1:int,unique2:int,stringu1:string>
-- !query output
	900	913	QIAAAA
	901	931	RIAAAA
	902	702	SIAAAA
	903	641	TIAAAA
	904	793	UIAAAA


-- !query
CREATE OR REPLACE TEMPORARY VIEW INT8_TBL AS SELECT * FROM
  (VALUES
    (123, 456),
    (123, 4567890123456789),
    (4567890123456789, 123),
    (4567890123456789, 4567890123456789),
    (4567890123456789, -4567890123456789))
  AS v(q1, q2)
-- !query schema
struct<>
-- !query output



-- !query
select * from int8_tbl limit (case when random() < 0.5 then bigint(null) end)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_LIMIT_LIKE_EXPRESSION.IS_UNFOLDABLE",
  "sqlState" : "42K0E",
  "messageParameters" : {
    "expr" : "\"CASE WHEN (_nondeterministic < 0.5) THEN NULL END\"",
    "name" : "limit"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 31,
    "stopIndex" : 76,
    "fragment" : "case when random() < 0.5 then bigint(null) end"
  } ]
}


-- !query
select * from int8_tbl offset (case when random() < 0.5 then bigint(null) end)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_LIMIT_LIKE_EXPRESSION.IS_UNFOLDABLE",
  "sqlState" : "42K0E",
  "messageParameters" : {
    "expr" : "\"CASE WHEN (_nondeterministic < 0.5) THEN NULL END\"",
    "name" : "offset"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 32,
    "stopIndex" : 77,
    "fragment" : "case when random() < 0.5 then bigint(null) end"
  } ]
}


-- !query
DROP VIEW INT8_TBL
-- !query schema
struct<>
-- !query output



-- !query
select sum(tenthous) as s1, sum(tenthous) + random()*0 as s2
  from tenk1 group by thousand order by thousand limit 3
-- !query schema
struct<s1:bigint,s2:double>
-- !query output
45000	45000.0
45010	45010.0
45020	45020.0
