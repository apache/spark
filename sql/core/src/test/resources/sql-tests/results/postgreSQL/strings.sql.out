-- Automatically generated by SQLQueryTestSuite
-- !query
SELECT 'first line'
' - next line'
	' - third line'
	AS `Three lines to one`
-- !query schema
struct<Three lines to one:string>
-- !query output
first line - next line - third line


-- !query
SELECT 'first line'
' - next line' /* this comment is not allowed here */
' - third line'
	AS `Illegal comment within continuation`
-- !query schema
struct<Illegal comment within continuation:string>
-- !query output
first line - next line - third line


-- !query
SELECT binary('\\xDeAdBeEf')
-- !query schema
struct<\xDeAdBeEf:binary>
-- !query output
\xDeAdBeEf


-- !query
SELECT binary('\\x De Ad Be Ef ')
-- !query schema
struct<\x De Ad Be Ef :binary>
-- !query output
\x De Ad Be Ef


-- !query
SELECT binary('\\xDe00BeEf')
-- !query schema
struct<\xDe00BeEf:binary>
-- !query output
\xDe00BeEf


-- !query
SELECT binary('DeAdBeEf')
-- !query schema
struct<DeAdBeEf:binary>
-- !query output
DeAdBeEf


-- !query
SELECT binary('De\\000dBeEf')
-- !query schema
struct<De\000dBeEf:binary>
-- !query output
De\000dBeEf


-- !query
SELECT binary('De\\123dBeEf')
-- !query schema
struct<De\123dBeEf:binary>
-- !query output
De\123dBeEf


-- !query
SELECT TRIM(BOTH FROM '  bunch o blanks  ') = 'bunch o blanks' AS `bunch o blanks`
-- !query schema
struct<bunch o blanks:boolean>
-- !query output
true


-- !query
SELECT TRIM(LEADING FROM '  bunch o blanks  ') = 'bunch o blanks  ' AS `bunch o blanks  `
-- !query schema
struct<bunch o blanks  :boolean>
-- !query output
true


-- !query
SELECT TRIM(TRAILING FROM '  bunch o blanks  ') = '  bunch o blanks' AS `  bunch o blanks`
-- !query schema
struct<  bunch o blanks:boolean>
-- !query output
true


-- !query
SELECT TRIM(BOTH 'x' FROM 'xxxxxsome Xsxxxxx') = 'some Xs' AS `some Xs`
-- !query schema
struct<some Xs:boolean>
-- !query output
true


-- !query
SELECT SUBSTRING('1234567890' FROM 3) = '34567890' AS `34567890`
-- !query schema
struct<34567890:boolean>
-- !query output
true


-- !query
SELECT SUBSTRING('1234567890' FROM 4 FOR 3) = '456' AS `456`
-- !query schema
struct<456:boolean>
-- !query output
true


-- !query
SELECT POSITION('4' IN '1234567890') = '4' AS `4`
-- !query schema
struct<4:boolean>
-- !query output
true


-- !query
SELECT POSITION('5' IN '1234567890') = '5' AS `5`
-- !query schema
struct<5:boolean>
-- !query output
true


-- !query
SELECT OVERLAY('abcdef' PLACING '45' FROM 4) AS `abc45f`
-- !query schema
struct<abc45f:string>
-- !query output
abc45f


-- !query
SELECT OVERLAY('yabadoo' PLACING 'daba' FROM 5) AS `yabadaba`
-- !query schema
struct<yabadaba:string>
-- !query output
yabadaba


-- !query
SELECT OVERLAY('yabadoo' PLACING 'daba' FROM 5 FOR 0) AS `yabadabadoo`
-- !query schema
struct<yabadabadoo:string>
-- !query output
yabadabadoo


-- !query
SELECT OVERLAY('babosa' PLACING 'ubb' FROM 2 FOR 4) AS `bubba`
-- !query schema
struct<bubba:string>
-- !query output
bubba


-- !query
SELECT 'hawkeye' LIKE 'h%' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'hawkeye' NOT LIKE 'h%' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'hawkeye' LIKE 'H%' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'hawkeye' NOT LIKE 'H%' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'hawkeye' LIKE 'indio%' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'hawkeye' NOT LIKE 'indio%' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'hawkeye' LIKE 'h%eye' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'hawkeye' NOT LIKE 'h%eye' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'indio' LIKE '_ndio' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'indio' NOT LIKE '_ndio' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'indio' LIKE 'in__o' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'indio' NOT LIKE 'in__o' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'indio' LIKE 'in_o' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'indio' NOT LIKE 'in_o' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'hawkeye' LIKE 'h%' ESCAPE '#' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'hawkeye' NOT LIKE 'h%' ESCAPE '#' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'indio' LIKE 'ind_o' ESCAPE '$' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'indio' NOT LIKE 'ind_o' ESCAPE '$' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'h%' LIKE 'h#%' ESCAPE '#' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'h%' NOT LIKE 'h#%' ESCAPE '#' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'h%wkeye' LIKE 'h#%' ESCAPE '#' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'h%wkeye' NOT LIKE 'h#%' ESCAPE '#' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'h%wkeye' LIKE 'h#%%' ESCAPE '#' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'h%wkeye' NOT LIKE 'h#%%' ESCAPE '#' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'h%awkeye' LIKE 'h#%a%k%e' ESCAPE '#' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'h%awkeye' NOT LIKE 'h#%a%k%e' ESCAPE '#' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'indio' LIKE '_ndio' ESCAPE '$' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'indio' NOT LIKE '_ndio' ESCAPE '$' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'i_dio' LIKE 'i$_d_o' ESCAPE '$' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'i_dio' NOT LIKE 'i$_d_o' ESCAPE '$' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'i_dio' LIKE 'i$_nd_o' ESCAPE '$' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'i_dio' NOT LIKE 'i$_nd_o' ESCAPE '$' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'i_dio' LIKE 'i$_d%o' ESCAPE '$' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'i_dio' NOT LIKE 'i$_d%o' ESCAPE '$' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'maca' LIKE 'm%aca' ESCAPE '%' AS `true`
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_FORMAT.ESC_IN_THE_MIDDLE",
  "sqlState" : "42601",
  "messageParameters" : {
    "char" : "'a'",
    "format" : "'m%aca'"
  }
}


-- !query
SELECT 'maca' NOT LIKE 'm%aca' ESCAPE '%' AS `false`
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_FORMAT.ESC_IN_THE_MIDDLE",
  "sqlState" : "42601",
  "messageParameters" : {
    "char" : "'a'",
    "format" : "'m%aca'"
  }
}


-- !query
SELECT 'ma%a' LIKE 'm%a%%a' ESCAPE '%' AS `true`
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_FORMAT.ESC_IN_THE_MIDDLE",
  "sqlState" : "42601",
  "messageParameters" : {
    "char" : "'a'",
    "format" : "'m%a%%a'"
  }
}


-- !query
SELECT 'ma%a' NOT LIKE 'm%a%%a' ESCAPE '%' AS `false`
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_FORMAT.ESC_IN_THE_MIDDLE",
  "sqlState" : "42601",
  "messageParameters" : {
    "char" : "'a'",
    "format" : "'m%a%%a'"
  }
}


-- !query
SELECT 'bear' LIKE 'b_ear' ESCAPE '_' AS `true`
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_FORMAT.ESC_IN_THE_MIDDLE",
  "sqlState" : "42601",
  "messageParameters" : {
    "char" : "'e'",
    "format" : "'b_ear'"
  }
}


-- !query
SELECT 'bear' NOT LIKE 'b_ear' ESCAPE '_' AS `false`
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_FORMAT.ESC_IN_THE_MIDDLE",
  "sqlState" : "42601",
  "messageParameters" : {
    "char" : "'e'",
    "format" : "'b_ear'"
  }
}


-- !query
SELECT 'be_r' LIKE 'b_e__r' ESCAPE '_' AS `true`
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_FORMAT.ESC_IN_THE_MIDDLE",
  "sqlState" : "42601",
  "messageParameters" : {
    "char" : "'e'",
    "format" : "'b_e__r'"
  }
}


-- !query
SELECT 'be_r' NOT LIKE 'b_e__r' ESCAPE '_' AS `false`
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_FORMAT.ESC_IN_THE_MIDDLE",
  "sqlState" : "42601",
  "messageParameters" : {
    "char" : "'e'",
    "format" : "'b_e__r'"
  }
}


-- !query
SELECT 'be_r' LIKE '__e__r' ESCAPE '_' AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 'be_r' NOT LIKE '__e__r' ESCAPE '_' AS `true`
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT 'foo' LIKE '_%' as t, 'f' LIKE '_%' as t, '' LIKE '_%' as f
-- !query schema
struct<t:boolean,t:boolean,f:boolean>
-- !query output
true	true	false


-- !query
SELECT 'foo' LIKE '%_' as t, 'f' LIKE '%_' as t, '' LIKE '%_' as f
-- !query schema
struct<t:boolean,t:boolean,f:boolean>
-- !query output
true	true	false


-- !query
SELECT 'foo' LIKE '__%' as t, 'foo' LIKE '___%' as t, 'foo' LIKE '____%' as f
-- !query schema
struct<t:boolean,t:boolean,f:boolean>
-- !query output
true	true	false


-- !query
SELECT 'foo' LIKE '%__' as t, 'foo' LIKE '%___' as t, 'foo' LIKE '%____' as f
-- !query schema
struct<t:boolean,t:boolean,f:boolean>
-- !query output
true	true	false


-- !query
SELECT 'jack' LIKE '%____%' AS t
-- !query schema
struct<t:boolean>
-- !query output
true


-- !query
SELECT 'unknown' || ' and unknown' AS `Concat unknown types`
-- !query schema
struct<Concat unknown types:string>
-- !query output
unknown and unknown


-- !query
SELECT string('text') || ' and unknown' AS `Concat text to unknown type`
-- !query schema
struct<Concat text to unknown type:string>
-- !query output
text and unknown


-- !query
CREATE TABLE toasttest(f1 string) USING parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into toasttest values(repeat('1234567890',10000))
-- !query schema
struct<>
-- !query output



-- !query
insert into toasttest values(repeat('1234567890',10000))
-- !query schema
struct<>
-- !query output



-- !query
insert into toasttest values(repeat('1234567890',10000))
-- !query schema
struct<>
-- !query output



-- !query
insert into toasttest values(repeat('1234567890',10000))
-- !query schema
struct<>
-- !query output



-- !query
SELECT substr(f1, 99995) from toasttest
-- !query schema
struct<substr(f1, 99995, 2147483647):string>
-- !query output
567890
567890
567890
567890


-- !query
SELECT substr(f1, 99995, 10) from toasttest
-- !query schema
struct<substr(f1, 99995, 10):string>
-- !query output
567890
567890
567890
567890


-- !query
SELECT length('abcdef') AS `length_6`
-- !query schema
struct<length_6:int>
-- !query output
6


-- !query
SELECT position('cd', 'abcdef') AS `pos_3`
-- !query schema
struct<pos_3:int>
-- !query output
3


-- !query
SELECT position('xy', 'abcdef') AS `pos_0`
-- !query schema
struct<pos_0:int>
-- !query output
0


-- !query
SELECT replace('abcdef', 'de', '45') AS `abc45f`
-- !query schema
struct<abc45f:string>
-- !query output
abc45f


-- !query
SELECT replace('yabadabadoo', 'ba', '123') AS `ya123da123doo`
-- !query schema
struct<ya123da123doo:string>
-- !query output
ya123da123doo


-- !query
SELECT replace('yabadoo', 'bad', '') AS `yaoo`
-- !query schema
struct<yaoo:string>
-- !query output
yaoo


-- !query
select hex(256*256*256 - 1) AS `ffffff`
-- !query schema
struct<ffffff:string>
-- !query output
FFFFFF


-- !query
select hex(bigint(bigint(bigint(bigint(256)*256)*256)*256) - 1) AS `ffffffff`
-- !query schema
struct<ffffffff:string>
-- !query output
FFFFFFFF


-- !query
select md5('') = 'd41d8cd98f00b204e9800998ecf8427e' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
select md5('a') = '0cc175b9c0f1b6a831c399e269772661' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
select md5('abc') = '900150983cd24fb0d6963f7d28e17f72' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
select md5('message digest') = 'f96b697d7cb7938d525a2f31aaf161d0' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
select md5('abcdefghijklmnopqrstuvwxyz') = 'c3fcd3d76192e4007dfb496cca67e13b' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
select md5('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') = 'd174ab98d277d9f5a5611c2c9f419d9f' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
select md5('12345678901234567890123456789012345678901234567890123456789012345678901234567890') = '57edf4a22be3c955ac49da2e2107b67a' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
select md5(binary('')) = 'd41d8cd98f00b204e9800998ecf8427e' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
select md5(binary('a')) = '0cc175b9c0f1b6a831c399e269772661' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
select md5(binary('abc')) = '900150983cd24fb0d6963f7d28e17f72' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
select md5(binary('message digest')) = 'f96b697d7cb7938d525a2f31aaf161d0' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
select md5(binary('abcdefghijklmnopqrstuvwxyz')) = 'c3fcd3d76192e4007dfb496cca67e13b' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
select md5(binary('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789')) = 'd174ab98d277d9f5a5611c2c9f419d9f' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
select md5(binary('12345678901234567890123456789012345678901234567890123456789012345678901234567890')) = '57edf4a22be3c955ac49da2e2107b67a' AS `TRUE`
-- !query schema
struct<TRUE:boolean>
-- !query output
true


-- !query
SELECT initcap('hi THOMAS')
-- !query schema
struct<initcap(hi THOMAS):string>
-- !query output
Hi Thomas


-- !query
SELECT lpad('hi', 5, 'xy')
-- !query schema
struct<lpad(hi, 5, xy):string>
-- !query output
xyxhi


-- !query
SELECT lpad('hi', 5)
-- !query schema
struct<lpad(hi, 5,  ):string>
-- !query output
   hi


-- !query
SELECT lpad('hi', -5, 'xy')
-- !query schema
struct<lpad(hi, -5, xy):string>
-- !query output



-- !query
SELECT lpad('hello', 2)
-- !query schema
struct<lpad(hello, 2,  ):string>
-- !query output
he


-- !query
SELECT lpad('hi', 5, '')
-- !query schema
struct<lpad(hi, 5, ):string>
-- !query output
hi


-- !query
SELECT rpad('hi', 5, 'xy')
-- !query schema
struct<rpad(hi, 5, xy):string>
-- !query output
hixyx


-- !query
SELECT rpad('hi', 5)
-- !query schema
struct<rpad(hi, 5,  ):string>
-- !query output
hi


-- !query
SELECT rpad('hi', -5, 'xy')
-- !query schema
struct<rpad(hi, -5, xy):string>
-- !query output



-- !query
SELECT rpad('hello', 2)
-- !query schema
struct<rpad(hello, 2,  ):string>
-- !query output
he


-- !query
SELECT rpad('hi', 5, '')
-- !query schema
struct<rpad(hi, 5, ):string>
-- !query output
hi


-- !query
SELECT translate('', '14', 'ax')
-- !query schema
struct<translate(, 14, ax):string>
-- !query output



-- !query
SELECT translate('12345', '14', 'ax')
-- !query schema
struct<translate(12345, 14, ax):string>
-- !query output
a23x5


-- !query
SELECT ascii('x')
-- !query schema
struct<ascii(x):int>
-- !query output
120


-- !query
SELECT ascii('')
-- !query schema
struct<ascii():int>
-- !query output
0


-- !query
SELECT chr(65)
-- !query schema
struct<chr(65):string>
-- !query output
A


-- !query
SELECT chr(0)
-- !query schema
struct<chr(0):string>
-- !query output
 


-- !query
SELECT repeat('Pg', 4)
-- !query schema
struct<repeat(Pg, 4):string>
-- !query output
PgPgPgPg


-- !query
SELECT repeat('Pg', -4)
-- !query schema
struct<repeat(Pg, -4):string>
-- !query output



-- !query
SELECT trim(binary('\\000') from binary('\\000Tom\\000'))
-- !query schema
struct<TRIM(BOTH \000 FROM \000Tom\000):string>
-- !query output
Tom


-- !query
SELECT btrim(binary('\\000trim\\000'), binary('\\000'))
-- !query schema
struct<btrim(\000trim\000, \000):string>
-- !query output
trim


-- !query
SELECT btrim(binary(''), binary('\\000'))
-- !query schema
struct<btrim(, \000):string>
-- !query output



-- !query
SELECT btrim(binary('\\000trim\\000'), binary(''))
-- !query schema
struct<btrim(\000trim\000, ):string>
-- !query output
\000trim\000


-- !query
DROP TABLE toasttest
-- !query schema
struct<>
-- !query output

