-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TABLE INT4_TBL(f1 int) USING parquet
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO INT4_TBL VALUES (int(trim('   0  ')))
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO INT4_TBL VALUES (int(trim('123456     ')))
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO INT4_TBL VALUES (int(trim('    -123456')))
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO INT4_TBL VALUES (int('2147483647'))
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO INT4_TBL VALUES (int('-2147483647'))
-- !query schema
struct<>
-- !query output



-- !query
SELECT '' AS five, * FROM INT4_TBL
-- !query schema
struct<five:string,f1:int>
-- !query output
	-123456
	-2147483647
	0
	123456
	2147483647


-- !query
SELECT '' AS four, i.* FROM INT4_TBL i WHERE i.f1 <> smallint('0')
-- !query schema
struct<four:string,f1:int>
-- !query output
	-123456
	-2147483647
	123456
	2147483647


-- !query
SELECT '' AS four, i.* FROM INT4_TBL i WHERE i.f1 <> int('0')
-- !query schema
struct<four:string,f1:int>
-- !query output
	-123456
	-2147483647
	123456
	2147483647


-- !query
SELECT '' AS one, i.* FROM INT4_TBL i WHERE i.f1 = smallint('0')
-- !query schema
struct<one:string,f1:int>
-- !query output
	0


-- !query
SELECT '' AS one, i.* FROM INT4_TBL i WHERE i.f1 = int('0')
-- !query schema
struct<one:string,f1:int>
-- !query output
	0


-- !query
SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 < smallint('0')
-- !query schema
struct<two:string,f1:int>
-- !query output
	-123456
	-2147483647


-- !query
SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 < int('0')
-- !query schema
struct<two:string,f1:int>
-- !query output
	-123456
	-2147483647


-- !query
SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 <= smallint('0')
-- !query schema
struct<three:string,f1:int>
-- !query output
	-123456
	-2147483647
	0


-- !query
SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 <= int('0')
-- !query schema
struct<three:string,f1:int>
-- !query output
	-123456
	-2147483647
	0


-- !query
SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 > smallint('0')
-- !query schema
struct<two:string,f1:int>
-- !query output
	123456
	2147483647


-- !query
SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 > int('0')
-- !query schema
struct<two:string,f1:int>
-- !query output
	123456
	2147483647


-- !query
SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 >= smallint('0')
-- !query schema
struct<three:string,f1:int>
-- !query output
	0
	123456
	2147483647


-- !query
SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 >= int('0')
-- !query schema
struct<three:string,f1:int>
-- !query output
	0
	123456
	2147483647


-- !query
SELECT '' AS one, i.* FROM INT4_TBL i WHERE (i.f1 % smallint('2')) = smallint('1')
-- !query schema
struct<one:string,f1:int>
-- !query output
	2147483647


-- !query
SELECT '' AS three, i.* FROM INT4_TBL i WHERE (i.f1 % int('2')) = smallint('0')
-- !query schema
struct<three:string,f1:int>
-- !query output
	-123456
	0
	123456


-- !query
SELECT '' AS five, i.f1, i.f1 * smallint('2') AS x FROM INT4_TBL i
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkArithmeticException
{
  "errorClass" : "ARITHMETIC_OVERFLOW",
  "sqlState" : "22003",
  "messageParameters" : {
    "alternative" : " Use 'try_multiply' to tolerate overflow and return NULL instead.",
    "config" : "\"spark.sql.ansi.enabled\"",
    "message" : "integer overflow"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 26,
    "stopIndex" : 45,
    "fragment" : "i.f1 * smallint('2')"
  } ]
}


-- !query
SELECT '' AS five, i.f1, i.f1 * smallint('2') AS x FROM INT4_TBL i
WHERE abs(f1) < 1073741824
-- !query schema
struct<five:string,f1:int,x:int>
-- !query output
	-123456	-246912
	0	0
	123456	246912


-- !query
SELECT '' AS five, i.f1, i.f1 * int('2') AS x FROM INT4_TBL i
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkArithmeticException
{
  "errorClass" : "ARITHMETIC_OVERFLOW",
  "sqlState" : "22003",
  "messageParameters" : {
    "alternative" : " Use 'try_multiply' to tolerate overflow and return NULL instead.",
    "config" : "\"spark.sql.ansi.enabled\"",
    "message" : "integer overflow"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 26,
    "stopIndex" : 40,
    "fragment" : "i.f1 * int('2')"
  } ]
}


-- !query
SELECT '' AS five, i.f1, i.f1 * int('2') AS x FROM INT4_TBL i
WHERE abs(f1) < 1073741824
-- !query schema
struct<five:string,f1:int,x:int>
-- !query output
	-123456	-246912
	0	0
	123456	246912


-- !query
SELECT '' AS five, i.f1, i.f1 + smallint('2') AS x FROM INT4_TBL i
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkArithmeticException
{
  "errorClass" : "ARITHMETIC_OVERFLOW",
  "sqlState" : "22003",
  "messageParameters" : {
    "alternative" : " Use 'try_add' to tolerate overflow and return NULL instead.",
    "config" : "\"spark.sql.ansi.enabled\"",
    "message" : "integer overflow"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 26,
    "stopIndex" : 45,
    "fragment" : "i.f1 + smallint('2')"
  } ]
}


-- !query
SELECT '' AS five, i.f1, i.f1 + smallint('2') AS x FROM INT4_TBL i
WHERE f1 < 2147483646
-- !query schema
struct<five:string,f1:int,x:int>
-- !query output
	-123456	-123454
	-2147483647	-2147483645
	0	2
	123456	123458


-- !query
SELECT '' AS five, i.f1, i.f1 + int('2') AS x FROM INT4_TBL i
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkArithmeticException
{
  "errorClass" : "ARITHMETIC_OVERFLOW",
  "sqlState" : "22003",
  "messageParameters" : {
    "alternative" : " Use 'try_add' to tolerate overflow and return NULL instead.",
    "config" : "\"spark.sql.ansi.enabled\"",
    "message" : "integer overflow"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 26,
    "stopIndex" : 40,
    "fragment" : "i.f1 + int('2')"
  } ]
}


-- !query
SELECT '' AS five, i.f1, i.f1 + int('2') AS x FROM INT4_TBL i
WHERE f1 < 2147483646
-- !query schema
struct<five:string,f1:int,x:int>
-- !query output
	-123456	-123454
	-2147483647	-2147483645
	0	2
	123456	123458


-- !query
SELECT '' AS five, i.f1, i.f1 - smallint('2') AS x FROM INT4_TBL i
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkArithmeticException
{
  "errorClass" : "ARITHMETIC_OVERFLOW",
  "sqlState" : "22003",
  "messageParameters" : {
    "alternative" : " Use 'try_subtract' to tolerate overflow and return NULL instead.",
    "config" : "\"spark.sql.ansi.enabled\"",
    "message" : "integer overflow"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 26,
    "stopIndex" : 45,
    "fragment" : "i.f1 - smallint('2')"
  } ]
}


-- !query
SELECT '' AS five, i.f1, i.f1 - smallint('2') AS x FROM INT4_TBL i
WHERE f1 > -2147483647
-- !query schema
struct<five:string,f1:int,x:int>
-- !query output
	-123456	-123458
	0	-2
	123456	123454
	2147483647	2147483645


-- !query
SELECT '' AS five, i.f1, i.f1 - int('2') AS x FROM INT4_TBL i
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkArithmeticException
{
  "errorClass" : "ARITHMETIC_OVERFLOW",
  "sqlState" : "22003",
  "messageParameters" : {
    "alternative" : " Use 'try_subtract' to tolerate overflow and return NULL instead.",
    "config" : "\"spark.sql.ansi.enabled\"",
    "message" : "integer overflow"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 26,
    "stopIndex" : 40,
    "fragment" : "i.f1 - int('2')"
  } ]
}


-- !query
SELECT '' AS five, i.f1, i.f1 - int('2') AS x FROM INT4_TBL i
WHERE f1 > -2147483647
-- !query schema
struct<five:string,f1:int,x:int>
-- !query output
	-123456	-123458
	0	-2
	123456	123454
	2147483647	2147483645


-- !query
SELECT '' AS five, i.f1, i.f1 / smallint('2') AS x FROM INT4_TBL i
-- !query schema
struct<five:string,f1:int,x:double>
-- !query output
	-123456	-61728.0
	-2147483647	-1.0737418235E9
	0	0.0
	123456	61728.0
	2147483647	1.0737418235E9


-- !query
SELECT '' AS five, i.f1, i.f1 / int('2') AS x FROM INT4_TBL i
-- !query schema
struct<five:string,f1:int,x:double>
-- !query output
	-123456	-61728.0
	-2147483647	-1.0737418235E9
	0	0.0
	123456	61728.0
	2147483647	1.0737418235E9


-- !query
SELECT -2+3 AS one
-- !query schema
struct<one:int>
-- !query output
1


-- !query
SELECT 4-2 AS two
-- !query schema
struct<two:int>
-- !query output
2


-- !query
SELECT 2- -1 AS three
-- !query schema
struct<three:int>
-- !query output
3


-- !query
SELECT 2 - -2 AS four
-- !query schema
struct<four:int>
-- !query output
4


-- !query
SELECT smallint('2') * smallint('2') = smallint('16') / smallint('4') AS true
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT int('2') * smallint('2') = smallint('16') / int('4') AS true
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT smallint('2') * int('2') = int('16') / smallint('4') AS true
-- !query schema
struct<true:boolean>
-- !query output
true


-- !query
SELECT int('1000') < int('999') AS `false`
-- !query schema
struct<false:boolean>
-- !query output
false


-- !query
SELECT 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 AS ten
-- !query schema
struct<ten:int>
-- !query output
10


-- !query
SELECT 2 + 2 / 2 AS three
-- !query schema
struct<three:double>
-- !query output
3.0


-- !query
SELECT (2 + 2) / 2 AS two
-- !query schema
struct<two:double>
-- !query output
2.0


-- !query
SELECT string(shiftleft(int(-1), 31))
-- !query schema
struct<shiftleft(-1, 31):string>
-- !query output
-2147483648


-- !query
SELECT string(int(shiftleft(int(-1), 31))+1)
-- !query schema
struct<(shiftleft(-1, 31) + 1):string>
-- !query output
-2147483647


-- !query
SELECT int(-2147483648) % int(-1)
-- !query schema
struct<(-2147483648 % -1):int>
-- !query output
0


-- !query
SELECT int(-2147483648) % smallint(-1)
-- !query schema
struct<(-2147483648 % -1):int>
-- !query output
0


-- !query
SELECT x, int(x) AS int4_value
FROM (VALUES double(-2.5),
             double(-1.5),
             double(-0.5),
             double(0.0),
             double(0.5),
             double(1.5),
             double(2.5)) t(x)
-- !query schema
struct<x:double,int4_value:int>
-- !query output
-0.5	0
-1.5	-1
-2.5	-2
0.0	0
0.5	0
1.5	1
2.5	2


-- !query
SELECT x, int(x) AS int4_value
FROM (VALUES cast(-2.5 as decimal(38, 18)),
             cast(-1.5 as decimal(38, 18)),
             cast(-0.5 as decimal(38, 18)),
             cast(-0.0 as decimal(38, 18)),
             cast(0.5 as decimal(38, 18)),
             cast(1.5 as decimal(38, 18)),
             cast(2.5 as decimal(38, 18))) t(x)
-- !query schema
struct<x:decimal(38,18),int4_value:int>
-- !query output
-0.500000000000000000	0
-1.500000000000000000	-1
-2.500000000000000000	-2
0.000000000000000000	0
0.500000000000000000	0
1.500000000000000000	1
2.500000000000000000	2


-- !query
DROP TABLE INT4_TBL
-- !query schema
struct<>
-- !query output

