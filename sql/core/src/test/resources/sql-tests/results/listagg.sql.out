-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TEMP VIEW df AS
SELECT * FROM (VALUES ('a', 'b'), ('a', 'c'), ('b', 'c'), ('b', 'd'), (NULL, NULL))
-- !query schema
struct<>
-- !query output



-- !query
CREATE TEMP VIEW df2 AS
SELECT * FROM (VALUES (1, true), (2, false), (3, false))
-- !query schema
struct<>
-- !query output



-- !query
WITH t(col) AS (SELECT listagg(col2) FROM df GROUP BY col1) SELECT len(col), regexp_count(col, 'a'), regexp_count(col, 'b'), regexp_count(col, 'c'), regexp_count(col, 'd') FROM t
-- !query schema
struct<len(col):int,regexp_count(col, a):int,regexp_count(col, b):int,regexp_count(col, c):int,regexp_count(col, d):int>
-- !query output
2	0	0	1	1
2	0	1	1	0
NULL	NULL	NULL	NULL	NULL


-- !query
WITH t(col) AS (SELECT string_agg(col2) FROM df GROUP BY col1) SELECT len(col), regexp_count(col, 'a'), regexp_count(col, 'b'), regexp_count(col, 'c'), regexp_count(col, 'd') FROM t
-- !query schema
struct<len(col):int,regexp_count(col, a):int,regexp_count(col, b):int,regexp_count(col, c):int,regexp_count(col, d):int>
-- !query output
2	0	0	1	1
2	0	1	1	0
NULL	NULL	NULL	NULL	NULL


-- !query
WITH t(col) AS (SELECT listagg(col2, NULL) FROM df GROUP BY col1) SELECT len(col), regexp_count(col, 'a'), regexp_count(col, 'b'), regexp_count(col, 'c'), regexp_count(col, 'd') FROM t
-- !query schema
struct<len(col):int,regexp_count(col, a):int,regexp_count(col, b):int,regexp_count(col, c):int,regexp_count(col, d):int>
-- !query output
2	0	0	1	1
2	0	1	1	0
NULL	NULL	NULL	NULL	NULL


-- !query
SELECT listagg(col2) FROM df WHERE 1 != 1
-- !query schema
struct<listagg(col2, NULL):string>
-- !query output
NULL


-- !query
WITH t(col) AS (SELECT listagg(col2, '|') FROM df GROUP BY col1) SELECT len(col), regexp_count(col, 'a'), regexp_count(col, 'b'), regexp_count(col, 'c'), regexp_count(col, 'd') FROM t
-- !query schema
struct<len(col):int,regexp_count(col, a):int,regexp_count(col, b):int,regexp_count(col, c):int,regexp_count(col, d):int>
-- !query output
3	0	0	1	1
3	0	1	1	0
NULL	NULL	NULL	NULL	NULL


-- !query
WITH t(col) AS (SELECT listagg(col1) FROM df) SELECT len(col), regexp_count(col, 'a'), regexp_count(col, 'b') FROM t
-- !query schema
struct<len(col):int,regexp_count(col, a):int,regexp_count(col, b):int>
-- !query output
4	2	2


-- !query
WITH t(col) AS (SELECT listagg(DISTINCT col1) FROM df) SELECT len(col), regexp_count(col, 'a'), regexp_count(col, 'b') FROM t
-- !query schema
struct<len(col):int,regexp_count(col, a):int,regexp_count(col, b):int>
-- !query output
2	1	1


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col1) FROM df
-- !query schema
struct<listagg(col1, NULL) WITHIN GROUP (ORDER BY col1 ASC NULLS FIRST):string>
-- !query output
aabb


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col1 DESC) FROM df
-- !query schema
struct<listagg(col1, NULL) WITHIN GROUP (ORDER BY col1 DESC NULLS LAST):string>
-- !query output
bbaa


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col1 DESC) OVER (PARTITION BY col2) FROM df
-- !query schema
struct<listagg(col1, NULL) WITHIN GROUP (ORDER BY col1 DESC NULLS LAST) OVER (PARTITION BY col2 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):string>
-- !query output
NULL
a
b
ba
ba


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col2) FROM df
-- !query schema
struct<listagg(col1, NULL) WITHIN GROUP (ORDER BY col2 ASC NULLS FIRST):string>
-- !query output
aabb


-- !query
WITH t(col) AS (SELECT listagg(col1) WITHIN GROUP (ORDER BY col2 DESC) FROM df) SELECT (col == 'baba') || (col == 'bbaa') FROM t
-- !query schema
struct<concat((col = baba), (col = bbaa)):string>
-- !query output
truefalse


-- !query
WITH t(col) AS (SELECT listagg(col1, '|') WITHIN GROUP (ORDER BY col2 DESC) FROM df) SELECT (col == 'b|a|b|a') || (col == 'b|b|a|a') FROM t
-- !query schema
struct<concat((col = b|a|b|a), (col = b|b|a|a)):string>
-- !query output
truefalse


-- !query
SELECT listagg(col1, '|') WITHIN GROUP (ORDER BY col2 DESC) FROM df
-- !query schema
struct<listagg(col1, |) WITHIN GROUP (ORDER BY col2 DESC NULLS LAST):string>
-- !query output
b|a|b|a


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col2 DESC, col1 ASC) FROM df
-- !query schema
struct<listagg(col1, NULL) WITHIN GROUP (ORDER BY col2 DESC NULLS LAST, col1 ASC NULLS FIRST):string>
-- !query output
baba


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col2 DESC, col1 DESC) FROM df
-- !query schema
struct<listagg(col1, NULL) WITHIN GROUP (ORDER BY col2 DESC NULLS LAST, col1 DESC NULLS LAST):string>
-- !query output
bbaa


-- !query
SELECT listagg(c1) FROM (VALUES (X'DEAD'), (X'BEEF')) AS t(c1)
-- !query schema
struct<listagg(c1, NULL):binary>
-- !query output
DEADBEEF


-- !query
SELECT listagg(c1, NULL) FROM (VALUES (X'DEAD'), (X'BEEF')) AS t(c1)
-- !query schema
struct<listagg(c1, NULL):binary>
-- !query output
DEADBEEF


-- !query
SELECT listagg(c1, X'42') FROM (VALUES (X'DEAD'), (X'BEEF')) AS t(c1)
-- !query schema
struct<listagg(c1, X'42'):binary>
-- !query output
DEAD42BEEF


-- !query
SELECT listagg(col1), listagg(col2, ',') FROM df2
-- !query schema
struct<listagg(col1, NULL):string,listagg(col2, ,):string>
-- !query output
123	true,false,false


-- !query
SELECT listagg(c1) FROM (VALUES (ARRAY('a', 'b'))) AS t(c1)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"c1\"",
    "inputType" : "\"ARRAY<STRING>\"",
    "paramIndex" : "first",
    "requiredType" : "(\"STRING\" or \"BINARY\")",
    "sqlExpr" : "\"listagg(c1, NULL)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 18,
    "fragment" : "listagg(c1)"
  } ]
}


-- !query
SELECT listagg(c1, ', ') FROM (VALUES (X'DEAD'), (X'BEEF')) AS t(c1)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.DATA_DIFF_TYPES",
  "sqlState" : "42K09",
  "messageParameters" : {
    "dataType" : "(\"BINARY\" or \"STRING\")",
    "functionName" : "`listagg`",
    "sqlExpr" : "\"listagg(c1, , )\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 24,
    "fragment" : "listagg(c1, ', ')"
  } ]
}


-- !query
SELECT listagg(col2, col1) FROM df GROUP BY col1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.NON_FOLDABLE_INPUT",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputExpr" : "\"col1\"",
    "inputName" : "`delimiter`",
    "inputType" : "\"STRING\"",
    "sqlExpr" : "\"listagg(col2, col1)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 26,
    "fragment" : "listagg(col2, col1)"
  } ]
}


-- !query
SELECT listagg(col1) OVER (ORDER BY col1) FROM df
-- !query schema
struct<listagg(col1, NULL) OVER (ORDER BY col1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):string>
-- !query output
NULL
aa
aa
aabb
aabb


-- !query
SELECT listagg(col1) WITHIN GROUP (ORDER BY col1) OVER (ORDER BY col1) FROM df
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_WINDOW_SPEC_FOR_AGGREGATION_FUNC",
  "sqlState" : "42601",
  "messageParameters" : {
    "aggFunc" : "\"listagg(col1, NULL, col1 ASC NULLS FIRST)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 70,
    "fragment" : "listagg(col1) WITHIN GROUP (ORDER BY col1) OVER (ORDER BY col1)"
  } ]
}


-- !query
SELECT string_agg(col1) WITHIN GROUP (ORDER BY col1) OVER (ORDER BY col1) FROM df
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_WINDOW_SPEC_FOR_AGGREGATION_FUNC",
  "sqlState" : "42601",
  "messageParameters" : {
    "aggFunc" : "\"listagg(col1, NULL, col1 ASC NULLS FIRST)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 73,
    "fragment" : "string_agg(col1) WITHIN GROUP (ORDER BY col1) OVER (ORDER BY col1)"
  } ]
}


-- !query
SELECT listagg(DISTINCT col1) OVER (ORDER BY col1) FROM df
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DISTINCT_WINDOW_FUNCTION_UNSUPPORTED",
  "sqlState" : "0A000",
  "messageParameters" : {
    "windowExpr" : "\"listagg(DISTINCT col1, NULL) OVER (ORDER BY col1 ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 50,
    "fragment" : "listagg(DISTINCT col1) OVER (ORDER BY col1)"
  } ]
}


-- !query
SELECT listagg(DISTINCT col1) WITHIN GROUP (ORDER BY col2) FROM df
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_WITHIN_GROUP_EXPRESSION.MISMATCH_WITH_DISTINCT_INPUT",
  "sqlState" : "42K0K",
  "messageParameters" : {
    "funcArg" : "\"col1\"",
    "funcName" : "`listagg`",
    "orderingExpr" : "\"col2\""
  }
}


-- !query
SELECT listagg(DISTINCT col1) WITHIN GROUP (ORDER BY col1, col2) FROM df
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INVALID_WITHIN_GROUP_EXPRESSION.MISMATCH_WITH_DISTINCT_INPUT",
  "sqlState" : "42K0K",
  "messageParameters" : {
    "funcArg" : "\"col1\"",
    "funcName" : "`listagg`",
    "orderingExpr" : "\"col1\", \"col2\""
  }
}
