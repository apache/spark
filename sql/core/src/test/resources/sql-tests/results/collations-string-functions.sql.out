-- Automatically generated by SQLQueryTestSuite
-- !query
create table t1(s string, utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Spark', 'Spark', 'SQL')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaAAaA', 'aaAaAAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaAAaA', 'aaAaaAaAaaAaaAaAaaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('bbAbaAbA', 'bbAbAAbA', 'a')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'İo', 'İo')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'İo', 'İo ')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'İo ', 'İo')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'İo', 'i̇o')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Hello, world! Nice day.', 'Hello, world! Nice day.', 'Hello, world! Nice day.')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Something else. Nothing here.', 'Something else. Nothing here.', 'Something else. Nothing here.')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('kitten', 'kitten', 'sitTing')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('abc', 'abc', 'abc')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('abcdcba', 'abcdcba', 'aBcDCbA')
-- !query schema
struct<>
-- !query output



-- !query
create table t2(ascii long) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t2 values (97)
-- !query schema
struct<>
-- !query output



-- !query
insert into t2 values (66)
-- !query schema
struct<>
-- !query output



-- !query
create table t3(format string collate utf8_binary, utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t3 values ('%s%s', 'abCdE', 'abCdE')
-- !query schema
struct<>
-- !query output



-- !query
select concat_ws(' ', utf8_lcase, utf8_lcase) from t1
-- !query schema
struct<concat_ws(' ' collate UTF8_LCASE, utf8_lcase, utf8_lcase):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day. Hello, world! Nice day.
SQL SQL
Something else. Nothing here. Something else. Nothing here.
a a
aBcDCbA aBcDCbA
aaAaAAaA aaAaAAaA
aaAaaAaA aaAaaAaA
aaAaaAaAaaAaaAaAaaAaaAaA aaAaaAaAaaAaaAaAaaAaaAaA
abc abc
efd2 efd2
i̇o i̇o
sitTing sitTing
İo  İo 
İo İo
İo İo


-- !query
select concat_ws(' ', utf8_binary, utf8_lcase) from t1
-- !query schema
struct<concat_ws(' ' collate null, utf8_binary, utf8_lcase):string collate null>
-- !query output
Hello, world! Nice day. Hello, world! Nice day.
Something else. Nothing here. Something else. Nothing here.
Spark SQL
aaAaAAaA aaAaAAaA
aaAaAAaA aaAaaAaA
aaAaAAaA aaAaaAaAaaAaaAaAaaAaaAaA
abc abc
abcdcba aBcDCbA
bbAbAAbA a
efd2 efd2
kitten sitTing
İo  İo
İo i̇o
İo İo
İo İo


-- !query
select concat_ws(' ' collate utf8_binary, utf8_binary, 'SQL' collate utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select concat_ws(' ' collate utf8_lcase, utf8_binary, 'SQL' collate utf8_lcase) from t1
-- !query schema
struct<concat_ws(collate( , utf8_lcase), utf8_binary, collate(SQL, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day. SQL
Something else. Nothing here. SQL
Spark SQL
aaAaAAaA SQL
aaAaAAaA SQL
aaAaAAaA SQL
abc SQL
abcdcba SQL
bbAbAAbA SQL
efd2 SQL
kitten SQL
İo  SQL
İo SQL
İo SQL
İo SQL


-- !query
select concat_ws(',', utf8_lcase, 'word'), concat_ws(',', utf8_binary, 'word') from t1
-- !query schema
struct<concat_ws(',' collate UTF8_LCASE, utf8_lcase, 'word' collate UTF8_LCASE):string collate UTF8_LCASE,concat_ws(,, utf8_binary, word):string>
-- !query output
Hello, world! Nice day.,word	Hello, world! Nice day.,word
SQL,word	Spark,word
Something else. Nothing here.,word	Something else. Nothing here.,word
a,word	bbAbAAbA,word
aBcDCbA,word	abcdcba,word
aaAaAAaA,word	aaAaAAaA,word
aaAaaAaA,word	aaAaAAaA,word
aaAaaAaAaaAaaAaAaaAaaAaA,word	aaAaAAaA,word
abc,word	abc,word
efd2,word	efd2,word
i̇o,word	İo,word
sitTing,word	kitten,word
İo ,word	İo,word
İo,word	İo ,word
İo,word	İo,word


-- !query
select concat_ws(',', utf8_lcase, 'word' collate utf8_binary), concat_ws(',', utf8_binary, 'word' collate utf8_lcase) from t1
-- !query schema
struct<concat_ws(,, utf8_lcase, collate(word, utf8_binary)):string,concat_ws(',' collate UTF8_LCASE, utf8_binary, collate(word, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.,word	Hello, world! Nice day.,word
SQL,word	Spark,word
Something else. Nothing here.,word	Something else. Nothing here.,word
a,word	bbAbAAbA,word
aBcDCbA,word	abcdcba,word
aaAaAAaA,word	aaAaAAaA,word
aaAaaAaA,word	aaAaAAaA,word
aaAaaAaAaaAaaAaAaaAaaAaA,word	aaAaAAaA,word
abc,word	abc,word
efd2,word	efd2,word
i̇o,word	İo,word
sitTing,word	kitten,word
İo ,word	İo,word
İo,word	İo ,word
İo,word	İo,word


-- !query
select split_part(utf8_binary, utf8_lcase, 3) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INDETERMINATE_COLLATION",
  "sqlState" : "42P22"
}


-- !query
select split_part(s, utf8_binary, 1) from t1
-- !query schema
struct<split_part(s, utf8_binary, 1):string>
-- !query output













bbAbaAbA
İo


-- !query
select split_part(utf8_binary collate utf8_binary, s collate utf8_lcase, 1) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select split_part(utf8_binary, utf8_lcase collate utf8_binary, 2) from t1
-- !query schema
struct<split_part(utf8_binary, collate(utf8_lcase, utf8_binary), 2):string>
-- !query output



-- !query
select split_part(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase, 2) from t1
-- !query schema
struct<split_part(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase), 2):string collate UTF8_LCASE>
-- !query output













 
b


-- !query
select split_part(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 2) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"split_part(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai), 2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 83,
    "fragment" : "split_part(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 2)"
  } ]
}


-- !query
select split_part(utf8_binary, 'a', 3), split_part(utf8_lcase, 'a', 3) from t1
-- !query schema
struct<split_part(utf8_binary, a, 3):string,split_part(utf8_lcase, 'a' collate UTF8_LCASE, 3):string collate UTF8_LCASE>
-- !query output
	
	
	
	
	
	
	
	
	
	
	
	
A	
A	
A


-- !query
select split_part(utf8_binary, 'a' collate utf8_lcase, 3), split_part(utf8_lcase, 'a' collate utf8_binary, 3) from t1
-- !query schema
struct<split_part(utf8_binary, collate(a, utf8_lcase), 3):string collate UTF8_LCASE,split_part(utf8_lcase, collate(a, utf8_binary), 3):string>
-- !query output
	
	
	
	
	
	
	
	
	
	
	
	
	A
	A
	A


-- !query
select split_part(utf8_binary, 'a ' collate utf8_lcase_rtrim, 3), split_part(utf8_lcase, 'a' collate utf8_binary, 3) from t1
-- !query schema
struct<split_part(utf8_binary, collate(a , utf8_lcase_rtrim), 3):string collate UTF8_LCASE_RTRIM,split_part(utf8_lcase, collate(a, utf8_binary), 3):string>
-- !query output
	
	
	
	
	
	
	
	
	
	
	
	
	A
	A
	A


-- !query
select contains(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"contains(utf8_binary, utf8_lcase)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 40,
    "fragment" : "contains(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select contains(s, utf8_binary) from t1
-- !query schema
struct<contains(s, utf8_binary):boolean>
-- !query output
false
false
true
true
true
true
true
true
true
true
true
true
true
true
true


-- !query
select contains(utf8_binary collate utf8_binary, s collate utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select contains(utf8_binary, utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<contains(utf8_binary, collate(utf8_lcase, utf8_binary)):boolean>
-- !query output
false
false
false
false
false
false
false
false
true
true
true
true
true
true
true


-- !query
select contains(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t1
-- !query schema
struct<contains(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase)):boolean>
-- !query output
false
false
false
false
true
true
true
true
true
true
true
true
true
true
true


-- !query
select contains(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"contains(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 78,
    "fragment" : "contains(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai)"
  } ]
}


-- !query
select contains(utf8_binary, 'a'), contains(utf8_lcase, 'a') from t1
-- !query schema
struct<contains(utf8_binary, a):boolean,contains(utf8_lcase, 'a' collate UTF8_LCASE):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	true
true	false
true	true
true	true
true	true
true	true
true	true
true	true


-- !query
select contains(utf8_binary, 'AaAA' collate utf8_lcase), contains(utf8_lcase, 'AAa' collate utf8_binary) from t1
-- !query schema
struct<contains(utf8_binary, collate(AaAA, utf8_lcase)):boolean,contains(utf8_lcase, collate(AAa, utf8_binary)):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
true	false
true	false
true	true


-- !query
select contains(utf8_binary, 'AaAA ' collate utf8_lcase_rtrim), contains(utf8_lcase, 'AAa ' collate utf8_binary_rtrim) from t1
-- !query schema
struct<contains(utf8_binary, collate(AaAA , utf8_lcase_rtrim)):boolean,contains(utf8_lcase, collate(AAa , utf8_binary_rtrim)):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
true	false
true	false
true	true


-- !query
select substring_index(utf8_binary, utf8_lcase, 2) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"substring_index(utf8_binary, utf8_lcase, 2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 50,
    "fragment" : "substring_index(utf8_binary, utf8_lcase, 2)"
  } ]
}


-- !query
select substring_index(s, utf8_binary,1) from t1
-- !query schema
struct<substring_index(s, utf8_binary, 1):string>
-- !query output













bbAbaAbA
İo


-- !query
select substring_index(utf8_binary collate utf8_binary, s collate utf8_lcase, 3) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select substring_index(utf8_binary, utf8_lcase collate utf8_binary, 2) from t1
-- !query schema
struct<substring_index(utf8_binary, collate(utf8_lcase, utf8_binary), 2):string>
-- !query output
Hello, world! Nice day.
Something else. Nothing here.
Spark
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAbAAbA
efd2
kitten
İo
İo
İo
İo


-- !query
select substring_index(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase, 2) from t1
-- !query schema
struct<substring_index(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase), 2):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.
Something else. Nothing here.
Spark
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAb
efd2
kitten
İo
İo
İo
İo


-- !query
select substring_index(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 2) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"substring_index(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai), 2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 88,
    "fragment" : "substring_index(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 2)"
  } ]
}


-- !query
select substring_index(utf8_binary, 'a', 2), substring_index(utf8_lcase, 'a', 2) from t1
-- !query schema
struct<substring_index(utf8_binary, a, 2):string,substring_index(utf8_lcase, 'a' collate UTF8_LCASE, 2):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
a	a
a	a
a	a
abc	abc
abcdcb	aBcDCb
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select substring_index(utf8_binary, 'AaAA' collate utf8_lcase, 2), substring_index(utf8_lcase, 'AAa' collate utf8_binary, 2) from t1
-- !query schema
struct<substring_index(utf8_binary, collate(AaAA, utf8_lcase), 2):string collate UTF8_LCASE,substring_index(utf8_lcase, collate(AAa, utf8_binary), 2):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
a	aaAaAAaA
a	aaAaaAaA
a	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select substring_index(utf8_binary, 'AaAA ' collate utf8_lcase_rtrim, 2), substring_index(utf8_lcase, 'AAa' collate utf8_binary, 2) from t1
-- !query schema
struct<substring_index(utf8_binary, collate(AaAA , utf8_lcase_rtrim), 2):string collate UTF8_LCASE_RTRIM,substring_index(utf8_lcase, collate(AAa, utf8_binary), 2):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
a	aaAaAAaA
a	aaAaaAaA
a	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select instr(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"instr(utf8_binary, utf8_lcase)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 37,
    "fragment" : "instr(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select instr(s, utf8_binary) from t1
-- !query schema
struct<instr(s, utf8_binary):int>
-- !query output
0
0
1
1
1
1
1
1
1
1
1
1
1
1
1


-- !query
select instr(utf8_binary collate utf8_binary, s collate utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select instr(utf8_binary, utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<instr(utf8_binary, collate(utf8_lcase, utf8_binary)):int>
-- !query output
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1


-- !query
select instr(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t1
-- !query schema
struct<instr(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase)):int>
-- !query output
0
0
0
0
1
1
1
1
1
1
1
1
1
1
3


-- !query
select instr(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"instr(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 75,
    "fragment" : "instr(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai)"
  } ]
}


-- !query
select instr(utf8_binary, 'a'), instr(utf8_lcase, 'a') from t1
-- !query schema
struct<instr(utf8_binary, a):int,instr(utf8_lcase, 'a' collate UTF8_LCASE):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	1
1	1
1	1
1	1
1	1
1	1
21	21
3	0


-- !query
select instr(utf8_binary, 'AaAA' collate utf8_lcase), instr(utf8_lcase, 'AAa' collate utf8_binary) from t1
-- !query schema
struct<instr(utf8_binary, collate(AaAA, utf8_lcase)):int,instr(utf8_lcase, collate(AAa, utf8_binary)):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
1	0
1	0
1	5


-- !query
select find_in_set(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"find_in_set(utf8_binary, utf8_lcase)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 43,
    "fragment" : "find_in_set(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select find_in_set(s, utf8_binary) from t1
-- !query schema
struct<find_in_set(s, utf8_binary):int>
-- !query output
0
0
0
1
1
1
1
1
1
1
1
1
1
1
1


-- !query
select find_in_set(utf8_binary collate utf8_binary, s collate utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select find_in_set(utf8_binary, utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<find_in_set(utf8_binary, collate(utf8_lcase, utf8_binary)):int>
-- !query output
0
0
0
0
0
0
0
0
0
0
1
1
1
1
1


-- !query
select find_in_set(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t1
-- !query schema
struct<find_in_set(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase)):int>
-- !query output
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1


-- !query
select find_in_set(utf8_binary, 'aaAaaAaA,i̇o'), find_in_set(utf8_lcase, 'aaAaaAaA,i̇o') from t1
-- !query schema
struct<find_in_set(utf8_binary, aaAaaAaA,i̇o):int,find_in_set(utf8_lcase, 'aaAaaAaA,i̇o' collate UTF8_LCASE):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	1
0	1
0	2
0	2
0	2


-- !query
select find_in_set(utf8_binary, 'aaAaaAaA,i̇o' collate utf8_lcase), find_in_set(utf8_lcase, 'aaAaaAaA,i̇o' collate utf8_binary) from t1
-- !query schema
struct<find_in_set(utf8_binary, collate(aaAaaAaA,i̇o, utf8_lcase)):int,find_in_set(utf8_lcase, collate(aaAaaAaA,i̇o, utf8_binary)):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
1	0
1	0
1	1
2	0
2	0
2	2


-- !query
select find_in_set(utf8_binary, 'aaAaaAaA,i̇o ' collate utf8_lcase_rtrim), find_in_set(utf8_lcase, 'aaAaaAaA,i̇o' collate utf8_binary) from t1
-- !query schema
struct<find_in_set(utf8_binary, collate(aaAaaAaA,i̇o , utf8_lcase_rtrim)):int,find_in_set(utf8_lcase, collate(aaAaaAaA,i̇o, utf8_binary)):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
1	0
1	0
1	1
2	0
2	0
2	0
2	2


-- !query
select startswith(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"startswith(utf8_binary, utf8_lcase)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 42,
    "fragment" : "startswith(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select startswith(s, utf8_binary) from t1
-- !query schema
struct<startswith(s, utf8_binary):boolean>
-- !query output
false
false
true
true
true
true
true
true
true
true
true
true
true
true
true


-- !query
select startswith(utf8_binary collate utf8_binary, s collate utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select startswith(utf8_binary, utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<startswith(utf8_binary, collate(utf8_lcase, utf8_binary)):boolean>
-- !query output
false
false
false
false
false
false
false
false
true
true
true
true
true
true
true


-- !query
select startswith(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t1
-- !query schema
struct<startswith(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase)):boolean>
-- !query output
false
false
false
false
false
true
true
true
true
true
true
true
true
true
true


-- !query
select startswith(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"startswith(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 80,
    "fragment" : "startswith(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai)"
  } ]
}


-- !query
select startswith(utf8_binary, 'aaAaaAaA'), startswith(utf8_lcase, 'aaAaaAaA') from t1
-- !query schema
struct<startswith(utf8_binary, aaAaaAaA):boolean,startswith(utf8_lcase, 'aaAaaAaA' collate UTF8_LCASE):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	true
false	true
false	true


-- !query
select startswith(utf8_binary, 'aaAaaAaA' collate utf8_lcase), startswith(utf8_lcase, 'aaAaaAaA' collate utf8_binary) from t1
-- !query schema
struct<startswith(utf8_binary, collate(aaAaaAaA, utf8_lcase)):boolean,startswith(utf8_lcase, collate(aaAaaAaA, utf8_binary)):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
true	false
true	true
true	true


-- !query
select startswith(utf8_binary, 'aaAaaAaA ' collate utf8_lcase_rtrim), startswith(utf8_lcase, 'aaAaaAaA' collate utf8_binary) from t1
-- !query schema
struct<startswith(utf8_binary, collate(aaAaaAaA , utf8_lcase_rtrim)):boolean,startswith(utf8_lcase, collate(aaAaaAaA, utf8_binary)):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
true	false
true	true
true	true


-- !query
select translate(utf8_lcase, utf8_lcase, '12345') from t1
-- !query schema
struct<translate(utf8_lcase, utf8_lcase, '12345' collate UTF8_LCASE):string collate UTF8_LCASE>
-- !query output
1
11111111
11111111
111111111111111111111111
12
12
123
123
123
123
12332
12335532
1234
1234321
123454142544


-- !query
select translate(utf8_binary, utf8_lcase, '12345') from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"translate(utf8_binary, utf8_lcase, 12345)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 50,
    "fragment" : "translate(utf8_binary, utf8_lcase, '12345')"
  } ]
}


-- !query
select translate(utf8_binary, 'aBc' collate utf8_lcase, '12345' collate utf8_binary) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING COLLATE UTF8_LCASE\", \"STRING\""
  }
}


-- !query
select translate(utf8_binary, 'SQL' collate utf8_lcase, '12345' collate utf8_lcase) from t1
-- !query schema
struct<translate(utf8_binary, collate(SQL, utf8_lcase), collate(12345, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
1omething e31e. Nothing here.
1park
He33o, wor3d! Nice day.
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAbAAbA
efd2
kitten
İo
İo
İo
İo


-- !query
select translate(utf8_binary, 'SQL' collate unicode_ai, '12345' collate unicode_ai) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"utf8_binary\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"translate(utf8_binary, collate(SQL, unicode_ai), collate(12345, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 83,
    "fragment" : "translate(utf8_binary, 'SQL' collate unicode_ai, '12345' collate unicode_ai)"
  } ]
}


-- !query
select translate(utf8_lcase, 'aaAaaAaA', '12345'), translate(utf8_binary, 'aaAaaAaA', '12345') from t1
-- !query schema
struct<translate(utf8_lcase, 'aaAaaAaA' collate UTF8_LCASE, '12345' collate UTF8_LCASE):string collate UTF8_LCASE,translate(utf8_binary, aaAaaAaA, 12345):string>
-- !query output
1	bb3b33b3
11111111	11313313
11111111	11313313
111111111111111111111111	11313313
1BcDCb1	1bcdcb1
1bc	1bc
Hello, world! Nice d1y.	Hello, world! Nice d1y.
SQL	Sp1rk
Something else. Nothing here.	Something else. Nothing here.
efd2	efd2
i̇o	İo
sitTing	kitten
İo	İo
İo	İo 
İo 	İo


-- !query
select translate(utf8_lcase, 'aBc' collate utf8_binary, '12345'), translate(utf8_binary, 'aBc' collate utf8_lcase, '12345') from t1
-- !query schema
struct<translate(utf8_lcase, collate(aBc, utf8_binary), 12345):string,translate(utf8_binary, collate(aBc, utf8_lcase), '12345' collate UTF8_LCASE):string collate UTF8_LCASE>
-- !query output
1	22121121
11A11A1A	11111111
11A11A1A11A11A1A11A11A1A	11111111
11A1AA1A	11111111
123DCbA	123d321
1b3	123
Hello, world! Ni3e d1y.	Hello, world! Ni3e d1y.
SQL	Sp1rk
Something else. Nothing here.	Something else. Nothing here.
efd2	efd2
i̇o	İo
sitTing	kitten
İo	İo
İo	İo 
İo 	İo


-- !query
select translate(utf8_lcase, 'aBc ' collate utf8_binary_rtrim, '12345'), translate(utf8_binary, 'aBc' collate utf8_lcase, '12345') from t1
-- !query schema
struct<translate(utf8_lcase, collate(aBc , utf8_binary_rtrim), '12345' collate UTF8_BINARY_RTRIM):string collate UTF8_BINARY_RTRIM,translate(utf8_binary, collate(aBc, utf8_lcase), '12345' collate UTF8_LCASE):string collate UTF8_LCASE>
-- !query output
1	22121121
11A11A1A	11111111
11A11A1A11A11A1A11A11A1A	11111111
11A1AA1A	11111111
123DCbA	123d321
1b3	123
Hello,4world!4Ni3e4d1y.	Hello, world! Ni3e d1y.
SQL	Sp1rk
Something4else.4Nothing4here.	Something else. Nothing here.
efd2	efd2
i̇o	İo
sitTing	kitten
İo	İo
İo	İo 
İo4	İo


-- !query
select replace(utf8_binary, utf8_lcase, 'abc') from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"replace(utf8_binary, utf8_lcase, abc)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 46,
    "fragment" : "replace(utf8_binary, utf8_lcase, 'abc')"
  } ]
}


-- !query
select replace(s, utf8_binary, 'abc') from t1
-- !query schema
struct<replace(s, utf8_binary, abc):string>
-- !query output
abc
abc
abc
abc
abc
abc
abc
abc
abc
abc
abc
abc
abc
bbAbaAbA
İo


-- !query
select replace(utf8_binary collate utf8_binary, s collate utf8_lcase, 'abc') from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select replace(utf8_binary, utf8_lcase collate utf8_binary, 'abc') from t1
-- !query schema
struct<replace(utf8_binary, collate(utf8_lcase, utf8_binary), abc):string>
-- !query output
Spark
aaAaAAaA
aaAaAAaA
abc
abc
abc
abc
abc
abc
abc 
abcdcba
bbAbAAbA
kitten
İo
İo


-- !query
select replace(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase, 'abc') from t1
-- !query schema
struct<replace(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase), 'abc' collate UTF8_LCASE):string collate UTF8_LCASE>
-- !query output
Spark
aaAaAAaA
abc
abc
abc
abc
abc
abc
abc
abc
abc
abc 
bbabcbabcabcbabc
kitten
İo


-- !query
select replace(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 'abc') from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"replace(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai), 'abc' collate UNICODE_AI)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 84,
    "fragment" : "replace(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 'abc')"
  } ]
}


-- !query
select replace(utf8_binary, 'aaAaaAaA', 'abc'), replace(utf8_lcase, 'aaAaaAaA', 'abc') from t1
-- !query schema
struct<replace(utf8_binary, aaAaaAaA, abc):string,replace(utf8_lcase, 'aaAaaAaA' collate UTF8_LCASE, 'abc' collate UTF8_LCASE):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	abc
aaAaAAaA	abc
aaAaAAaA	abcabcabc
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select replace(utf8_binary, 'aaAaaAaA' collate utf8_lcase, 'abc'), replace(utf8_lcase, 'aaAaaAaA' collate utf8_binary, 'abc') from t1
-- !query schema
struct<replace(utf8_binary, collate(aaAaaAaA, utf8_lcase), 'abc' collate UTF8_LCASE):string collate UTF8_LCASE,replace(utf8_lcase, collate(aaAaaAaA, utf8_binary), abc):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
abc	aaAaAAaA
abc	abc
abc	abc
abc	abcabcabc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select replace(utf8_binary, 'aaAaaAaA ' collate utf8_lcase_rtrim, 'abc'), replace(utf8_lcase, 'aaAaaAaA' collate utf8_binary, 'abc') from t1
-- !query schema
struct<replace(utf8_binary, collate(aaAaaAaA , utf8_lcase_rtrim), 'abc' collate UTF8_LCASE_RTRIM):string collate UTF8_LCASE_RTRIM,replace(utf8_lcase, collate(aaAaaAaA, utf8_binary), abc):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	abc
aaAaAAaA	abcabcabc
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select endswith(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"endswith(utf8_binary, utf8_lcase)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 40,
    "fragment" : "endswith(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select endswith(s, utf8_binary) from t1
-- !query schema
struct<endswith(s, utf8_binary):boolean>
-- !query output
false
false
true
true
true
true
true
true
true
true
true
true
true
true
true


-- !query
select endswith(utf8_binary collate utf8_binary, s collate utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select endswith(utf8_binary, utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<endswith(utf8_binary, collate(utf8_lcase, utf8_binary)):boolean>
-- !query output
false
false
false
false
false
false
false
false
false
true
true
true
true
true
true


-- !query
select endswith(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t1
-- !query schema
struct<endswith(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase)):boolean>
-- !query output
false
false
false
false
false
true
true
true
true
true
true
true
true
true
true


-- !query
select endswith(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"endswith(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 78,
    "fragment" : "endswith(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai)"
  } ]
}


-- !query
select endswith(utf8_binary, 'aaAaaAaA'), endswith(utf8_lcase, 'aaAaaAaA') from t1
-- !query schema
struct<endswith(utf8_binary, aaAaaAaA):boolean,endswith(utf8_lcase, 'aaAaaAaA' collate UTF8_LCASE):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	true
false	true
false	true


-- !query
select endswith(utf8_binary, 'aaAaaAaA' collate utf8_lcase), endswith(utf8_lcase, 'aaAaaAaA' collate utf8_binary) from t1
-- !query schema
struct<endswith(utf8_binary, collate(aaAaaAaA, utf8_lcase)):boolean,endswith(utf8_lcase, collate(aaAaaAaA, utf8_binary)):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
true	false
true	true
true	true


-- !query
select endswith(utf8_binary, 'aaAaaAaA ' collate utf8_lcase_rtrim), endswith(utf8_lcase, 'aaAaaAaA' collate utf8_binary) from t1
-- !query schema
struct<endswith(utf8_binary, collate(aaAaaAaA , utf8_lcase_rtrim)):boolean,endswith(utf8_lcase, collate(aaAaaAaA, utf8_binary)):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
true	false
true	true
true	true


-- !query
select repeat(utf8_binary, 3), repeat(utf8_lcase, 2) from t1
-- !query schema
struct<repeat(utf8_binary, 3):string,repeat(utf8_lcase, 2):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.Hello, world! Nice day.Hello, world! Nice day.	Hello, world! Nice day.Hello, world! Nice day.
Something else. Nothing here.Something else. Nothing here.Something else. Nothing here.	Something else. Nothing here.Something else. Nothing here.
SparkSparkSpark	SQLSQL
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaAAaAaaAaAAaA
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaaAaAaaAaaAaA
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaAaaAaaAaAaaAaaAaAaaAaaAaA
abcabcabc	abcabc
abcdcbaabcdcbaabcdcba	aBcDCbAaBcDCbA
bbAbAAbAbbAbAAbAbbAbAAbA	aa
efd2efd2efd2	efd2efd2
kittenkittenkitten	sitTingsitTing
İo İo İo 	İoİo
İoİoİo	i̇oi̇o
İoİoİo	İo İo 
İoİoİo	İoİo


-- !query
select repeat(utf8_binary collate utf8_lcase, 3), repeat(utf8_lcase collate utf8_binary, 2) from t1
-- !query schema
struct<repeat(collate(utf8_binary, utf8_lcase), 3):string collate UTF8_LCASE,repeat(collate(utf8_lcase, utf8_binary), 2):string>
-- !query output
Hello, world! Nice day.Hello, world! Nice day.Hello, world! Nice day.	Hello, world! Nice day.Hello, world! Nice day.
Something else. Nothing here.Something else. Nothing here.Something else. Nothing here.	Something else. Nothing here.Something else. Nothing here.
SparkSparkSpark	SQLSQL
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaAAaAaaAaAAaA
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaaAaAaaAaaAaA
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaAaaAaaAaAaaAaaAaAaaAaaAaA
abcabcabc	abcabc
abcdcbaabcdcbaabcdcba	aBcDCbAaBcDCbA
bbAbAAbAbbAbAAbAbbAbAAbA	aa
efd2efd2efd2	efd2efd2
kittenkittenkitten	sitTingsitTing
İo İo İo 	İoİo
İoİoİo	i̇oi̇o
İoİoİo	İo İo 
İoİoİo	İoİo


-- !query
select chr(ascii) from t2
-- !query schema
struct<chr(ascii):string>
-- !query output
B
a


-- !query
select sentences(utf8_binary), sentences(utf8_lcase) from t1
-- !query schema
struct<sentences(utf8_binary, , ):array<array<string>>,sentences(utf8_lcase, , ):array<array<string collate UTF8_LCASE>>>
-- !query output
[["Hello","world"],["Nice","day"]]	[["Hello","world"],["Nice","day"]]
[["Something","else"],["Nothing","here"]]	[["Something","else"],["Nothing","here"]]
[["Spark"]]	[["SQL"]]
[["aaAaAAaA"]]	[["aaAaAAaA"]]
[["aaAaAAaA"]]	[["aaAaaAaA"]]
[["aaAaAAaA"]]	[["aaAaaAaAaaAaaAaAaaAaaAaA"]]
[["abc"]]	[["abc"]]
[["abcdcba"]]	[["aBcDCbA"]]
[["bbAbAAbA"]]	[["a"]]
[["efd2"]]	[["efd2"]]
[["kitten"]]	[["sitTing"]]
[["İo"]]	[["i̇o"]]
[["İo"]]	[["İo"]]
[["İo"]]	[["İo"]]
[["İo"]]	[["İo"]]


-- !query
select sentences(utf8_binary collate utf8_lcase), sentences(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<sentences(collate(utf8_binary, utf8_lcase), , ):array<array<string collate UTF8_LCASE>>,sentences(collate(utf8_lcase, utf8_binary), , ):array<array<string>>>
-- !query output
[["Hello","world"],["Nice","day"]]	[["Hello","world"],["Nice","day"]]
[["Something","else"],["Nothing","here"]]	[["Something","else"],["Nothing","here"]]
[["Spark"]]	[["SQL"]]
[["aaAaAAaA"]]	[["aaAaAAaA"]]
[["aaAaAAaA"]]	[["aaAaaAaA"]]
[["aaAaAAaA"]]	[["aaAaaAaAaaAaaAaAaaAaaAaA"]]
[["abc"]]	[["abc"]]
[["abcdcba"]]	[["aBcDCbA"]]
[["bbAbAAbA"]]	[["a"]]
[["efd2"]]	[["efd2"]]
[["kitten"]]	[["sitTing"]]
[["İo"]]	[["i̇o"]]
[["İo"]]	[["İo"]]
[["İo"]]	[["İo"]]
[["İo"]]	[["İo"]]


-- !query
select upper(utf8_binary), upper(utf8_lcase) from t1
-- !query schema
struct<upper(utf8_binary):string,upper(utf8_lcase):string collate UTF8_LCASE>
-- !query output
AAAAAAAA	AAAAAAAA
AAAAAAAA	AAAAAAAA
AAAAAAAA	AAAAAAAAAAAAAAAAAAAAAAAA
ABC	ABC
ABCDCBA	ABCDCBA
BBABAABA	A
EFD2	EFD2
HELLO, WORLD! NICE DAY.	HELLO, WORLD! NICE DAY.
KITTEN	SITTING
SOMETHING ELSE. NOTHING HERE.	SOMETHING ELSE. NOTHING HERE.
SPARK	SQL
İO	İO
İO	İO
İO	İO 
İO 	İO


-- !query
select upper(utf8_binary collate utf8_lcase), upper(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<upper(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,upper(collate(utf8_lcase, utf8_binary)):string>
-- !query output
AAAAAAAA	AAAAAAAA
AAAAAAAA	AAAAAAAA
AAAAAAAA	AAAAAAAAAAAAAAAAAAAAAAAA
ABC	ABC
ABCDCBA	ABCDCBA
BBABAABA	A
EFD2	EFD2
HELLO, WORLD! NICE DAY.	HELLO, WORLD! NICE DAY.
KITTEN	SITTING
SOMETHING ELSE. NOTHING HERE.	SOMETHING ELSE. NOTHING HERE.
SPARK	SQL
İO	İO
İO	İO
İO	İO 
İO 	İO


-- !query
select lower(utf8_binary), lower(utf8_lcase) from t1
-- !query schema
struct<lower(utf8_binary):string,lower(utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaaaaaaa	aaaaaaaa
aaaaaaaa	aaaaaaaa
aaaaaaaa	aaaaaaaaaaaaaaaaaaaaaaaa
abc	abc
abcdcba	abcdcba
bbabaaba	a
efd2	efd2
hello, world! nice day.	hello, world! nice day.
i̇o	i̇o
i̇o	i̇o
i̇o	i̇o 
i̇o 	i̇o
kitten	sitting
something else. nothing here.	something else. nothing here.
spark	sql


-- !query
select lower(utf8_binary collate utf8_lcase), lower(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<lower(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,lower(collate(utf8_lcase, utf8_binary)):string>
-- !query output
aaaaaaaa	aaaaaaaa
aaaaaaaa	aaaaaaaa
aaaaaaaa	aaaaaaaaaaaaaaaaaaaaaaaa
abc	abc
abcdcba	abcdcba
bbabaaba	a
efd2	efd2
hello, world! nice day.	hello, world! nice day.
i̇o	i̇o
i̇o	i̇o
i̇o	i̇o 
i̇o 	i̇o
kitten	sitting
something else. nothing here.	something else. nothing here.
spark	sql


-- !query
select initcap(utf8_binary), initcap(utf8_lcase) from t1
-- !query schema
struct<initcap(utf8_binary):string,initcap(utf8_lcase):string collate UTF8_LCASE>
-- !query output
Aaaaaaaa	Aaaaaaaa
Aaaaaaaa	Aaaaaaaa
Aaaaaaaa	Aaaaaaaaaaaaaaaaaaaaaaaa
Abc	Abc
Abcdcba	Abcdcba
Bbabaaba	A
Efd2	Efd2
Hello, World! Nice Day.	Hello, World! Nice Day.
Kitten	Sitting
Something Else. Nothing Here.	Something Else. Nothing Here.
Spark	Sql
İo	İo
İo	İo
İo	İo 
İo 	İo


-- !query
select initcap(utf8_binary collate utf8_lcase), initcap(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<initcap(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,initcap(collate(utf8_lcase, utf8_binary)):string>
-- !query output
Aaaaaaaa	Aaaaaaaa
Aaaaaaaa	Aaaaaaaa
Aaaaaaaa	Aaaaaaaaaaaaaaaaaaaaaaaa
Abc	Abc
Abcdcba	Abcdcba
Bbabaaba	A
Efd2	Efd2
Hello, World! Nice Day.	Hello, World! Nice Day.
Kitten	Sitting
Something Else. Nothing Here.	Something Else. Nothing Here.
Spark	Sql
İo	İo
İo	İo
İo	İo 
İo 	İo


-- !query
select overlay(utf8_binary, utf8_lcase, 2) from t1
-- !query schema
struct<overlay(utf8_binary, utf8_lcase, 2, -1):string collate null>
-- !query output
HHello, world! Nice day.
SSQLk
SSomething else. Nothing here.
aaBcDCbA
aaaAaAAaA
aaaAaaAaA
aaaAaaAaAaaAaaAaAaaAaaAaA
aabc
baAbAAbA
eefd2
ksitTing
İi̇o
İİo
İİo
İİo


-- !query
select overlay(s, utf8_binary,1) from t1
-- !query schema
struct<overlay(s, utf8_binary, 1, -1):string>
-- !query output
Hello, world! Nice day.
Something else. Nothing here.
Spark
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAbAAbA
efd2
kitten
İo
İo
İo
İo


-- !query
select overlay(utf8_binary collate utf8_binary, s collate utf8_lcase, 3) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select overlay(utf8_binary, utf8_lcase collate utf8_binary, 2) from t1
-- !query schema
struct<overlay(utf8_binary, collate(utf8_lcase, utf8_binary), 2, -1):string>
-- !query output
HHello, world! Nice day.
SSQLk
SSomething else. Nothing here.
aaBcDCbA
aaaAaAAaA
aaaAaaAaA
aaaAaaAaAaaAaaAaAaaAaaAaA
aabc
baAbAAbA
eefd2
ksitTing
İi̇o
İİo
İİo
İİo


-- !query
select overlay(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase, 2) from t1
-- !query schema
struct<overlay(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase), 2, -1):string collate UTF8_LCASE>
-- !query output
HHello, world! Nice day.
SSQLk
SSomething else. Nothing here.
aaBcDCbA
aaaAaAAaA
aaaAaaAaA
aaaAaaAaAaaAaaAaAaaAaaAaA
aabc
baAbAAbA
eefd2
ksitTing
İi̇o
İİo
İİo
İİo


-- !query
select overlay(utf8_binary, 'a', 2), overlay(utf8_lcase, 'a', 2) from t1
-- !query schema
struct<overlay(utf8_binary, a, 2, -1):string,overlay(utf8_lcase, 'a' collate UTF8_LCASE, 2, -1):string collate UTF8_LCASE>
-- !query output
Hallo, world! Nice day.	Hallo, world! Nice day.
Saark	SaL
Samething else. Nothing here.	Samething else. Nothing here.
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
aac	aac
aacdcba	aacDCbA
baAbAAbA	aa
ead2	ead2
katten	satTing
İa	iao
İa	İa
İa	İa 
İa 	İa


-- !query
select overlay(utf8_binary, 'AaAA' collate utf8_lcase, 2), overlay(utf8_lcase, 'AAa' collate utf8_binary, 2) from t1
-- !query schema
struct<overlay(utf8_binary, collate(AaAA, utf8_lcase), 2, -1):string collate UTF8_LCASE,overlay(utf8_lcase, collate(AAa, utf8_binary), 2, -1):string>
-- !query output
HAaAA, world! Nice day.	HAAao, world! Nice day.
SAaAA	SAAa
SAaAAhing else. Nothing here.	SAAathing else. Nothing here.
aAaAA	aAAa
aAaAAAaA	aAAaAAaA
aAaAAAaA	aAAaaAaA
aAaAAAaA	aAAaaAaAaaAaaAaAaaAaaAaA
aAaAAba	aAAaCbA
bAaAAAbA	aAAa
eAaAA	eAAa
kAaAAn	sAAaing
İAaAA	iAAa
İAaAA	İAAa
İAaAA	İAAa
İAaAA	İAAa


-- !query
select format_string(format, utf8_binary, utf8_lcase) from t3
-- !query schema
struct<format_string(format, utf8_binary, utf8_lcase):string>
-- !query output
abCdEabCdE


-- !query
select format_string(format collate utf8_lcase, utf8_lcase, utf8_binary collate utf8_lcase, 3), format_string(format, utf8_lcase collate utf8_binary, utf8_binary) from t3
-- !query schema
struct<format_string(collate(format, utf8_lcase), utf8_lcase, collate(utf8_binary, utf8_lcase), 3):string collate UTF8_LCASE,format_string(format, collate(utf8_lcase, utf8_binary), utf8_binary):string>
-- !query output
abCdEabCdE	abCdEabCdE


-- !query
select format_string(format, utf8_binary, utf8_lcase) from t3
-- !query schema
struct<format_string(format, utf8_binary, utf8_lcase):string>
-- !query output
abCdEabCdE


-- !query
select length(utf8_binary), length(utf8_lcase) from t1
-- !query schema
struct<length(utf8_binary):int,length(utf8_lcase):int>
-- !query output
2	2
2	3
2	3
23	23
29	29
3	2
3	3
4	4
5	3
6	7
7	7
8	1
8	24
8	8
8	8


-- !query
select length(utf8_binary collate utf8_lcase), length(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<length(collate(utf8_binary, utf8_lcase)):int,length(collate(utf8_lcase, utf8_binary)):int>
-- !query output
2	2
2	3
2	3
23	23
29	29
3	2
3	3
4	4
5	3
6	7
7	7
8	1
8	24
8	8
8	8


-- !query
select bit_length(utf8_binary), bit_length(utf8_lcase) from t1
-- !query schema
struct<bit_length(utf8_binary):int,bit_length(utf8_lcase):int>
-- !query output
184	184
232	232
24	24
24	24
24	32
24	32
32	24
32	32
40	24
48	56
56	56
64	192
64	64
64	64
64	8


-- !query
select bit_length(utf8_binary collate utf8_lcase), bit_length(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<bit_length(collate(utf8_binary, utf8_lcase)):int,bit_length(collate(utf8_lcase, utf8_binary)):int>
-- !query output
184	184
232	232
24	24
24	24
24	32
24	32
32	24
32	32
40	24
48	56
56	56
64	192
64	64
64	64
64	8


-- !query
select octet_length(utf8_binary), octet_length(utf8_lcase) from t1
-- !query schema
struct<octet_length(utf8_binary):int,octet_length(utf8_lcase):int>
-- !query output
23	23
29	29
3	3
3	3
3	4
3	4
4	3
4	4
5	3
6	7
7	7
8	1
8	24
8	8
8	8


-- !query
select octet_length(utf8_binary collate utf8_lcase), octet_length(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<octet_length(collate(utf8_binary, utf8_lcase)):int,octet_length(collate(utf8_lcase, utf8_binary)):int>
-- !query output
23	23
29	29
3	3
3	3
3	4
3	4
4	3
4	4
5	3
6	7
7	7
8	1
8	24
8	8
8	8


-- !query
select octet_length(utf8_binary collate utf8_lcase_rtrim), octet_length(utf8_lcase collate utf8_binary_rtrim) from t1
-- !query schema
struct<octet_length(collate(utf8_binary, utf8_lcase_rtrim)):int,octet_length(collate(utf8_lcase, utf8_binary_rtrim)):int>
-- !query output
23	23
29	29
3	3
3	3
3	4
3	4
4	3
4	4
5	3
6	7
7	7
8	1
8	24
8	8
8	8


-- !query
select substr(utf8_binary, 2, 2), substr(utf8_lcase, 2, 2) from t1
-- !query schema
struct<substr(utf8_binary, 2, 2):string,substr(utf8_lcase, 2, 2):string collate UTF8_LCASE>
-- !query output
aA	aA
aA	aA
aA	aA
bA	
bc	Bc
bc	bc
el	el
fd	fd
it	it
o	o
o	o 
o	̇o
o 	o
om	om
pa	QL


-- !query
select substr(utf8_binary collate utf8_lcase, 2, 2), substr(utf8_lcase collate utf8_binary, 2, 2) from t1
-- !query schema
struct<substr(collate(utf8_binary, utf8_lcase), 2, 2):string collate UTF8_LCASE,substr(collate(utf8_lcase, utf8_binary), 2, 2):string>
-- !query output
aA	aA
aA	aA
aA	aA
bA	
bc	Bc
bc	bc
el	el
fd	fd
it	it
o	o
o	o 
o	̇o
o 	o
om	om
pa	QL


-- !query
select right(utf8_binary, 2), right(utf8_lcase, 2) from t1
-- !query schema
struct<right(utf8_binary, 2):string,right(utf8_lcase, 2):string collate UTF8_LCASE>
-- !query output
aA	aA
aA	aA
aA	aA
bA	a
ba	bA
bc	bc
d2	d2
e.	e.
en	ng
o 	İo
rk	QL
y.	y.
İo	o 
İo	İo
İo	̇o


-- !query
select right(utf8_binary collate utf8_lcase, 2), right(utf8_lcase collate utf8_binary, 2) from t1
-- !query schema
struct<right(collate(utf8_binary, utf8_lcase), 2):string collate UTF8_LCASE,right(collate(utf8_lcase, utf8_binary), 2):string>
-- !query output
aA	aA
aA	aA
aA	aA
bA	a
ba	bA
bc	bc
d2	d2
e.	e.
en	ng
o 	İo
rk	QL
y.	y.
İo	o 
İo	İo
İo	̇o


-- !query
select left(utf8_binary, '2' collate utf8_lcase), left(utf8_lcase, 2) from t1
-- !query schema
struct<left(utf8_binary, collate(2, utf8_lcase)):string,left(utf8_lcase, 2):string collate UTF8_LCASE>
-- !query output
He	He
So	So
Sp	SQ
aa	aa
aa	aa
aa	aa
ab	aB
ab	ab
bb	a
ef	ef
ki	si
İo	i̇
İo	İo
İo	İo
İo	İo


-- !query
select left(utf8_binary collate utf8_lcase, 2), left(utf8_lcase collate utf8_binary, 2) from t1
-- !query schema
struct<left(collate(utf8_binary, utf8_lcase), 2):string collate UTF8_LCASE,left(collate(utf8_lcase, utf8_binary), 2):string>
-- !query output
He	He
So	So
Sp	SQ
aa	aa
aa	aa
aa	aa
ab	aB
ab	ab
bb	a
ef	ef
ki	si
İo	i̇
İo	İo
İo	İo
İo	İo


-- !query
select locate(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"locate(utf8_binary, utf8_lcase, 1)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 38,
    "fragment" : "locate(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select locate(s, utf8_binary) from t1
-- !query schema
struct<locate(s, utf8_binary, 1):int>
-- !query output
0
1
1
1
1
1
1
1
1
1
1
1
1
1
1


-- !query
select locate(utf8_binary collate utf8_binary, s collate utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select locate(utf8_binary, utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<locate(utf8_binary, collate(utf8_lcase, utf8_binary), 1):int>
-- !query output
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1


-- !query
select locate(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase, 3) from t1
-- !query schema
struct<locate(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase), 3):int>
-- !query output
0
0
0
0
0
0
0
0
0
0
0
0
0
0
3


-- !query
select locate(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 3) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"locate(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai), 3)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 79,
    "fragment" : "locate(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 3)"
  } ]
}


-- !query
select locate(utf8_binary, 'a'), locate(utf8_lcase, 'a') from t1
-- !query schema
struct<locate(utf8_binary, a, 1):int,locate(utf8_lcase, 'a' collate UTF8_LCASE, 1):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	1


-- !query
select locate(utf8_binary, 'AaAA' collate utf8_lcase, 4), locate(utf8_lcase, 'AAa' collate utf8_binary, 4) from t1
-- !query schema
struct<locate(utf8_binary, collate(AaAA, utf8_lcase), 4):int,locate(utf8_lcase, collate(AAa, utf8_binary), 4):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0


-- !query
select locate(utf8_binary, 'AaAA ' collate utf8_binary_rtrim, 4), locate(utf8_lcase, 'AAa ' collate utf8_binary, 4) from t1
-- !query schema
struct<locate(utf8_binary, collate(AaAA , utf8_binary_rtrim), 4):int,locate(utf8_lcase, collate(AAa , utf8_binary), 4):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
drop table t2
-- !query schema
struct<>
-- !query output



-- !query
drop table t3
-- !query schema
struct<>
-- !query output

