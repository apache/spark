-- Automatically generated by SQLQueryTestSuite
-- !query
SELECT 'a' AS col1 FROM VALUES (NAMED_STRUCT('a', 1)) t (col1) GROUP BY col1 ORDER BY col1.a
-- !query schema
struct<col1:string>
-- !query output
a


-- !query
SELECT 'a' AS col1 FROM VALUES (NAMED_STRUCT('a', 1)) t (col1) GROUP BY col1 HAVING col1.a > 0
-- !query schema
struct<col1:string>
-- !query output
a


-- !query
SELECT 'a' AS col1 FROM VALUES (NAMED_STRUCT('a', 1)) t (col1) GROUP BY col1 HAVING col1.a > 0 ORDER BY col1.a
-- !query schema
struct<col1:string>
-- !query output
a


-- !query
SELECT NAMED_STRUCT('a', 1) AS col1 FROM VALUES ('a') t (col1) GROUP BY col1 ORDER BY col1.a
-- !query schema
struct<col1:struct<a:int>>
-- !query output
{"a":1}


-- !query
SELECT NAMED_STRUCT('a', 1) AS col1 FROM VALUES ('a') t (col1) GROUP BY col1 HAVING col1.a > 0
-- !query schema
struct<col1:struct<a:int>>
-- !query output
{"a":1}


-- !query
SELECT NAMED_STRUCT('a', 1) AS col1 FROM VALUES ('a') t (col1) GROUP BY col1 HAVING col1.a > 0 ORDER BY col1.a
-- !query schema
struct<col1:struct<a:int>>
-- !query output
{"a":1}


-- !query
SELECT NAMED_STRUCT('a', 1) AS col1 FROM VALUES (NAMED_STRUCT('a', 0)) t (col1) GROUP BY col1 ORDER BY col1.a
-- !query schema
struct<col1:struct<a:int>>
-- !query output
{"a":1}


-- !query
SELECT NAMED_STRUCT('a', 1) AS col1 FROM VALUES (NAMED_STRUCT('a', 0)) t (col1) GROUP BY col1 HAVING col1.a > 0
-- !query schema
struct<col1:struct<a:int>>
-- !query output



-- !query
SELECT NAMED_STRUCT('a', 1) AS col1 FROM VALUES (NAMED_STRUCT('a', 0)) t (col1) GROUP BY col1 HAVING col1.a > 0 ORDER BY col1.a
-- !query schema
struct<col1:struct<a:int>>
-- !query output



-- !query
SELECT 'a' AS col1 FROM VALUES (ARRAY(1)) t (col1) GROUP BY col1 ORDER BY col1[0]
-- !query schema
struct<col1:string>
-- !query output
a


-- !query
SELECT 'a' AS col1 FROM VALUES (ARRAY(1)) t (col1) GROUP BY col1 HAVING col1[0] > 0
-- !query schema
struct<col1:string>
-- !query output
a


-- !query
SELECT 'a' AS col1 FROM VALUES (ARRAY(1)) t (col1) GROUP BY col1 HAVING col1[0] > 0 ORDER BY col1[0]
-- !query schema
struct<col1:string>
-- !query output
a


-- !query
SELECT ARRAY(1) AS col1 FROM VALUES ('a') t (col1) GROUP BY col1 ORDER BY col1[0]
-- !query schema
struct<col1:array<int>>
-- !query output
[1]


-- !query
SELECT ARRAY(1) AS col1 FROM VALUES ('a') t (col1) GROUP BY col1 HAVING col1[0] > 0
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_EXTRACT_BASE_FIELD_TYPE",
  "sqlState" : "42000",
  "messageParameters" : {
    "base" : "\"tempresolvedcolumn(col1)\"",
    "other" : "\"STRING\""
  }
}


-- !query
SELECT NAMED_STRUCT('a', NAMED_STRUCT('b', 1)) AS col1 FROM VALUES ('a') t (col1) GROUP BY col1 ORDER BY col1.a.b
-- !query schema
struct<col1:struct<a:struct<b:int>>>
-- !query output
{"a":{"b":1}}


-- !query
SELECT NAMED_STRUCT('a', NAMED_STRUCT('b', 1)) AS col1 FROM VALUES ('a') t (col1) GROUP BY col1 HAVING col1.a.b > 0
-- !query schema
struct<col1:struct<a:struct<b:int>>>
-- !query output
{"a":{"b":1}}


-- !query
SELECT NAMED_STRUCT('a', NAMED_STRUCT('b', 1)) AS col1 FROM VALUES ('a') t (col1) GROUP BY col1 HAVING col1.a.b > 0 ORDER BY col1.a.b
-- !query schema
struct<col1:struct<a:struct<b:int>>>
-- !query output
{"a":{"b":1}}


-- !query
SELECT ARRAY(NAMED_STRUCT('a', 1)) AS col1 FROM VALUES ('a') t (col1) GROUP BY col1 ORDER BY col1[0].a
-- !query schema
struct<col1:array<struct<a:int>>>
-- !query output
[{"a":1}]


-- !query
SELECT ARRAY(NAMED_STRUCT('a', 1)) AS col1 FROM VALUES ('a') t (col1) GROUP BY col1 HAVING col1[0].a > 0
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_EXTRACT_BASE_FIELD_TYPE",
  "sqlState" : "42000",
  "messageParameters" : {
    "base" : "\"tempresolvedcolumn(col1)\"",
    "other" : "\"STRING\""
  }
}


-- !query
SELECT 'a' AS col1 FROM VALUES (MAP('key', 1)) t (col1) GROUP BY col1 ORDER BY col1['key']
-- !query schema
struct<col1:string>
-- !query output
a


-- !query
SELECT 'a' AS col1 FROM VALUES (MAP('key', 1)) t (col1) GROUP BY col1 HAVING col1['key'] > 0
-- !query schema
struct<col1:string>
-- !query output
a


-- !query
SELECT 'a' AS col1 FROM VALUES (MAP('key', 1)) t (col1) GROUP BY col1 HAVING col1['key'] > 0 ORDER BY col1['key']
-- !query schema
struct<col1:string>
-- !query output
a


-- !query
SELECT MAP('key', 1) AS col1 FROM VALUES ('a') t (col1) GROUP BY col1 ORDER BY col1['key']
-- !query schema
struct<col1:map<string,int>>
-- !query output
{"key":1}


-- !query
SELECT MAP('key', 1) AS col1 FROM VALUES ('a') t (col1) GROUP BY col1 HAVING col1['key'] > 0
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_EXTRACT_BASE_FIELD_TYPE",
  "sqlState" : "42000",
  "messageParameters" : {
    "base" : "\"tempresolvedcolumn(col1)\"",
    "other" : "\"STRING\""
  }
}


-- !query
SELECT named_struct('a',1) as col, col1
FROM values(named_struct('a',1))
ORDER BY col1.a
-- !query schema
struct<col:struct<a:int>,col1:struct<a:int>>
-- !query output
{"a":1}	{"a":1}


-- !query
SELECT named_struct('a', 1) AS col1, col1
FROM values(named_struct('a', 1))
GROUP BY col1
HAVING col1.a > 0
-- !query schema
struct<col1:struct<a:int>,col1:struct<a:int>>
-- !query output
{"a":1}	{"a":1}


-- !query
SELECT array(1, 2, 3) AS col1, col1
FROM values(array(1, 2, 3))
ORDER BY col1[0]
-- !query schema
struct<col1:array<int>,col1:array<int>>
-- !query output
[1,2,3]	[1,2,3]


-- !query
SELECT array(1, 2, 3) AS col1, col1
FROM values(array(1, 2, 3))
GROUP BY col1
HAVING col1[1] > 1
-- !query schema
struct<col1:array<int>,col1:array<int>>
-- !query output
[1,2,3]	[1,2,3]


-- !query
SELECT map('a', 1, 'b', 2) AS col1, col1
FROM values(map('a', 1, 'b', 2))
ORDER BY col1['a']
-- !query schema
struct<col1:map<string,int>,col1:map<string,int>>
-- !query output
{"a":1,"b":2}	{"a":1,"b":2}


-- !query
SELECT map('a', 1, 'b', 2) AS col1, col1
FROM values(map('a', 1, 'b', 2))
GROUP BY col1
HAVING col1['b'] > 1
-- !query schema
struct<col1:map<string,int>,col1:map<string,int>>
-- !query output
{"a":1,"b":2}	{"a":1,"b":2}
