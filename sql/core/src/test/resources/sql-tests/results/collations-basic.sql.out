-- Automatically generated by SQLQueryTestSuite
-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('aaa', 'aaa')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('AAA', 'AAA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('bbb', 'bbb')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('BBB', 'BBB')
-- !query schema
struct<>
-- !query output



-- !query
describe table t1
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
utf8_binary         	string              	                    
utf8_lcase          	string collate UTF8_LCASE


-- !query
select count(*) from t1 group by utf8_binary
-- !query schema
struct<count(1):bigint>
-- !query output
1
1
1
1


-- !query
select count(*) from t1 group by utf8_lcase
-- !query schema
struct<count(1):bigint>
-- !query output
2
2


-- !query
select * from t1 where utf8_binary = 'aaa'
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
aaa	aaa


-- !query
select * from t1 where utf8_lcase = 'aaa' collate utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
aaa	aaa


-- !query
select * from t1 where utf8_binary < 'bbb'
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
BBB	BBB
aaa	aaa


-- !query
select * from t1 where utf8_lcase < 'bbb' collate utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
aaa	aaa


-- !query
select l.utf8_binary, r.utf8_lcase from t1 l join t1 r on l.utf8_lcase = r.utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
AAA	aaa
BBB	BBB
BBB	bbb
aaa	AAA
aaa	aaa
bbb	BBB
bbb	bbb


-- !query
create table t2(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t2 values('aaa', 'aaa')
-- !query schema
struct<>
-- !query output



-- !query
insert into t2 values('bbb', 'bbb')
-- !query schema
struct<>
-- !query output



-- !query
select * from t1 anti join t2 on t1.utf8_lcase = t2.utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output



-- !query
drop table t2
-- !query schema
struct<>
-- !query output



-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except all select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaa
bbb
zzz
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaa
bbb
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union all select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
AAA
BBB
ZZZ
aaa
aaa
bbb
bbb
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') intersect select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaa
bbb


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except select col1 collate unicode_ci from values ('aaa'), ('bbb')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "first",
    "dataType1" : "\"STRING COLLATE UNICODE_CI\"",
    "dataType2" : "\"STRING COLLATE UTF8_LCASE\"",
    "hint" : "",
    "operator" : "EXCEPT",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 162,
    "fragment" : "select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except select col1 collate unicode_ci from values ('aaa'), ('bbb')"
  } ]
}


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except all select col1 collate unicode_ci from values ('aaa'), ('bbb')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "first",
    "dataType1" : "\"STRING COLLATE UNICODE_CI\"",
    "dataType2" : "\"STRING COLLATE UTF8_LCASE\"",
    "hint" : "",
    "operator" : "EXCEPT ALL",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 166,
    "fragment" : "select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except all select col1 collate unicode_ci from values ('aaa'), ('bbb')"
  } ]
}


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union select col1 collate unicode_ci from values ('aaa'), ('bbb')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "first",
    "dataType1" : "\"STRING COLLATE UNICODE_CI\"",
    "dataType2" : "\"STRING COLLATE UTF8_LCASE\"",
    "hint" : "",
    "operator" : "UNION",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 161,
    "fragment" : "select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union select col1 collate unicode_ci from values ('aaa'), ('bbb')"
  } ]
}


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union all select col1 collate unicode_ci from values ('aaa'), ('bbb')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "first",
    "dataType1" : "\"STRING COLLATE UNICODE_CI\"",
    "dataType2" : "\"STRING COLLATE UTF8_LCASE\"",
    "hint" : "",
    "operator" : "UNION",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 165,
    "fragment" : "select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union all select col1 collate unicode_ci from values ('aaa'), ('bbb')"
  } ]
}


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') intersect select col1 collate unicode_ci from values ('aaa'), ('bbb')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "first",
    "dataType1" : "\"STRING COLLATE UNICODE_CI\"",
    "dataType2" : "\"STRING COLLATE UTF8_LCASE\"",
    "hint" : "",
    "operator" : "INTERSECT",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 156,
    "fragment" : "select col1 collate utf8_lcase from values ('aaa'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') intersect select col1 collate unicode_ci from values ('aaa'), ('bbb')"
  } ]
}


-- !query
create table t1 (c1 struct<utf8_binary: string collate utf8_binary, utf8_lcase: string collate utf8_lcase>) USING PARQUET
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (named_struct('utf8_binary', 'aaa', 'utf8_lcase', 'aaa'))
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (named_struct('utf8_binary', 'AAA', 'utf8_lcase', 'AAA'))
-- !query schema
struct<>
-- !query output



-- !query
select count(*) from t1 group by c1.utf8_binary
-- !query schema
struct<count(1):bigint>
-- !query output
1
1


-- !query
select count(*) from t1 group by c1.utf8_lcase
-- !query schema
struct<count(1):bigint>
-- !query output
2


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
select array_contains(ARRAY('aaa' collate utf8_lcase),'AAA' collate utf8_lcase)
-- !query schema
struct<array_contains(array(collate(aaa, utf8_lcase)), collate(AAA, utf8_lcase)):boolean>
-- !query output
true


-- !query
select array_position(ARRAY('aaa' collate utf8_lcase, 'bbb' collate utf8_lcase),'BBB' collate utf8_lcase)
-- !query schema
struct<array_position(array(collate(aaa, utf8_lcase), collate(bbb, utf8_lcase)), collate(BBB, utf8_lcase)):bigint>
-- !query output
2


-- !query
select nullif('aaa' COLLATE utf8_lcase, 'AAA' COLLATE utf8_lcase)
-- !query schema
struct<nullif(collate(aaa, utf8_lcase), collate(AAA, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
NULL


-- !query
select least('aaa' COLLATE utf8_lcase, 'AAA' collate utf8_lcase, 'a' collate utf8_lcase)
-- !query schema
struct<least(collate(aaa, utf8_lcase), collate(AAA, utf8_lcase), collate(a, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
a


-- !query
select arrays_overlap(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<arrays_overlap(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):boolean>
-- !query output
true


-- !query
select array_distinct(array('aaa' collate utf8_lcase, 'AAA' collate utf8_lcase))
-- !query schema
struct<array_distinct(array(collate(aaa, utf8_lcase), collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
["aaa"]


-- !query
select array_union(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<array_union(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
["aaa"]


-- !query
select array_intersect(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<array_intersect(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
["aaa"]


-- !query
select array_except(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<array_except(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
[]


-- !query
select 'a' collate unicode < 'A'
-- !query schema
struct<(collate(a, unicode) < 'A' collate UNICODE):boolean>
-- !query output
true


-- !query
select 'a' collate unicode_ci = 'A'
-- !query schema
struct<(collate(a, unicode_ci) = 'A' collate UNICODE_CI):boolean>
-- !query output
true


-- !query
select 'a' collate unicode_ai = 'å'
-- !query schema
struct<(collate(a, unicode_ai) = 'å' collate UNICODE_AI):boolean>
-- !query output
true


-- !query
select 'a' collate unicode_ci_ai = 'Å'
-- !query schema
struct<(collate(a, unicode_ci_ai) = 'Å' collate UNICODE_CI_AI):boolean>
-- !query output
true


-- !query
select 'a' collate en < 'A'
-- !query schema
struct<(collate(a, en) < 'A' collate en):boolean>
-- !query output
true


-- !query
select 'a' collate en_ci = 'A'
-- !query schema
struct<(collate(a, en_ci) = 'A' collate en_CI):boolean>
-- !query output
true


-- !query
select 'a' collate en_ai = 'å'
-- !query schema
struct<(collate(a, en_ai) = 'å' collate en_AI):boolean>
-- !query output
true


-- !query
select 'a' collate en_ci_ai = 'Å'
-- !query schema
struct<(collate(a, en_ci_ai) = 'Å' collate en_CI_AI):boolean>
-- !query output
true


-- !query
select 'Kypper' collate sv < 'Köpfe'
-- !query schema
struct<(collate(Kypper, sv) < 'Köpfe' collate sv):boolean>
-- !query output
true


-- !query
select 'Kypper' collate de > 'Köpfe'
-- !query schema
struct<(collate(Kypper, de) > 'Köpfe' collate de):boolean>
-- !query output
true


-- !query
select 'I' collate tr_ci = 'ı'
-- !query schema
struct<(collate(I, tr_ci) = 'ı' collate tr_CI):boolean>
-- !query output
true


-- !query
create table t3 (text string collate utf8_binary, pairDelim string collate utf8_lcase, keyValueDelim string collate utf8_binary) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t3 values('a:1,b:2,c:3', ',', ':')
-- !query schema
struct<>
-- !query output



-- !query
select str_to_map(text, pairDelim, keyValueDelim) from t3
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INDETERMINATE_COLLATION",
  "sqlState" : "42P22"
}


-- !query
select str_to_map(text collate utf8_binary, pairDelim collate utf8_lcase, keyValueDelim collate utf8_binary) from t3
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select str_to_map(text collate utf8_binary, pairDelim collate utf8_binary, keyValueDelim collate utf8_binary) from t3
-- !query schema
struct<str_to_map(collate(text, utf8_binary), collate(pairDelim, utf8_binary), collate(keyValueDelim, utf8_binary)):map<string,string>>
-- !query output
{"a":"1","b":"2","c":"3"}


-- !query
select str_to_map(text collate unicode_ai, pairDelim collate unicode_ai, keyValueDelim collate unicode_ai) from t3
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(text, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"str_to_map(collate(text, unicode_ai), collate(pairDelim, unicode_ai), collate(keyValueDelim, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 106,
    "fragment" : "str_to_map(text collate unicode_ai, pairDelim collate unicode_ai, keyValueDelim collate unicode_ai)"
  } ]
}


-- !query
drop table t3
-- !query schema
struct<>
-- !query output



-- !query
create table t1(s string, utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Spark', 'Spark', 'SQL')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaAAaA', 'aaAaAAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaAAaA', 'aaAaaAaAaaAaaAaAaaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('bbAbaAbA', 'bbAbAAbA', 'a')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'İo', 'İo')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'İo', 'İo ')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'İo ', 'İo')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'İo', 'i̇o')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Hello, world! Nice day.', 'Hello, world! Nice day.', 'Hello, world! Nice day.')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Something else. Nothing here.', 'Something else. Nothing here.', 'Something else. Nothing here.')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('kitten', 'kitten', 'sitTing')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('abc', 'abc', 'abc')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('abcdcba', 'abcdcba', 'aBcDCbA')
-- !query schema
struct<>
-- !query output



-- !query
create table t2(ascii double) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t2 values (97.52143)
-- !query schema
struct<>
-- !query output



-- !query
insert into t2 values (66.421)
-- !query schema
struct<>
-- !query output



-- !query
create table t3(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t3 values ('aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t3 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
create table t4(num long) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t4 values (97)
-- !query schema
struct<>
-- !query output



-- !query
insert into t4 values (66)
-- !query schema
struct<>
-- !query output



-- !query
select elt(2, s, utf8_binary) from t1
-- !query schema
struct<elt(2, s, utf8_binary):string>
-- !query output
Hello, world! Nice day.
Something else. Nothing here.
Spark
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAbAAbA
efd2
kitten
İo
İo
İo
İo


-- !query
select elt(2, utf8_binary, utf8_lcase, s) from t1
-- !query schema
struct<elt(2, utf8_binary, utf8_lcase, s):string collate null>
-- !query output
Hello, world! Nice day.
SQL
Something else. Nothing here.
a
aBcDCbA
aaAaAAaA
aaAaaAaA
aaAaaAaAaaAaaAaAaaAaaAaA
abc
efd2
i̇o
sitTing
İo
İo
İo


-- !query
select elt(1, utf8_binary collate utf8_binary, utf8_lcase collate utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select elt(1, utf8_binary collate utf8_binary, utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<elt(1, collate(utf8_binary, utf8_binary), collate(utf8_lcase, utf8_binary)):string>
-- !query output
Hello, world! Nice day.
Something else. Nothing here.
Spark
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAbAAbA
efd2
kitten
İo
İo
İo
İo


-- !query
select elt(1, utf8_binary collate utf8_binary, utf8_lcase) from t1
-- !query schema
struct<elt(1, collate(utf8_binary, utf8_binary), utf8_lcase):string>
-- !query output
Hello, world! Nice day.
Something else. Nothing here.
Spark
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAbAAbA
efd2
kitten
İo
İo
İo
İo


-- !query
select elt(1, utf8_binary, 'word'), elt(1, utf8_lcase, 'word') from t1
-- !query schema
struct<elt(1, utf8_binary, word):string,elt(1, utf8_lcase, 'word' collate UTF8_LCASE):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select elt(1, utf8_binary, 'word' collate utf8_lcase), elt(1, utf8_lcase, 'word' collate utf8_binary) from t1
-- !query schema
struct<elt(1, utf8_binary, collate(word, utf8_lcase)):string collate UTF8_LCASE,elt(1, utf8_lcase, collate(word, utf8_binary)):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select ascii(utf8_binary), ascii(utf8_lcase) from t1
-- !query schema
struct<ascii(utf8_binary):int,ascii(utf8_lcase):int>
-- !query output
101	101
107	115
304	105
304	304
304	304
304	304
72	72
83	83
83	83
97	97
97	97
97	97
97	97
97	97
98	97


-- !query
select ascii(utf8_binary collate utf8_lcase), ascii(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<ascii(collate(utf8_binary, utf8_lcase)):int,ascii(collate(utf8_lcase, utf8_binary)):int>
-- !query output
101	101
107	115
304	105
304	304
304	304
304	304
72	72
83	83
83	83
97	97
97	97
97	97
97	97
97	97
98	97


-- !query
select unbase64(utf8_binary), unbase64(utf8_lcase) from t3
-- !query schema
struct<unbase64(utf8_binary):binary,unbase64(utf8_lcase):binary>
-- !query output
i� �	i�h�
y�v	y�v


-- !query
select unbase64(utf8_binary collate utf8_lcase), unbase64(utf8_lcase collate utf8_binary) from t3
-- !query schema
struct<unbase64(collate(utf8_binary, utf8_lcase)):binary,unbase64(collate(utf8_lcase, utf8_binary)):binary>
-- !query output
i� �	i�h�
y�v	y�v


-- !query
select base64(utf8_binary), base64(utf8_lcase) from t1
-- !query schema
struct<base64(utf8_binary):string,base64(utf8_lcase):string>
-- !query output
SGVsbG8sIHdvcmxkISBOaWNlIGRheS4=	SGVsbG8sIHdvcmxkISBOaWNlIGRheS4=
U29tZXRoaW5nIGVsc2UuIE5vdGhpbmcgaGVyZS4=	U29tZXRoaW5nIGVsc2UuIE5vdGhpbmcgaGVyZS4=
U3Bhcms=	U1FM
YWFBYUFBYUE=	YWFBYUFBYUE=
YWFBYUFBYUE=	YWFBYWFBYUE=
YWFBYUFBYUE=	YWFBYWFBYUFhYUFhYUFhQWFhQWFhQWFB
YWJj	YWJj
YWJjZGNiYQ==	YUJjRENiQQ==
YmJBYkFBYkE=	YQ==
ZWZkMg==	ZWZkMg==
a2l0dGVu	c2l0VGluZw==
xLBv	acyHbw==
xLBv	xLBv
xLBv	xLBvIA==
xLBvIA==	xLBv


-- !query
select base64(utf8_binary collate utf8_lcase), base64(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<base64(collate(utf8_binary, utf8_lcase)):string,base64(collate(utf8_lcase, utf8_binary)):string>
-- !query output
SGVsbG8sIHdvcmxkISBOaWNlIGRheS4=	SGVsbG8sIHdvcmxkISBOaWNlIGRheS4=
U29tZXRoaW5nIGVsc2UuIE5vdGhpbmcgaGVyZS4=	U29tZXRoaW5nIGVsc2UuIE5vdGhpbmcgaGVyZS4=
U3Bhcms=	U1FM
YWFBYUFBYUE=	YWFBYUFBYUE=
YWFBYUFBYUE=	YWFBYWFBYUE=
YWFBYUFBYUE=	YWFBYWFBYUFhYUFhYUFhQWFhQWFhQWFB
YWJj	YWJj
YWJjZGNiYQ==	YUJjRENiQQ==
YmJBYkFBYkE=	YQ==
ZWZkMg==	ZWZkMg==
a2l0dGVu	c2l0VGluZw==
xLBv	acyHbw==
xLBv	xLBv
xLBv	xLBvIA==
xLBvIA==	xLBv


-- !query
select decode(encode(utf8_binary, 'utf-8'), 'utf-8'), decode(encode(utf8_lcase, 'utf-8'), 'utf-8') from t1
-- !query schema
struct<decode(encode(utf8_binary, utf-8), utf-8):string,decode(encode(utf8_lcase, utf-8), utf-8):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select decode(encode(utf8_binary collate utf8_lcase, 'utf-8'), 'utf-8'), decode(encode(utf8_lcase collate utf8_binary, 'utf-8'), 'utf-8') from t1
-- !query schema
struct<decode(encode(collate(utf8_binary, utf8_lcase), utf-8), utf-8):string,decode(encode(collate(utf8_lcase, utf8_binary), utf-8), utf-8):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select format_number(ascii, '###.###') from t2
-- !query schema
struct<format_number(ascii, ###.###):string>
-- !query output
66.421
97.521


-- !query
select format_number(ascii, '###.###' collate utf8_lcase) from t2
-- !query schema
struct<format_number(ascii, collate(###.###, utf8_lcase)):string>
-- !query output
66.421
97.521


-- !query
select encode(utf8_binary, 'utf-8'), encode(utf8_lcase, 'utf-8') from t1
-- !query schema
struct<encode(utf8_binary, utf-8):binary,encode(utf8_lcase, utf-8):binary>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select encode(utf8_binary collate utf8_lcase, 'utf-8'), encode(utf8_lcase collate utf8_binary, 'utf-8') from t1
-- !query schema
struct<encode(collate(utf8_binary, utf8_lcase), utf-8):binary,encode(collate(utf8_lcase, utf8_binary), utf-8):binary>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select to_binary(utf8_binary, 'utf-8'), to_binary(utf8_lcase, 'utf-8') from t1
-- !query schema
struct<to_binary(utf8_binary, utf-8):binary,to_binary(utf8_lcase, utf-8):binary>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select to_binary(utf8_binary collate utf8_lcase, 'utf-8'), to_binary(utf8_lcase collate utf8_binary, 'utf-8') from t1
-- !query schema
struct<to_binary(collate(utf8_binary, utf8_lcase), utf-8):binary,to_binary(collate(utf8_lcase, utf8_binary), utf-8):binary>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select soundex(utf8_binary), soundex(utf8_lcase) from t1
-- !query schema
struct<soundex(utf8_binary):string,soundex(utf8_lcase):string>
-- !query output
A000	A000
A000	A000
A000	A000
A120	A120
A123	A123
B110	A000
E130	E130
H464	H464
K350	S352
S162	S400
S535	S535
İo	I000
İo	İo
İo	İo 
İo 	İo


-- !query
select soundex(utf8_binary collate utf8_lcase), soundex(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<soundex(collate(utf8_binary, utf8_lcase)):string,soundex(collate(utf8_lcase, utf8_binary)):string>
-- !query output
A000	A000
A000	A000
A000	A000
A120	A120
A123	A123
B110	A000
E130	E130
H464	H464
K350	S352
S162	S400
S535	S535
İo	I000
İo	İo
İo	İo 
İo 	İo


-- !query
select luhn_check(num) from t4
-- !query schema
struct<luhn_check(num):boolean>
-- !query output
false
false


-- !query
select levenshtein(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<levenshtein(utf8_binary, utf8_lcase):int>
-- !query output
0
0
0
0
0
0
1
1
1
16
2
4
4
4
8


-- !query
select levenshtein(s, utf8_binary) from t1
-- !query schema
struct<levenshtein(s, utf8_binary):int>
-- !query output
0
0
0
0
0
0
0
0
0
0
0
0
0
1
1


-- !query
select levenshtein(utf8_binary collate utf8_binary, s collate utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select levenshtein(utf8_binary, utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<levenshtein(utf8_binary, collate(utf8_lcase, utf8_binary)):int>
-- !query output
0
0
0
0
0
0
1
1
1
16
2
4
4
4
8


-- !query
select levenshtein(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t1
-- !query schema
struct<levenshtein(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase)):int>
-- !query output
0
0
0
0
0
0
1
1
1
16
2
4
4
4
8


-- !query
select levenshtein(utf8_binary, 'a'), levenshtein(utf8_lcase, 'a') from t1
-- !query schema
struct<levenshtein(utf8_binary, a):int,levenshtein(utf8_lcase, 'a' collate UTF8_LCASE):int>
-- !query output
2	2
2	2
2	3
2	3
22	22
29	29
3	2
4	3
4	4
6	6
6	7
7	23
7	7
7	7
8	0


-- !query
select levenshtein(utf8_binary, 'AaAA' collate utf8_lcase, 3), levenshtein(utf8_lcase, 'AAa' collate utf8_binary, 4) from t1
-- !query schema
struct<levenshtein(utf8_binary, collate(AaAA, utf8_lcase), 3):int,levenshtein(utf8_lcase, collate(AAa, utf8_binary), 4):int>
-- !query output
-1	-1
-1	-1
-1	-1
-1	-1
-1	-1
-1	-1
-1	-1
-1	2
-1	3
-1	3
-1	3
-1	3
-1	3
-1	4
3	3


-- !query
select is_valid_utf8(utf8_binary), is_valid_utf8(utf8_lcase) from t1
-- !query schema
struct<is_valid_utf8(utf8_binary):boolean,is_valid_utf8(utf8_lcase):boolean>
-- !query output
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true


-- !query
select is_valid_utf8(utf8_binary collate utf8_lcase), is_valid_utf8(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<is_valid_utf8(collate(utf8_binary, utf8_lcase)):boolean,is_valid_utf8(collate(utf8_lcase, utf8_binary)):boolean>
-- !query output
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true


-- !query
select is_valid_utf8(utf8_binary collate utf8_lcase_rtrim), is_valid_utf8(utf8_lcase collate utf8_binary_rtrim) from t1
-- !query schema
struct<is_valid_utf8(collate(utf8_binary, utf8_lcase_rtrim)):boolean,is_valid_utf8(collate(utf8_lcase, utf8_binary_rtrim)):boolean>
-- !query output
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true


-- !query
select make_valid_utf8(utf8_binary), make_valid_utf8(utf8_lcase) from t1
-- !query schema
struct<make_valid_utf8(utf8_binary):string,make_valid_utf8(utf8_lcase):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select make_valid_utf8(utf8_binary collate utf8_lcase), make_valid_utf8(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<make_valid_utf8(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,make_valid_utf8(collate(utf8_lcase, utf8_binary)):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select make_valid_utf8(utf8_binary collate utf8_lcase_rtrim), make_valid_utf8(utf8_lcase collate utf8_binary_rtrim) from t1
-- !query schema
struct<make_valid_utf8(collate(utf8_binary, utf8_lcase_rtrim)):string collate UTF8_LCASE_RTRIM,make_valid_utf8(collate(utf8_lcase, utf8_binary_rtrim)):string collate UTF8_BINARY_RTRIM>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select validate_utf8(utf8_binary), validate_utf8(utf8_lcase) from t1
-- !query schema
struct<validate_utf8(utf8_binary):string,validate_utf8(utf8_lcase):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select validate_utf8(utf8_binary collate utf8_lcase), validate_utf8(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<validate_utf8(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,validate_utf8(collate(utf8_lcase, utf8_binary)):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select validate_utf8(utf8_binary collate utf8_lcase_rtrim), validate_utf8(utf8_lcase collate utf8_binary_rtrim) from t1
-- !query schema
struct<validate_utf8(collate(utf8_binary, utf8_lcase_rtrim)):string collate UTF8_LCASE_RTRIM,validate_utf8(collate(utf8_lcase, utf8_binary_rtrim)):string collate UTF8_BINARY_RTRIM>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select try_validate_utf8(utf8_binary), try_validate_utf8(utf8_lcase) from t1
-- !query schema
struct<try_validate_utf8(utf8_binary):string,try_validate_utf8(utf8_lcase):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select try_validate_utf8(utf8_binary collate utf8_lcase), try_validate_utf8(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<try_validate_utf8(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,try_validate_utf8(collate(utf8_lcase, utf8_binary)):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select try_validate_utf8(utf8_binary collate utf8_lcase_rtrim), try_validate_utf8(utf8_lcase collate utf8_binary_rtrim) from t1
-- !query schema
struct<try_validate_utf8(collate(utf8_binary, utf8_lcase_rtrim)):string collate UTF8_LCASE_RTRIM,try_validate_utf8(collate(utf8_lcase, utf8_binary_rtrim)):string collate UTF8_BINARY_RTRIM>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
drop table t2
-- !query schema
struct<>
-- !query output



-- !query
drop table t3
-- !query schema
struct<>
-- !query output



-- !query
drop table t4
-- !query schema
struct<>
-- !query output

