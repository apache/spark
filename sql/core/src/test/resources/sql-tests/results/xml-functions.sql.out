-- Automatically generated by SQLQueryTestSuite
-- !query
select to_xml(named_struct('a', 1, 'b', 2), map('indent', ''))
-- !query schema
struct<to_xml(named_struct(a, 1, b, 2)):string>
-- !query output
<ROW><a>1</a><b>2</b></ROW>


-- !query
select to_xml(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy', 'indent', ''))
-- !query schema
struct<to_xml(named_struct(time, to_timestamp(2015-08-26, yyyy-MM-dd))):string>
-- !query output
<ROW><time>26/08/2015</time></ROW>


-- !query
select to_xml(array(named_struct('a', 1, 'b', 2)))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"array(named_struct(a, 1, b, 2))\"",
    "inputType" : "\"ARRAY<STRUCT<a: INT NOT NULL, b: INT NOT NULL>>\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRUCT\"",
    "sqlExpr" : "\"to_xml(array(named_struct(a, 1, b, 2)))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 50,
    "fragment" : "to_xml(array(named_struct('a', 1, 'b', 2)))"
  } ]
}


-- !query
select to_xml(map('a', 1))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"map(a, 1)\"",
    "inputType" : "\"MAP<STRING, INT>\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRUCT\"",
    "sqlExpr" : "\"to_xml(map(a, 1))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 26,
    "fragment" : "to_xml(map('a', 1))"
  } ]
}


-- !query
select to_xml(named_struct('a', 1, 'b', 2), named_struct('mode', 'PERMISSIVE'))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_OPTIONS.NON_MAP_FUNCTION",
  "sqlState" : "42K06",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 79,
    "fragment" : "to_xml(named_struct('a', 1, 'b', 2), named_struct('mode', 'PERMISSIVE'))"
  } ]
}


-- !query
select to_xml(named_struct('a', 1, 'b', 2), map('mode', 1))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_OPTIONS.NON_STRING_TYPE",
  "sqlState" : "42K06",
  "messageParameters" : {
    "mapType" : "\"MAP<STRING, INT>\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 59,
    "fragment" : "to_xml(named_struct('a', 1, 'b', 2), map('mode', 1))"
  } ]
}


-- !query
select to_xml()
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "WRONG_NUM_ARGS.WITHOUT_SUGGESTION",
  "sqlState" : "42605",
  "messageParameters" : {
    "actualNum" : "0",
    "docroot" : "https://spark.apache.org/docs/latest",
    "expectedNum" : "[1, 2]",
    "functionName" : "`to_xml`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 15,
    "fragment" : "to_xml()"
  } ]
}


-- !query
select from_xml('<p><a>1</a></p>', 'a INT')
-- !query schema
struct<from_xml(<p><a>1</a></p>):struct<a:int>>
-- !query output
{"a":1}


-- !query
select from_xml('<p><time>26/08/2015</time></p>', 'time Timestamp', map('timestampFormat', 'dd/MM/yyyy'))
-- !query schema
struct<from_xml(<p><time>26/08/2015</time></p>):struct<time:timestamp>>
-- !query output
{"time":2015-08-26 00:00:00}


-- !query
select from_xml('<p><a>1</a></p>', 1)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_SCHEMA.NON_STRING_LITERAL",
  "sqlState" : "42K07",
  "messageParameters" : {
    "inputSchema" : "\"1\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 37,
    "fragment" : "from_xml('<p><a>1</a></p>', 1)"
  } ]
}


-- !query
select from_xml('<p><a>1</a></p>', 'a InvalidType')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'InvalidType'",
    "hint" : ": extra input 'InvalidType'"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 51,
    "fragment" : "from_xml('<p><a>1</a></p>', 'a InvalidType')"
  } ]
}


-- !query
select from_xml('<p><a>1</a></p>', 'a INT', named_struct('mode', 'PERMISSIVE'))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_OPTIONS.NON_MAP_FUNCTION",
  "sqlState" : "42K06",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 79,
    "fragment" : "from_xml('<p><a>1</a></p>', 'a INT', named_struct('mode', 'PERMISSIVE'))"
  } ]
}


-- !query
select from_xml('<p><a>1</a></p>', 'a INT', map('mode', 1))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_OPTIONS.NON_STRING_TYPE",
  "sqlState" : "42K06",
  "messageParameters" : {
    "mapType" : "\"MAP<STRING, INT>\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 59,
    "fragment" : "from_xml('<p><a>1</a></p>', 'a INT', map('mode', 1))"
  } ]
}


-- !query
select from_xml()
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "WRONG_NUM_ARGS.WITHOUT_SUGGESTION",
  "sqlState" : "42605",
  "messageParameters" : {
    "actualNum" : "0",
    "docroot" : "https://spark.apache.org/docs/latest",
    "expectedNum" : "[2, 3]",
    "functionName" : "`from_xml`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 17,
    "fragment" : "from_xml()"
  } ]
}


-- !query
DROP VIEW IF EXISTS xmlTable
-- !query schema
struct<>
-- !query output



-- !query
select from_xml('<p><a>1</a></p>', 'struct<a:array<int>>')
-- !query schema
struct<from_xml(<p><a>1</a></p>):struct<a:array<int>>>
-- !query output
{"a":[1]}


-- !query
select from_xml('<p><a>1</a><b>"2"</b></p>', 'struct<a:int,b:string>')
-- !query schema
struct<from_xml(<p><a>1</a><b>"2"</b></p>):struct<a:int,b:string>>
-- !query output
{"a":1,"b":""2""}


-- !query
select schema_of_xml('<p><a>1</a><b>"2"</b></p>')
-- !query schema
struct<schema_of_xml(<p><a>1</a><b>"2"</b></p>):string>
-- !query output
STRUCT<a: BIGINT, b: STRING>


-- !query
select from_xml('<p><a>1</a><a>2</a><a>3</a></p>', schema_of_xml('<p><a>1</a><a>2</a></p>'))
-- !query schema
struct<from_xml(<p><a>1</a><a>2</a><a>3</a></p>):struct<a:array<bigint>>>
-- !query output
{"a":[1,2,3]}


-- !query
select from_xml('<p><a>1</a><a>2</a></p>', 'struct<a:array<int>>')
-- !query schema
struct<from_xml(<p><a>1</a><a>2</a></p>):struct<a:array<int>>>
-- !query output
{"a":[1,2]}


-- !query
select from_xml('<p><a>1</a><a>"2"</a></p>', 'struct<a:array<int>>')
-- !query schema
struct<from_xml(<p><a>1</a><a>"2"</a></p>):struct<a:array<int>>>
-- !query output
{"a":[1]}


-- !query
select from_xml('<p><a>1</a><a></a></p>', 'struct<a:array<int>>')
-- !query schema
struct<from_xml(<p><a>1</a><a></a></p>):struct<a:array<int>>>
-- !query output
{"a":[1,null]}


-- !query
select from_xml('<p><a attr="1"><b>2</b></a></p>', 'struct<a:map<string,int>>')
-- !query schema
struct<from_xml(<p><a attr="1"><b>2</b></a></p>):struct<a:map<string,int>>>
-- !query output
{"a":{"_attr":1,"b":2}}


-- !query
select from_xml('<p><d>2012-12-15</d><t>2012-12-15 15:15:15</t></p>', 'd date, t timestamp')
-- !query schema
struct<from_xml(<p><d>2012-12-15</d><t>2012-12-15 15:15:15</t></p>):struct<d:date,t:timestamp>>
-- !query output
{"d":2012-12-15,"t":2012-12-15 15:15:15}


-- !query
select from_xml(
  '<p><d>12/15 2012</d><t>12/15 2012 15:15:15</t>}</p>',
  'd date, t timestamp',
  map('dateFormat', 'MM/dd yyyy', 'timestampFormat', 'MM/dd yyyy HH:mm:ss'))
-- !query schema
struct<from_xml(<p><d>12/15 2012</d><t>12/15 2012 15:15:15</t>}</p>):struct<d:date,t:timestamp>>
-- !query output
{"d":2012-12-15,"t":2012-12-15 15:15:15}


-- !query
select from_xml(
  '<p><d>02-29</d></p>',
  'd date',
  map('dateFormat', 'MM-dd'))
-- !query schema
struct<from_xml(<p><d>02-29</d></p>):struct<d:date>>
-- !query output
{"d":null}


-- !query
select from_xml(
  '<p><t>02-29</t></p>',
  't timestamp',
  map('timestampFormat', 'MM-dd'))
-- !query schema
struct<from_xml(<p><t>02-29</t></p>):struct<t:timestamp>>
-- !query output
{"t":null}


-- !query
select schema_of_xml(null)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_NULL",
  "sqlState" : "42K09",
  "messageParameters" : {
    "exprName" : "xml",
    "sqlExpr" : "\"schema_of_xml(NULL)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 26,
    "fragment" : "schema_of_xml(null)"
  } ]
}


-- !query
CREATE TEMPORARY VIEW xmlTable(xmlField, a) AS SELECT * FROM VALUES ('<p><a>1</a><b>"2"</b></p>', 'a')
-- !query schema
struct<>
-- !query output



-- !query
SELECT schema_of_xml(xmlField) FROM xmlTable
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.NON_FOLDABLE_INPUT",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputExpr" : "\"xmlField\"",
    "inputName" : "`xml`",
    "inputType" : "\"STRING\"",
    "sqlExpr" : "\"schema_of_xml(xmlField)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 30,
    "fragment" : "schema_of_xml(xmlField)"
  } ]
}


-- !query
DROP VIEW IF EXISTS xmlTable
-- !query schema
struct<>
-- !query output

