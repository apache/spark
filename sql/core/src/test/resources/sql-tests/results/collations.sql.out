-- Automatically generated by SQLQueryTestSuite
-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('aaa', 'aaa')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('AAA', 'AAA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('bbb', 'bbb')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('BBB', 'BBB')
-- !query schema
struct<>
-- !query output



-- !query
describe table t1
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
utf8_binary         	string              	                    
utf8_lcase          	string collate UTF8_LCASE


-- !query
select count(*) from t1 group by utf8_binary
-- !query schema
struct<count(1):bigint>
-- !query output
1
1
1
1


-- !query
select count(*) from t1 group by utf8_lcase
-- !query schema
struct<count(1):bigint>
-- !query output
2
2


-- !query
select * from t1 where utf8_binary = 'aaa'
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
aaa	aaa


-- !query
select * from t1 where utf8_lcase = 'aaa' collate utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
aaa	aaa


-- !query
select * from t1 where utf8_binary < 'bbb'
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
BBB	BBB
aaa	aaa


-- !query
select * from t1 where utf8_lcase < 'bbb' collate utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
aaa	aaa


-- !query
select l.utf8_binary, r.utf8_lcase from t1 l join t1 r on l.utf8_lcase = r.utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
AAA	aaa
BBB	BBB
BBB	bbb
aaa	AAA
aaa	aaa
bbb	BBB
bbb	bbb


-- !query
create table t2(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t2 values('aaa', 'aaa')
-- !query schema
struct<>
-- !query output



-- !query
insert into t2 values('bbb', 'bbb')
-- !query schema
struct<>
-- !query output



-- !query
select * from t1 anti join t2 on t1.utf8_lcase = t2.utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output



-- !query
drop table t2
-- !query schema
struct<>
-- !query output



-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except all select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaa
bbb
zzz
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaa
bbb
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union all select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
AAA
BBB
ZZZ
aaa
aaa
bbb
bbb
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') intersect select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaa
bbb


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except select col1 collate unicode_ci from values ('aaa'), ('bbb')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "first",
    "dataType1" : "\"STRING COLLATE UNICODE_CI\"",
    "dataType2" : "\"STRING COLLATE UTF8_LCASE\"",
    "hint" : "",
    "operator" : "EXCEPT",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 162,
    "fragment" : "select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except select col1 collate unicode_ci from values ('aaa'), ('bbb')"
  } ]
}


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except all select col1 collate unicode_ci from values ('aaa'), ('bbb')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "first",
    "dataType1" : "\"STRING COLLATE UNICODE_CI\"",
    "dataType2" : "\"STRING COLLATE UTF8_LCASE\"",
    "hint" : "",
    "operator" : "EXCEPT ALL",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 166,
    "fragment" : "select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except all select col1 collate unicode_ci from values ('aaa'), ('bbb')"
  } ]
}


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union select col1 collate unicode_ci from values ('aaa'), ('bbb')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "first",
    "dataType1" : "\"STRING COLLATE UNICODE_CI\"",
    "dataType2" : "\"STRING COLLATE UTF8_LCASE\"",
    "hint" : "",
    "operator" : "UNION",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 161,
    "fragment" : "select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union select col1 collate unicode_ci from values ('aaa'), ('bbb')"
  } ]
}


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union all select col1 collate unicode_ci from values ('aaa'), ('bbb')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "first",
    "dataType1" : "\"STRING COLLATE UNICODE_CI\"",
    "dataType2" : "\"STRING COLLATE UTF8_LCASE\"",
    "hint" : "",
    "operator" : "UNION",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 165,
    "fragment" : "select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union all select col1 collate unicode_ci from values ('aaa'), ('bbb')"
  } ]
}


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') intersect select col1 collate unicode_ci from values ('aaa'), ('bbb')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "first",
    "dataType1" : "\"STRING COLLATE UNICODE_CI\"",
    "dataType2" : "\"STRING COLLATE UTF8_LCASE\"",
    "hint" : "",
    "operator" : "INTERSECT",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 156,
    "fragment" : "select col1 collate utf8_lcase from values ('aaa'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') intersect select col1 collate unicode_ci from values ('aaa'), ('bbb')"
  } ]
}


-- !query
create table t1 (c1 struct<utf8_binary: string collate utf8_binary, utf8_lcase: string collate utf8_lcase>) USING PARQUET
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (named_struct('utf8_binary', 'aaa', 'utf8_lcase', 'aaa'))
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (named_struct('utf8_binary', 'AAA', 'utf8_lcase', 'AAA'))
-- !query schema
struct<>
-- !query output



-- !query
select count(*) from t1 group by c1.utf8_binary
-- !query schema
struct<count(1):bigint>
-- !query output
1
1


-- !query
select count(*) from t1 group by c1.utf8_lcase
-- !query schema
struct<count(1):bigint>
-- !query output
2


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
select array_contains(ARRAY('aaa' collate utf8_lcase),'AAA' collate utf8_lcase)
-- !query schema
struct<array_contains(array(collate(aaa, utf8_lcase)), collate(AAA, utf8_lcase)):boolean>
-- !query output
true


-- !query
select array_position(ARRAY('aaa' collate utf8_lcase, 'bbb' collate utf8_lcase),'BBB' collate utf8_lcase)
-- !query schema
struct<array_position(array(collate(aaa, utf8_lcase), collate(bbb, utf8_lcase)), collate(BBB, utf8_lcase)):bigint>
-- !query output
2


-- !query
select nullif('aaa' COLLATE utf8_lcase, 'AAA' COLLATE utf8_lcase)
-- !query schema
struct<nullif(collate(aaa, utf8_lcase), collate(AAA, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
NULL


-- !query
select least('aaa' COLLATE utf8_lcase, 'AAA' collate utf8_lcase, 'a' collate utf8_lcase)
-- !query schema
struct<least(collate(aaa, utf8_lcase), collate(AAA, utf8_lcase), collate(a, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
a


-- !query
select arrays_overlap(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<arrays_overlap(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):boolean>
-- !query output
true


-- !query
select array_distinct(array('aaa' collate utf8_lcase, 'AAA' collate utf8_lcase))
-- !query schema
struct<array_distinct(array(collate(aaa, utf8_lcase), collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
["aaa"]


-- !query
select array_union(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<array_union(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
["aaa"]


-- !query
select array_intersect(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<array_intersect(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
["aaa"]


-- !query
select array_except(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<array_except(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
[]


-- !query
select 'a' collate unicode < 'A'
-- !query schema
struct<(collate(a, unicode) < 'A' collate UNICODE):boolean>
-- !query output
true


-- !query
select 'a' collate unicode_ci = 'A'
-- !query schema
struct<(collate(a, unicode_ci) = 'A' collate UNICODE_CI):boolean>
-- !query output
true


-- !query
select 'a' collate unicode_ai = 'å'
-- !query schema
struct<(collate(a, unicode_ai) = 'å' collate UNICODE_AI):boolean>
-- !query output
true


-- !query
select 'a' collate unicode_ci_ai = 'Å'
-- !query schema
struct<(collate(a, unicode_ci_ai) = 'Å' collate UNICODE_CI_AI):boolean>
-- !query output
true


-- !query
select 'a' collate en < 'A'
-- !query schema
struct<(collate(a, en) < 'A' collate en):boolean>
-- !query output
true


-- !query
select 'a' collate en_ci = 'A'
-- !query schema
struct<(collate(a, en_ci) = 'A' collate en_CI):boolean>
-- !query output
true


-- !query
select 'a' collate en_ai = 'å'
-- !query schema
struct<(collate(a, en_ai) = 'å' collate en_AI):boolean>
-- !query output
true


-- !query
select 'a' collate en_ci_ai = 'Å'
-- !query schema
struct<(collate(a, en_ci_ai) = 'Å' collate en_CI_AI):boolean>
-- !query output
true


-- !query
select 'Kypper' collate sv < 'Köpfe'
-- !query schema
struct<(collate(Kypper, sv) < 'Köpfe' collate sv):boolean>
-- !query output
true


-- !query
select 'Kypper' collate de > 'Köpfe'
-- !query schema
struct<(collate(Kypper, de) > 'Köpfe' collate de):boolean>
-- !query output
true


-- !query
select 'I' collate tr_ci = 'ı'
-- !query schema
struct<(collate(I, tr_ci) = 'ı' collate tr_CI):boolean>
-- !query output
true


-- !query
create table t4 (text string collate utf8_binary, pairDelim string collate utf8_lcase, keyValueDelim string collate utf8_binary) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t4 values('a:1,b:2,c:3', ',', ':')
-- !query schema
struct<>
-- !query output



-- !query
select str_to_map(text, pairDelim, keyValueDelim) from t4
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INDETERMINATE_COLLATION",
  "sqlState" : "42P22"
}


-- !query
select str_to_map(text collate utf8_binary, pairDelim collate utf8_lcase, keyValueDelim collate utf8_binary) from t4
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select str_to_map(text collate utf8_binary, pairDelim collate utf8_binary, keyValueDelim collate utf8_binary) from t4
-- !query schema
struct<str_to_map(collate(text, utf8_binary), collate(pairDelim, utf8_binary), collate(keyValueDelim, utf8_binary)):map<string,string>>
-- !query output
{"a":"1","b":"2","c":"3"}


-- !query
select str_to_map(text collate unicode_ai, pairDelim collate unicode_ai, keyValueDelim collate unicode_ai) from t4
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(text, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"str_to_map(collate(text, unicode_ai), collate(pairDelim, unicode_ai), collate(keyValueDelim, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 106,
    "fragment" : "str_to_map(text collate unicode_ai, pairDelim collate unicode_ai, keyValueDelim collate unicode_ai)"
  } ]
}


-- !query
drop table t4
-- !query schema
struct<>
-- !query output



-- !query
create table t5(s string, utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('Spark', 'Spark', 'SQL')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('aaAaAAaA', 'aaAaAAaA', 'aaAaAAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('aaAaAAaA', 'aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('aaAaAAaA', 'aaAaAAaA', 'aaAaaAaAaaAaaAaAaaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('bbAbaAbA', 'bbAbAAbA', 'a')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('İo', 'İo', 'İo')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('İo', 'İo', 'İo ')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('İo', 'İo ', 'İo')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('İo', 'İo', 'i̇o')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('efd2', 'efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('Hello, world! Nice day.', 'Hello, world! Nice day.', 'Hello, world! Nice day.')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('Something else. Nothing here.', 'Something else. Nothing here.', 'Something else. Nothing here.')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('kitten', 'kitten', 'sitTing')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('abc', 'abc', 'abc')
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values ('abcdcba', 'abcdcba', 'aBcDCbA')
-- !query schema
struct<>
-- !query output



-- !query
create table t6(ascii long) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t6 values (97)
-- !query schema
struct<>
-- !query output



-- !query
insert into t6 values (66)
-- !query schema
struct<>
-- !query output



-- !query
create table t7(ascii double) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t7 values (97.52143)
-- !query schema
struct<>
-- !query output



-- !query
insert into t7 values (66.421)
-- !query schema
struct<>
-- !query output



-- !query
create table t8(format string collate utf8_binary, utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t8 values ('%s%s', 'abCdE', 'abCdE')
-- !query schema
struct<>
-- !query output



-- !query
create table t9(num long) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t9 values (97)
-- !query schema
struct<>
-- !query output



-- !query
insert into t9 values (66)
-- !query schema
struct<>
-- !query output



-- !query
create table t10(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t10 values ('aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t10 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
select concat_ws(' ', utf8_lcase, utf8_lcase) from t5
-- !query schema
struct<concat_ws( , utf8_lcase, utf8_lcase):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day. Hello, world! Nice day.
SQL SQL
Something else. Nothing here. Something else. Nothing here.
a a
aBcDCbA aBcDCbA
aaAaAAaA aaAaAAaA
aaAaaAaA aaAaaAaA
aaAaaAaAaaAaaAaAaaAaaAaA aaAaaAaAaaAaaAaAaaAaaAaA
abc abc
efd2 efd2
i̇o i̇o
sitTing sitTing
İo  İo 
İo İo
İo İo


-- !query
select concat_ws(' ', utf8_binary, utf8_lcase) from t5
-- !query schema
struct<concat_ws( , utf8_binary, utf8_lcase):string collate null>
-- !query output
Hello, world! Nice day. Hello, world! Nice day.
Something else. Nothing here. Something else. Nothing here.
Spark SQL
aaAaAAaA aaAaAAaA
aaAaAAaA aaAaaAaA
aaAaAAaA aaAaaAaAaaAaaAaAaaAaaAaA
abc abc
abcdcba aBcDCbA
bbAbAAbA a
efd2 efd2
kitten sitTing
İo  İo
İo i̇o
İo İo
İo İo


-- !query
select concat_ws(' ' collate utf8_binary, utf8_binary, 'SQL' collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select concat_ws(' ' collate utf8_lcase, utf8_binary, 'SQL' collate utf8_lcase) from t5
-- !query schema
struct<concat_ws(collate( , utf8_lcase), utf8_binary, collate(SQL, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day. SQL
Something else. Nothing here. SQL
Spark SQL
aaAaAAaA SQL
aaAaAAaA SQL
aaAaAAaA SQL
abc SQL
abcdcba SQL
bbAbAAbA SQL
efd2 SQL
kitten SQL
İo  SQL
İo SQL
İo SQL
İo SQL


-- !query
select concat_ws(',', utf8_lcase, 'word'), concat_ws(',', utf8_binary, 'word') from t5
-- !query schema
struct<concat_ws(,, utf8_lcase, word):string collate UTF8_LCASE,concat_ws(,, utf8_binary, word):string>
-- !query output
Hello, world! Nice day.,word	Hello, world! Nice day.,word
SQL,word	Spark,word
Something else. Nothing here.,word	Something else. Nothing here.,word
a,word	bbAbAAbA,word
aBcDCbA,word	abcdcba,word
aaAaAAaA,word	aaAaAAaA,word
aaAaaAaA,word	aaAaAAaA,word
aaAaaAaAaaAaaAaAaaAaaAaA,word	aaAaAAaA,word
abc,word	abc,word
efd2,word	efd2,word
i̇o,word	İo,word
sitTing,word	kitten,word
İo ,word	İo,word
İo,word	İo ,word
İo,word	İo,word


-- !query
select concat_ws(',', utf8_lcase, 'word' collate utf8_binary), concat_ws(',', utf8_binary, 'word' collate utf8_lcase) from t5
-- !query schema
struct<concat_ws(,, utf8_lcase, collate(word, utf8_binary)):string,concat_ws(,, utf8_binary, collate(word, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.,word	Hello, world! Nice day.,word
SQL,word	Spark,word
Something else. Nothing here.,word	Something else. Nothing here.,word
a,word	bbAbAAbA,word
aBcDCbA,word	abcdcba,word
aaAaAAaA,word	aaAaAAaA,word
aaAaaAaA,word	aaAaAAaA,word
aaAaaAaAaaAaaAaAaaAaaAaA,word	aaAaAAaA,word
abc,word	abc,word
efd2,word	efd2,word
i̇o,word	İo,word
sitTing,word	kitten,word
İo ,word	İo,word
İo,word	İo ,word
İo,word	İo,word


-- !query
select elt(2, s, utf8_binary) from t5
-- !query schema
struct<elt(2, s, utf8_binary):string>
-- !query output
Hello, world! Nice day.
Something else. Nothing here.
Spark
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAbAAbA
efd2
kitten
İo
İo
İo
İo


-- !query
select elt(2, utf8_binary, utf8_lcase, s) from t5
-- !query schema
struct<elt(2, utf8_binary, utf8_lcase, s):string collate null>
-- !query output
Hello, world! Nice day.
SQL
Something else. Nothing here.
a
aBcDCbA
aaAaAAaA
aaAaaAaA
aaAaaAaAaaAaaAaAaaAaaAaA
abc
efd2
i̇o
sitTing
İo
İo
İo


-- !query
select elt(1, utf8_binary collate utf8_binary, utf8_lcase collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select elt(1, utf8_binary collate utf8_binary, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<elt(1, collate(utf8_binary, utf8_binary), collate(utf8_lcase, utf8_binary)):string>
-- !query output
Hello, world! Nice day.
Something else. Nothing here.
Spark
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAbAAbA
efd2
kitten
İo
İo
İo
İo


-- !query
select elt(1, utf8_binary collate utf8_binary, utf8_lcase) from t5
-- !query schema
struct<elt(1, collate(utf8_binary, utf8_binary), utf8_lcase):string>
-- !query output
Hello, world! Nice day.
Something else. Nothing here.
Spark
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAbAAbA
efd2
kitten
İo
İo
İo
İo


-- !query
select elt(1, utf8_binary, 'word'), elt(1, utf8_lcase, 'word') from t5
-- !query schema
struct<elt(1, utf8_binary, word):string,elt(1, utf8_lcase, 'word' collate UTF8_LCASE):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select elt(1, utf8_binary, 'word' collate utf8_lcase), elt(1, utf8_lcase, 'word' collate utf8_binary) from t5
-- !query schema
struct<elt(1, utf8_binary, collate(word, utf8_lcase)):string collate UTF8_LCASE,elt(1, utf8_lcase, collate(word, utf8_binary)):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select split_part(utf8_binary, utf8_lcase, 3) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INDETERMINATE_COLLATION",
  "sqlState" : "42P22"
}


-- !query
select split_part(s, utf8_binary, 1) from t5
-- !query schema
struct<split_part(s, utf8_binary, 1):string>
-- !query output













bbAbaAbA
İo


-- !query
select split_part(utf8_binary collate utf8_binary, s collate utf8_lcase, 1) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select split_part(utf8_binary, utf8_lcase collate utf8_binary, 2) from t5
-- !query schema
struct<split_part(utf8_binary, collate(utf8_lcase, utf8_binary), 2):string>
-- !query output



-- !query
select split_part(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase, 2) from t5
-- !query schema
struct<split_part(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase), 2):string collate UTF8_LCASE>
-- !query output













 
b


-- !query
select split_part(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 2) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"split_part(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai), 2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 83,
    "fragment" : "split_part(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 2)"
  } ]
}


-- !query
select split_part(utf8_binary, 'a', 3), split_part(utf8_lcase, 'a', 3) from t5
-- !query schema
struct<split_part(utf8_binary, a, 3):string,split_part(utf8_lcase, a, 3):string collate UTF8_LCASE>
-- !query output
	
	
	
	
	
	
	
	
	
	
	
	
A	
A	
A


-- !query
select split_part(utf8_binary, 'a' collate utf8_lcase, 3), split_part(utf8_lcase, 'a' collate utf8_binary, 3) from t5
-- !query schema
struct<split_part(utf8_binary, collate(a, utf8_lcase), 3):string collate UTF8_LCASE,split_part(utf8_lcase, collate(a, utf8_binary), 3):string>
-- !query output
	
	
	
	
	
	
	
	
	
	
	
	
	A
	A
	A


-- !query
select split_part(utf8_binary, 'a ' collate utf8_lcase_rtrim, 3), split_part(utf8_lcase, 'a' collate utf8_binary, 3) from t5
-- !query schema
struct<split_part(utf8_binary, collate(a , utf8_lcase_rtrim), 3):string collate UTF8_LCASE_RTRIM,split_part(utf8_lcase, collate(a, utf8_binary), 3):string>
-- !query output
	
	
	
	
	
	
	
	
	
	
	
	
	A
	A
	A


-- !query
select contains(utf8_binary, utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"contains(utf8_binary, utf8_lcase)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 40,
    "fragment" : "contains(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select contains(s, utf8_binary) from t5
-- !query schema
struct<contains(s, utf8_binary):boolean>
-- !query output
false
false
true
true
true
true
true
true
true
true
true
true
true
true
true


-- !query
select contains(utf8_binary collate utf8_binary, s collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select contains(utf8_binary, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<contains(utf8_binary, collate(utf8_lcase, utf8_binary)):boolean>
-- !query output
false
false
false
false
false
false
false
false
true
true
true
true
true
true
true


-- !query
select contains(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t5
-- !query schema
struct<contains(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase)):boolean>
-- !query output
false
false
false
false
true
true
true
true
true
true
true
true
true
true
true


-- !query
select contains(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"contains(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 78,
    "fragment" : "contains(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai)"
  } ]
}


-- !query
select contains(utf8_binary, 'a'), contains(utf8_lcase, 'a') from t5
-- !query schema
struct<contains(utf8_binary, a):boolean,contains(utf8_lcase, a):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	true
true	false
true	true
true	true
true	true
true	true
true	true
true	true


-- !query
select contains(utf8_binary, 'AaAA' collate utf8_lcase), contains(utf8_lcase, 'AAa' collate utf8_binary) from t5
-- !query schema
struct<contains(utf8_binary, collate(AaAA, utf8_lcase)):boolean,contains(utf8_lcase, collate(AAa, utf8_binary)):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
true	false
true	false
true	true


-- !query
select contains(utf8_binary, 'AaAA ' collate utf8_lcase_rtrim), contains(utf8_lcase, 'AAa ' collate utf8_binary_rtrim) from t5
-- !query schema
struct<contains(utf8_binary, collate(AaAA , utf8_lcase_rtrim)):boolean,contains(utf8_lcase, collate(AAa , utf8_binary_rtrim)):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
true	false
true	false
true	true


-- !query
select substring_index(utf8_binary, utf8_lcase, 2) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"substring_index(utf8_binary, utf8_lcase, 2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 50,
    "fragment" : "substring_index(utf8_binary, utf8_lcase, 2)"
  } ]
}


-- !query
select substring_index(s, utf8_binary,1) from t5
-- !query schema
struct<substring_index(s, utf8_binary, 1):string>
-- !query output













bbAbaAbA
İo


-- !query
select substring_index(utf8_binary collate utf8_binary, s collate utf8_lcase, 3) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select substring_index(utf8_binary, utf8_lcase collate utf8_binary, 2) from t5
-- !query schema
struct<substring_index(utf8_binary, collate(utf8_lcase, utf8_binary), 2):string>
-- !query output
Hello, world! Nice day.
Something else. Nothing here.
Spark
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAbAAbA
efd2
kitten
İo
İo
İo
İo


-- !query
select substring_index(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase, 2) from t5
-- !query schema
struct<substring_index(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase), 2):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.
Something else. Nothing here.
Spark
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAb
efd2
kitten
İo
İo
İo
İo


-- !query
select substring_index(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 2) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"substring_index(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai), 2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 88,
    "fragment" : "substring_index(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 2)"
  } ]
}


-- !query
select substring_index(utf8_binary, 'a', 2), substring_index(utf8_lcase, 'a', 2) from t5
-- !query schema
struct<substring_index(utf8_binary, a, 2):string,substring_index(utf8_lcase, a, 2):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
a	a
a	a
a	a
abc	abc
abcdcb	aBcDCb
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select substring_index(utf8_binary, 'AaAA' collate utf8_lcase, 2), substring_index(utf8_lcase, 'AAa' collate utf8_binary, 2) from t5
-- !query schema
struct<substring_index(utf8_binary, collate(AaAA, utf8_lcase), 2):string collate UTF8_LCASE,substring_index(utf8_lcase, collate(AAa, utf8_binary), 2):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
a	aaAaAAaA
a	aaAaaAaA
a	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select substring_index(utf8_binary, 'AaAA ' collate utf8_lcase_rtrim, 2), substring_index(utf8_lcase, 'AAa' collate utf8_binary, 2) from t5
-- !query schema
struct<substring_index(utf8_binary, collate(AaAA , utf8_lcase_rtrim), 2):string collate UTF8_LCASE_RTRIM,substring_index(utf8_lcase, collate(AAa, utf8_binary), 2):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
a	aaAaAAaA
a	aaAaaAaA
a	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select instr(utf8_binary, utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"instr(utf8_binary, utf8_lcase)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 37,
    "fragment" : "instr(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select instr(s, utf8_binary) from t5
-- !query schema
struct<instr(s, utf8_binary):int>
-- !query output
0
0
1
1
1
1
1
1
1
1
1
1
1
1
1


-- !query
select instr(utf8_binary collate utf8_binary, s collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select instr(utf8_binary, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<instr(utf8_binary, collate(utf8_lcase, utf8_binary)):int>
-- !query output
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1


-- !query
select instr(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t5
-- !query schema
struct<instr(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase)):int>
-- !query output
0
0
0
0
1
1
1
1
1
1
1
1
1
1
3


-- !query
select instr(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"instr(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 75,
    "fragment" : "instr(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai)"
  } ]
}


-- !query
select instr(utf8_binary, 'a'), instr(utf8_lcase, 'a') from t5
-- !query schema
struct<instr(utf8_binary, a):int,instr(utf8_lcase, a):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	1
1	1
1	1
1	1
1	1
1	1
21	21
3	0


-- !query
select instr(utf8_binary, 'AaAA' collate utf8_lcase), instr(utf8_lcase, 'AAa' collate utf8_binary) from t5
-- !query schema
struct<instr(utf8_binary, collate(AaAA, utf8_lcase)):int,instr(utf8_lcase, collate(AAa, utf8_binary)):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
1	0
1	0
1	5


-- !query
select find_in_set(utf8_binary, utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"find_in_set(utf8_binary, utf8_lcase)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 43,
    "fragment" : "find_in_set(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select find_in_set(s, utf8_binary) from t5
-- !query schema
struct<find_in_set(s, utf8_binary):int>
-- !query output
0
0
0
1
1
1
1
1
1
1
1
1
1
1
1


-- !query
select find_in_set(utf8_binary collate utf8_binary, s collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select find_in_set(utf8_binary, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<find_in_set(utf8_binary, collate(utf8_lcase, utf8_binary)):int>
-- !query output
0
0
0
0
0
0
0
0
0
0
1
1
1
1
1


-- !query
select find_in_set(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t5
-- !query schema
struct<find_in_set(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase)):int>
-- !query output
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1


-- !query
select find_in_set(utf8_binary, 'aaAaaAaA,i̇o'), find_in_set(utf8_lcase, 'aaAaaAaA,i̇o') from t5
-- !query schema
struct<find_in_set(utf8_binary, aaAaaAaA,i̇o):int,find_in_set(utf8_lcase, aaAaaAaA,i̇o):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	1
0	1
0	2
0	2
0	2


-- !query
select find_in_set(utf8_binary, 'aaAaaAaA,i̇o' collate utf8_lcase), find_in_set(utf8_lcase, 'aaAaaAaA,i̇o' collate utf8_binary) from t5
-- !query schema
struct<find_in_set(utf8_binary, collate(aaAaaAaA,i̇o, utf8_lcase)):int,find_in_set(utf8_lcase, collate(aaAaaAaA,i̇o, utf8_binary)):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
1	0
1	0
1	1
2	0
2	0
2	2


-- !query
select find_in_set(utf8_binary, 'aaAaaAaA,i̇o ' collate utf8_lcase_rtrim), find_in_set(utf8_lcase, 'aaAaaAaA,i̇o' collate utf8_binary) from t5
-- !query schema
struct<find_in_set(utf8_binary, collate(aaAaaAaA,i̇o , utf8_lcase_rtrim)):int,find_in_set(utf8_lcase, collate(aaAaaAaA,i̇o, utf8_binary)):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
1	0
1	0
1	1
2	0
2	0
2	0
2	2


-- !query
select startswith(utf8_binary, utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"startswith(utf8_binary, utf8_lcase)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 42,
    "fragment" : "startswith(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select startswith(s, utf8_binary) from t5
-- !query schema
struct<startswith(s, utf8_binary):boolean>
-- !query output
false
false
true
true
true
true
true
true
true
true
true
true
true
true
true


-- !query
select startswith(utf8_binary collate utf8_binary, s collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select startswith(utf8_binary, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<startswith(utf8_binary, collate(utf8_lcase, utf8_binary)):boolean>
-- !query output
false
false
false
false
false
false
false
false
true
true
true
true
true
true
true


-- !query
select startswith(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t5
-- !query schema
struct<startswith(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase)):boolean>
-- !query output
false
false
false
false
false
true
true
true
true
true
true
true
true
true
true


-- !query
select startswith(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"startswith(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 80,
    "fragment" : "startswith(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai)"
  } ]
}


-- !query
select startswith(utf8_binary, 'aaAaaAaA'), startswith(utf8_lcase, 'aaAaaAaA') from t5
-- !query schema
struct<startswith(utf8_binary, aaAaaAaA):boolean,startswith(utf8_lcase, aaAaaAaA):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	true
false	true
false	true


-- !query
select startswith(utf8_binary, 'aaAaaAaA' collate utf8_lcase), startswith(utf8_lcase, 'aaAaaAaA' collate utf8_binary) from t5
-- !query schema
struct<startswith(utf8_binary, collate(aaAaaAaA, utf8_lcase)):boolean,startswith(utf8_lcase, collate(aaAaaAaA, utf8_binary)):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
true	false
true	true
true	true


-- !query
select startswith(utf8_binary, 'aaAaaAaA ' collate utf8_lcase_rtrim), startswith(utf8_lcase, 'aaAaaAaA' collate utf8_binary) from t5
-- !query schema
struct<startswith(utf8_binary, collate(aaAaaAaA , utf8_lcase_rtrim)):boolean,startswith(utf8_lcase, collate(aaAaaAaA, utf8_binary)):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
true	false
true	true
true	true


-- !query
select translate(utf8_lcase, utf8_lcase, '12345') from t5
-- !query schema
struct<translate(utf8_lcase, utf8_lcase, 12345):string collate UTF8_LCASE>
-- !query output
1
11111111
11111111
111111111111111111111111
12
12
123
123
123
123
12332
12335532
1234
1234321
123454142544


-- !query
select translate(utf8_binary, utf8_lcase, '12345') from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"translate(utf8_binary, utf8_lcase, 12345)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 50,
    "fragment" : "translate(utf8_binary, utf8_lcase, '12345')"
  } ]
}


-- !query
select translate(utf8_binary, 'aBc' collate utf8_lcase, '12345' collate utf8_binary) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING COLLATE UTF8_LCASE\", \"STRING\""
  }
}


-- !query
select translate(utf8_binary, 'SQL' collate utf8_lcase, '12345' collate utf8_lcase) from t5
-- !query schema
struct<translate(utf8_binary, collate(SQL, utf8_lcase), collate(12345, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
1omething e31e. Nothing here.
1park
He33o, wor3d! Nice day.
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAbAAbA
efd2
kitten
İo
İo
İo
İo


-- !query
select translate(utf8_binary, 'SQL' collate unicode_ai, '12345' collate unicode_ai) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"utf8_binary\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"translate(utf8_binary, collate(SQL, unicode_ai), collate(12345, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 83,
    "fragment" : "translate(utf8_binary, 'SQL' collate unicode_ai, '12345' collate unicode_ai)"
  } ]
}


-- !query
select translate(utf8_lcase, 'aaAaaAaA', '12345'), translate(utf8_binary, 'aaAaaAaA', '12345') from t5
-- !query schema
struct<translate(utf8_lcase, aaAaaAaA, 12345):string collate UTF8_LCASE,translate(utf8_binary, aaAaaAaA, 12345):string>
-- !query output
1	bb3b33b3
11111111	11313313
11111111	11313313
111111111111111111111111	11313313
1BcDCb1	1bcdcb1
1bc	1bc
Hello, world! Nice d1y.	Hello, world! Nice d1y.
SQL	Sp1rk
Something else. Nothing here.	Something else. Nothing here.
efd2	efd2
i̇o	İo
sitTing	kitten
İo	İo
İo	İo 
İo 	İo


-- !query
select translate(utf8_lcase, 'aBc' collate utf8_binary, '12345'), translate(utf8_binary, 'aBc' collate utf8_lcase, '12345') from t5
-- !query schema
struct<translate(utf8_lcase, collate(aBc, utf8_binary), 12345):string,translate(utf8_binary, collate(aBc, utf8_lcase), 12345):string collate UTF8_LCASE>
-- !query output
1	22121121
11A11A1A	11111111
11A11A1A11A11A1A11A11A1A	11111111
11A1AA1A	11111111
123DCbA	123d321
1b3	123
Hello, world! Ni3e d1y.	Hello, world! Ni3e d1y.
SQL	Sp1rk
Something else. Nothing here.	Something else. Nothing here.
efd2	efd2
i̇o	İo
sitTing	kitten
İo	İo
İo	İo 
İo 	İo


-- !query
select translate(utf8_lcase, 'aBc ' collate utf8_binary_rtrim, '12345'), translate(utf8_binary, 'aBc' collate utf8_lcase, '12345') from t5
-- !query schema
struct<translate(utf8_lcase, collate(aBc , utf8_binary_rtrim), 12345):string collate UTF8_BINARY_RTRIM,translate(utf8_binary, collate(aBc, utf8_lcase), 12345):string collate UTF8_LCASE>
-- !query output
1	22121121
11A11A1A	11111111
11A11A1A11A11A1A11A11A1A	11111111
11A1AA1A	11111111
123DCbA	123d321
1b3	123
Hello,4world!4Ni3e4d1y.	Hello, world! Ni3e d1y.
SQL	Sp1rk
Something4else.4Nothing4here.	Something else. Nothing here.
efd2	efd2
i̇o	İo
sitTing	kitten
İo	İo
İo	İo 
İo4	İo


-- !query
select replace(utf8_binary, utf8_lcase, 'abc') from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"replace(utf8_binary, utf8_lcase, abc)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 46,
    "fragment" : "replace(utf8_binary, utf8_lcase, 'abc')"
  } ]
}


-- !query
select replace(s, utf8_binary, 'abc') from t5
-- !query schema
struct<replace(s, utf8_binary, abc):string>
-- !query output
abc
abc
abc
abc
abc
abc
abc
abc
abc
abc
abc
abc
abc
bbAbaAbA
İo


-- !query
select replace(utf8_binary collate utf8_binary, s collate utf8_lcase, 'abc') from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select replace(utf8_binary, utf8_lcase collate utf8_binary, 'abc') from t5
-- !query schema
struct<replace(utf8_binary, collate(utf8_lcase, utf8_binary), abc):string>
-- !query output
Spark
aaAaAAaA
aaAaAAaA
abc
abc
abc
abc
abc
abc
abc 
abcdcba
bbAbAAbA
kitten
İo
İo


-- !query
select replace(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase, 'abc') from t5
-- !query schema
struct<replace(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase), abc):string collate UTF8_LCASE>
-- !query output
Spark
aaAaAAaA
abc
abc
abc
abc
abc
abc
abc
abc
abc
abc 
bbabcbabcabcbabc
kitten
İo


-- !query
select replace(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 'abc') from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"replace(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai), 'abc' collate UNICODE_AI)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 84,
    "fragment" : "replace(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 'abc')"
  } ]
}


-- !query
select replace(utf8_binary, 'aaAaaAaA', 'abc'), replace(utf8_lcase, 'aaAaaAaA', 'abc') from t5
-- !query schema
struct<replace(utf8_binary, aaAaaAaA, abc):string,replace(utf8_lcase, aaAaaAaA, abc):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	abc
aaAaAAaA	abc
aaAaAAaA	abcabcabc
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select replace(utf8_binary, 'aaAaaAaA' collate utf8_lcase, 'abc'), replace(utf8_lcase, 'aaAaaAaA' collate utf8_binary, 'abc') from t5
-- !query schema
struct<replace(utf8_binary, collate(aaAaaAaA, utf8_lcase), abc):string collate UTF8_LCASE,replace(utf8_lcase, collate(aaAaaAaA, utf8_binary), abc):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
abc	aaAaAAaA
abc	abc
abc	abc
abc	abcabcabc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select replace(utf8_binary, 'aaAaaAaA ' collate utf8_lcase_rtrim, 'abc'), replace(utf8_lcase, 'aaAaaAaA' collate utf8_binary, 'abc') from t5
-- !query schema
struct<replace(utf8_binary, collate(aaAaaAaA , utf8_lcase_rtrim), abc):string collate UTF8_LCASE_RTRIM,replace(utf8_lcase, collate(aaAaaAaA, utf8_binary), abc):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	abc
aaAaAAaA	abcabcabc
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select endswith(utf8_binary, utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"endswith(utf8_binary, utf8_lcase)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 40,
    "fragment" : "endswith(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select endswith(s, utf8_binary) from t5
-- !query schema
struct<endswith(s, utf8_binary):boolean>
-- !query output
false
false
true
true
true
true
true
true
true
true
true
true
true
true
true


-- !query
select endswith(utf8_binary collate utf8_binary, s collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select endswith(utf8_binary, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<endswith(utf8_binary, collate(utf8_lcase, utf8_binary)):boolean>
-- !query output
false
false
false
false
false
false
false
false
false
true
true
true
true
true
true


-- !query
select endswith(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t5
-- !query schema
struct<endswith(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase)):boolean>
-- !query output
false
false
false
false
false
true
true
true
true
true
true
true
true
true
true


-- !query
select endswith(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"endswith(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 78,
    "fragment" : "endswith(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai)"
  } ]
}


-- !query
select endswith(utf8_binary, 'aaAaaAaA'), endswith(utf8_lcase, 'aaAaaAaA') from t5
-- !query schema
struct<endswith(utf8_binary, aaAaaAaA):boolean,endswith(utf8_lcase, aaAaaAaA):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	true
false	true
false	true


-- !query
select endswith(utf8_binary, 'aaAaaAaA' collate utf8_lcase), endswith(utf8_lcase, 'aaAaaAaA' collate utf8_binary) from t5
-- !query schema
struct<endswith(utf8_binary, collate(aaAaaAaA, utf8_lcase)):boolean,endswith(utf8_lcase, collate(aaAaaAaA, utf8_binary)):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
true	false
true	true
true	true


-- !query
select endswith(utf8_binary, 'aaAaaAaA ' collate utf8_lcase_rtrim), endswith(utf8_lcase, 'aaAaaAaA' collate utf8_binary) from t5
-- !query schema
struct<endswith(utf8_binary, collate(aaAaaAaA , utf8_lcase_rtrim)):boolean,endswith(utf8_lcase, collate(aaAaaAaA, utf8_binary)):boolean>
-- !query output
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
false	false
true	false
true	true
true	true


-- !query
select repeat(utf8_binary, 3), repeat(utf8_lcase, 2) from t5
-- !query schema
struct<repeat(utf8_binary, 3):string,repeat(utf8_lcase, 2):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.Hello, world! Nice day.Hello, world! Nice day.	Hello, world! Nice day.Hello, world! Nice day.
Something else. Nothing here.Something else. Nothing here.Something else. Nothing here.	Something else. Nothing here.Something else. Nothing here.
SparkSparkSpark	SQLSQL
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaAAaAaaAaAAaA
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaaAaAaaAaaAaA
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaAaaAaaAaAaaAaaAaAaaAaaAaA
abcabcabc	abcabc
abcdcbaabcdcbaabcdcba	aBcDCbAaBcDCbA
bbAbAAbAbbAbAAbAbbAbAAbA	aa
efd2efd2efd2	efd2efd2
kittenkittenkitten	sitTingsitTing
İo İo İo 	İoİo
İoİoİo	i̇oi̇o
İoİoİo	İo İo 
İoİoİo	İoİo


-- !query
select repeat(utf8_binary collate utf8_lcase, 3), repeat(utf8_lcase collate utf8_binary, 2) from t5
-- !query schema
struct<repeat(collate(utf8_binary, utf8_lcase), 3):string collate UTF8_LCASE,repeat(collate(utf8_lcase, utf8_binary), 2):string>
-- !query output
Hello, world! Nice day.Hello, world! Nice day.Hello, world! Nice day.	Hello, world! Nice day.Hello, world! Nice day.
Something else. Nothing here.Something else. Nothing here.Something else. Nothing here.	Something else. Nothing here.Something else. Nothing here.
SparkSparkSpark	SQLSQL
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaAAaAaaAaAAaA
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaaAaAaaAaaAaA
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaAaaAaaAaAaaAaaAaAaaAaaAaA
abcabcabc	abcabc
abcdcbaabcdcbaabcdcba	aBcDCbAaBcDCbA
bbAbAAbAbbAbAAbAbbAbAAbA	aa
efd2efd2efd2	efd2efd2
kittenkittenkitten	sitTingsitTing
İo İo İo 	İoİo
İoİoİo	i̇oi̇o
İoİoİo	İo İo 
İoİoİo	İoİo


-- !query
select ascii(utf8_binary), ascii(utf8_lcase) from t5
-- !query schema
struct<ascii(utf8_binary):int,ascii(utf8_lcase):int>
-- !query output
101	101
107	115
304	105
304	304
304	304
304	304
72	72
83	83
83	83
97	97
97	97
97	97
97	97
97	97
98	97


-- !query
select ascii(utf8_binary collate utf8_lcase), ascii(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<ascii(collate(utf8_binary, utf8_lcase)):int,ascii(collate(utf8_lcase, utf8_binary)):int>
-- !query output
101	101
107	115
304	105
304	304
304	304
304	304
72	72
83	83
83	83
97	97
97	97
97	97
97	97
97	97
98	97


-- !query
select unbase64(utf8_binary), unbase64(utf8_lcase) from t10
-- !query schema
struct<unbase64(utf8_binary):binary,unbase64(utf8_lcase):binary>
-- !query output
i� �	i�h�
y�v	y�v


-- !query
select unbase64(utf8_binary collate utf8_lcase), unbase64(utf8_lcase collate utf8_binary) from t10
-- !query schema
struct<unbase64(collate(utf8_binary, utf8_lcase)):binary,unbase64(collate(utf8_lcase, utf8_binary)):binary>
-- !query output
i� �	i�h�
y�v	y�v


-- !query
select chr(ascii) from t6
-- !query schema
struct<chr(ascii):string>
-- !query output
B
a


-- !query
select base64(utf8_binary), base64(utf8_lcase) from t5
-- !query schema
struct<base64(utf8_binary):string,base64(utf8_lcase):string>
-- !query output
SGVsbG8sIHdvcmxkISBOaWNlIGRheS4=	SGVsbG8sIHdvcmxkISBOaWNlIGRheS4=
U29tZXRoaW5nIGVsc2UuIE5vdGhpbmcgaGVyZS4=	U29tZXRoaW5nIGVsc2UuIE5vdGhpbmcgaGVyZS4=
U3Bhcms=	U1FM
YWFBYUFBYUE=	YWFBYUFBYUE=
YWFBYUFBYUE=	YWFBYWFBYUE=
YWFBYUFBYUE=	YWFBYWFBYUFhYUFhYUFhQWFhQWFhQWFB
YWJj	YWJj
YWJjZGNiYQ==	YUJjRENiQQ==
YmJBYkFBYkE=	YQ==
ZWZkMg==	ZWZkMg==
a2l0dGVu	c2l0VGluZw==
xLBv	acyHbw==
xLBv	xLBv
xLBv	xLBvIA==
xLBvIA==	xLBv


-- !query
select base64(utf8_binary collate utf8_lcase), base64(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<base64(collate(utf8_binary, utf8_lcase)):string,base64(collate(utf8_lcase, utf8_binary)):string>
-- !query output
SGVsbG8sIHdvcmxkISBOaWNlIGRheS4=	SGVsbG8sIHdvcmxkISBOaWNlIGRheS4=
U29tZXRoaW5nIGVsc2UuIE5vdGhpbmcgaGVyZS4=	U29tZXRoaW5nIGVsc2UuIE5vdGhpbmcgaGVyZS4=
U3Bhcms=	U1FM
YWFBYUFBYUE=	YWFBYUFBYUE=
YWFBYUFBYUE=	YWFBYWFBYUE=
YWFBYUFBYUE=	YWFBYWFBYUFhYUFhYUFhQWFhQWFhQWFB
YWJj	YWJj
YWJjZGNiYQ==	YUJjRENiQQ==
YmJBYkFBYkE=	YQ==
ZWZkMg==	ZWZkMg==
a2l0dGVu	c2l0VGluZw==
xLBv	acyHbw==
xLBv	xLBv
xLBv	xLBvIA==
xLBvIA==	xLBv


-- !query
select decode(encode(utf8_binary, 'utf-8'), 'utf-8'), decode(encode(utf8_lcase, 'utf-8'), 'utf-8') from t5
-- !query schema
struct<decode(encode(utf8_binary, utf-8), utf-8):string,decode(encode(utf8_lcase, utf-8), utf-8):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select decode(encode(utf8_binary collate utf8_lcase, 'utf-8'), 'utf-8'), decode(encode(utf8_lcase collate utf8_binary, 'utf-8'), 'utf-8') from t5
-- !query schema
struct<decode(encode(collate(utf8_binary, utf8_lcase), utf-8), utf-8):string,decode(encode(collate(utf8_lcase, utf8_binary), utf-8), utf-8):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select format_number(ascii, '###.###') from t7
-- !query schema
struct<format_number(ascii, ###.###):string>
-- !query output
66.421
97.521


-- !query
select format_number(ascii, '###.###' collate utf8_lcase) from t7
-- !query schema
struct<format_number(ascii, collate(###.###, utf8_lcase)):string>
-- !query output
66.421
97.521


-- !query
select encode(utf8_binary, 'utf-8'), encode(utf8_lcase, 'utf-8') from t5
-- !query schema
struct<encode(utf8_binary, utf-8):binary,encode(utf8_lcase, utf-8):binary>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select encode(utf8_binary collate utf8_lcase, 'utf-8'), encode(utf8_lcase collate utf8_binary, 'utf-8') from t5
-- !query schema
struct<encode(collate(utf8_binary, utf8_lcase), utf-8):binary,encode(collate(utf8_lcase, utf8_binary), utf-8):binary>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select to_binary(utf8_binary, 'utf-8'), to_binary(utf8_lcase, 'utf-8') from t5
-- !query schema
struct<to_binary(utf8_binary, utf-8):binary,to_binary(utf8_lcase, utf-8):binary>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select to_binary(utf8_binary collate utf8_lcase, 'utf-8'), to_binary(utf8_lcase collate utf8_binary, 'utf-8') from t5
-- !query schema
struct<to_binary(collate(utf8_binary, utf8_lcase), utf-8):binary,to_binary(collate(utf8_lcase, utf8_binary), utf-8):binary>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select sentences(utf8_binary), sentences(utf8_lcase) from t5
-- !query schema
struct<sentences(utf8_binary, , ):array<array<string>>,sentences(utf8_lcase, , ):array<array<string collate UTF8_LCASE>>>
-- !query output
[["Hello","world"],["Nice","day"]]	[["Hello","world"],["Nice","day"]]
[["Something","else"],["Nothing","here"]]	[["Something","else"],["Nothing","here"]]
[["Spark"]]	[["SQL"]]
[["aaAaAAaA"]]	[["aaAaAAaA"]]
[["aaAaAAaA"]]	[["aaAaaAaA"]]
[["aaAaAAaA"]]	[["aaAaaAaAaaAaaAaAaaAaaAaA"]]
[["abc"]]	[["abc"]]
[["abcdcba"]]	[["aBcDCbA"]]
[["bbAbAAbA"]]	[["a"]]
[["efd2"]]	[["efd2"]]
[["kitten"]]	[["sitTing"]]
[["İo"]]	[["i̇o"]]
[["İo"]]	[["İo"]]
[["İo"]]	[["İo"]]
[["İo"]]	[["İo"]]


-- !query
select sentences(utf8_binary collate utf8_lcase), sentences(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<sentences(collate(utf8_binary, utf8_lcase), , ):array<array<string collate UTF8_LCASE>>,sentences(collate(utf8_lcase, utf8_binary), , ):array<array<string>>>
-- !query output
[["Hello","world"],["Nice","day"]]	[["Hello","world"],["Nice","day"]]
[["Something","else"],["Nothing","here"]]	[["Something","else"],["Nothing","here"]]
[["Spark"]]	[["SQL"]]
[["aaAaAAaA"]]	[["aaAaAAaA"]]
[["aaAaAAaA"]]	[["aaAaaAaA"]]
[["aaAaAAaA"]]	[["aaAaaAaAaaAaaAaAaaAaaAaA"]]
[["abc"]]	[["abc"]]
[["abcdcba"]]	[["aBcDCbA"]]
[["bbAbAAbA"]]	[["a"]]
[["efd2"]]	[["efd2"]]
[["kitten"]]	[["sitTing"]]
[["İo"]]	[["i̇o"]]
[["İo"]]	[["İo"]]
[["İo"]]	[["İo"]]
[["İo"]]	[["İo"]]


-- !query
select upper(utf8_binary), upper(utf8_lcase) from t5
-- !query schema
struct<upper(utf8_binary):string,upper(utf8_lcase):string collate UTF8_LCASE>
-- !query output
AAAAAAAA	AAAAAAAA
AAAAAAAA	AAAAAAAA
AAAAAAAA	AAAAAAAAAAAAAAAAAAAAAAAA
ABC	ABC
ABCDCBA	ABCDCBA
BBABAABA	A
EFD2	EFD2
HELLO, WORLD! NICE DAY.	HELLO, WORLD! NICE DAY.
KITTEN	SITTING
SOMETHING ELSE. NOTHING HERE.	SOMETHING ELSE. NOTHING HERE.
SPARK	SQL
İO	İO
İO	İO
İO	İO 
İO 	İO


-- !query
select upper(utf8_binary collate utf8_lcase), upper(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<upper(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,upper(collate(utf8_lcase, utf8_binary)):string>
-- !query output
AAAAAAAA	AAAAAAAA
AAAAAAAA	AAAAAAAA
AAAAAAAA	AAAAAAAAAAAAAAAAAAAAAAAA
ABC	ABC
ABCDCBA	ABCDCBA
BBABAABA	A
EFD2	EFD2
HELLO, WORLD! NICE DAY.	HELLO, WORLD! NICE DAY.
KITTEN	SITTING
SOMETHING ELSE. NOTHING HERE.	SOMETHING ELSE. NOTHING HERE.
SPARK	SQL
İO	İO
İO	İO
İO	İO 
İO 	İO


-- !query
select lower(utf8_binary), lower(utf8_lcase) from t5
-- !query schema
struct<lower(utf8_binary):string,lower(utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaaaaaaa	aaaaaaaa
aaaaaaaa	aaaaaaaa
aaaaaaaa	aaaaaaaaaaaaaaaaaaaaaaaa
abc	abc
abcdcba	abcdcba
bbabaaba	a
efd2	efd2
hello, world! nice day.	hello, world! nice day.
i̇o	i̇o
i̇o	i̇o
i̇o	i̇o 
i̇o 	i̇o
kitten	sitting
something else. nothing here.	something else. nothing here.
spark	sql


-- !query
select lower(utf8_binary collate utf8_lcase), lower(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<lower(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,lower(collate(utf8_lcase, utf8_binary)):string>
-- !query output
aaaaaaaa	aaaaaaaa
aaaaaaaa	aaaaaaaa
aaaaaaaa	aaaaaaaaaaaaaaaaaaaaaaaa
abc	abc
abcdcba	abcdcba
bbabaaba	a
efd2	efd2
hello, world! nice day.	hello, world! nice day.
i̇o	i̇o
i̇o	i̇o
i̇o	i̇o 
i̇o 	i̇o
kitten	sitting
something else. nothing here.	something else. nothing here.
spark	sql


-- !query
select initcap(utf8_binary), initcap(utf8_lcase) from t5
-- !query schema
struct<initcap(utf8_binary):string,initcap(utf8_lcase):string collate UTF8_LCASE>
-- !query output
Aaaaaaaa	Aaaaaaaa
Aaaaaaaa	Aaaaaaaa
Aaaaaaaa	Aaaaaaaaaaaaaaaaaaaaaaaa
Abc	Abc
Abcdcba	Abcdcba
Bbabaaba	A
Efd2	Efd2
Hello, World! Nice Day.	Hello, World! Nice Day.
Kitten	Sitting
Something Else. Nothing Here.	Something Else. Nothing Here.
Spark	Sql
İo	İo
İo	İo
İo	İo 
İo 	İo


-- !query
select initcap(utf8_binary collate utf8_lcase), initcap(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<initcap(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,initcap(collate(utf8_lcase, utf8_binary)):string>
-- !query output
Aaaaaaaa	Aaaaaaaa
Aaaaaaaa	Aaaaaaaa
Aaaaaaaa	Aaaaaaaaaaaaaaaaaaaaaaaa
Abc	Abc
Abcdcba	Abcdcba
Bbabaaba	A
Efd2	Efd2
Hello, World! Nice Day.	Hello, World! Nice Day.
Kitten	Sitting
Something Else. Nothing Here.	Something Else. Nothing Here.
Spark	Sql
İo	İo
İo	İo
İo	İo 
İo 	İo


-- !query
select overlay(utf8_binary, utf8_lcase, 2) from t5
-- !query schema
struct<overlay(utf8_binary, utf8_lcase, 2, -1):string collate null>
-- !query output
HHello, world! Nice day.
SSQLk
SSomething else. Nothing here.
aaBcDCbA
aaaAaAAaA
aaaAaaAaA
aaaAaaAaAaaAaaAaAaaAaaAaA
aabc
baAbAAbA
eefd2
ksitTing
İi̇o
İİo
İİo
İİo


-- !query
select overlay(s, utf8_binary,1) from t5
-- !query schema
struct<overlay(s, utf8_binary, 1, -1):string>
-- !query output
Hello, world! Nice day.
Something else. Nothing here.
Spark
aaAaAAaA
aaAaAAaA
aaAaAAaA
abc
abcdcba
bbAbAAbA
efd2
kitten
İo
İo
İo
İo


-- !query
select overlay(utf8_binary collate utf8_binary, s collate utf8_lcase, 3) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select overlay(utf8_binary, utf8_lcase collate utf8_binary, 2) from t5
-- !query schema
struct<overlay(utf8_binary, collate(utf8_lcase, utf8_binary), 2, -1):string>
-- !query output
HHello, world! Nice day.
SSQLk
SSomething else. Nothing here.
aaBcDCbA
aaaAaAAaA
aaaAaaAaA
aaaAaaAaAaaAaaAaAaaAaaAaA
aabc
baAbAAbA
eefd2
ksitTing
İi̇o
İİo
İİo
İİo


-- !query
select overlay(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase, 2) from t5
-- !query schema
struct<overlay(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase), 2, -1):string collate UTF8_LCASE>
-- !query output
HHello, world! Nice day.
SSQLk
SSomething else. Nothing here.
aaBcDCbA
aaaAaAAaA
aaaAaaAaA
aaaAaaAaAaaAaaAaAaaAaaAaA
aabc
baAbAAbA
eefd2
ksitTing
İi̇o
İİo
İİo
İİo


-- !query
select overlay(utf8_binary, 'a', 2), overlay(utf8_lcase, 'a', 2) from t5
-- !query schema
struct<overlay(utf8_binary, a, 2, -1):string,overlay(utf8_lcase, 'a' collate UTF8_LCASE, 2, -1):string collate UTF8_LCASE>
-- !query output
Hallo, world! Nice day.	Hallo, world! Nice day.
Saark	SaL
Samething else. Nothing here.	Samething else. Nothing here.
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
aac	aac
aacdcba	aacDCbA
baAbAAbA	aa
ead2	ead2
katten	satTing
İa	iao
İa	İa
İa	İa 
İa 	İa


-- !query
select overlay(utf8_binary, 'AaAA' collate utf8_lcase, 2), overlay(utf8_lcase, 'AAa' collate utf8_binary, 2) from t5
-- !query schema
struct<overlay(utf8_binary, collate(AaAA, utf8_lcase), 2, -1):string collate UTF8_LCASE,overlay(utf8_lcase, collate(AAa, utf8_binary), 2, -1):string>
-- !query output
HAaAA, world! Nice day.	HAAao, world! Nice day.
SAaAA	SAAa
SAaAAhing else. Nothing here.	SAAathing else. Nothing here.
aAaAA	aAAa
aAaAAAaA	aAAaAAaA
aAaAAAaA	aAAaaAaA
aAaAAAaA	aAAaaAaAaaAaaAaAaaAaaAaA
aAaAAba	aAAaCbA
bAaAAAbA	aAAa
eAaAA	eAAa
kAaAAn	sAAaing
İAaAA	iAAa
İAaAA	İAAa
İAaAA	İAAa
İAaAA	İAAa


-- !query
select format_string(format, utf8_binary, utf8_lcase) from t8
-- !query schema
struct<format_string(format, utf8_binary, utf8_lcase):string>
-- !query output
abCdEabCdE


-- !query
select format_string(format collate utf8_lcase, utf8_lcase, utf8_binary collate utf8_lcase, 3), format_string(format, utf8_lcase collate utf8_binary, utf8_binary) from t8
-- !query schema
struct<format_string(collate(format, utf8_lcase), utf8_lcase, collate(utf8_binary, utf8_lcase), 3):string collate UTF8_LCASE,format_string(format, collate(utf8_lcase, utf8_binary), utf8_binary):string>
-- !query output
abCdEabCdE	abCdEabCdE


-- !query
select format_string(format, utf8_binary, utf8_lcase) from t8
-- !query schema
struct<format_string(format, utf8_binary, utf8_lcase):string>
-- !query output
abCdEabCdE


-- !query
select soundex(utf8_binary), soundex(utf8_lcase) from t5
-- !query schema
struct<soundex(utf8_binary):string,soundex(utf8_lcase):string>
-- !query output
A000	A000
A000	A000
A000	A000
A120	A120
A123	A123
B110	A000
E130	E130
H464	H464
K350	S352
S162	S400
S535	S535
İo	I000
İo	İo
İo	İo 
İo 	İo


-- !query
select soundex(utf8_binary collate utf8_lcase), soundex(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<soundex(collate(utf8_binary, utf8_lcase)):string,soundex(collate(utf8_lcase, utf8_binary)):string>
-- !query output
A000	A000
A000	A000
A000	A000
A120	A120
A123	A123
B110	A000
E130	E130
H464	H464
K350	S352
S162	S400
S535	S535
İo	I000
İo	İo
İo	İo 
İo 	İo


-- !query
select length(utf8_binary), length(utf8_lcase) from t5
-- !query schema
struct<length(utf8_binary):int,length(utf8_lcase):int>
-- !query output
2	2
2	3
2	3
23	23
29	29
3	2
3	3
4	4
5	3
6	7
7	7
8	1
8	24
8	8
8	8


-- !query
select length(utf8_binary collate utf8_lcase), length(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<length(collate(utf8_binary, utf8_lcase)):int,length(collate(utf8_lcase, utf8_binary)):int>
-- !query output
2	2
2	3
2	3
23	23
29	29
3	2
3	3
4	4
5	3
6	7
7	7
8	1
8	24
8	8
8	8


-- !query
select bit_length(utf8_binary), bit_length(utf8_lcase) from t5
-- !query schema
struct<bit_length(utf8_binary):int,bit_length(utf8_lcase):int>
-- !query output
184	184
232	232
24	24
24	24
24	32
24	32
32	24
32	32
40	24
48	56
56	56
64	192
64	64
64	64
64	8


-- !query
select bit_length(utf8_binary collate utf8_lcase), bit_length(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<bit_length(collate(utf8_binary, utf8_lcase)):int,bit_length(collate(utf8_lcase, utf8_binary)):int>
-- !query output
184	184
232	232
24	24
24	24
24	32
24	32
32	24
32	32
40	24
48	56
56	56
64	192
64	64
64	64
64	8


-- !query
select octet_length(utf8_binary), octet_length(utf8_lcase) from t5
-- !query schema
struct<octet_length(utf8_binary):int,octet_length(utf8_lcase):int>
-- !query output
23	23
29	29
3	3
3	3
3	4
3	4
4	3
4	4
5	3
6	7
7	7
8	1
8	24
8	8
8	8


-- !query
select octet_length(utf8_binary collate utf8_lcase), octet_length(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<octet_length(collate(utf8_binary, utf8_lcase)):int,octet_length(collate(utf8_lcase, utf8_binary)):int>
-- !query output
23	23
29	29
3	3
3	3
3	4
3	4
4	3
4	4
5	3
6	7
7	7
8	1
8	24
8	8
8	8


-- !query
select octet_length(utf8_binary collate utf8_lcase_rtrim), octet_length(utf8_lcase collate utf8_binary_rtrim) from t5
-- !query schema
struct<octet_length(collate(utf8_binary, utf8_lcase_rtrim)):int,octet_length(collate(utf8_lcase, utf8_binary_rtrim)):int>
-- !query output
23	23
29	29
3	3
3	3
3	4
3	4
4	3
4	4
5	3
6	7
7	7
8	1
8	24
8	8
8	8


-- !query
select luhn_check(num) from t9
-- !query schema
struct<luhn_check(num):boolean>
-- !query output
false
false


-- !query
select levenshtein(utf8_binary, utf8_lcase) from t5
-- !query schema
struct<levenshtein(utf8_binary, utf8_lcase):int>
-- !query output
0
0
0
0
0
0
1
1
1
16
2
4
4
4
8


-- !query
select levenshtein(s, utf8_binary) from t5
-- !query schema
struct<levenshtein(s, utf8_binary):int>
-- !query output
0
0
0
0
0
0
0
0
0
0
0
0
0
1
1


-- !query
select levenshtein(utf8_binary collate utf8_binary, s collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select levenshtein(utf8_binary, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<levenshtein(utf8_binary, collate(utf8_lcase, utf8_binary)):int>
-- !query output
0
0
0
0
0
0
1
1
1
16
2
4
4
4
8


-- !query
select levenshtein(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t5
-- !query schema
struct<levenshtein(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase)):int>
-- !query output
0
0
0
0
0
0
1
1
1
16
2
4
4
4
8


-- !query
select levenshtein(utf8_binary, 'a'), levenshtein(utf8_lcase, 'a') from t5
-- !query schema
struct<levenshtein(utf8_binary, a):int,levenshtein(utf8_lcase, a):int>
-- !query output
2	2
2	2
2	3
2	3
22	22
29	29
3	2
4	3
4	4
6	6
6	7
7	23
7	7
7	7
8	0


-- !query
select levenshtein(utf8_binary, 'AaAA' collate utf8_lcase, 3), levenshtein(utf8_lcase, 'AAa' collate utf8_binary, 4) from t5
-- !query schema
struct<levenshtein(utf8_binary, collate(AaAA, utf8_lcase), 3):int,levenshtein(utf8_lcase, collate(AAa, utf8_binary), 4):int>
-- !query output
-1	-1
-1	-1
-1	-1
-1	-1
-1	-1
-1	-1
-1	-1
-1	2
-1	3
-1	3
-1	3
-1	3
-1	3
-1	4
3	3


-- !query
select is_valid_utf8(utf8_binary), is_valid_utf8(utf8_lcase) from t5
-- !query schema
struct<is_valid_utf8(utf8_binary):boolean,is_valid_utf8(utf8_lcase):boolean>
-- !query output
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true


-- !query
select is_valid_utf8(utf8_binary collate utf8_lcase), is_valid_utf8(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<is_valid_utf8(collate(utf8_binary, utf8_lcase)):boolean,is_valid_utf8(collate(utf8_lcase, utf8_binary)):boolean>
-- !query output
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true


-- !query
select is_valid_utf8(utf8_binary collate utf8_lcase_rtrim), is_valid_utf8(utf8_lcase collate utf8_binary_rtrim) from t5
-- !query schema
struct<is_valid_utf8(collate(utf8_binary, utf8_lcase_rtrim)):boolean,is_valid_utf8(collate(utf8_lcase, utf8_binary_rtrim)):boolean>
-- !query output
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true
true	true


-- !query
select make_valid_utf8(utf8_binary), make_valid_utf8(utf8_lcase) from t5
-- !query schema
struct<make_valid_utf8(utf8_binary):string,make_valid_utf8(utf8_lcase):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select make_valid_utf8(utf8_binary collate utf8_lcase), make_valid_utf8(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<make_valid_utf8(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,make_valid_utf8(collate(utf8_lcase, utf8_binary)):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select make_valid_utf8(utf8_binary collate utf8_lcase_rtrim), make_valid_utf8(utf8_lcase collate utf8_binary_rtrim) from t5
-- !query schema
struct<make_valid_utf8(collate(utf8_binary, utf8_lcase_rtrim)):string collate UTF8_LCASE_RTRIM,make_valid_utf8(collate(utf8_lcase, utf8_binary_rtrim)):string collate UTF8_BINARY_RTRIM>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select validate_utf8(utf8_binary), validate_utf8(utf8_lcase) from t5
-- !query schema
struct<validate_utf8(utf8_binary):string,validate_utf8(utf8_lcase):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select validate_utf8(utf8_binary collate utf8_lcase), validate_utf8(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<validate_utf8(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,validate_utf8(collate(utf8_lcase, utf8_binary)):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select validate_utf8(utf8_binary collate utf8_lcase_rtrim), validate_utf8(utf8_lcase collate utf8_binary_rtrim) from t5
-- !query schema
struct<validate_utf8(collate(utf8_binary, utf8_lcase_rtrim)):string collate UTF8_LCASE_RTRIM,validate_utf8(collate(utf8_lcase, utf8_binary_rtrim)):string collate UTF8_BINARY_RTRIM>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select try_validate_utf8(utf8_binary), try_validate_utf8(utf8_lcase) from t5
-- !query schema
struct<try_validate_utf8(utf8_binary):string,try_validate_utf8(utf8_lcase):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select try_validate_utf8(utf8_binary collate utf8_lcase), try_validate_utf8(utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<try_validate_utf8(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,try_validate_utf8(collate(utf8_lcase, utf8_binary)):string>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select try_validate_utf8(utf8_binary collate utf8_lcase_rtrim), try_validate_utf8(utf8_lcase collate utf8_binary_rtrim) from t5
-- !query schema
struct<try_validate_utf8(collate(utf8_binary, utf8_lcase_rtrim)):string collate UTF8_LCASE_RTRIM,try_validate_utf8(collate(utf8_lcase, utf8_binary_rtrim)):string collate UTF8_BINARY_RTRIM>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaAaaAaaAaAaaAaaAaA
abc	abc
abcdcba	aBcDCbA
bbAbAAbA	a
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select substr(utf8_binary, 2, 2), substr(utf8_lcase, 2, 2) from t5
-- !query schema
struct<substr(utf8_binary, 2, 2):string,substr(utf8_lcase, 2, 2):string collate UTF8_LCASE>
-- !query output
aA	aA
aA	aA
aA	aA
bA	
bc	Bc
bc	bc
el	el
fd	fd
it	it
o	o
o	o 
o	̇o
o 	o
om	om
pa	QL


-- !query
select substr(utf8_binary collate utf8_lcase, 2, 2), substr(utf8_lcase collate utf8_binary, 2, 2) from t5
-- !query schema
struct<substr(collate(utf8_binary, utf8_lcase), 2, 2):string collate UTF8_LCASE,substr(collate(utf8_lcase, utf8_binary), 2, 2):string>
-- !query output
aA	aA
aA	aA
aA	aA
bA	
bc	Bc
bc	bc
el	el
fd	fd
it	it
o	o
o	o 
o	̇o
o 	o
om	om
pa	QL


-- !query
select right(utf8_binary, 2), right(utf8_lcase, 2) from t5
-- !query schema
struct<right(utf8_binary, 2):string,right(utf8_lcase, 2):string collate UTF8_LCASE>
-- !query output
aA	aA
aA	aA
aA	aA
bA	a
ba	bA
bc	bc
d2	d2
e.	e.
en	ng
o 	İo
rk	QL
y.	y.
İo	o 
İo	İo
İo	̇o


-- !query
select right(utf8_binary collate utf8_lcase, 2), right(utf8_lcase collate utf8_binary, 2) from t5
-- !query schema
struct<right(collate(utf8_binary, utf8_lcase), 2):string collate UTF8_LCASE,right(collate(utf8_lcase, utf8_binary), 2):string>
-- !query output
aA	aA
aA	aA
aA	aA
bA	a
ba	bA
bc	bc
d2	d2
e.	e.
en	ng
o 	İo
rk	QL
y.	y.
İo	o 
İo	İo
İo	̇o


-- !query
select left(utf8_binary, '2' collate utf8_lcase), left(utf8_lcase, 2) from t5
-- !query schema
struct<left(utf8_binary, collate(2, utf8_lcase)):string,left(utf8_lcase, 2):string collate UTF8_LCASE>
-- !query output
He	He
So	So
Sp	SQ
aa	aa
aa	aa
aa	aa
ab	aB
ab	ab
bb	a
ef	ef
ki	si
İo	i̇
İo	İo
İo	İo
İo	İo


-- !query
select left(utf8_binary collate utf8_lcase, 2), left(utf8_lcase collate utf8_binary, 2) from t5
-- !query schema
struct<left(collate(utf8_binary, utf8_lcase), 2):string collate UTF8_LCASE,left(collate(utf8_lcase, utf8_binary), 2):string>
-- !query output
He	He
So	So
Sp	SQ
aa	aa
aa	aa
aa	aa
ab	aB
ab	ab
bb	a
ef	ef
ki	si
İo	i̇
İo	İo
İo	İo
İo	İo


-- !query
select rpad(utf8_binary, 8, utf8_lcase) from t5
-- !query schema
struct<rpad(utf8_binary, 8, utf8_lcase):string collate null>
-- !query output
Hello, w
Somethin
SparkSQL
aaAaAAaA
aaAaAAaA
aaAaAAaA
abcabcab
abcdcbaa
bbAbAAbA
efd2efd2
kittensi
İo İoİoİ
İoi̇oi̇o
İoİo İo 
İoİoİoİo


-- !query
select rpad(s, 8, utf8_binary) from t5
-- !query schema
struct<rpad(s, 8, utf8_binary):string>
-- !query output
Hello, w
Somethin
SparkSpa
aaAaAAaA
aaAaAAaA
aaAaAAaA
abcabcab
abcdcbaa
bbAbaAbA
efd2efd2
kittenki
İoİo İo 
İoİoİoİo
İoİoİoİo
İoİoİoİo


-- !query
select rpad(utf8_binary collate utf8_binary, 8, s collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select rpad(utf8_binary, 8, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<rpad(utf8_binary, 8, collate(utf8_lcase, utf8_binary)):string>
-- !query output
Hello, w
Somethin
SparkSQL
aaAaAAaA
aaAaAAaA
aaAaAAaA
abcabcab
abcdcbaa
bbAbAAbA
efd2efd2
kittensi
İo İoİoİ
İoi̇oi̇o
İoİo İo 
İoİoİoİo


-- !query
select rpad(utf8_binary collate utf8_lcase, 8, utf8_lcase collate utf8_lcase) from t5
-- !query schema
struct<rpad(collate(utf8_binary, utf8_lcase), 8, collate(utf8_lcase, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
Hello, w
Somethin
SparkSQL
aaAaAAaA
aaAaAAaA
aaAaAAaA
abcabcab
abcdcbaa
bbAbAAbA
efd2efd2
kittensi
İo İoİoİ
İoi̇oi̇o
İoİo İo 
İoİoİoİo


-- !query
select lpad(utf8_binary collate utf8_binary_rtrim, 8, utf8_lcase collate utf8_binary_rtrim) from t5
-- !query schema
struct<lpad(collate(utf8_binary, utf8_binary_rtrim), 8, collate(utf8_lcase, utf8_binary_rtrim)):string collate UTF8_BINARY_RTRIM>
-- !query output
Hello, w
SQLSpark
Somethin
aaAaAAaA
aaAaAAaA
aaAaAAaA
aabcdcba
abcababc
bbAbAAbA
efd2efd2
i̇oi̇oİo
sikitten
İo İo İo
İoİoİoİo
İoİoİİo


-- !query
select rpad(utf8_binary, 8, 'a'), rpad(utf8_lcase, 8, 'a') from t5
-- !query schema
struct<rpad(utf8_binary, 8, a):string,rpad(utf8_lcase, 8, a):string collate UTF8_LCASE>
-- !query output
Hello, w	Hello, w
Somethin	Somethin
Sparkaaa	SQLaaaaa
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaA
abcaaaaa	abcaaaaa
abcdcbaa	aBcDCbAa
bbAbAAbA	aaaaaaaa
efd2aaaa	efd2aaaa
kittenaa	sitTinga
İo aaaaa	İoaaaaaa
İoaaaaaa	i̇oaaaaa
İoaaaaaa	İo aaaaa
İoaaaaaa	İoaaaaaa


-- !query
select rpad(utf8_binary, 8, 'AaAA' collate utf8_lcase), rpad(utf8_lcase, 8, 'AAa' collate utf8_binary) from t5
-- !query schema
struct<rpad(utf8_binary, 8, collate(AaAA, utf8_lcase)):string collate UTF8_LCASE,rpad(utf8_lcase, 8, collate(AAa, utf8_binary)):string>
-- !query output
Hello, w	Hello, w
Somethin	Somethin
SparkAaA	SQLAAaAA
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaA
abcAaAAA	abcAAaAA
abcdcbaA	aBcDCbAA
bbAbAAbA	aAAaAAaA
efd2AaAA	efd2AAaA
kittenAa	sitTingA
İo AaAAA	İoAAaAAa
İoAaAAAa	i̇oAAaAA
İoAaAAAa	İo AAaAA
İoAaAAAa	İoAAaAAa


-- !query
select lpad(utf8_binary, 8, utf8_lcase) from t5
-- !query schema
struct<lpad(utf8_binary, 8, utf8_lcase):string collate null>
-- !query output
Hello, w
SQLSpark
Somethin
aaAaAAaA
aaAaAAaA
aaAaAAaA
aabcdcba
abcababc
bbAbAAbA
efd2efd2
i̇oi̇oİo
sikitten
İo İo İo
İoİoİoİo
İoİoİİo


-- !query
select lpad(s, 8, utf8_binary) from t5
-- !query schema
struct<lpad(s, 8, utf8_binary):string>
-- !query output
Hello, w
Somethin
SpaSpark
aaAaAAaA
aaAaAAaA
aaAaAAaA
aabcdcba
abcababc
bbAbaAbA
efd2efd2
kikitten
İo İo İo
İoİoİoİo
İoİoİoİo
İoİoİoİo


-- !query
select lpad(utf8_binary collate utf8_binary, 8, s collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select lpad(utf8_binary, 8, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<lpad(utf8_binary, 8, collate(utf8_lcase, utf8_binary)):string>
-- !query output
Hello, w
SQLSpark
Somethin
aaAaAAaA
aaAaAAaA
aaAaAAaA
aabcdcba
abcababc
bbAbAAbA
efd2efd2
i̇oi̇oİo
sikitten
İo İo İo
İoİoİoİo
İoİoİİo


-- !query
select lpad(utf8_binary collate utf8_lcase, 8, utf8_lcase collate utf8_lcase) from t5
-- !query schema
struct<lpad(collate(utf8_binary, utf8_lcase), 8, collate(utf8_lcase, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
Hello, w
SQLSpark
Somethin
aaAaAAaA
aaAaAAaA
aaAaAAaA
aabcdcba
abcababc
bbAbAAbA
efd2efd2
i̇oi̇oİo
sikitten
İo İo İo
İoİoİoİo
İoİoİİo


-- !query
select lpad(utf8_binary collate utf8_binary_rtrim, 8, utf8_lcase collate utf8_binary_rtrim) from t5
-- !query schema
struct<lpad(collate(utf8_binary, utf8_binary_rtrim), 8, collate(utf8_lcase, utf8_binary_rtrim)):string collate UTF8_BINARY_RTRIM>
-- !query output
Hello, w
SQLSpark
Somethin
aaAaAAaA
aaAaAAaA
aaAaAAaA
aabcdcba
abcababc
bbAbAAbA
efd2efd2
i̇oi̇oİo
sikitten
İo İo İo
İoİoİoİo
İoİoİİo


-- !query
select lpad(utf8_binary, 8, 'a'), lpad(utf8_lcase, 8, 'a') from t5
-- !query schema
struct<lpad(utf8_binary, 8, a):string,lpad(utf8_lcase, 8, a):string collate UTF8_LCASE>
-- !query output
Hello, w	Hello, w
Somethin	Somethin
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaA
aaaSpark	aaaaaSQL
aaaaaabc	aaaaaabc
aaaaaaİo	aaaaaaİo
aaaaaaİo	aaaaai̇o
aaaaaaİo	aaaaaİo 
aaaaaİo 	aaaaaaİo
aaaaefd2	aaaaefd2
aabcdcba	aaBcDCbA
aakitten	asitTing
bbAbAAbA	aaaaaaaa


-- !query
select lpad(utf8_binary, 8, 'AaAA' collate utf8_lcase), lpad(utf8_lcase, 8, 'AAa' collate utf8_binary) from t5
-- !query schema
struct<lpad(utf8_binary, 8, collate(AaAA, utf8_lcase)):string collate UTF8_LCASE,lpad(utf8_lcase, 8, collate(AAa, utf8_binary)):string>
-- !query output
AaAAAabc	AAaAAabc
AaAAAaİo	AAaAAaİo
AaAAAaİo	AAaAAi̇o
AaAAAaİo	AAaAAİo 
AaAAAİo 	AAaAAaİo
AaAAefd2	AAaAefd2
AaASpark	AAaAASQL
Aabcdcba	AaBcDCbA
Aakitten	AsitTing
Hello, w	Hello, w
Somethin	Somethin
aaAaAAaA	aaAaAAaA
aaAaAAaA	aaAaaAaA
aaAaAAaA	aaAaaAaA
bbAbAAbA	AAaAAaAa


-- !query
select locate(utf8_binary, utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"locate(utf8_binary, utf8_lcase, 1)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 38,
    "fragment" : "locate(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select locate(s, utf8_binary) from t5
-- !query schema
struct<locate(s, utf8_binary, 1):int>
-- !query output
0
1
1
1
1
1
1
1
1
1
1
1
1
1
1


-- !query
select locate(utf8_binary collate utf8_binary, s collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select locate(utf8_binary, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<locate(utf8_binary, collate(utf8_lcase, utf8_binary), 1):int>
-- !query output
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1


-- !query
select locate(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase, 3) from t5
-- !query schema
struct<locate(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase), 3):int>
-- !query output
0
0
0
0
0
0
0
0
0
0
0
0
0
0
3


-- !query
select locate(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 3) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"locate(collate(utf8_binary, unicode_ai), collate(utf8_lcase, unicode_ai), 3)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 79,
    "fragment" : "locate(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai, 3)"
  } ]
}


-- !query
select locate(utf8_binary, 'a'), locate(utf8_lcase, 'a') from t5
-- !query schema
struct<locate(utf8_binary, a, 1):int,locate(utf8_lcase, a, 1):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	1


-- !query
select locate(utf8_binary, 'AaAA' collate utf8_lcase, 4), locate(utf8_lcase, 'AAa' collate utf8_binary, 4) from t5
-- !query schema
struct<locate(utf8_binary, collate(AaAA, utf8_lcase), 4):int,locate(utf8_lcase, collate(AAa, utf8_binary), 4):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0


-- !query
select locate(utf8_binary, 'AaAA ' collate utf8_binary_rtrim, 4), locate(utf8_lcase, 'AAa ' collate utf8_binary, 4) from t5
-- !query schema
struct<locate(utf8_binary, collate(AaAA , utf8_binary_rtrim), 4):int,locate(utf8_lcase, collate(AAa , utf8_binary), 4):int>
-- !query output
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0


-- !query
select TRIM(utf8_binary, utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"TRIM(BOTH utf8_binary FROM utf8_lcase)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 36,
    "fragment" : "TRIM(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select TRIM(s, utf8_binary) from t5
-- !query schema
struct<TRIM(BOTH s FROM utf8_binary):string>
-- !query output



-- !query
select TRIM(utf8_binary collate utf8_binary, s collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING COLLATE UTF8_LCASE\", \"STRING\""
  }
}


-- !query
select TRIM(utf8_binary, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<TRIM(BOTH utf8_binary FROM collate(utf8_lcase, utf8_binary)):string>
-- !query output









 
BcDCbA
QL
a
i̇
sitTing


-- !query
select TRIM(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t5
-- !query schema
struct<TRIM(BOTH collate(utf8_binary, utf8_lcase) FROM collate(utf8_lcase, utf8_lcase)):string collate UTF8_LCASE>
-- !query output












 
QL
sitTing


-- !query
select TRIM(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_lcase, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"TRIM(BOTH collate(utf8_binary, unicode_ai) FROM collate(utf8_lcase, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 74,
    "fragment" : "TRIM(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai)"
  } ]
}


-- !query
select TRIM(utf8_binary collate utf8_binary_rtrim, utf8_lcase collate utf8_binary_rtrim) from t5
-- !query schema
struct<TRIM(BOTH collate(utf8_binary, utf8_binary_rtrim) FROM collate(utf8_lcase, utf8_binary_rtrim)):string collate UTF8_BINARY_RTRIM>
-- !query output









 
BcDCbA
QL
a
i̇
sitTing


-- !query
select TRIM('ABc', utf8_binary), TRIM('ABc', utf8_lcase) from t5
-- !query schema
struct<TRIM(BOTH ABc FROM utf8_binary):string,TRIM(BOTH ABc FROM utf8_lcase):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAa	
aaAaAAa	
aaAaAAa	
ab	
abcdcba	D
bbAbAAb	
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select TRIM('ABc' collate utf8_lcase, utf8_binary), TRIM('AAa' collate utf8_binary, utf8_lcase) from t5
-- !query schema
struct<TRIM(BOTH collate(ABc, utf8_lcase) FROM utf8_binary):string collate UTF8_LCASE,TRIM(BOTH collate(AAa, utf8_binary) FROM utf8_lcase):string>
-- !query output
	
	
	
	
	bc
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
d	BcDCb
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select BTRIM(utf8_binary, utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"TRIM(BOTH utf8_lcase FROM utf8_binary)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 37,
    "fragment" : "BTRIM(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select BTRIM(s, utf8_binary) from t5
-- !query schema
struct<btrim(s, utf8_binary):string>
-- !query output














a


-- !query
select BTRIM(utf8_binary collate utf8_binary, s collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING\", \"STRING COLLATE UTF8_LCASE\""
  }
}


-- !query
select BTRIM(utf8_binary, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<btrim(utf8_binary, collate(utf8_lcase, utf8_binary)):string>
-- !query output









 
bbAbAAbA
d
kitte
park
İ


-- !query
select BTRIM(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t5
-- !query schema
struct<btrim(collate(utf8_binary, utf8_lcase), collate(utf8_lcase, utf8_lcase)):string collate UTF8_LCASE>
-- !query output










 
bbAbAAb
kitte
park
İ


-- !query
select BTRIM(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_binary, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"TRIM(BOTH collate(utf8_lcase, unicode_ai) FROM collate(utf8_binary, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 75,
    "fragment" : "BTRIM(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai)"
  } ]
}


-- !query
select BTRIM(utf8_binary collate utf8_binary_rtrim, utf8_lcase collate utf8_binary_rtrim) from t5
-- !query schema
struct<btrim(collate(utf8_binary, utf8_binary_rtrim), collate(utf8_lcase, utf8_binary_rtrim)):string collate UTF8_BINARY_RTRIM>
-- !query output









 
bbAbAAbA
d
kitte
park
İ


-- !query
select BTRIM('ABc', utf8_binary), BTRIM('ABc', utf8_lcase) from t5
-- !query schema
struct<btrim(ABc, utf8_binary):string,btrim(ABc, utf8_lcase):string collate UTF8_LCASE>
-- !query output
AB	
AB	
AB	B
ABc	ABc
ABc	ABc
ABc	ABc
ABc	ABc
ABc	ABc
ABc	ABc
ABc	ABc
ABc	ABc
Bc	Bc
Bc	Bc
Bc	Bc
Bc	Bc


-- !query
select BTRIM('ABc' collate utf8_lcase, utf8_binary), BTRIM('AAa' collate utf8_binary, utf8_lcase) from t5
-- !query schema
struct<btrim(collate(ABc, utf8_lcase), utf8_binary):string collate UTF8_LCASE,btrim(collate(AAa, utf8_binary), utf8_lcase):string>
-- !query output
	
	AA
ABc	AAa
ABc	AAa
ABc	AAa
ABc	AAa
ABc	AAa
ABc	AAa
ABc	AAa
B	AA
Bc	
Bc	
Bc	
Bc	AAa
c	AA


-- !query
select LTRIM(utf8_binary, utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"TRIM(LEADING utf8_binary FROM utf8_lcase)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 37,
    "fragment" : "LTRIM(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select LTRIM(s, utf8_binary) from t5
-- !query schema
struct<TRIM(LEADING s FROM utf8_binary):string>
-- !query output



-- !query
select LTRIM(utf8_binary collate utf8_binary, s collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING COLLATE UTF8_LCASE\", \"STRING\""
  }
}


-- !query
select LTRIM(utf8_binary, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<TRIM(LEADING utf8_binary FROM collate(utf8_lcase, utf8_binary)):string>
-- !query output









 
BcDCbA
QL
a
i̇o
sitTing


-- !query
select LTRIM(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t5
-- !query schema
struct<TRIM(LEADING collate(utf8_binary, utf8_lcase) FROM collate(utf8_lcase, utf8_lcase)):string collate UTF8_LCASE>
-- !query output












 
QL
sitTing


-- !query
select LTRIM(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_lcase, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"TRIM(LEADING collate(utf8_binary, unicode_ai) FROM collate(utf8_lcase, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 75,
    "fragment" : "LTRIM(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai)"
  } ]
}


-- !query
select LTRIM(utf8_binary collate utf8_binary_rtrim, utf8_lcase collate utf8_binary_rtrim) from t5
-- !query schema
struct<TRIM(LEADING collate(utf8_binary, utf8_binary_rtrim) FROM collate(utf8_lcase, utf8_binary_rtrim)):string collate UTF8_BINARY_RTRIM>
-- !query output









 
BcDCbA
QL
a
i̇o
sitTing


-- !query
select LTRIM('ABc', utf8_binary), LTRIM('ABc', utf8_lcase) from t5
-- !query schema
struct<TRIM(LEADING ABc FROM utf8_binary):string,TRIM(LEADING ABc FROM utf8_lcase):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAaA	
aaAaAAaA	
aaAaAAaA	
abc	
abcdcba	DCbA
bbAbAAbA	
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select LTRIM('ABc' collate utf8_lcase, utf8_binary), LTRIM('AAa' collate utf8_binary, utf8_lcase) from t5
-- !query schema
struct<TRIM(LEADING collate(ABc, utf8_lcase) FROM utf8_binary):string collate UTF8_LCASE,TRIM(LEADING collate(AAa, utf8_binary) FROM utf8_lcase):string>
-- !query output
	
	
	
	
	bc
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
dcba	BcDCbA
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select RTRIM(utf8_binary, utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INDETERMINATE_COLLATION_IN_EXPRESSION",
  "sqlState" : "42P22",
  "messageParameters" : {
    "expr" : "\"TRIM(TRAILING utf8_binary FROM utf8_lcase)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 37,
    "fragment" : "RTRIM(utf8_binary, utf8_lcase)"
  } ]
}


-- !query
select RTRIM(s, utf8_binary) from t5
-- !query schema
struct<TRIM(TRAILING s FROM utf8_binary):string>
-- !query output














İo


-- !query
select RTRIM(utf8_binary collate utf8_binary, s collate utf8_lcase) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "\"STRING COLLATE UTF8_LCASE\", \"STRING\""
  }
}


-- !query
select RTRIM(utf8_binary, utf8_lcase collate utf8_binary) from t5
-- !query schema
struct<TRIM(TRAILING utf8_binary FROM collate(utf8_lcase, utf8_binary)):string>
-- !query output









SQL
a
aBcDCbA
i̇
sitTing
İo


-- !query
select RTRIM(utf8_binary collate utf8_lcase, utf8_lcase collate utf8_lcase) from t5
-- !query schema
struct<TRIM(TRAILING collate(utf8_binary, utf8_lcase) FROM collate(utf8_lcase, utf8_lcase)):string collate UTF8_LCASE>
-- !query output












SQL
sitTing
İo


-- !query
select RTRIM(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "inputSql" : "\"collate(utf8_lcase, unicode_ai)\"",
    "inputType" : "\"STRING COLLATE UNICODE_AI\"",
    "paramIndex" : "first",
    "requiredType" : "\"STRING\"",
    "sqlExpr" : "\"TRIM(TRAILING collate(utf8_binary, unicode_ai) FROM collate(utf8_lcase, unicode_ai))\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 75,
    "fragment" : "RTRIM(utf8_binary collate unicode_ai, utf8_lcase collate unicode_ai)"
  } ]
}


-- !query
select RTRIM(utf8_binary collate utf8_binary_rtrim, utf8_lcase collate utf8_binary_rtrim) from t5
-- !query schema
struct<TRIM(TRAILING collate(utf8_binary, utf8_binary_rtrim) FROM collate(utf8_lcase, utf8_binary_rtrim)):string collate UTF8_BINARY_RTRIM>
-- !query output









 
SQL
a
aBcDCbA
i̇
sitTing


-- !query
select RTRIM('ABc', utf8_binary), RTRIM('ABc', utf8_lcase) from t5
-- !query schema
struct<TRIM(TRAILING ABc FROM utf8_binary):string,TRIM(TRAILING ABc FROM utf8_lcase):string collate UTF8_LCASE>
-- !query output
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
aaAaAAa	
aaAaAAa	
aaAaAAa	
ab	
abcdcba	aBcD
bbAbAAb	
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
select RTRIM('ABc' collate utf8_lcase, utf8_binary), RTRIM('AAa' collate utf8_binary, utf8_lcase) from t5
-- !query schema
struct<TRIM(TRAILING collate(ABc, utf8_lcase) FROM utf8_binary):string collate UTF8_LCASE,TRIM(TRAILING collate(AAa, utf8_binary) FROM utf8_lcase):string>
-- !query output
	
	
	
	
	abc
Hello, world! Nice day.	Hello, world! Nice day.
Something else. Nothing here.	Something else. Nothing here.
Spark	SQL
abcd	aBcDCb
efd2	efd2
kitten	sitTing
İo	i̇o
İo	İo
İo	İo 
İo 	İo


-- !query
drop table t5
-- !query schema
struct<>
-- !query output



-- !query
drop table t6
-- !query schema
struct<>
-- !query output



-- !query
drop table t7
-- !query schema
struct<>
-- !query output



-- !query
drop table t8
-- !query schema
struct<>
-- !query output



-- !query
drop table t9
-- !query schema
struct<>
-- !query output



-- !query
drop table t10
-- !query schema
struct<>
-- !query output

