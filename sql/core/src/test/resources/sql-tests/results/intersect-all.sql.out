-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TEMPORARY VIEW tab1 AS SELECT * FROM VALUES
    (1, 2), 
    (1, 2),
    (1, 3),
    (1, 3),
    (2, 3),
    (null, null),
    (null, null)
    AS tab1(k, v)
-- !query schema
struct<>
-- !query output



-- !query
CREATE TEMPORARY VIEW tab2 AS SELECT * FROM VALUES
    (1, 2), 
    (1, 2), 
    (2, 3),
    (3, 4),
    (null, null),
    (null, null)
    AS tab2(k, v)
-- !query schema
struct<>
-- !query output



-- !query
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query schema
struct<k:int,v:int>
-- !query output
1	2
1	2
2	3
NULL	NULL
NULL	NULL


-- !query
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab1 WHERE k = 1
-- !query schema
struct<k:int,v:int>
-- !query output
1	2
1	2
1	3
1	3


-- !query
SELECT * FROM tab1 WHERE k > 2
INTERSECT ALL
SELECT * FROM tab2
-- !query schema
struct<k:int,v:int>
-- !query output



-- !query
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2 WHERE k > 3
-- !query schema
struct<k:int,v:int>
-- !query output



-- !query
SELECT * FROM tab1
INTERSECT ALL
SELECT CAST(1 AS BIGINT), CAST(2 AS BIGINT)
-- !query schema
struct<k:bigint,v:bigint>
-- !query output
1	2


-- !query
SELECT * FROM tab1
INTERSECT ALL
SELECT array(1), 2
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "INCOMPATIBLE_COLUMN_TYPE",
  "sqlState" : "42825",
  "messageParameters" : {
    "columnOrdinalNumber" : "first",
    "dataType1" : "\"ARRAY<INT>\"",
    "dataType2" : "\"INT\"",
    "hint" : "",
    "operator" : "INTERSECT ALL",
    "tableOrdinalNumber" : "second"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 51,
    "fragment" : "SELECT * FROM tab1\nINTERSECT ALL\nSELECT array(1), 2"
  } ]
}


-- !query
SELECT k FROM tab1
INTERSECT ALL
SELECT k, v FROM tab2
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "NUM_COLUMNS_MISMATCH",
  "sqlState" : "42826",
  "messageParameters" : {
    "firstNumColumns" : "1",
    "invalidNumColumns" : "2",
    "invalidOrdinalNum" : "second",
    "operator" : "INTERSECT ALL"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 54,
    "fragment" : "SELECT k FROM tab1\nINTERSECT ALL\nSELECT k, v FROM tab2"
  } ]
}


-- !query
SELECT * FROM tab2
INTERSECT ALL
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query schema
struct<k:int,v:int>
-- !query output
1	2
1	2
2	3
NULL	NULL
NULL	NULL


-- !query
SELECT * FROM tab1
EXCEPT
SELECT * FROM tab2
UNION ALL
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query schema
struct<k:int,v:int>
-- !query output
1	2
1	2
1	3
2	3
NULL	NULL
NULL	NULL


-- !query
SELECT * FROM tab1
EXCEPT
SELECT * FROM tab2
EXCEPT
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query schema
struct<k:int,v:int>
-- !query output
1	3


-- !query
(
  (
    (
      SELECT * FROM tab1
      EXCEPT
      SELECT * FROM tab2
    )
    EXCEPT
    SELECT * FROM tab1
  )
  INTERSECT ALL
  SELECT * FROM tab2
)
-- !query schema
struct<k:int,v:int>
-- !query output



-- !query
SELECT * 
FROM   (SELECT tab1.k, 
               tab2.v 
        FROM   tab1 
               JOIN tab2 
                 ON tab1.k = tab2.k)
INTERSECT ALL 
SELECT * 
FROM   (SELECT tab1.k, 
               tab2.v 
        FROM   tab1 
               JOIN tab2 
                 ON tab1.k = tab2.k)
-- !query schema
struct<k:int,v:int>
-- !query output
1	2
1	2
1	2
1	2
1	2
1	2
1	2
1	2
2	3


-- !query
SELECT * 
FROM   (SELECT tab1.k, 
               tab2.v 
        FROM   tab1 
               JOIN tab2 
                 ON tab1.k = tab2.k) 
INTERSECT ALL 
SELECT * 
FROM   (SELECT tab2.v AS k, 
               tab1.k AS v 
        FROM   tab1 
               JOIN tab2 
                 ON tab1.k = tab2.k)
-- !query schema
struct<k:int,v:int>
-- !query output



-- !query
SELECT v FROM tab1 GROUP BY v
INTERSECT ALL
SELECT k FROM tab2 GROUP BY k
-- !query schema
struct<v:int>
-- !query output
2
3
NULL


-- !query
SET spark.sql.legacy.setopsPrecedence.enabled= true
-- !query schema
struct<key:string,value:string>
-- !query output
spark.sql.legacy.setopsPrecedence.enabled	true


-- !query
SELECT * FROM tab1
EXCEPT
SELECT * FROM tab2
UNION ALL
SELECT * FROM tab1
INTERSECT ALL
SELECT * FROM tab2
-- !query schema
struct<k:int,v:int>
-- !query output
1	2
1	2
2	3
NULL	NULL
NULL	NULL


-- !query
SELECT * FROM tab1
EXCEPT
SELECT * FROM tab2
UNION ALL
SELECT * FROM tab1
INTERSECT
SELECT * FROM tab2
-- !query schema
struct<k:int,v:int>
-- !query output
1	2
2	3
NULL	NULL


-- !query
SET spark.sql.legacy.setopsPrecedence.enabled = false
-- !query schema
struct<key:string,value:string>
-- !query output
spark.sql.legacy.setopsPrecedence.enabled	false


-- !query
CREATE OR REPLACE TEMPORARY VIEW tab3 AS VALUES (decimal(1)), (decimal(2)) tbl3(v)
-- !query schema
struct<>
-- !query output



-- !query
SELECT t.v FROM (
  SELECT v FROM tab3
  INTERSECT
  SELECT v + v AS v FROM tab3
) t
-- !query schema
struct<v:decimal(11,0)>
-- !query output
2


-- !query
SELECT SUM(t.v) FROM (
  SELECT v FROM tab3
  INTERSECT
  SELECT v + v AS v FROM tab3
) t
-- !query schema
struct<sum(v):decimal(21,0)>
-- !query output
2


-- !query
DROP VIEW IF EXISTS tab1
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS tab2
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS tab3
-- !query schema
struct<>
-- !query output

