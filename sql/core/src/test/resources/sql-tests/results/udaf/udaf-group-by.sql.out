-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE OR REPLACE TEMPORARY VIEW testData AS SELECT * FROM VALUES
(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (null, 1), (3, null), (null, null)
AS testData(a, b)
-- !query schema
struct<>
-- !query output



-- !query
SELECT a, udaf(b) FROM testData
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "MISSING_GROUP_BY",
  "sqlState" : "42803",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 31,
    "fragment" : "SELECT a, udaf(b) FROM testData"
  } ]
}


-- !query
SELECT udaf(a), udaf(b) FROM testData
-- !query schema
struct<udaf(a):int,udaf(b):int>
-- !query output
7	7


-- !query
SELECT a, udaf(b) FROM testData GROUP BY a
-- !query schema
struct<a:int,udaf(b):int>
-- !query output
1	2
2	2
3	2
NULL	1


-- !query
SELECT a, udaf(b) FROM testData GROUP BY b
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "MISSING_AGGREGATION",
  "sqlState" : "42803",
  "messageParameters" : {
    "expression" : "\"a\"",
    "expressionAnyValue" : "\"any_value(a)\""
  }
}


-- !query
SELECT udaf(a), udaf(b) FROM testData GROUP BY a
-- !query schema
struct<udaf(a):int,udaf(b):int>
-- !query output
0	1
2	2
2	2
3	2


-- !query
SELECT 'foo', udaf(a) FROM testData GROUP BY 1
-- !query schema
struct<foo:string,udaf(a):int>
-- !query output
foo	7


-- !query
SELECT 'foo', udaf(a) FROM testData WHERE a = 0 GROUP BY 1
-- !query schema
struct<foo:string,udaf(a):int>
-- !query output



-- !query
SELECT 'foo', udaf(STRUCT(a)) FROM testData WHERE a = 0 GROUP BY 1
-- !query schema
struct<foo:string,udaf(struct(a, a)):int>
-- !query output



-- !query
SELECT a + b, udaf(b) FROM testData GROUP BY a + b
-- !query schema
struct<(a + b):int,udaf(b):int>
-- !query output
2	1
3	2
4	2
5	1
NULL	1


-- !query
SELECT a + 2, udaf(b) FROM testData GROUP BY a + 1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "MISSING_AGGREGATION",
  "sqlState" : "42803",
  "messageParameters" : {
    "expression" : "\"a\"",
    "expressionAnyValue" : "\"any_value(a)\""
  }
}


-- !query
SELECT a + 1 + 1, udaf(b) FROM testData GROUP BY a + 1
-- !query schema
struct<((a + 1) + 1):int,udaf(b):int>
-- !query output
3	2
4	2
5	2
NULL	1


-- !query
SELECT SKEWNESS(a), KURTOSIS(a), udaf(a), udaf(a), AVG(a), VARIANCE(a), STDDEV(a), SUM(a), udaf(a)
FROM testData
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_PANDAS_UDF_PLACEMENT",
  "sqlState" : "0A000",
  "messageParameters" : {
    "functionList" : "`udaf`"
  }
}


-- !query
SELECT udaf(DISTINCT b), udaf(DISTINCT b, c) FROM (SELECT 1 AS a, 2 AS b, 3 AS c) GROUP BY a
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_SQL_SYNTAX.FUNCTION_WITH_UNSUPPORTED_SYNTAX",
  "sqlState" : "42000",
  "messageParameters" : {
    "prettyName" : "`pythonudaf`",
    "syntax" : "DISTINCT"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 23,
    "fragment" : "udaf(DISTINCT b)"
  } ]
}


-- !query
SELECT a AS k, udaf(b) FROM testData GROUP BY k
-- !query schema
struct<k:int,udaf(b):int>
-- !query output
1	2
2	2
3	2
NULL	1


-- !query
SELECT a AS k, udaf(b) FROM testData GROUP BY k HAVING k > 1
-- !query schema
struct<k:int,udaf(b):int>
-- !query output
2	2
3	2


-- !query
SELECT a AS k, udaf(non_existing) FROM testData GROUP BY k
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`non_existing`",
    "proposal" : "`a`, `b`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 21,
    "stopIndex" : 32,
    "fragment" : "non_existing"
  } ]
}


-- !query
CREATE OR REPLACE TEMPORARY VIEW testDataHasSameNameWithAlias AS SELECT * FROM VALUES
(1, 1, 3), (1, 2, 1) AS testDataHasSameNameWithAlias(k, a, v)
-- !query schema
struct<>
-- !query output



-- !query
SELECT k AS a, udaf(v) FROM testDataHasSameNameWithAlias GROUP BY a
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "MISSING_AGGREGATION",
  "sqlState" : "42803",
  "messageParameters" : {
    "expression" : "\"k\"",
    "expressionAnyValue" : "\"any_value(k)\""
  }
}


-- !query
set spark.sql.groupByAliases=false
-- !query schema
struct<key:string,value:string>
-- !query output
spark.sql.groupByAliases	false


-- !query
SELECT a AS k, udaf(b) FROM testData GROUP BY k
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`k`",
    "proposal" : "`a`, `b`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 47,
    "stopIndex" : 47,
    "fragment" : "k"
  } ]
}


-- !query
SELECT a, udaf(1) FROM testData WHERE false GROUP BY a
-- !query schema
struct<a:int,udaf(1):int>
-- !query output



-- !query
SELECT udaf(1) FROM testData WHERE false
-- !query schema
struct<udaf(1):int>
-- !query output



-- !query
SELECT 1 FROM (SELECT udaf(1) FROM testData WHERE false) t
-- !query schema
struct<1:int>
-- !query output
1


-- !query
SELECT 1 from (
  SELECT 1 AS z,
  udaf(a.x)
  FROM (select 1 as x) a
  WHERE false
) b
where b.z != b.z
-- !query schema
struct<1:int>
-- !query output



-- !query
SELECT 1 FROM range(10) HAVING udaf(id) > 0
-- !query schema
struct<1:int>
-- !query output
1


-- !query
CREATE OR REPLACE TEMPORARY VIEW test_agg AS SELECT * FROM VALUES
  (1, true), (1, false),
  (2, true),
  (3, false), (3, null),
  (4, null), (4, null),
  (5, null), (5, true), (5, false) AS test_agg(k, v)
-- !query schema
struct<>
-- !query output



-- !query
SELECT udaf(v), some(v), any(v), bool_and(v), bool_or(v) FROM test_agg WHERE 1 = 0
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_PANDAS_UDF_PLACEMENT",
  "sqlState" : "0A000",
  "messageParameters" : {
    "functionList" : "`udaf`"
  }
}


-- !query
SELECT udaf(v), some(v), any(v), bool_and(v), bool_or(v) FROM test_agg WHERE k = 4
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_PANDAS_UDF_PLACEMENT",
  "sqlState" : "0A000",
  "messageParameters" : {
    "functionList" : "`udaf`"
  }
}


-- !query
SELECT udaf(v), some(v), any(v), bool_and(v), bool_or(v) FROM test_agg WHERE k = 5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_PANDAS_UDF_PLACEMENT",
  "sqlState" : "0A000",
  "messageParameters" : {
    "functionList" : "`udaf`"
  }
}


-- !query
SELECT k, udaf(v), some(v), any(v), bool_and(v), bool_or(v) FROM test_agg GROUP BY k
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_PANDAS_UDF_PLACEMENT",
  "sqlState" : "0A000",
  "messageParameters" : {
    "functionList" : "`udaf`"
  }
}


-- !query
SELECT k, udaf(v) FROM test_agg GROUP BY k HAVING udaf(v) = false
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.BINARY_OP_DIFF_TYPES",
  "sqlState" : "42K09",
  "messageParameters" : {
    "left" : "\"INT\"",
    "right" : "\"BOOLEAN\"",
    "sqlExpr" : "\"(udaf(v) = false)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 51,
    "stopIndex" : 65,
    "fragment" : "udaf(v) = false"
  } ]
}


-- !query
SELECT k, udaf(v) FROM test_agg GROUP BY k HAVING udaf(v) IS NULL
-- !query schema
struct<k:int,udaf(v):int>
-- !query output



-- !query
SELECT k,
       udaf(v) AS count
FROM   test_agg
WHERE  k = 2
       AND v IN (SELECT Any(v)
                 FROM   test_agg
                 WHERE  k = 1)
GROUP  BY k
-- !query schema
struct<k:int,count:int>
-- !query output
2	1
