-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE table  desc_temp1 (key int COMMENT 'column_comment', val string) USING PARQUET
-- !query schema
struct<>
-- !query output



-- !query
CREATE table  desc_temp2 (key int, val string) USING PARQUET
-- !query schema
struct<>
-- !query output



-- !query
DESC SELECT key, key + 1 as plusone FROM desc_temp1
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
key                 	int                 	column_comment      
plusone             	int


-- !query
DESC QUERY SELECT * FROM desc_temp2
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
key                 	int                 	                    
val                 	string


-- !query
DESC SELECT key, COUNT(*) as count FROM desc_temp1 group by key
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
key                 	int                 	column_comment      
count               	bigint


-- !query
DESC SELECT 10.00D as col1
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
col1                	double


-- !query
DESC QUERY SELECT key FROM desc_temp1 UNION ALL select CAST(1 AS DOUBLE)
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
key                 	double


-- !query
DESC QUERY VALUES(1.00D, 'hello') as tab1(col1, col2)
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
col1                	double              	                    
col2                	string


-- !query
DESC QUERY FROM desc_temp1 a SELECT *
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
key                 	int                 	column_comment      
val                 	string


-- !query
DESC WITH s AS (SELECT 'hello' as col1) SELECT * FROM s
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
col1                	string


-- !query
DESCRIBE QUERY WITH s AS (SELECT * from desc_temp1) SELECT * FROM s
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
key                 	int                 	column_comment      
val                 	string


-- !query
DESCRIBE SELECT * FROM (FROM desc_temp2 select * select *)
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
key                 	int                 	                    
val                 	string


-- !query
DESCRIBE INSERT INTO desc_temp1 values (1, 'val1')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'desc_temp1'",
    "hint" : ""
  }
}


-- !query
DESCRIBE INSERT INTO desc_temp1 SELECT * FROM desc_temp2
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'desc_temp1'",
    "hint" : ""
  }
}


-- !query
DESCRIBE
   FROM desc_temp1 a
     insert into desc_temp1 select *
     insert into desc_temp2 select *
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'insert'",
    "hint" : ""
  }
}


-- !query
EXPLAIN DESC QUERY SELECT * FROM desc_temp2 WHERE key > 0
-- !query schema
struct<plan:string>
-- !query output
== Physical Plan ==
Execute DescribeQueryCommand
   +- DescribeQueryCommand SELECT * FROM desc_temp2 WHERE key > 0


-- !query
EXPLAIN EXTENDED DESC WITH s AS (SELECT 'hello' as col1) SELECT * FROM s
-- !query schema
struct<plan:string>
-- !query output
== Parsed Logical Plan ==
DescribeQueryCommand WITH s AS (SELECT 'hello' as col1) SELECT * FROM s

== Analyzed Logical Plan ==
col_name: string, data_type: string, comment: string
DescribeQueryCommand WITH s AS (SELECT 'hello' as col1) SELECT * FROM s

== Optimized Logical Plan ==
DescribeQueryCommand WITH s AS (SELECT 'hello' as col1) SELECT * FROM s

== Physical Plan ==
Execute DescribeQueryCommand
   +- DescribeQueryCommand WITH s AS (SELECT 'hello' as col1) SELECT * FROM s


-- !query
DROP TABLE desc_temp1
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE desc_temp2
-- !query schema
struct<>
-- !query output

