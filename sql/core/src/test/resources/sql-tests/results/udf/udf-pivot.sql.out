-- Automatically generated by SQLQueryTestSuite
-- !query
create temporary view courseSales as select * from values
  ("dotNET", 2012, 10000),
  ("Java", 2012, 20000),
  ("dotNET", 2012, 5000),
  ("dotNET", 2013, 48000),
  ("Java", 2013, 30000)
  as courseSales(course, year, earnings)
-- !query schema
struct<>
-- !query output



-- !query
create temporary view years as select * from values
  (2012, 1),
  (2013, 2)
  as years(y, s)
-- !query schema
struct<>
-- !query output



-- !query
create temporary view yearsWithComplexTypes as select * from values
  (2012, array(1, 1), map('1', 1), struct(1, 'a')),
  (2013, array(2, 2), map('2', 2), struct(2, 'b'))
  as yearsWithComplexTypes(y, a, m, s)
-- !query schema
struct<>
-- !query output



-- !query
SELECT * FROM (
  SELECT udf(year), course, earnings FROM courseSales
)
PIVOT (
  udf(sum(earnings))
  FOR course IN ('dotNET', 'Java')
)
-- !query schema
struct<udf(year):int,dotNET:bigint,Java:bigint>
-- !query output
2012	15000	20000
2013	48000	30000


-- !query
SELECT * FROM courseSales
PIVOT (
  udf(sum(earnings))
  FOR year IN (2012, 2013)
)
-- !query schema
struct<course:string,2012:bigint,2013:bigint>
-- !query output
Java	20000	30000
dotNET	15000	48000


-- !query
SELECT * FROM (
  SELECT year, course, earnings FROM courseSales
)
PIVOT (
  udf(sum(earnings)), udf(avg(earnings))
  FOR course IN ('dotNET', 'Java')
)
-- !query schema
struct<year:int,dotNET_udf(sum(earnings)):bigint,dotNET_udf(avg(earnings)):double,Java_udf(sum(earnings)):bigint,Java_udf(avg(earnings)):double>
-- !query output
2012	15000	7500.0	20000	20000.0
2013	48000	48000.0	30000	30000.0


-- !query
SELECT * FROM (
  SELECT udf(course) as course, earnings FROM courseSales
)
PIVOT (
  udf(sum(earnings))
  FOR course IN ('dotNET', 'Java')
)
-- !query schema
struct<dotNET:bigint,Java:bigint>
-- !query output
63000	50000


-- !query
SELECT * FROM (
  SELECT year, course, earnings FROM courseSales
)
PIVOT (
  udf(sum(udf(earnings))), udf(min(year))
  FOR course IN ('dotNET', 'Java')
)
-- !query schema
struct<dotNET_udf(sum(udf(earnings))):bigint,dotNET_udf(min(year)):int,Java_udf(sum(udf(earnings))):bigint,Java_udf(min(year)):int>
-- !query output
63000	2012	50000	2012


-- !query
SELECT * FROM (
  SELECT course, year, earnings, udf(s) as s
  FROM courseSales
  JOIN years ON year = y
)
PIVOT (
  udf(sum(earnings))
  FOR s IN (1, 2)
)
-- !query schema
struct<course:string,year:int,1:bigint,2:bigint>
-- !query output
Java	2012	20000	NULL
Java	2013	NULL	30000
dotNET	2012	15000	NULL
dotNET	2013	NULL	48000


-- !query
SELECT * FROM (
  SELECT course, year, earnings, s
  FROM courseSales
  JOIN years ON year = y
)
PIVOT (
  udf(sum(earnings)), udf(min(s))
  FOR course IN ('dotNET', 'Java')
)
-- !query schema
struct<year:int,dotNET_udf(sum(earnings)):bigint,dotNET_udf(min(s)):int,Java_udf(sum(earnings)):bigint,Java_udf(min(s)):int>
-- !query output
2012	15000	1	20000	1
2013	48000	2	30000	2


-- !query
SELECT * FROM (
  SELECT course, year, earnings, s
  FROM courseSales
  JOIN years ON year = y
)
PIVOT (
  udf(sum(earnings * s))
  FOR course IN ('dotNET', 'Java')
)
-- !query schema
struct<year:int,dotNET:bigint,Java:bigint>
-- !query output
2012	15000	20000
2013	96000	60000


-- !query
SELECT 2012_s, 2013_s, 2012_a, 2013_a, c FROM (
  SELECT year y, course c, earnings e FROM courseSales
)
PIVOT (
  udf(sum(e)) s, udf(avg(e)) a
  FOR y IN (2012, 2013)
)
-- !query schema
struct<2012_s:bigint,2013_s:bigint,2012_a:double,2013_a:double,c:string>
-- !query output
15000	48000	7500.0	48000.0	dotNET
20000	30000	20000.0	30000.0	Java


-- !query
SELECT firstYear_s, secondYear_s, firstYear_a, secondYear_a, c FROM (
  SELECT year y, course c, earnings e FROM courseSales
)
PIVOT (
  udf(sum(e)) s, udf(avg(e)) a
  FOR y IN (2012 as firstYear, 2013 secondYear)
)
-- !query schema
struct<firstYear_s:bigint,secondYear_s:bigint,firstYear_a:double,secondYear_a:double,c:string>
-- !query output
15000	48000	7500.0	48000.0	dotNET
20000	30000	20000.0	30000.0	Java


-- !query
SELECT * FROM courseSales
PIVOT (
  udf(abs(earnings))
  FOR year IN (2012, 2013)
)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_1006",
  "messageParameters" : {
    "sql" : "coursesales.earnings"
  }
}


-- !query
SELECT * FROM (
  SELECT year, course, earnings FROM courseSales
)
PIVOT (
  udf(sum(earnings)), year
  FOR course IN ('dotNET', 'Java')
)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_1006",
  "messageParameters" : {
    "sql" : "__auto_generated_subquery_name.year"
  }
}


-- !query
SELECT * FROM (
  SELECT course, earnings FROM courseSales
)
PIVOT (
  udf(sum(earnings))
  FOR year IN (2012, 2013)
)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`year`",
    "proposal" : "`course`, `earnings`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 62,
    "stopIndex" : 118,
    "fragment" : "PIVOT (\n  udf(sum(earnings))\n  FOR year IN (2012, 2013)\n)"
  } ]
}


-- !query
SELECT * FROM (
  SELECT year, course, earnings FROM courseSales
)
PIVOT (
  udf(ceil(udf(sum(earnings)))), avg(earnings) + 1 as a1
  FOR course IN ('dotNET', 'Java')
)
-- !query schema
struct<year:int,dotNET_udf(CEIL(udf(sum(earnings)))):bigint,dotNET_a1:double,Java_udf(CEIL(udf(sum(earnings)))):bigint,Java_a1:double>
-- !query output
2012	15000	7501.0	20000	20001.0
2013	48000	48001.0	30000	30001.0


-- !query
SELECT * FROM (
  SELECT year, course, earnings FROM courseSales
)
PIVOT (
  sum(udf(avg(earnings)))
  FOR course IN ('dotNET', 'Java')
)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "NESTED_AGGREGATE_FUNCTION",
  "sqlState" : "42607",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 86,
    "stopIndex" : 98,
    "fragment" : "avg(earnings)"
  } ]
}


-- !query
SELECT * FROM (
  SELECT course, year, earnings, s
  FROM courseSales
  JOIN years ON year = y
)
PIVOT (
  udf(sum(earnings))
  FOR (course, year) IN (('dotNET', 2012), ('Java', 2013))
)
-- !query schema
struct<s:int,{dotNET, 2012}:bigint,{Java, 2013}:bigint>
-- !query output
1	15000	NULL
2	NULL	30000


-- !query
SELECT * FROM (
  SELECT course, year, earnings, s
  FROM courseSales
  JOIN years ON year = y
)
PIVOT (
  udf(sum(earnings))
  FOR (course, s) IN (('dotNET', 2) as c1, ('Java', 1) as c2)
)
-- !query schema
struct<year:int,c1:bigint,c2:bigint>
-- !query output
2012	NULL	20000
2013	48000	NULL


-- !query
SELECT * FROM (
  SELECT course, year, earnings, s
  FROM courseSales
  JOIN years ON year = y
)
PIVOT (
  udf(sum(earnings))
  FOR (course, year) IN ('dotNET', 'Java')
)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "PIVOT_VALUE_DATA_TYPE_MISMATCH",
  "sqlState" : "42K09",
  "messageParameters" : {
    "pivotType" : "struct<course:string,year:int>",
    "value" : "dotNET",
    "valueType" : "string"
  }
}


-- !query
SELECT * FROM courseSales
PIVOT (
  udf(sum(earnings))
  FOR year IN (s, 2013)
)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`s`",
    "proposal" : "`year`, `course`, `earnings`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 71,
    "stopIndex" : 71,
    "fragment" : "s"
  } ]
}


-- !query
SELECT * FROM courseSales
PIVOT (
  udf(sum(earnings))
  FOR year IN (course, 2013)
)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "NON_LITERAL_PIVOT_VALUES",
  "sqlState" : "42K08",
  "messageParameters" : {
    "expression" : "\"course\""
  }
}


-- !query
SELECT * FROM (
  SELECT earnings, year, a
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  udf(sum(earnings))
  FOR a IN (array(1, 1), array(2, 2))
)
-- !query schema
struct<year:int,[1, 1]:bigint,[2, 2]:bigint>
-- !query output
2012	35000	NULL
2013	NULL	78000


-- !query
SELECT * FROM (
  SELECT course, earnings, udf(year) as year, a
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  udf(sum(earnings))
  FOR (course, a) IN (('dotNET', array(1, 1)), ('Java', array(2, 2)))
)
-- !query schema
struct<year:int,{dotNET, [1, 1]}:bigint,{Java, [2, 2]}:bigint>
-- !query output
2012	15000	NULL
2013	NULL	30000


-- !query
SELECT * FROM (
  SELECT earnings, year, s
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  udf(sum(earnings))
  FOR s IN ((1, 'a'), (2, 'b'))
)
-- !query schema
struct<year:int,{1, a}:bigint,{2, b}:bigint>
-- !query output
2012	35000	NULL
2013	NULL	78000


-- !query
SELECT * FROM (
  SELECT course, earnings, year, s
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  udf(sum(earnings))
  FOR (course, s) IN (('dotNET', (1, 'a')), ('Java', (2, 'b')))
)
-- !query schema
struct<year:int,{dotNET, {1, a}}:bigint,{Java, {2, b}}:bigint>
-- !query output
2012	15000	NULL
2013	NULL	30000


-- !query
SELECT * FROM (
  SELECT earnings, year, m
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  udf(sum(earnings))
  FOR m IN (map('1', 1), map('2', 2))
)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INCOMPARABLE_PIVOT_COLUMN",
  "sqlState" : "42818",
  "messageParameters" : {
    "columnName" : "`m`"
  }
}


-- !query
SELECT * FROM (
  SELECT course, earnings, year, m
  FROM courseSales
  JOIN yearsWithComplexTypes ON year = y
)
PIVOT (
  udf(sum(earnings))
  FOR (course, m) IN (('dotNET', map('1', 1)), ('Java', map('2', 2)))
)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INCOMPARABLE_PIVOT_COLUMN",
  "sqlState" : "42818",
  "messageParameters" : {
    "columnName" : "`named_struct('course', __auto_generated_subquery_name`.`course, 'm', __auto_generated_subquery_name`.`m)`"
  }
}


-- !query
SELECT * FROM (
  SELECT course, earnings, udf("a") as a, udf("z") as z, udf("b") as b, udf("y") as y,
  udf("c") as c, udf("x") as x, udf("d") as d, udf("w") as w
  FROM courseSales
)
PIVOT (
  udf(sum(Earnings))
  FOR Course IN ('dotNET', 'Java')
)
-- !query schema
struct<a:string,z:string,b:string,y:string,c:string,x:string,d:string,w:string,dotNET:bigint,Java:bigint>
-- !query output
a	z	b	y	c	x	d	w	63000	50000
