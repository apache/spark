-- Automatically generated by SQLQueryTestSuite
-- !query
SELECT (col1 || col2 || col3) col
FROM (
  SELECT
    id col1,
    string(id + 1) col2,
    encode(string(id + 2), 'utf-8') col3
  FROM range(10)
)
-- !query schema
struct<col:string>
-- !query output
012
123
234
345
456
567
678
789
8910
91011


-- !query
SELECT ((col1 || col2) || (col3 || col4) || col5) col
FROM (
  SELECT
    'prefix_' col1,
    id col2,
    string(id + 1) col3,
    encode(string(id + 2), 'utf-8') col4,
    CAST(id AS DOUBLE) col5
  FROM range(10)
)
-- !query schema
struct<col:string>
-- !query output
prefix_0120.0
prefix_1231.0
prefix_2342.0
prefix_3453.0
prefix_4564.0
prefix_5675.0
prefix_6786.0
prefix_7897.0
prefix_89108.0
prefix_910119.0


-- !query
SELECT ((col1 || col2) || (col3 || col4)) col
FROM (
  SELECT
    string(id) col1,
    string(id + 1) col2,
    encode(string(id + 2), 'utf-8') col3,
    encode(string(id + 3), 'utf-8') col4
  FROM range(10)
)
-- !query schema
struct<col:string>
-- !query output
0123
1234
2345
3456
4567
5678
6789
78910
891011
9101112


-- !query
set spark.sql.function.concatBinaryAsString=true
-- !query schema
struct<key:string,value:string>
-- !query output
spark.sql.function.concatBinaryAsString	true


-- !query
SELECT (col1 || col2) col
FROM (
  SELECT
    encode(string(id), 'utf-8') col1,
    encode(string(id + 1), 'utf-8') col2
  FROM range(10)
)
-- !query schema
struct<col:string>
-- !query output
01
12
23
34
45
56
67
78
89
910


-- !query
SELECT (col1 || col2 || col3 || col4) col
FROM (
  SELECT
    encode(string(id), 'utf-8') col1,
    encode(string(id + 1), 'utf-8') col2,
    encode(string(id + 2), 'utf-8') col3,
    encode(string(id + 3), 'utf-8') col4
  FROM range(10)
)
-- !query schema
struct<col:string>
-- !query output
0123
1234
2345
3456
4567
5678
6789
78910
891011
9101112


-- !query
SELECT ((col1 || col2) || (col3 || col4)) col
FROM (
  SELECT
    encode(string(id), 'utf-8') col1,
    encode(string(id + 1), 'utf-8') col2,
    encode(string(id + 2), 'utf-8') col3,
    encode(string(id + 3), 'utf-8') col4
  FROM range(10)
)
-- !query schema
struct<col:string>
-- !query output
0123
1234
2345
3456
4567
5678
6789
78910
891011
9101112


-- !query
set spark.sql.function.concatBinaryAsString=false
-- !query schema
struct<key:string,value:string>
-- !query output
spark.sql.function.concatBinaryAsString	false


-- !query
SELECT (col1 || col2) col
FROM (
  SELECT
    encode(string(id), 'utf-8') col1,
    encode(string(id + 1), 'utf-8') col2
  FROM range(10)
)
-- !query schema
struct<col:binary>
-- !query output
01
12
23
34
45
56
67
78
89
910


-- !query
SELECT (col1 || col2 || col3 || col4) col
FROM (
  SELECT
    encode(string(id), 'utf-8') col1,
    encode(string(id + 1), 'utf-8') col2,
    encode(string(id + 2), 'utf-8') col3,
    encode(string(id + 3), 'utf-8') col4
  FROM range(10)
)
-- !query schema
struct<col:binary>
-- !query output
0123
1234
2345
3456
4567
5678
6789
78910
891011
9101112


-- !query
SELECT ((col1 || col2) || (col3 || col4)) col
FROM (
  SELECT
    encode(string(id), 'utf-8') col1,
    encode(string(id + 1), 'utf-8') col2,
    encode(string(id + 2), 'utf-8') col3,
    encode(string(id + 3), 'utf-8') col4
  FROM range(10)
)
-- !query schema
struct<col:binary>
-- !query output
0123
1234
2345
3456
4567
5678
6789
78910
891011
9101112


-- !query
CREATE TEMPORARY VIEW various_arrays AS SELECT * FROM VALUES (
  array(true, false), array(true),
  array(2Y, 1Y), array(3Y, 4Y),
  array(2S, 1S), array(3S, 4S),
  array(2, 1), array(3, 4),
  array(2L, 1L), array(3L, 4L),
  array(9223372036854775809, 9223372036854775808), array(9223372036854775808, 9223372036854775809),
  array(2.0D, 1.0D), array(3.0D, 4.0D),
  array(float(2.0), float(1.0)), array(float(3.0), float(4.0)),
  array(date '2016-03-14', date '2016-03-13'), array(date '2016-03-12', date '2016-03-11'),
  array(timestamp '2016-11-15 20:54:00.000', timestamp '2016-11-12 20:54:00.000'),
  array(timestamp '2016-11-11 20:54:00.000'),
  array('a', 'b'), array('c', 'd'),
  array(array('a', 'b'), array('c', 'd')), array(array('e'), array('f')),
  array(struct('a', 1), struct('b', 2)), array(struct('c', 3), struct('d', 4)),
  array(map('a', 1), map('b', 2)), array(map('c', 3), map('d', 4))
) AS various_arrays(
  boolean_array1, boolean_array2,
  tinyint_array1, tinyint_array2,
  smallint_array1, smallint_array2,
  int_array1, int_array2,
  bigint_array1, bigint_array2,
  decimal_array1, decimal_array2,
  double_array1, double_array2,
  float_array1, float_array2,
  date_array1, data_array2,
  timestamp_array1, timestamp_array2,
  string_array1, string_array2,
  array_array1, array_array2,
  struct_array1, struct_array2,
  map_array1, map_array2
)
-- !query schema
struct<>
-- !query output



-- !query
SELECT
    (boolean_array1 || boolean_array2) boolean_array,
    (tinyint_array1 || tinyint_array2) tinyint_array,
    (smallint_array1 || smallint_array2) smallint_array,
    (int_array1 || int_array2) int_array,
    (bigint_array1 || bigint_array2) bigint_array,
    (decimal_array1 || decimal_array2) decimal_array,
    (double_array1 || double_array2) double_array,
    (float_array1 || float_array2) float_array,
    (date_array1 || data_array2) data_array,
    (timestamp_array1 || timestamp_array2) timestamp_array,
    (string_array1 || string_array2) string_array,
    (array_array1 || array_array2) array_array,
    (struct_array1 || struct_array2) struct_array,
    (map_array1 || map_array2) map_array
FROM various_arrays
-- !query schema
struct<boolean_array:array<boolean>,tinyint_array:array<tinyint>,smallint_array:array<smallint>,int_array:array<int>,bigint_array:array<bigint>,decimal_array:array<decimal(19,0)>,double_array:array<double>,float_array:array<float>,data_array:array<date>,timestamp_array:array<timestamp>,string_array:array<string>,array_array:array<array<string>>,struct_array:array<struct<col1:string,col2:int>>,map_array:array<map<string,int>>>
-- !query output
[true,false,true]	[2,1,3,4]	[2,1,3,4]	[2,1,3,4]	[2,1,3,4]	[9223372036854775809,9223372036854775808,9223372036854775808,9223372036854775809]	[2.0,1.0,3.0,4.0]	[2.0,1.0,3.0,4.0]	[2016-03-14,2016-03-13,2016-03-12,2016-03-11]	[2016-11-15 20:54:00,2016-11-12 20:54:00,2016-11-11 20:54:00]	["a","b","c","d"]	[["a","b"],["c","d"],["e"],["f"]]	[{"col1":"a","col2":1},{"col1":"b","col2":2},{"col1":"c","col2":3},{"col1":"d","col2":4}]	[{"a":1},{"b":2},{"c":3},{"d":4}]


-- !query
SELECT
    (tinyint_array1 || smallint_array2) ts_array,
    (smallint_array1 || int_array2) si_array,
    (int_array1 || bigint_array2) ib_array,
    (bigint_array1 || decimal_array2) bd_array,
    (decimal_array1 || double_array2) dd_array,
    (double_array1 || float_array2) df_array,
    (string_array1 || data_array2) std_array,
    (timestamp_array1 || string_array2) tst_array,
    (string_array1 || int_array2) sti_array
FROM various_arrays
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkDateTimeException
{
  "errorClass" : "CAST_INVALID_INPUT",
  "sqlState" : "22018",
  "messageParameters" : {
    "expression" : "'a'",
    "sourceType" : "\"STRING\"",
    "targetType" : "\"DATE\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 295,
    "stopIndex" : 322,
    "fragment" : "string_array1 || data_array2"
  } ]
}
