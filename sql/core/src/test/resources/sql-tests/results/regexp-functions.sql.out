-- Automatically generated by SQLQueryTestSuite
-- !query
SELECT regexp_extract('1a 2b 14m', '\\d+')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.REGEX_GROUP_INDEX",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract`",
    "groupCount" : "0",
    "groupIndex" : "1",
    "parameter" : "`idx`"
  }
}


-- !query
SELECT regexp_extract('1a 2b 14m', '\\d+', 0)
-- !query schema
struct<regexp_extract(1a 2b 14m, \d+, 0):string>
-- !query output
1


-- !query
SELECT regexp_extract('1a 2b 14m', '\\d+', 1)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.REGEX_GROUP_INDEX",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract`",
    "groupCount" : "0",
    "groupIndex" : "1",
    "parameter" : "`idx`"
  }
}


-- !query
SELECT regexp_extract('1a 2b 14m', '\\d+', 2)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.REGEX_GROUP_INDEX",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract`",
    "groupCount" : "0",
    "groupIndex" : "2",
    "parameter" : "`idx`"
  }
}


-- !query
SELECT regexp_extract('1a 2b 14m', '\\d+', -1)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.REGEX_GROUP_INDEX",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract`",
    "groupCount" : "0",
    "groupIndex" : "-1",
    "parameter" : "`idx`"
  }
}


-- !query
SELECT regexp_extract('1a 2b 14m', '(\\d+)?', 1)
-- !query schema
struct<regexp_extract(1a 2b 14m, (\d+)?, 1):string>
-- !query output
1


-- !query
SELECT regexp_extract('a b m', '(\\d+)?', 1)
-- !query schema
struct<regexp_extract(a b m, (\d+)?, 1):string>
-- !query output



-- !query
SELECT regexp_extract('1a 2b 14m', '(\\d+)([a-z]+)')
-- !query schema
struct<regexp_extract(1a 2b 14m, (\d+)([a-z]+), 1):string>
-- !query output
1


-- !query
SELECT regexp_extract('1a 2b 14m', '(\\d+)([a-z]+)', 0)
-- !query schema
struct<regexp_extract(1a 2b 14m, (\d+)([a-z]+), 0):string>
-- !query output
1a


-- !query
SELECT regexp_extract('1a 2b 14m', '(\\d+)([a-z]+)', 1)
-- !query schema
struct<regexp_extract(1a 2b 14m, (\d+)([a-z]+), 1):string>
-- !query output
1


-- !query
SELECT regexp_extract('1a 2b 14m', '(\\d+)([a-z]+)', 2)
-- !query schema
struct<regexp_extract(1a 2b 14m, (\d+)([a-z]+), 2):string>
-- !query output
a


-- !query
SELECT regexp_extract('1a 2b 14m', '(\\d+)([a-z]+)', 3)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.REGEX_GROUP_INDEX",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract`",
    "groupCount" : "2",
    "groupIndex" : "3",
    "parameter" : "`idx`"
  }
}


-- !query
SELECT regexp_extract('1a 2b 14m', '(\\d+)([a-z]+)', -1)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.REGEX_GROUP_INDEX",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract`",
    "groupCount" : "2",
    "groupIndex" : "-1",
    "parameter" : "`idx`"
  }
}


-- !query
SELECT regexp_extract('1a 2b 14m', '(\\d+)?([a-z]+)', 1)
-- !query schema
struct<regexp_extract(1a 2b 14m, (\d+)?([a-z]+), 1):string>
-- !query output
1


-- !query
SELECT regexp_extract('a b m', '(\\d+)?([a-z]+)', 1)
-- !query schema
struct<regexp_extract(a b m, (\d+)?([a-z]+), 1):string>
-- !query output



-- !query
SELECT regexp_extract('1a 2b 14m', '(?l)')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.PATTERN",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract`",
    "parameter" : "`regexp`",
    "value" : "'(?l)'"
  }
}


-- !query
SELECT regexp_extract_all('1a 2b 14m', '\\d+')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.REGEX_GROUP_INDEX",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract_all`",
    "groupCount" : "0",
    "groupIndex" : "1",
    "parameter" : "`idx`"
  }
}


-- !query
SELECT regexp_extract_all('1a 2b 14m', '\\d+', 0)
-- !query schema
struct<regexp_extract_all(1a 2b 14m, \d+, 0):array<string>>
-- !query output
["1","2","14"]


-- !query
SELECT regexp_extract_all('1a 2b 14m', '\\d+', 1)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.REGEX_GROUP_INDEX",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract_all`",
    "groupCount" : "0",
    "groupIndex" : "1",
    "parameter" : "`idx`"
  }
}


-- !query
SELECT regexp_extract_all('1a 2b 14m', '\\d+', 2)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.REGEX_GROUP_INDEX",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract_all`",
    "groupCount" : "0",
    "groupIndex" : "2",
    "parameter" : "`idx`"
  }
}


-- !query
SELECT regexp_extract_all('1a 2b 14m', '\\d+', -1)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.REGEX_GROUP_INDEX",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract_all`",
    "groupCount" : "0",
    "groupIndex" : "-1",
    "parameter" : "`idx`"
  }
}


-- !query
SELECT regexp_extract_all('1a 2b 14m', '(\\d+)?', 1)
-- !query schema
struct<regexp_extract_all(1a 2b 14m, (\d+)?, 1):array<string>>
-- !query output
["1","","","2","","","14","",""]


-- !query
SELECT regexp_extract_all('a 2b 14m', '(\\d+)?', 1)
-- !query schema
struct<regexp_extract_all(a 2b 14m, (\d+)?, 1):array<string>>
-- !query output
["","","2","","","14","",""]


-- !query
SELECT regexp_extract_all('1a 2b 14m', '(\\d+)([a-z]+)')
-- !query schema
struct<regexp_extract_all(1a 2b 14m, (\d+)([a-z]+), 1):array<string>>
-- !query output
["1","2","14"]


-- !query
SELECT regexp_extract_all('1a 2b 14m', '(\\d+)([a-z]+)', 0)
-- !query schema
struct<regexp_extract_all(1a 2b 14m, (\d+)([a-z]+), 0):array<string>>
-- !query output
["1a","2b","14m"]


-- !query
SELECT regexp_extract_all('1a 2b 14m', '(\\d+)([a-z]+)', 1)
-- !query schema
struct<regexp_extract_all(1a 2b 14m, (\d+)([a-z]+), 1):array<string>>
-- !query output
["1","2","14"]


-- !query
SELECT regexp_extract_all('1a 2b 14m', '(\\d+)([a-z]+)', 2)
-- !query schema
struct<regexp_extract_all(1a 2b 14m, (\d+)([a-z]+), 2):array<string>>
-- !query output
["a","b","m"]


-- !query
SELECT regexp_extract_all('1a 2b 14m', '(\\d+)([a-z]+)', 3)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.REGEX_GROUP_INDEX",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract_all`",
    "groupCount" : "2",
    "groupIndex" : "3",
    "parameter" : "`idx`"
  }
}


-- !query
SELECT regexp_extract_all('1a 2b 14m', '(\\d+)([a-z]+)', -1)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.REGEX_GROUP_INDEX",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract_all`",
    "groupCount" : "2",
    "groupIndex" : "-1",
    "parameter" : "`idx`"
  }
}


-- !query
SELECT regexp_extract_all('1a 2b 14m', '(\\d+)?([a-z]+)', 1)
-- !query schema
struct<regexp_extract_all(1a 2b 14m, (\d+)?([a-z]+), 1):array<string>>
-- !query output
["1","2","14"]


-- !query
SELECT regexp_extract_all('a 2b 14m', '(\\d+)?([a-z]+)', 1)
-- !query schema
struct<regexp_extract_all(a 2b 14m, (\d+)?([a-z]+), 1):array<string>>
-- !query output
["","2","14"]


-- !query
SELECT regexp_extract_all('abc', col0, 1) FROM VALUES('], [') AS t(col0)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.PATTERN",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_extract_all`",
    "parameter" : "`regexp`",
    "value" : "'], ['"
  }
}


-- !query
SELECT regexp_replace('healthy, wealthy, and wise', '\\w+thy', 'something')
-- !query schema
struct<regexp_replace(healthy, wealthy, and wise, \w+thy, something, 1):string>
-- !query output
something, something, and wise


-- !query
SELECT regexp_replace('healthy, wealthy, and wise', '\\w+thy', 'something', -2)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.VALUE_OUT_OF_RANGE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "currentValue" : "-2",
    "exprName" : "position",
    "sqlExpr" : "\"regexp_replace(healthy, wealthy, and wise, \\w+thy, something, -2)\"",
    "valueRange" : "(0, 2147483647]"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 79,
    "fragment" : "regexp_replace('healthy, wealthy, and wise', '\\\\w+thy', 'something', -2)"
  } ]
}


-- !query
SELECT regexp_replace('healthy, wealthy, and wise', '\\w+thy', 'something', 0)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.VALUE_OUT_OF_RANGE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "currentValue" : "0",
    "exprName" : "position",
    "sqlExpr" : "\"regexp_replace(healthy, wealthy, and wise, \\w+thy, something, 0)\"",
    "valueRange" : "(0, 2147483647]"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 78,
    "fragment" : "regexp_replace('healthy, wealthy, and wise', '\\\\w+thy', 'something', 0)"
  } ]
}


-- !query
SELECT regexp_replace('healthy, wealthy, and wise', '\\w+thy', 'something', 1)
-- !query schema
struct<regexp_replace(healthy, wealthy, and wise, \w+thy, something, 1):string>
-- !query output
something, something, and wise


-- !query
SELECT regexp_replace('healthy, wealthy, and wise', '\\w+thy', 'something', 2)
-- !query schema
struct<regexp_replace(healthy, wealthy, and wise, \w+thy, something, 2):string>
-- !query output
hsomething, something, and wise


-- !query
SELECT regexp_replace('healthy, wealthy, and wise', '\\w+thy', 'something', 8)
-- !query schema
struct<regexp_replace(healthy, wealthy, and wise, \w+thy, something, 8):string>
-- !query output
healthy, something, and wise


-- !query
SELECT regexp_replace('healthy, wealthy, and wise', '\\w', 'something', 26)
-- !query schema
struct<regexp_replace(healthy, wealthy, and wise, \w, something, 26):string>
-- !query output
healthy, wealthy, and wissomething


-- !query
SELECT regexp_replace('healthy, wealthy, and wise', '\\w', 'something', 27)
-- !query schema
struct<regexp_replace(healthy, wealthy, and wise, \w, something, 27):string>
-- !query output
healthy, wealthy, and wise


-- !query
SELECT regexp_replace('healthy, wealthy, and wise', '\\w', 'something', 30)
-- !query schema
struct<regexp_replace(healthy, wealthy, and wise, \w, something, 30):string>
-- !query output
healthy, wealthy, and wise


-- !query
SELECT regexp_replace('healthy, wealthy, and wise', '\\w', 'something', null)
-- !query schema
struct<regexp_replace(healthy, wealthy, and wise, \w, something, NULL):string>
-- !query output
NULL


-- !query
SELECT regexp_like('1a 2b 14m', '\\d+b')
-- !query schema
struct<REGEXP_LIKE(1a 2b 14m, \d+b):boolean>
-- !query output
true


-- !query
SELECT regexp_like('1a 2b 14m', '[a-z]+b')
-- !query schema
struct<REGEXP_LIKE(1a 2b 14m, [a-z]+b):boolean>
-- !query output
false


-- !query
SELECT regexp('1a 2b 14m', '\\d+b')
-- !query schema
struct<REGEXP(1a 2b 14m, \d+b):boolean>
-- !query output
true


-- !query
SELECT regexp('1a 2b 14m', '[a-z]+b')
-- !query schema
struct<REGEXP(1a 2b 14m, [a-z]+b):boolean>
-- !query output
false


-- !query
SELECT rlike('1a 2b 14m', '\\d+b')
-- !query schema
struct<RLIKE(1a 2b 14m, \d+b):boolean>
-- !query output
true


-- !query
SELECT rlike('1a 2b 14m', '[a-z]+b')
-- !query schema
struct<RLIKE(1a 2b 14m, [a-z]+b):boolean>
-- !query output
false


-- !query
SELECT regexp_count('1a 2b 14m', '\\d+')
-- !query schema
struct<regexp_count(1a 2b 14m, \d+):int>
-- !query output
3


-- !query
SELECT regexp_count('1a 2b 14m', 'mmm')
-- !query schema
struct<regexp_count(1a 2b 14m, mmm):int>
-- !query output
0


-- !query
SELECT regexp_count('the fox', 'FOX')
-- !query schema
struct<regexp_count(the fox, FOX):int>
-- !query output
0


-- !query
SELECT regexp_count('the fox', '(?i)FOX')
-- !query schema
struct<regexp_count(the fox, (?i)FOX):int>
-- !query output
1


-- !query
SELECT regexp_count('passwd7 plain A1234 a1234', '(?=[^ ]*[a-z])(?=[^ ]*[0-9])[^ ]+')
-- !query schema
struct<regexp_count(passwd7 plain A1234 a1234, (?=[^ ]*[a-z])(?=[^ ]*[0-9])[^ ]+):int>
-- !query output
2


-- !query
SELECT regexp_count(null, 'abc')
-- !query schema
struct<regexp_count(NULL, abc):int>
-- !query output
NULL


-- !query
SELECT regexp_count('abc', null)
-- !query schema
struct<regexp_count(abc, NULL):int>
-- !query output
NULL


-- !query
SELECT regexp_substr('1a 2b 14m', '\\d+')
-- !query schema
struct<regexp_substr(1a 2b 14m, \d+):string>
-- !query output
1


-- !query
SELECT regexp_substr('1a 2b 14m', '\\d+ ')
-- !query schema
struct<regexp_substr(1a 2b 14m, \d+ ):string>
-- !query output
NULL


-- !query
SELECT regexp_substr('1a 2b 14m', '\\d+(a|b|m)')
-- !query schema
struct<regexp_substr(1a 2b 14m, \d+(a|b|m)):string>
-- !query output
1a


-- !query
SELECT regexp_substr('1a 2b 14m', '\\d{2}(a|b|m)')
-- !query schema
struct<regexp_substr(1a 2b 14m, \d{2}(a|b|m)):string>
-- !query output
14m


-- !query
SELECT regexp_substr('1a 2b 14m', '')
-- !query schema
struct<regexp_substr(1a 2b 14m, ):string>
-- !query output
NULL


-- !query
SELECT regexp_substr('Spark', null)
-- !query schema
struct<regexp_substr(Spark, NULL):string>
-- !query output
NULL


-- !query
SELECT regexp_substr(null, '.*')
-- !query schema
struct<regexp_substr(NULL, .*):string>
-- !query output
NULL


-- !query
SELECT regexp_instr('abc', 'b')
-- !query schema
struct<regexp_instr(abc, b, 0):int>
-- !query output
2


-- !query
SELECT regexp_instr('abc', 'x')
-- !query schema
struct<regexp_instr(abc, x, 0):int>
-- !query output
0


-- !query
SELECT regexp_instr('ABC', '(?-i)b')
-- !query schema
struct<regexp_instr(ABC, (?-i)b, 0):int>
-- !query output
0


-- !query
SELECT regexp_instr('1a 2b 14m', '\\d{2}(a|b|m)')
-- !query schema
struct<regexp_instr(1a 2b 14m, \d{2}(a|b|m), 0):int>
-- !query output
7


-- !query
SELECT regexp_instr('abc', null)
-- !query schema
struct<regexp_instr(abc, NULL, 0):int>
-- !query output
NULL


-- !query
SELECT regexp_instr(null, 'b')
-- !query schema
struct<regexp_instr(NULL, b, 0):int>
-- !query output
NULL


-- !query
SELECT regexp_instr('abc', col0, 1) FROM VALUES(') ?') AS t(col0)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "INVALID_PARAMETER_VALUE.PATTERN",
  "sqlState" : "22023",
  "messageParameters" : {
    "functionName" : "`regexp_instr`",
    "parameter" : "`regexp`",
    "value" : "') ?'"
  }
}
