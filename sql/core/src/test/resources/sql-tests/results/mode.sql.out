-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE OR REPLACE TEMPORARY VIEW basic_pays AS SELECT * FROM VALUES
('Diane Murphy','Accounting',8435),
('Mary Patterson','Accounting',9998),
('Jeff Firrelli','Accounting',8992),
('William Patterson','Accounting',8870),
('Gerard Bondur','Accounting',11472),
('Anthony Bow','Accounting',6627),
('Leslie Jennings','IT',8113),
('Leslie Thompson','IT',5186),
('Julie Firrelli','Sales',9181),
('Steve Patterson','Sales',9441),
('Foon Yue Tseng','Sales',6660),
('George Vanauf','Sales',10563),
('Loui Bondur','SCM',10449),
('Gerard Hernandez','SCM',6949),
('Pamela Castillo','SCM',11303),
('Larry Bott','SCM',11798),
('Barry Jones','SCM',10586)
AS basic_pays(employee_name, department, salary)
-- !query schema
struct<>
-- !query output



-- !query
SELECT mode(department), mode(salary) FROM basic_pays
-- !query schema
struct<mode(department):string,mode(salary):int>
-- !query output
Accounting	10563


-- !query
SELECT department, mode(salary) FROM basic_pays GROUP BY department ORDER BY department
-- !query schema
struct<department:string,mode(salary):int>
-- !query output
Accounting	6627
IT	5186
SCM	11303
Sales	10563


-- !query
SELECT department, mode(DISTINCT salary) FROM basic_pays GROUP BY department ORDER BY department
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_INVERSE_DISTRIBUTION_FUNCTION.DISTINCT_UNSUPPORTED",
  "sqlState" : "42K0K",
  "messageParameters" : {
    "funcName" : "`mode`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 20,
    "stopIndex" : 40,
    "fragment" : "mode(DISTINCT salary)"
  } ]
}


-- !query
SELECT mode(col) FROM VALUES (-10), (0), (10) AS tab(col)
-- !query schema
struct<mode(col):int>
-- !query output
0


-- !query
SELECT mode(col, false) FROM VALUES (-10), (0), (10) AS tab(col)
-- !query schema
struct<mode(col):int>
-- !query output
0


-- !query
SELECT mode(col, true) FROM VALUES (-10), (0), (10) AS tab(col)
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY col DESC):int>
-- !query output
-10


-- !query
SELECT mode(col, 'true') FROM VALUES (-10), (0), (10) AS tab(col)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNEXPECTED_INPUT_TYPE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "functionName" : "`mode`",
    "inputSql" : "\"true\"",
    "inputType" : "\"STRING\"",
    "paramIndex" : "second",
    "requiredType" : "\"BOOLEAN\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 24,
    "fragment" : "mode(col, 'true')"
  } ]
}


-- !query
SELECT mode(col, null) FROM VALUES (-10), (0), (10) AS tab(col)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "DATATYPE_MISMATCH.UNEXPECTED_NULL",
  "sqlState" : "42K09",
  "messageParameters" : {
    "exprName" : "`deterministic`",
    "sqlExpr" : "\"NULL\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 22,
    "fragment" : "mode(col, null)"
  } ]
}


-- !query
SELECT mode(col, b) FROM VALUES (-10, false), (0, false), (10, false) AS tab(col, b)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "NON_FOLDABLE_ARGUMENT",
  "sqlState" : "42K08",
  "messageParameters" : {
    "funcName" : "`mode`",
    "paramName" : "`deterministic`",
    "paramType" : "\"BOOLEAN\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 19,
    "fragment" : "mode(col, b)"
  } ]
}


-- !query
SELECT mode(col) FROM VALUES (map(1, 'a')) AS tab(col)
-- !query schema
struct<mode(col):map<int,string>>
-- !query output
{1:"a"}


-- !query
SELECT mode(col, false) FROM VALUES (map(1, 'a')) AS tab(col)
-- !query schema
struct<mode(col):map<int,string>>
-- !query output
{1:"a"}


-- !query
SELECT mode(col, true) FROM VALUES (map(1, 'a')) AS tab(col)
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY col DESC):map<int,string>>
-- !query output
{1:"a"}


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY col),
  mode() WITHIN GROUP (ORDER BY col DESC)
FROM VALUES (null), (null), (null) AS tab(col)
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY col DESC):void,mode() WITHIN GROUP (ORDER BY col):void>
-- !query output
NULL	NULL


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY salary),
  mode() WITHIN GROUP (ORDER BY salary DESC)
FROM basic_pays
WHERE salary > 20000
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY salary DESC):int,mode() WITHIN GROUP (ORDER BY salary):int>
-- !query output
NULL	NULL


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY salary),
  mode() WITHIN GROUP (ORDER BY salary DESC)
FROM basic_pays
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY salary DESC):int,mode() WITHIN GROUP (ORDER BY salary):int>
-- !query output
5186	11798


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY salary),
  mode() WITHIN GROUP (ORDER BY salary) FILTER (WHERE salary > 10000)
FROM basic_pays
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY salary DESC):int,mode() WITHIN GROUP (ORDER BY salary DESC) FILTER (WHERE (salary > 10000)):int>
-- !query output
5186	10449


-- !query
SELECT
  department,
  mode() WITHIN GROUP (ORDER BY salary),
  mode() WITHIN GROUP (ORDER BY salary) FILTER (WHERE salary > 10000)
FROM basic_pays
GROUP BY department
ORDER BY department
-- !query schema
struct<department:string,mode() WITHIN GROUP (ORDER BY salary DESC):int,mode() WITHIN GROUP (ORDER BY salary DESC) FILTER (WHERE (salary > 10000)):int>
-- !query output
Accounting	6627	11472
IT	5186	NULL
SCM	6949	10449
Sales	6660	10563


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department)
FROM basic_pays
ORDER BY salary
-- !query schema
struct<employee_name:string,department:string,salary:int,mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):int>
-- !query output
Leslie Thompson	IT	5186	5186
Anthony Bow	Accounting	6627	6627
Foon Yue Tseng	Sales	6660	6660
Gerard Hernandez	SCM	6949	6949
Leslie Jennings	IT	8113	5186
Diane Murphy	Accounting	8435	6627
William Patterson	Accounting	8870	6627
Jeff Firrelli	Accounting	8992	6627
Julie Firrelli	Sales	9181	6660
Steve Patterson	Sales	9441	6660
Mary Patterson	Accounting	9998	6627
Loui Bondur	SCM	10449	6949
George Vanauf	Sales	10563	6660
Barry Jones	SCM	10586	6949
Pamela Castillo	SCM	11303	6949
Gerard Bondur	Accounting	11472	6627
Larry Bott	SCM	11798	6949


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ORDER BY salary)
FROM basic_pays
ORDER BY salary
-- !query schema
struct<employee_name:string,department:string,salary:int,mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ORDER BY salary ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int>
-- !query output
Leslie Thompson	IT	5186	5186
Anthony Bow	Accounting	6627	6627
Foon Yue Tseng	Sales	6660	6660
Gerard Hernandez	SCM	6949	6949
Leslie Jennings	IT	8113	5186
Diane Murphy	Accounting	8435	6627
William Patterson	Accounting	8870	6627
Jeff Firrelli	Accounting	8992	6627
Julie Firrelli	Sales	9181	6660
Steve Patterson	Sales	9441	6660
Mary Patterson	Accounting	9998	6627
Loui Bondur	SCM	10449	6949
George Vanauf	Sales	10563	6660
Barry Jones	SCM	10586	6949
Pamela Castillo	SCM	11303	6949
Gerard Bondur	Accounting	11472	6627
Larry Bott	SCM	11798	6949


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING)
FROM basic_pays
ORDER BY salary
-- !query schema
struct<employee_name:string,department:string,salary:int,mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING):int>
-- !query output
Leslie Thompson	IT	5186	5186
Anthony Bow	Accounting	6627	6627
Foon Yue Tseng	Sales	6660	6660
Gerard Hernandez	SCM	6949	6949
Leslie Jennings	IT	8113	5186
Diane Murphy	Accounting	8435	8435
William Patterson	Accounting	8870	8435
Jeff Firrelli	Accounting	8992	8435
Julie Firrelli	Sales	9181	9181
Steve Patterson	Sales	9441	6660
Mary Patterson	Accounting	9998	8435
Loui Bondur	SCM	10449	6949
George Vanauf	Sales	10563	6660
Barry Jones	SCM	10586	6949
Pamela Castillo	SCM	11303	6949
Gerard Bondur	Accounting	11472	6627
Larry Bott	SCM	11798	6949


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER w
FROM basic_pays
WHERE salary > 8900
WINDOW w AS (PARTITION BY department)
ORDER BY salary
-- !query schema
struct<employee_name:string,department:string,salary:int,mode() WITHIN GROUP (ORDER BY salary DESC) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):int>
-- !query output
Jeff Firrelli	Accounting	8992	8992
Julie Firrelli	Sales	9181	9181
Steve Patterson	Sales	9441	9181
Mary Patterson	Accounting	9998	8992
Loui Bondur	SCM	10449	10449
George Vanauf	Sales	10563	9181
Barry Jones	SCM	10586	10449
Pamela Castillo	SCM	11303	10449
Gerard Bondur	Accounting	11472	8992
Larry Bott	SCM	11798	10449


-- !query
SELECT
  mode(DISTINCT salary) WITHIN GROUP (ORDER BY salary)
FROM basic_pays
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_INVERSE_DISTRIBUTION_FUNCTION.DISTINCT_UNSUPPORTED",
  "sqlState" : "42K0K",
  "messageParameters" : {
    "funcName" : "`mode`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 10,
    "stopIndex" : 61,
    "fragment" : "mode(DISTINCT salary) WITHIN GROUP (ORDER BY salary)"
  } ]
}


-- !query
SELECT
  mode()
FROM basic_pays
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_INVERSE_DISTRIBUTION_FUNCTION.WITHIN_GROUP_MISSING",
  "sqlState" : "42K0K",
  "messageParameters" : {
    "funcName" : "`mode`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 10,
    "stopIndex" : 15,
    "fragment" : "mode()"
  } ]
}


-- !query
SELECT
  mode(salary) WITHIN GROUP (ORDER BY salary)
FROM basic_pays
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_INVERSE_DISTRIBUTION_FUNCTION.WRONG_NUM_ORDERINGS",
  "sqlState" : "42K0K",
  "messageParameters" : {
    "actualNum" : "1",
    "expectedNum" : "0",
    "funcName" : "`mode`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 10,
    "stopIndex" : 52,
    "fragment" : "mode(salary) WITHIN GROUP (ORDER BY salary)"
  } ]
}


-- !query
CREATE OR REPLACE TEMPORARY VIEW intervals AS SELECT * FROM VALUES
(0, INTERVAL '0' MONTH, INTERVAL '0' SECOND, INTERVAL '0' MINUTE),
(0, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(0, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(0, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(0, INTERVAL '40' MONTH, INTERVAL '40' SECOND, INTERVAL '40' MINUTE),
(1, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(1, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(2, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '25' MONTH, INTERVAL '25' SECOND, INTERVAL '25' MINUTE),
(2, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(3, INTERVAL '60' MONTH, INTERVAL '60' SECOND, INTERVAL '60' MINUTE),
(4, null, null, null)
AS intervals(k, dt, ym, dt2)
-- !query schema
struct<>
-- !query output



-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY dt),
  mode() WITHIN GROUP (ORDER BY dt DESC)
FROM intervals
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY dt DESC):interval month,mode() WITHIN GROUP (ORDER BY dt):interval month>
-- !query output
0-10	1-8


-- !query
SELECT
  k,
  mode() WITHIN GROUP (ORDER BY ym),
  mode() WITHIN GROUP (ORDER BY dt DESC)
FROM intervals
GROUP BY k
ORDER BY k
-- !query schema
struct<k:int,mode() WITHIN GROUP (ORDER BY ym DESC):interval second,mode() WITHIN GROUP (ORDER BY dt):interval month>
-- !query output
0	0 00:00:00.000000000	3-4
1	0 00:00:10.000000000	1-8
2	0 00:00:10.000000000	2-6
3	0 00:01:00.000000000	5-0
4	NULL	NULL
