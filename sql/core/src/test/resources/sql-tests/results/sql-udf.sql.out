-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE FUNCTION foo1a0() RETURNS INT RETURN 1
-- !query schema
struct<>
-- !query output



-- !query
SELECT foo1a0()
-- !query schema
struct<spark_catalog.default.foo1a0():int>
-- !query output
1


-- !query
SELECT foo1a0(1)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "WRONG_NUM_ARGS.WITHOUT_SUGGESTION",
  "sqlState" : "42605",
  "messageParameters" : {
    "actualNum" : "1",
    "docroot" : "https://spark.apache.org/docs/latest",
    "expectedNum" : "0",
    "functionName" : "`spark_catalog`.`default`.`foo1a0`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 16,
    "fragment" : "foo1a0(1)"
  } ]
}


-- !query
CREATE FUNCTION foo1a1(a INT) RETURNS INT RETURN 1
-- !query schema
struct<>
-- !query output



-- !query
SELECT foo1a1(1)
-- !query schema
struct<spark_catalog.default.foo1a1(1):int>
-- !query output
1


-- !query
SELECT foo1a1(1, 2)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "WRONG_NUM_ARGS.WITHOUT_SUGGESTION",
  "sqlState" : "42605",
  "messageParameters" : {
    "actualNum" : "2",
    "docroot" : "https://spark.apache.org/docs/latest",
    "expectedNum" : "1",
    "functionName" : "`spark_catalog`.`default`.`foo1a1`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 19,
    "fragment" : "foo1a1(1, 2)"
  } ]
}


-- !query
CREATE FUNCTION foo1a2(a INT, b INT, c INT, d INT) RETURNS INT RETURN 1
-- !query schema
struct<>
-- !query output



-- !query
SELECT foo1a2(1, 2, 3, 4)
-- !query schema
struct<spark_catalog.default.foo1a2(1, 2, 3, 4):int>
-- !query output
1


-- !query
CREATE FUNCTION foo1b0() RETURNS TABLE (c1 INT) RETURN SELECT 1
-- !query schema
struct<>
-- !query output



-- !query
SELECT * FROM foo1b0()
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
CREATE FUNCTION foo1b1(a INT) RETURNS TABLE (c1 INT) RETURN SELECT 1
-- !query schema
struct<>
-- !query output



-- !query
SELECT * FROM foo1b1(1)
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
CREATE FUNCTION foo1b2(a INT, b INT, c INT, d INT) RETURNS TABLE(c1 INT) RETURN SELECT 1
-- !query schema
struct<>
-- !query output



-- !query
SELECT * FROM foo1b2(1, 2, 3, 4)
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
CREATE FUNCTION foo1c1(duplicate INT, DUPLICATE INT) RETURNS INT RETURN 1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "DUPLICATE_ROUTINE_PARAMETER_NAMES",
  "sqlState" : "42734",
  "messageParameters" : {
    "names" : "`duplicate`",
    "routineName" : "foo1c1"
  }
}


-- !query
CREATE FUNCTION foo1c2(a INT, b INT, thisisaduplicate INT, c INT, d INT, e INT, f INT, thisIsaDuplicate INT, g INT)
    RETURNS TABLE (a INT) RETURN SELECT 1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "DUPLICATE_ROUTINE_PARAMETER_NAMES",
  "sqlState" : "42734",
  "messageParameters" : {
    "names" : "`thisisaduplicate`",
    "routineName" : "foo1c2"
  }
}


-- !query
CREATE OR REPLACE FUNCTION foo1d1(a INT DEFAULT NULL) RETURNS INT RETURN a
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'DEFAULT'",
    "hint" : ""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 74,
    "fragment" : "CREATE OR REPLACE FUNCTION foo1d1(a INT DEFAULT NULL) RETURNS INT RETURN a"
  } ]
}


-- !query
CREATE OR REPLACE FUNCTION foo1d1(a INT, b INT DEFAULT 7) RETURNS TABLE(a INT, b INT) RETURN SELECT a, b
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'DEFAULT'",
    "hint" : ""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 104,
    "fragment" : "CREATE OR REPLACE FUNCTION foo1d1(a INT, b INT DEFAULT 7) RETURNS TABLE(a INT, b INT) RETURN SELECT a, b"
  } ]
}


-- !query
CREATE FUNCTION foo2_1a(a INT) RETURNS INT RETURN a
-- !query schema
struct<>
-- !query output



-- !query
SELECT foo2_1a(5)
-- !query schema
struct<spark_catalog.default.foo2_1a(5):int>
-- !query output
5


-- !query
CREATE FUNCTION foo2_1b(a INT, b INT) RETURNS INT RETURN a + b
-- !query schema
struct<>
-- !query output



-- !query
SELECT foo2_1b(5, 6)
-- !query schema
struct<spark_catalog.default.foo2_1b(5, 6):int>
-- !query output
11


-- !query
CREATE FUNCTION foo2_1c(a INT, b INT) RETURNS INT RETURN 10 * (a + b) + 100 * (a -b)
-- !query schema
struct<>
-- !query output



-- !query
SELECT foo2_1c(5, 6)
-- !query schema
struct<spark_catalog.default.foo2_1c(5, 6):int>
-- !query output
10


-- !query
CREATE FUNCTION foo2_1d(a INT, b INT) RETURNS INT RETURN ABS(a) - LENGTH(CAST(b AS VARCHAR(10)))
-- !query schema
struct<>
-- !query output



-- !query
SELECT foo2_1d(-5, 6)
-- !query schema
struct<spark_catalog.default.foo2_1d(-5, 6):int>
-- !query output
4


-- !query
CREATE FUNCTION foo2_2a(a INT) RETURNS INT RETURN SELECT a
-- !query schema
struct<>
-- !query output



-- !query
SELECT foo2_2a(5)
-- !query schema
struct<spark_catalog.default.foo2_2a(5):int>
-- !query output
5


-- !query
CREATE FUNCTION foo2_2b(a INT) RETURNS INT RETURN 1 + (SELECT a)
-- !query schema
struct<>
-- !query output



-- !query
SELECT foo2_2b(5)
-- !query schema
struct<spark_catalog.default.foo2_2b(5):int>
-- !query output
6


-- !query
CREATE FUNCTION foo2_2c(a INT) RETURNS INT RETURN 1 + (SELECT (SELECT a))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITHOUT_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`a`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 21,
    "stopIndex" : 21,
    "fragment" : "a"
  } ]
}


-- !query
CREATE FUNCTION foo2_2d(a INT) RETURNS INT RETURN 1 + (SELECT (SELECT (SELECT (SELECT a))))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITHOUT_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`a`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 37,
    "stopIndex" : 37,
    "fragment" : "a"
  } ]
}


-- !query
CREATE FUNCTION foo2_2e(a INT) RETURNS INT RETURN
SELECT a FROM (VALUES 1) AS V(c1) WHERE c1 = 2
UNION ALL
SELECT a + 1 FROM (VALUES 1) AS V(c1)
-- !query schema
struct<>
-- !query output



-- !query
CREATE FUNCTION foo2_2f(a INT) RETURNS INT RETURN
SELECT a FROM (VALUES 1) AS V(c1)
EXCEPT
SELECT a + 1 FROM (VALUES 1) AS V(a)
-- !query schema
struct<>
-- !query output



-- !query
CREATE FUNCTION foo2_2g(a INT) RETURNS INT RETURN
SELECT a FROM (VALUES 1) AS V(c1)
INTERSECT
SELECT a FROM (VALUES 1) AS V(a)
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS t1
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS t2
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS ts
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS tm
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS ta
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS V1
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS V2
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS t1
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS t2
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS ts
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS tm
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS ta
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS V1
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS V2
-- !query schema
struct<>
-- !query output



-- !query
CREATE FUNCTION foo2_3(a INT, b INT) RETURNS INT RETURN a + b
-- !query schema
struct<>
-- !query output



-- !query
CREATE VIEW V1(c1, c2) AS VALUES (1, 2), (3, 4), (5, 6)
-- !query schema
struct<>
-- !query output



-- !query
CREATE VIEW V2(c1, c2) AS VALUES (-1, -2), (-3, -4), (-5, -6)
-- !query schema
struct<>
-- !query output



-- !query
SELECT foo2_3(c1, c2), foo2_3(c2, 1), foo2_3(c1, c2) - foo2_3(c2, c1 - 1) FROM V1 ORDER BY 1, 2, 3
-- !query schema
struct<spark_catalog.default.foo2_3(c1, c2):int,spark_catalog.default.foo2_3(c2, 1):int,(spark_catalog.default.foo2_3(c1, c2) - spark_catalog.default.foo2_3(c2, (c1 - 1))):int>
-- !query output
3	3	1
7	5	1
11	7	1


-- !query
SELECT * FROM V1 WHERE foo2_3(c1, 0) = c1 AND foo2_3(c1, c2) < 8
-- !query schema
struct<c1:int,c2:int>
-- !query output
1	2
3	4


-- !query
SELECT foo2_3(SUM(c1), SUM(c2)), SUM(c1) + SUM(c2), SUM(foo2_3(c1, c2) + foo2_3(c2, c1) - foo2_3(c2, c1))
FROM V1
-- !query schema
struct<spark_catalog.default.foo2_3(sum(c1), sum(c2)):int,(sum(c1) + sum(c2)):bigint,sum(((spark_catalog.default.foo2_3(c1, c2) + spark_catalog.default.foo2_3(c2, c1)) - spark_catalog.default.foo2_3(c2, c1))):bigint>
-- !query output
21	21	21


-- !query
CREATE FUNCTION foo2_4a(a ARRAY<STRING>) RETURNS STRING RETURN
SELECT array_sort(a, (i, j) -> rank[i] - rank[j])[0] FROM (SELECT MAP('a', 1, 'b', 2) rank)
-- !query schema
struct<>
-- !query output



-- !query
SELECT foo2_4a(ARRAY('a', 'b'))
-- !query schema
struct<spark_catalog.default.foo2_4a(array(a, b)):string>
-- !query output
a


-- !query
CREATE FUNCTION foo2_4b(m MAP<STRING, STRING>, k STRING) RETURNS STRING RETURN
SELECT v || ' ' || v FROM (SELECT upper(m[k]) AS v)
-- !query schema
struct<>
-- !query output



-- !query
SELECT foo2_4b(map('a', 'hello', 'b', 'world'), 'a')
-- !query schema
struct<spark_catalog.default.foo2_4b(map(a, hello, b, world), a):string>
-- !query output
HELLO HELLO


-- !query
DROP VIEW V2
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW V1
-- !query schema
struct<>
-- !query output



-- !query
CREATE VIEW t1(c1, c2) AS VALUES (0, 1), (0, 2), (1, 2)
-- !query schema
struct<>
-- !query output



-- !query
CREATE VIEW t2(c1, c2) AS VALUES (0, 2), (0, 3)
-- !query schema
struct<>
-- !query output



-- !query
CREATE FUNCTION foo4_0() RETURNS TABLE (x INT) RETURN SELECT 1
-- !query schema
struct<>
-- !query output



-- !query
CREATE FUNCTION foo4_1(x INT) RETURNS TABLE (a INT) RETURN SELECT x
-- !query schema
struct<>
-- !query output



-- !query
CREATE FUNCTION foo4_2(x INT) RETURNS TABLE (a INT) RETURN SELECT c2 FROM t2 WHERE c1 = x
-- !query schema
struct<>
-- !query output



-- !query
CREATE FUNCTION foo4_3(x INT) RETURNS TABLE (a INT, cnt INT) RETURN SELECT c1, COUNT(*) FROM t2 WHERE c1 = x GROUP BY c1
-- !query schema
struct<>
-- !query output



-- !query
SELECT * FROM foo4_0()
-- !query schema
struct<x:int>
-- !query output
1


-- !query
SELECT * FROM foo4_1(1)
-- !query schema
struct<a:int>
-- !query output
1


-- !query
SELECT * FROM foo4_2(2)
-- !query schema
struct<a:int>
-- !query output



-- !query
SELECT * FROM foo4_3(0)
-- !query schema
struct<a:int,cnt:int>
-- !query output
0	2


-- !query
SELECT * FROM foo4_1(rand(0) * 0)
-- !query schema
struct<a:int>
-- !query output
0


-- !query
SELECT * FROM foo4_1(x => 1)
-- !query schema
struct<a:int>
-- !query output
1


-- !query
SELECT * FROM t1, LATERAL foo4_1(c1)
-- !query schema
struct<c1:int,c2:int,a:int>
-- !query output
0	1	0
0	2	0
1	2	1


-- !query
SELECT * FROM t1, LATERAL foo4_2(c1)
-- !query schema
struct<c1:int,c2:int,a:int>
-- !query output
0	1	2
0	1	3
0	2	2
0	2	3


-- !query
SELECT * FROM t1 JOIN LATERAL foo4_2(c1) ON t1.c2 = foo4_2.a
-- !query schema
struct<c1:int,c2:int,a:int>
-- !query output
0	2	2


-- !query
SELECT * FROM t1, LATERAL foo4_3(c1)
-- !query schema
struct<c1:int,c2:int,a:int,cnt:int>
-- !query output
0	1	0	2
0	2	0	2


-- !query
SELECT * FROM t1, LATERAL (SELECT cnt FROM foo4_3(c1))
-- !query schema
struct<c1:int,c2:int,cnt:int>
-- !query output
0	1	2
0	2	2


-- !query
SELECT * FROM t1, LATERAL foo4_1(c1 + rand(0) * 0)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.NON_DETERMINISTIC_LATERAL_SUBQUERIES",
  "sqlState" : "0A000",
  "messageParameters" : {
    "treeNode" : "LateralJoin lateral-subquery#x [c1#x], Inner\n:  +- SQLFunctionNode spark_catalog.default.foo4_1\n:     +- SubqueryAlias foo4_1\n:        +- Project [cast(x#x as int) AS a#x]\n:           +- LateralJoin lateral-subquery#x [x#x], Inner\n:              :  +- Project [outer(x#x) AS x#x]\n:              :     +- OneRowRelation\n:              +- Project [cast((cast(outer(c1#x) as double) + (rand(number) * cast(0 as double))) as int) AS x#x]\n:                 +- OneRowRelation\n+- SubqueryAlias spark_catalog.default.t1\n   +- View (`spark_catalog`.`default`.`t1`, [c1#x, c2#x])\n      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]\n         +- LocalRelation [col1#x, col2#x]\n"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 10,
    "stopIndex" : 50,
    "fragment" : "FROM t1, LATERAL foo4_1(c1 + rand(0) * 0)"
  } ]
}


-- !query
SELECT * FROM t1 JOIN foo4_1(1) AS foo4_1(x) ON t1.c1 = foo4_1.x
-- !query schema
struct<c1:int,c2:int,x:int>
-- !query output
1	2	1


-- !query
SELECT * FROM t1, LATERAL foo4_1(c1), LATERAL foo4_2(foo4_1.a + c1)
-- !query schema
struct<c1:int,c2:int,a:int,a:int>
-- !query output
0	1	0	2
0	1	0	3
0	2	0	2
0	2	0	3


-- !query
SELECT (SELECT MAX(a) FROM foo4_1(c1)) FROM t1
-- !query schema
struct<scalarsubquery(c1):int>
-- !query output
0
0
1


-- !query
SELECT (SELECT MAX(a) FROM foo4_1(c1) WHERE a = c2) FROM t1
-- !query schema
struct<scalarsubquery(c2, c1):int>
-- !query output
NULL
NULL
NULL


-- !query
SELECT (SELECT MAX(cnt) FROM foo4_3(c1)) FROM t1
-- !query schema
struct<scalarsubquery(c1):int>
-- !query output
2
2
NULL


-- !query
DROP VIEW t1
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW t2
-- !query schema
struct<>
-- !query output

