-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TEMPORARY VIEW tbl_view AS SELECT * FROM VALUES
  (10, 'name1', named_struct('f1', 1, 's2', named_struct('f2', 101, 'f3', 'a'))),
  (20, 'name2', named_struct('f1', 2, 's2', named_struct('f2', 202, 'f3', 'b'))),
  (30, 'name3', named_struct('f1', 3, 's2', named_struct('f2', 303, 'f3', 'c'))),
  (40, 'name4', named_struct('f1', 4, 's2', named_struct('f2', 404, 'f3', 'd'))),
  (50, 'name5', named_struct('f1', 5, 's2', named_struct('f2', 505, 'f3', 'e'))),
  (60, 'name6', named_struct('f1', 6, 's2', named_struct('f2', 606, 'f3', 'f'))),
  (70, 'name7', named_struct('f1', 7, 's2', named_struct('f2', 707, 'f3', 'g')))
AS tbl_view(id, name, data)
-- !query schema
struct<>
-- !query output



-- !query
CREATE TABLE x (id INT) USING csv
-- !query schema
struct<>
-- !query output



-- !query
DECLARE sql_string STRING
-- !query schema
struct<>
-- !query output



-- !query
SET VAR sql_string = 'SELECT * from tbl_view where name = \'name1\''
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'SET spark.sql.ansi.enabled=true'
-- !query schema
struct<key:string,value:string>
-- !query output
spark.sql.ansi.enabled	true


-- !query
EXECUTE IMMEDIATE 'CREATE TEMPORARY VIEW IDENTIFIER(:tblName) AS SELECT id, name FROM tbl_view' USING 'tbl_view_tmp' as tblName
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'SELECT * FROM tbl_view_tmp'
-- !query schema
struct<id:int,name:string>
-- !query output
10	name1
20	name2
30	name3
40	name4
50	name5
60	name6
70	name7


-- !query
EXECUTE IMMEDIATE 'REFRESH TABLE IDENTIFIER(:tblName)' USING 'x' as tblName
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE sql_string
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = \'name1\''
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}


-- !query
SET VAR sql_string = 'SELECT * from tbl_view where name = ? or name = ?'
-- !query schema
struct<>
-- !query output



-- !query
DECLARE a STRING
-- !query schema
struct<>
-- !query output



-- !query
SET VAR a = 'name1'
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE sql_string USING 'name1', 'name3'
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}
30	name3	{"f1":3,"s2":{"f2":303,"f3":"c"}}


-- !query
EXECUTE IMMEDIATE sql_string USING a, 'name2'
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}
20	name2	{"f1":2,"s2":{"f2":202,"f3":"b"}}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = ? or name = ?' USING 'name1', 'name3'
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}
30	name3	{"f1":3,"s2":{"f2":303,"f3":"c"}}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = ? or name = ?' USING a, 'name2'
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}
20	name2	{"f1":2,"s2":{"f2":202,"f3":"b"}}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = ? or name = ?' USING (a, 'name2')
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}
20	name2	{"f1":2,"s2":{"f2":202,"f3":"b"}}


-- !query
EXECUTE IMMEDIATE 'INSERT INTO x VALUES(?)' USING 1
-- !query schema
struct<>
-- !query output



-- !query
SELECT * from x
-- !query schema
struct<id:int>
-- !query output
1


-- !query
SET VAR sql_string = 'SELECT * from tbl_view where name = :first or id = :second'
-- !query schema
struct<>
-- !query output



-- !query
DECLARE b INT
-- !query schema
struct<>
-- !query output



-- !query
SET VAR b = 40
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE sql_string USING 40 as second, 'name7' as first
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
40	name4	{"f1":4,"s2":{"f2":404,"f3":"d"}}
70	name7	{"f1":7,"s2":{"f2":707,"f3":"g"}}


-- !query
EXECUTE IMMEDIATE sql_string USING b as second, 'name7' as first
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
40	name4	{"f1":4,"s2":{"f2":404,"f3":"d"}}
70	name7	{"f1":7,"s2":{"f2":707,"f3":"g"}}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = :first or id = :second' USING 40 as second, 'name7' as first
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
40	name4	{"f1":4,"s2":{"f2":404,"f3":"d"}}
70	name7	{"f1":7,"s2":{"f2":707,"f3":"g"}}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = :first or id = :second' USING 'name7' as first, b as second
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
40	name4	{"f1":4,"s2":{"f2":404,"f3":"d"}}
70	name7	{"f1":7,"s2":{"f2":707,"f3":"g"}}


-- !query
EXECUTE IMMEDIATE 'SELECT tbl_view.*, :first as p FROM tbl_view WHERE name = :first' USING 'name7' as first
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>,p:string>
-- !query output
70	name7	{"f1":7,"s2":{"f2":707,"f3":"g"}}	name7


-- !query
EXECUTE IMMEDIATE 'SET VAR sql_string = ?' USING 'SELECT id from tbl_view where name = :first'
-- !query schema
struct<>
-- !query output



-- !query
SELECT sql_string
-- !query schema
struct<sql_string:string>
-- !query output
SELECT id from tbl_view where name = :first


-- !query
DECLARE res_id INT
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE sql_string INTO res_id USING 'name7' as first
-- !query schema
struct<>
-- !query output



-- !query
SELECT res_id
-- !query schema
struct<res_id:int>
-- !query output
70


-- !query
EXECUTE IMMEDIATE sql_string INTO res_id USING a as first
-- !query schema
struct<>
-- !query output



-- !query
SELECT res_id
-- !query schema
struct<res_id:int>
-- !query output
10


-- !query
SET VAR sql_string = 'SELECT * from tbl_view where name = :first or id = :second'
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'SELECT 42' INTO res_id
-- !query schema
struct<>
-- !query output



-- !query
SELECT res_id
-- !query schema
struct<res_id:int>
-- !query output
42


-- !query
EXECUTE IMMEDIATE 'SELECT id, name FROM tbl_view WHERE id = ?' INTO b, a USING 10
-- !query schema
struct<>
-- !query output



-- !query
SELECT b, a
-- !query schema
struct<b:int,a:string>
-- !query output
10	name1


-- !query
EXECUTE IMMEDIATE 'SELECT * FROM tbl_view where id = ? AND name = ?' USING b as first, a
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}


-- !query
EXECUTE IMMEDIATE 'SELECT 42 WHERE 2 = 1' INTO res_id
-- !query schema
struct<>
-- !query output



-- !query
SELECT res_id
-- !query schema
struct<res_id:int>
-- !query output
NULL


-- !query
EXECUTE IMMEDIATE 'SELECT \'1707\'' INTO res_id
-- !query schema
struct<>
-- !query output



-- !query
SELECT res_id
-- !query schema
struct<res_id:int>
-- !query output
1707


-- !query
EXECUTE IMMEDIATE 'SELECT \'invalid_cast_error_expected\'' INTO res_id
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkNumberFormatException
{
  "errorClass" : "CAST_INVALID_INPUT",
  "sqlState" : "22018",
  "messageParameters" : {
    "ansiConfig" : "\"spark.sql.ansi.enabled\"",
    "expression" : "'invalid_cast_error_expected'",
    "sourceType" : "\"STRING\"",
    "targetType" : "\"INT\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 70,
    "fragment" : "EXECUTE IMMEDIATE 'SELECT \\'invalid_cast_error_expected\\'' INTO res_id"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'INSERT INTO x VALUES (?)' INTO res_id USING 1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_STATEMENT_FOR_EXECUTE_INTO",
  "sqlState" : "07501",
  "messageParameters" : {
    "sqlString" : "INSERT INTO X VALUES (?)"
  }
}


-- !query
DECLARE OR REPLACE testvarA INT
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'SET VAR testVarA = 1' INTO testVarA
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_STATEMENT_FOR_EXECUTE_INTO",
  "sqlState" : "07501",
  "messageParameters" : {
    "sqlString" : "SET VAR TESTVARA = 1"
  }
}


-- !query
EXECUTE IMMEDIATE 'SELECT * FROM tbl_view WHERE ? = id' USING id
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITHOUT_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`id`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 63,
    "stopIndex" : 64,
    "fragment" : "id"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'SELECT * FROM tbl_view where ? = id and :first = name' USING 1 as x, 'name2' as first
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_QUERY_MIXED_QUERY_PARAMETERS",
  "sqlState" : "42613"
}


-- !query
EXECUTE IMMEDIATE 'SELECT * FROM tbl_view where :x = id and :first = name' USING 1, 'name2' as first
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "ALL_PARAMETERS_MUST_BE_NAMED",
  "sqlState" : "07001",
  "messageParameters" : {
    "exprs" : "\"1\""
  }
}


-- !query
EXECUTE IMMEDIATE 'SELECT * FROM tbl_view where :first = name' USING 1, 'name2' as first
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "ALL_PARAMETERS_MUST_BE_NAMED",
  "sqlState" : "07001",
  "messageParameters" : {
    "exprs" : "\"1\""
  }
}


-- !query
EXECUTE IMMEDIATE 'SELCT Fa'
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'SELCT'",
    "hint" : ""
  },
  "queryContext" : [ {
    "objectType" : "EXECUTE IMMEDIATE",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 8,
    "fragment" : "SELCT Fa"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'SELCT Fa' INTO res_id
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'SELCT'",
    "hint" : ""
  },
  "queryContext" : [ {
    "objectType" : "EXECUTE IMMEDIATE",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 8,
    "fragment" : "SELCT Fa"
  } ]
}


-- !query
EXECUTE IMMEDIATE b
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_EXPR_TYPE_FOR_QUERY_EXECUTE_IMMEDIATE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "exprType" : "\"INT\""
  }
}


-- !query
SET VAR sql_string = 'SELECT * from tbl_view where name = :first or id = :second'
-- !query schema
struct<>
-- !query output



-- !query
SET VAR a = 'na'
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = :first' USING CONCAT(a , "me1") as first
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = :first' USING (SELECT 42) as first, 'name2' as second
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_EXPR_FOR_PARAMETER",
  "sqlState" : "42K0E",
  "messageParameters" : {
    "invalidExprSql" : "\"scalarsubquery()\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 70,
    "stopIndex" : 80,
    "fragment" : "(SELECT 42)"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'SELECT id, name FROM tbl_view WHERE id = ?' INTO a, b USING 10
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkNumberFormatException
{
  "errorClass" : "CAST_INVALID_INPUT",
  "sqlState" : "22018",
  "messageParameters" : {
    "ansiConfig" : "\"spark.sql.ansi.enabled\"",
    "expression" : "'name1'",
    "sourceType" : "\"STRING\"",
    "targetType" : "\"INT\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 81,
    "fragment" : "EXECUTE IMMEDIATE 'SELECT id, name FROM tbl_view WHERE id = ?' INTO a, b USING 10"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'SELECT id, name FROM tbl_view WHERE id = ?' INTO (a, b) USING 10
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'('",
    "hint" : ""
  }
}


-- !query
EXECUTE IMMEDIATE 'SELECT id FROM tbl_view' INTO res_id
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkException
{
  "errorClass" : "ROW_SUBQUERY_TOO_MANY_ROWS",
  "sqlState" : "21000"
}


-- !query
EXECUTE IMMEDIATE 'SELECT id, data.f1 FROM tbl_view' INTO res_id
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "ASSIGNMENT_ARITY_MISMATCH",
  "sqlState" : "42802",
  "messageParameters" : {
    "numExpr" : "2",
    "numTarget" : "1"
  }
}


-- !query
EXECUTE IMMEDIATE 'SELECT id FROM tbl_view' INTO res_id, b
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "ASSIGNMENT_ARITY_MISMATCH",
  "sqlState" : "42802",
  "messageParameters" : {
    "numExpr" : "1",
    "numTarget" : "2"
  }
}


-- !query
EXECUTE IMMEDIATE 'SELECT id FROM tbl_view WHERE id = :first' USING 10 as first, 20 as first
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "EXEC_IMMEDIATE_DUPLICATE_ARGUMENT_ALIASES",
  "sqlState" : "42701",
  "messageParameters" : {
    "aliases" : "`first`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 63,
    "stopIndex" : 92,
    "fragment" : "USING 10 as first, 20 as first"
  } ]
}


-- !query
DECLARE p = 10
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'SELECT id FROM tbl_view WHERE id = :p' USING p
-- !query schema
struct<id:int>
-- !query output
10


-- !query
EXECUTE IMMEDIATE 'SELECT id FROM tbl_view WHERE id = :p' USING p, 'p'
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "ALL_PARAMETERS_MUST_BE_NAMED",
  "sqlState" : "07001",
  "messageParameters" : {
    "exprs" : "\"p\""
  }
}


-- !query
EXECUTE IMMEDIATE 'SELECT id, data.f1 FROM tbl_view WHERE id = 10' INTO res_id, res_id
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "DUPLICATE_ASSIGNMENTS",
  "sqlState" : "42701",
  "messageParameters" : {
    "nameList" : "`res_id`"
  }
}


-- !query
EXECUTE IMMEDIATE 'EXECUTE IMMEDIATE \'SELECT id FROM tbl_view WHERE id = ?\' USING 10'
-- !query schema
struct<id:int>
-- !query output
10


-- !query
SET VAR sql_string = null
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE sql_string
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "NULL_QUERY_STRING_EXECUTE_IMMEDIATE",
  "sqlState" : "22004",
  "messageParameters" : {
    "varName" : "`sql_string`"
  }
}


-- !query
SET VAR sql_string = 5
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE sql_string
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'5'",
    "hint" : ""
  },
  "queryContext" : [ {
    "objectType" : "EXECUTE IMMEDIATE",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 1,
    "fragment" : "5"
  } ]
}


-- !query
SET VAR sql_string = 'hello'
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE length(sql_string)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_EXPR_TYPE_FOR_QUERY_EXECUTE_IMMEDIATE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "exprType" : "\"INT\""
  }
}


-- !query
EXECUTE IMMEDIATE 'SELECT 42 where ? = :first' USING 1, 2 as first
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_QUERY_MIXED_QUERY_PARAMETERS",
  "sqlState" : "42613"
}


-- !query
DECLARE int_var INT
-- !query schema
struct<>
-- !query output



-- !query
SET VAR int_var = 42
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE int_var
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_EXPR_TYPE_FOR_QUERY_EXECUTE_IMMEDIATE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "exprType" : "\"INT\""
  }
}


-- !query
DECLARE null_var STRING
-- !query schema
struct<>
-- !query output



-- !query
SET VAR null_var = null
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE null_var
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "NULL_QUERY_STRING_EXECUTE_IMMEDIATE",
  "sqlState" : "22004",
  "messageParameters" : {
    "varName" : "`null_var`"
  }
}


-- !query
EXECUTE IMMEDIATE 'SELECT ?' USING (SELECT 1)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_EXPR_FOR_PARAMETER",
  "sqlState" : "42K0E",
  "messageParameters" : {
    "invalidExprSql" : "\"scalarsubquery()\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 36,
    "stopIndex" : 45,
    "fragment" : "(SELECT 1)"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'SELECT :first' USING 2, 3
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "ALL_PARAMETERS_MUST_BE_NAMED",
  "sqlState" : "07001",
  "messageParameters" : {
    "exprs" : "\"2\", \"3\""
  }
}


-- !query
EXECUTE IMMEDIATE (SELECT c FROM (VALUES(1)) AS T(c))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_EXPR_TYPE_FOR_QUERY_EXECUTE_IMMEDIATE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "exprType" : "\"INT\""
  }
}


-- !query
DROP TABLE x
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING 5 AS p
-- !query schema
struct<type:string,val:int>
-- !query output
int	5


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING 5L AS p
-- !query schema
struct<type:string,val:bigint>
-- !query output
bigint	5


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING 5S AS p
-- !query schema
struct<type:string,val:smallint>
-- !query output
smallint	5


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING 5Y AS p
-- !query schema
struct<type:string,val:tinyint>
-- !query output
tinyint	5


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING 3.14F AS p
-- !query schema
struct<type:string,val:float>
-- !query output
float	3.14


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING 3.14159D AS p
-- !query schema
struct<type:string,val:double>
-- !query output
double	3.14159


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING 123.45BD AS p
-- !query schema
struct<type:string,val:decimal(5,2)>
-- !query output
decimal(5,2)	123.45


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING true AS p
-- !query schema
struct<type:string,val:boolean>
-- !query output
boolean	true


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING false AS p
-- !query schema
struct<type:string,val:boolean>
-- !query output
boolean	false


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING 'hello world' AS p
-- !query schema
struct<type:string,val:string>
-- !query output
string	hello world


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING 'it''s a test' AS p
-- !query schema
struct<type:string,val:string>
-- !query output
string	it's a test


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING DATE '2023-12-25' AS p
-- !query schema
struct<type:string,val:date>
-- !query output
date	2023-12-25


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING TIMESTAMP '2023-12-25 10:30:45' AS p
-- !query schema
struct<type:string,val:timestamp>
-- !query output
timestamp	2023-12-25 10:30:45


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING TIMESTAMP_NTZ '2023-12-25 10:30:45' AS p
-- !query schema
struct<type:string,val:timestamp_ntz>
-- !query output
timestamp_ntz	2023-12-25 10:30:45


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING CAST(NULL AS INT) AS p
-- !query schema
struct<type:string,val:int>
-- !query output
int	NULL


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING CAST(NULL AS STRING) AS p
-- !query schema
struct<type:string,val:string>
-- !query output
string	NULL


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, hex(:p) as val' USING X'010203FF' AS p
-- !query schema
struct<type:string,val:string>
-- !query output
binary	010203FF


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING INTERVAL '3' DAY AS p
-- !query schema
struct<type:string,val:interval day>
-- !query output
interval day	3 00:00:00.000000000


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING INTERVAL '2' YEAR AS p
-- !query schema
struct<type:string,val:interval year>
-- !query output
interval year	2-0


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING INTERVAL '1-2' YEAR TO MONTH AS p
-- !query schema
struct<type:string,val:interval year to month>
-- !query output
interval year to month	1-2


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING INTERVAL '3 4:5:6' DAY TO SECOND AS p
-- !query schema
struct<type:string,val:interval day to second>
-- !query output
interval day to second	3 04:05:06.000000000


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING 999.999BD AS p
-- !query schema
struct<type:string,val:decimal(6,3)>
-- !query output
decimal(6,3)	999.999


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p1) as type1, :p1 as val1, typeof(:p2) as type2, :p2 as val2' 
  USING 42 as p1, 'test string' as p2
-- !query schema
struct<type1:string,val1:int,type2:string,val2:string>
-- !query output
int	42	string	test string


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING ARRAY(1, 2, 3) AS p
-- !query schema
struct<type:string,val:array<int>>
-- !query output
array<int>	[1,2,3]


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING ARRAY('a', 'b', 'c') AS p
-- !query schema
struct<type:string,val:array<string>>
-- !query output
array<string>	["a","b","c"]


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING ARRAY(ARRAY(1, 2), ARRAY(3, 4)) AS p
-- !query schema
struct<type:string,val:array<array<int>>>
-- !query output
array<array<int>>	[[1,2],[3,4]]


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING MAP('key1', 'value1', 'key2', 'value2') AS p
-- !query schema
struct<type:string,val:map<string,string>>
-- !query output
map<string,string>	{"key1":"value1","key2":"value2"}


-- !query
EXECUTE IMMEDIATE 'SELECT typeof(:p) as type, :p as val' USING MAP(1, 'one', 2, 'two') AS p
-- !query schema
struct<type:string,val:map<int,string>>
-- !query output
map<int,string>	{1:"one",2:"two"}
