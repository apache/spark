-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TEMPORARY VIEW tbl_view AS SELECT * FROM VALUES
  (10, 'name1', named_struct('f1', 1, 's2', named_struct('f2', 101, 'f3', 'a'))),
  (20, 'name2', named_struct('f1', 2, 's2', named_struct('f2', 202, 'f3', 'b'))),
  (30, 'name3', named_struct('f1', 3, 's2', named_struct('f2', 303, 'f3', 'c'))),
  (40, 'name4', named_struct('f1', 4, 's2', named_struct('f2', 404, 'f3', 'd'))),
  (50, 'name5', named_struct('f1', 5, 's2', named_struct('f2', 505, 'f3', 'e'))),
  (60, 'name6', named_struct('f1', 6, 's2', named_struct('f2', 606, 'f3', 'f'))),
  (70, 'name7', named_struct('f1', 7, 's2', named_struct('f2', 707, 'f3', 'g')))
AS tbl_view(id, name, data)
-- !query schema
struct<>
-- !query output



-- !query
CREATE TABLE x (id INT) USING csv
-- !query schema
struct<>
-- !query output



-- !query
DECLARE sql_string STRING
-- !query schema
struct<>
-- !query output



-- !query
SET VAR sql_string = 'SELECT * from tbl_view where name = \'name1\''
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'SET spark.sql.ansi.enabled=true'
-- !query schema
struct<key:string,value:string>
-- !query output
spark.sql.ansi.enabled	true


-- !query
EXECUTE IMMEDIATE 'CREATE TEMPORARY VIEW IDENTIFIER(:tblName) AS SELECT id, name FROM tbl_view' USING 'tbl_view_tmp' as tblName
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'SELECT * FROM tbl_view_tmp'
-- !query schema
struct<id:int,name:string>
-- !query output
10	name1
20	name2
30	name3
40	name4
50	name5
60	name6
70	name7


-- !query
EXECUTE IMMEDIATE 'REFRESH TABLE IDENTIFIER(:tblName)' USING 'x' as tblName
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE sql_string
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = \'name1\''
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}


-- !query
SET VAR sql_string = 'SELECT * from tbl_view where name = ? or name = ?'
-- !query schema
struct<>
-- !query output



-- !query
DECLARE a STRING
-- !query schema
struct<>
-- !query output



-- !query
SET VAR a = 'name1'
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE sql_string USING 'name1', 'name3'
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}
30	name3	{"f1":3,"s2":{"f2":303,"f3":"c"}}


-- !query
EXECUTE IMMEDIATE sql_string USING a, 'name2'
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}
20	name2	{"f1":2,"s2":{"f2":202,"f3":"b"}}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = ? or name = ?' USING 'name1', 'name3'
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}
30	name3	{"f1":3,"s2":{"f2":303,"f3":"c"}}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = ? or name = ?' USING a, 'name2'
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}
20	name2	{"f1":2,"s2":{"f2":202,"f3":"b"}}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = ? or name = ?' USING (a, 'name2')
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}
20	name2	{"f1":2,"s2":{"f2":202,"f3":"b"}}


-- !query
EXECUTE IMMEDIATE 'INSERT INTO x VALUES(?)' USING 1
-- !query schema
struct<>
-- !query output



-- !query
SELECT * from x
-- !query schema
struct<id:int>
-- !query output
1


-- !query
SET VAR sql_string = 'SELECT * from tbl_view where name = :first or id = :second'
-- !query schema
struct<>
-- !query output



-- !query
DECLARE b INT
-- !query schema
struct<>
-- !query output



-- !query
SET VAR b = 40
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE sql_string USING 40 as second, 'name7' as first
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
40	name4	{"f1":4,"s2":{"f2":404,"f3":"d"}}
70	name7	{"f1":7,"s2":{"f2":707,"f3":"g"}}


-- !query
EXECUTE IMMEDIATE sql_string USING b as second, 'name7' as first
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
40	name4	{"f1":4,"s2":{"f2":404,"f3":"d"}}
70	name7	{"f1":7,"s2":{"f2":707,"f3":"g"}}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = :first or id = :second' USING 40 as second, 'name7' as first
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
40	name4	{"f1":4,"s2":{"f2":404,"f3":"d"}}
70	name7	{"f1":7,"s2":{"f2":707,"f3":"g"}}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = :first or id = :second' USING 'name7' as first, b as second
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
40	name4	{"f1":4,"s2":{"f2":404,"f3":"d"}}
70	name7	{"f1":7,"s2":{"f2":707,"f3":"g"}}


-- !query
EXECUTE IMMEDIATE 'SELECT tbl_view.*, :first as p FROM tbl_view WHERE name = :first' USING 'name7' as first
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>,p:string>
-- !query output
70	name7	{"f1":7,"s2":{"f2":707,"f3":"g"}}	name7


-- !query
EXECUTE IMMEDIATE 'SET VAR sql_string = ?' USING 'SELECT id from tbl_view where name = :first'
-- !query schema
struct<>
-- !query output



-- !query
SELECT sql_string
-- !query schema
struct<sql_string:string>
-- !query output
SELECT id from tbl_view where name = :first


-- !query
DECLARE res_id INT
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE sql_string INTO res_id USING 'name7' as first
-- !query schema
struct<>
-- !query output



-- !query
SELECT res_id
-- !query schema
struct<res_id:int>
-- !query output
70


-- !query
EXECUTE IMMEDIATE sql_string INTO res_id USING a as first
-- !query schema
struct<>
-- !query output



-- !query
SELECT res_id
-- !query schema
struct<res_id:int>
-- !query output
10


-- !query
SET VAR sql_string = 'SELECT * from tbl_view where name = :first or id = :second'
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'SELECT 42' INTO res_id
-- !query schema
struct<>
-- !query output



-- !query
SELECT res_id
-- !query schema
struct<res_id:int>
-- !query output
42


-- !query
EXECUTE IMMEDIATE 'SELECT id, name FROM tbl_view WHERE id = ?' INTO b, a USING 10
-- !query schema
struct<>
-- !query output



-- !query
SELECT b, a
-- !query schema
struct<b:int,a:string>
-- !query output
10	name1


-- !query
EXECUTE IMMEDIATE 'SELECT * FROM tbl_view where id = ? AND name = ?' USING b as first, a
-- !query schema
struct<id:int,name:string,data:struct<f1:int,s2:struct<f2:int,f3:string>>>
-- !query output
10	name1	{"f1":1,"s2":{"f2":101,"f3":"a"}}


-- !query
EXECUTE IMMEDIATE 'SELECT 42 WHERE 2 = 1' INTO res_id
-- !query schema
struct<>
-- !query output



-- !query
SELECT res_id
-- !query schema
struct<res_id:int>
-- !query output
NULL


-- !query
EXECUTE IMMEDIATE 'SELECT \'1707\'' INTO res_id
-- !query schema
struct<>
-- !query output



-- !query
SELECT res_id
-- !query schema
struct<res_id:int>
-- !query output
1707


-- !query
EXECUTE IMMEDIATE 'SELECT \'invalid_cast_error_expected\'' INTO res_id
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkNumberFormatException
{
  "errorClass" : "CAST_INVALID_INPUT",
  "sqlState" : "22018",
  "messageParameters" : {
    "ansiConfig" : "\"spark.sql.ansi.enabled\"",
    "expression" : "'invalid_cast_error_expected'",
    "sourceType" : "\"STRING\"",
    "targetType" : "\"INT\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 70,
    "fragment" : "EXECUTE IMMEDIATE 'SELECT \\'invalid_cast_error_expected\\'' INTO res_id"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'INSERT INTO x VALUES (?)' INTO res_id USING 1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_STATEMENT_FOR_EXECUTE_INTO",
  "sqlState" : "07501",
  "messageParameters" : {
    "sqlString" : "INSERT INTO X VALUES (?)"
  }
}


-- !query
EXECUTE IMMEDIATE 'SELECT * FROM tbl_view WHERE ? = id' USING id
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNRESOLVED_VARIABLE",
  "sqlState" : "42883",
  "messageParameters" : {
    "searchPath" : "`system`.`session`",
    "variableName" : "`id`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 63,
    "stopIndex" : 64,
    "fragment" : "id"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'SELECT * FROM tbl_view where ? = id and :first = name' USING 1, 'name2' as first
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_QUERY_MIXED_QUERY_PARAMETERS",
  "sqlState" : "42613"
}


-- !query
EXECUTE IMMEDIATE 'SELECT * FROM tbl_view where :first = name' USING 1, 'name2' as first
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "ALL_PARAMETERS_MUST_BE_NAMED",
  "sqlState" : "07001",
  "messageParameters" : {
    "exprs" : "\"1\""
  }
}


-- !query
EXECUTE IMMEDIATE 'SELCT Fa'
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'SELCT'",
    "hint" : ""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 28,
    "fragment" : "EXECUTE IMMEDIATE 'SELCT Fa'"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'SELCT Fa' INTO res_id
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'SELCT'",
    "hint" : ""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 40,
    "fragment" : "EXECUTE IMMEDIATE 'SELCT Fa' INTO res_id"
  } ]
}


-- !query
EXECUTE IMMEDIATE b
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_VARIABLE_TYPE_FOR_QUERY_EXECUTE_IMMEDIATE",
  "sqlState" : "42K09",
  "messageParameters" : {
    "varType" : "\"INT\""
  }
}


-- !query
SET VAR sql_string = 'SELECT * from tbl_view where name = :first or id = :second'
-- !query schema
struct<>
-- !query output



-- !query
SET VAR a = 'na'
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = :first' USING CONCAT(a , "me1") as first
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_EXPR_FOR_PARAMETER",
  "sqlState" : "42K0E",
  "messageParameters" : {
    "invalidExprSql" : "\"CONCAT(a, me1)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 70,
    "stopIndex" : 86,
    "fragment" : "CONCAT(a , \"me1\")"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'SELECT * from tbl_view where name = :first' USING (SELECT 42) as first, 'name2' as second
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_EXPR_FOR_PARAMETER",
  "sqlState" : "42K0E",
  "messageParameters" : {
    "invalidExprSql" : "\"scalarsubquery()\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 70,
    "stopIndex" : 80,
    "fragment" : "(SELECT 42)"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'SELECT id, name FROM tbl_view WHERE id = ?' INTO a, b USING 10
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkNumberFormatException
{
  "errorClass" : "CAST_INVALID_INPUT",
  "sqlState" : "22018",
  "messageParameters" : {
    "ansiConfig" : "\"spark.sql.ansi.enabled\"",
    "expression" : "'name1'",
    "sourceType" : "\"STRING\"",
    "targetType" : "\"INT\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 1,
    "stopIndex" : 81,
    "fragment" : "EXECUTE IMMEDIATE 'SELECT id, name FROM tbl_view WHERE id = ?' INTO a, b USING 10"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'SELECT id, name FROM tbl_view WHERE id = ?' INTO (a, b) USING 10
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'('",
    "hint" : ""
  }
}


-- !query
EXECUTE IMMEDIATE 'SELECT id FROM tbl_view' INTO res_id
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkException
{
  "errorClass" : "ROW_SUBQUERY_TOO_MANY_ROWS",
  "sqlState" : "21000"
}


-- !query
EXECUTE IMMEDIATE 'SELECT id, data.f1 FROM tbl_view' INTO res_id
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "ASSIGNMENT_ARITY_MISMATCH",
  "sqlState" : "42802",
  "messageParameters" : {
    "numExpr" : "2",
    "numTarget" : "1"
  }
}


-- !query
EXECUTE IMMEDIATE 'SELECT id FROM tbl_view' INTO res_id, b
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "ASSIGNMENT_ARITY_MISMATCH",
  "sqlState" : "42802",
  "messageParameters" : {
    "numExpr" : "1",
    "numTarget" : "2"
  }
}


-- !query
EXECUTE IMMEDIATE 'SELECT id FROM tbl_view WHERE id = :first' USING 10 as first, 20 as first
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "EXEC_IMMEDIATE_DUPLICATE_ARGUMENT_ALIASES",
  "sqlState" : "42701",
  "messageParameters" : {
    "aliases" : "`first`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 63,
    "stopIndex" : 92,
    "fragment" : "USING 10 as first, 20 as first"
  } ]
}


-- !query
DECLARE p = 10
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'SELECT id FROM tbl_view WHERE id = :p' USING p
-- !query schema
struct<id:int>
-- !query output
10


-- !query
EXECUTE IMMEDIATE 'SELECT id FROM tbl_view WHERE id = :p' USING p, 'p'
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "ALL_PARAMETERS_MUST_BE_NAMED",
  "sqlState" : "07001",
  "messageParameters" : {
    "exprs" : "\"p\""
  }
}


-- !query
EXECUTE IMMEDIATE 'SELECT id, data.f1 FROM tbl_view WHERE id = 10' INTO res_id, res_id
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "DUPLICATE_ASSIGNMENTS",
  "sqlState" : "42701",
  "messageParameters" : {
    "nameList" : "`res_id`"
  }
}


-- !query
EXECUTE IMMEDIATE 'EXECUTE IMMEDIATE \'SELECT id FROM tbl_view WHERE id = ? USING 10\''
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "NESTED_EXECUTE_IMMEDIATE",
  "sqlState" : "07501",
  "messageParameters" : {
    "sqlString" : "EXECUTE IMMEDIATE 'SELECT ID FROM TBL_VIEW WHERE ID = ? USING 10'"
  }
}


-- !query
SET VAR sql_string = null
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE sql_string
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "NULL_QUERY_STRING_EXECUTE_IMMEDIATE",
  "sqlState" : "22004",
  "messageParameters" : {
    "varName" : "`sql_string`"
  }
}


-- !query
DECLARE default_val INT
-- !query schema
struct<>
-- !query output



-- !query
SET VAR default_val = 42
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'CREATE TABLE test_table (id INT, name STRING DEFAULT :default_name, score INT DEFAULT :default_score) USING PARQUET' 
USING 'unknown' as default_name, default_val as default_score
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED test_table
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
name                	string              	                    
score               	int                 	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	test_table          	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	MANAGED             	                    
Provider            	PARQUET             	                    
Location [not included in comparison]/{warehouse_dir}/test_table	                    
                    	                    	                    
# Column Default Values	                    	                    
name                	string              	'unknown'           
score               	int                 	42


-- !query
EXECUTE IMMEDIATE 'CREATE TABLE test_table2 (id INT, value INT DEFAULT ?) USING PARQUET' USING 100
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED test_table2
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
value               	int                 	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	test_table2         	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	MANAGED             	                    
Provider            	PARQUET             	                    
Location [not included in comparison]/{warehouse_dir}/test_table2	                    
                    	                    	                    
# Column Default Values	                    	                    
value               	int                 	100


-- !query
EXECUTE IMMEDIATE 'ALTER TABLE test_table ALTER COLUMN score SET DEFAULT :new_default' USING 99 as new_default
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED test_table
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
name                	string              	                    
score               	int                 	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	test_table          	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	MANAGED             	                    
Provider            	PARQUET             	                    
Location [not included in comparison]/{warehouse_dir}/test_table	                    
                    	                    	                    
# Column Default Values	                    	                    
name                	string              	'unknown'           
score               	int                 	99


-- !query
EXECUTE IMMEDIATE 'ALTER TABLE test_table ADD COLUMN status STRING DEFAULT :status_default' USING 'active' as status_default
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED test_table
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
name                	string              	                    
score               	int                 	                    
status              	string              	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	test_table          	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	MANAGED             	                    
Provider            	PARQUET             	                    
Location [not included in comparison]/{warehouse_dir}/test_table	                    
                    	                    	                    
# Column Default Values	                    	                    
name                	string              	'unknown'           
score               	int                 	99                  
status              	string              	'active'


-- !query
EXECUTE IMMEDIATE 'ALTER TABLE test_table2 ADD COLUMN flag BOOLEAN DEFAULT ?' USING true
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED test_table2
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
value               	int                 	                    
flag                	boolean             	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	test_table2         	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	MANAGED             	                    
Provider            	PARQUET             	                    
Location [not included in comparison]/{warehouse_dir}/test_table2	                    
                    	                    	                    
# Column Default Values	                    	                    
value               	int                 	100                 
flag                	boolean             	true


-- !query
EXECUTE IMMEDIATE 'CREATE VIEW test_view AS SELECT * FROM test_table WHERE score > :min_score' USING 50 as min_score
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED test_view
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
name                	string              	                    
score               	int                 	                    
status              	string              	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	test_view           	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	VIEW                	                    
View Text           	SELECT * FROM test_table WHERE score > 50	                    
View Original Text  	SELECT * FROM test_table WHERE score > 50	                    
View Schema Mode    	COMPENSATION        	                    
View Catalog and Namespace	spark_catalog.default	                    
View Query Output Columns	[`id`, `name`, `score`, `status`]	                    
                    	                    	                    
# Column Default Values	                    	                    
name                	string              	'unknown'           
score               	int                 	99                  
status              	string              	'active'


-- !query
EXECUTE IMMEDIATE 'CREATE VIEW test_view2 AS SELECT * FROM test_table WHERE score < ?' USING 80
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED test_view2
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
name                	string              	                    
score               	int                 	                    
status              	string              	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	test_view2          	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	VIEW                	                    
View Text           	SELECT * FROM test_table WHERE score < 80	                    
View Original Text  	SELECT * FROM test_table WHERE score < 80	                    
View Schema Mode    	COMPENSATION        	                    
View Catalog and Namespace	spark_catalog.default	                    
View Query Output Columns	[`id`, `name`, `score`, `status`]	                    
                    	                    	                    
# Column Default Values	                    	                    
name                	string              	'unknown'           
score               	int                 	99                  
status              	string              	'active'


-- !query
EXECUTE IMMEDIATE 'ALTER VIEW test_view AS SELECT id, name FROM test_table WHERE score BETWEEN :min_val AND :max_val' 
USING 30 as min_val, 70 as max_val
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED test_view
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
name                	string              	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	test_view           	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	VIEW                	                    
View Text           	SELECT id, name FROM test_table WHERE score BETWEEN 30 AND 70	                    
View Original Text  	SELECT id, name FROM test_table WHERE score BETWEEN 30 AND 70	                    
View Schema Mode    	COMPENSATION        	                    
View Catalog and Namespace	spark_catalog.default	                    
View Query Output Columns	[`id`, `name`]      	                    
                    	                    	                    
# Column Default Values	                    	                    
name                	string              	'unknown'


-- !query
EXECUTE IMMEDIATE 'ALTER VIEW test_view2 AS SELECT * FROM test_table WHERE score > ?' USING 60
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED test_view2
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
name                	string              	                    
score               	int                 	                    
status              	string              	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	test_view2          	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	VIEW                	                    
View Text           	SELECT * FROM test_table WHERE score > 60	                    
View Original Text  	SELECT * FROM test_table WHERE score > 60	                    
View Schema Mode    	COMPENSATION        	                    
View Catalog and Namespace	spark_catalog.default	                    
View Query Output Columns	[`id`, `name`, `score`, `status`]	                    
                    	                    	                    
# Column Default Values	                    	                    
name                	string              	'unknown'           
score               	int                 	99                  
status              	string              	'active'


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE test_var INT DEFAULT :var_default' USING 123 as var_default
-- !query schema
struct<>
-- !query output



-- !query
SELECT test_var
-- !query schema
struct<test_var:int>
-- !query output
123


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE test_var2 STRING DEFAULT ?' USING 'default_string'
-- !query schema
struct<>
-- !query output



-- !query
SELECT test_var2
-- !query schema
struct<test_var2:string>
-- !query output
default_string


-- !query
SELECT * FROM test_view
-- !query schema
struct<id:int,name:string>
-- !query output



-- !query
SELECT test_var, test_var2
-- !query schema
struct<test_var:int,test_var2:string>
-- !query output
123	default_string


-- !query
DECLARE expr_val INT
-- !query schema
struct<>
-- !query output



-- !query
SET VAR expr_val = 10
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'CREATE TABLE expr_test (id INT, computed INT DEFAULT :expr_result) USING PARQUET' 
USING (expr_val * 5 + 2) as expr_result
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_EXPR_FOR_PARAMETER",
  "sqlState" : "42K0E",
  "messageParameters" : {
    "invalidExprSql" : "\"((expr_val * 5) + 2)\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 110,
    "stopIndex" : 125,
    "fragment" : "expr_val * 5 + 2"
  } ]
}


-- !query
DESCRIBE EXTENDED expr_test
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "TABLE_OR_VIEW_NOT_FOUND",
  "sqlState" : "42P01",
  "messageParameters" : {
    "relationName" : "`expr_test`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 19,
    "stopIndex" : 27,
    "fragment" : "expr_test"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'CREATE TABLE error_table (id INT DEFAULT ?, name STRING DEFAULT :name_default) USING PARQUET' 
USING 1, 'test' as name_default
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "INVALID_QUERY_MIXED_QUERY_PARAMETERS",
  "sqlState" : "42613"
}


-- !query
EXECUTE IMMEDIATE 'CREATE TABLE error_table2 (id INT DEFAULT :undefined_param) USING PARQUET'
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkException
{
  "errorClass" : "INTERNAL_ERROR",
  "sqlState" : "XX000",
  "messageParameters" : {
    "message" : "The Spark SQL phase analysis failed with an internal error. You hit a bug in Spark or the Spark plugins you use. Please, report this bug to the corresponding communities or vendors, and provide the full stack trace."
  }
}


-- !query
EXECUTE IMMEDIATE 'CREATE FUNCTION test_func(x INT DEFAULT :func_default) RETURNS INT RETURN x + :increment' 
USING 10 as func_default, 5 as increment
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE FUNCTION EXTENDED test_func
-- !query schema
struct<function_desc:string>
-- !query output
Class: sqlFunction.
Extended Usage:
    No example/argument for test_func.

Function: spark_catalog.default.test_func
Usage: {"catalogAndNamespace.part.0":"spark_catalog","referredTempViewNames":"[]","sqlFunction.returnType":"INT","sqlFunction.isTableFunc":"false","sqlFunction.inputParam":"x INT DEFAULT 10","sqlFunction.expression":"x + 5","catalogAndNamespace.numParts":"2","sqlConfig.spark.sql.binaryOutputStyle":"UTF-8","sqlFunction.createTime":"1752544836803","sqlConfig.spark.sql.ansi.enabled":"true","referredTempFunctionsNames":"[]","catalogAndNamespace.part.1":"default","sqlFunction.deterministic":"true","sqlConfig.spark.sql.datetime.java8API.enabled":"true","referredTempVariableNames":"[]"}


-- !query
EXECUTE IMMEDIATE 'CREATE FUNCTION test_func2(x INT DEFAULT ?) RETURNS INT RETURN x * ?' USING 1, 2
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE FUNCTION EXTENDED test_func2
-- !query schema
struct<function_desc:string>
-- !query output
Class: sqlFunction.
Extended Usage:
    No example/argument for test_func2.

Function: spark_catalog.default.test_func2
Usage: {"catalogAndNamespace.part.0":"spark_catalog","referredTempViewNames":"[]","sqlFunction.returnType":"INT","sqlFunction.isTableFunc":"false","sqlFunction.inputParam":"x INT DEFAULT 1","sqlFunction.expression":"x * 2","catalogAndNamespace.numParts":"2","sqlConfig.spark.sql.binaryOutputStyle":"UTF-8","sqlFunction.createTime":"1752544836811","sqlConfig.spark.sql.ansi.enabled":"true","referredTempFunctionsNames":"[]","catalogAndNamespace.part.1":"default","sqlFunction.deterministic":"true","sqlConfig.spark.sql.datetime.java8API.enabled":"true","referredTempVariableNames":"[]"}


-- !query
EXECUTE IMMEDIATE 'CREATE FUNCTION multi_param_func(a INT DEFAULT ?, b INT DEFAULT ?) RETURNS INT RETURN a + b + ?' 
USING 10, 20, 5
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE FUNCTION EXTENDED multi_param_func
-- !query schema
struct<function_desc:string>
-- !query output
Class: sqlFunction.
Extended Usage:
    No example/argument for multi_param_func.

Function: spark_catalog.default.multi_param_func
Usage: {"catalogAndNamespace.part.0":"spark_catalog","referredTempViewNames":"[]","sqlFunction.returnType":"INT","sqlFunction.isTableFunc":"false","sqlFunction.inputParam":"a INT DEFAULT 10, b INT DEFAULT 20","sqlFunction.expression":"a + b + 5","catalogAndNamespace.numParts":"2","sqlConfig.spark.sql.binaryOutputStyle":"UTF-8","sqlFunction.createTime":"1752544836816","sqlConfig.spark.sql.ansi.enabled":"true","referredTempFunctionsNames":"[]","catalogAndNamespace.part.1":"default","sqlFunction.deterministic":"true","sqlConfig.spark.sql.datetime.java8API.enabled":"true","referredTempVariableNames":"[]"}


-- !query
EXECUTE IMMEDIATE 'CREATE FUNCTION table_func(x INT DEFAULT ?, y INT DEFAULT ?) RETURNS TABLE(result INT) RETURN SELECT x + y + ? as result' 
USING 1, 2, 3
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE FUNCTION EXTENDED table_func
-- !query schema
struct<function_desc:string>
-- !query output
Class: sqlFunction.
Extended Usage:
    No example/argument for table_func.

Function: spark_catalog.default.table_func
Usage: {"catalogAndNamespace.part.0":"spark_catalog","referredTempViewNames":"[]","sqlFunction.isTableFunc":"true","sqlFunction.inputParam":"x INT DEFAULT 1, y INT DEFAULT 2","catalogAndNamespace.numParts":"2","sqlConfig.spark.sql.binaryOutputStyle":"UTF-8","sqlFunction.createTime":"1752544836830","sqlConfig.spark.sql.ansi.enabled":"true","referredTempFunctionsNames":"[]","sqlFunction.query":"SELECT x + y + 3 as result","sqlFunction.returnType":"result INT","catalogAndNamespace.part.1":"default","sqlFunction.deterministic":"true","sqlConfig.spark.sql.datetime.java8API.enabled":"true","referredTempVariableNames":"[]"}


-- !query
EXECUTE IMMEDIATE 'CREATE TABLE multi_col_table (id INT DEFAULT ?, name STRING DEFAULT ?, score INT DEFAULT ?, active BOOLEAN DEFAULT ?) USING PARQUET' 
USING 1, 'default_name', 100, true
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED multi_col_table
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
name                	string              	                    
score               	int                 	                    
active              	boolean             	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	multi_col_table     	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	MANAGED             	                    
Provider            	PARQUET             	                    
Location [not included in comparison]/{warehouse_dir}/multi_col_table	                    
                    	                    	                    
# Column Default Values	                    	                    
id                  	int                 	1                   
name                	string              	'default_name'      
score               	int                 	100                 
active              	boolean             	true


-- !query
EXECUTE IMMEDIATE 'CREATE TABLE gen_and_default (id INT DEFAULT ?, doubled INT GENERATED ALWAYS AS (id * ?), tripled INT GENERATED ALWAYS AS (id * ?)) USING PARQUET' 
USING 42, 2, 3
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_FEATURE.TABLE_OPERATION",
  "sqlState" : "0A000",
  "messageParameters" : {
    "operation" : "generated columns",
    "tableName" : "`spark_catalog`.`default`.`gen_and_default`"
  }
}


-- !query
DESCRIBE EXTENDED gen_and_default
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "TABLE_OR_VIEW_NOT_FOUND",
  "sqlState" : "42P01",
  "messageParameters" : {
    "relationName" : "`gen_and_default`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 19,
    "stopIndex" : 33,
    "fragment" : "gen_and_default"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'ALTER TABLE multi_col_table ADD COLUMN (status STRING DEFAULT ?, priority INT DEFAULT ?, created_at STRING DEFAULT ?)' 
USING 'pending', 1, '2023-01-01'
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED multi_col_table
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
name                	string              	                    
score               	int                 	                    
active              	boolean             	                    
status              	string              	                    
priority            	int                 	                    
created_at          	string              	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	multi_col_table     	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	MANAGED             	                    
Provider            	PARQUET             	                    
Location [not included in comparison]/{warehouse_dir}/multi_col_table	                    
                    	                    	                    
# Column Default Values	                    	                    
id                  	int                 	1                   
name                	string              	'default_name'      
score               	int                 	100                 
active              	boolean             	true                
status              	string              	'pending'           
priority            	int                 	1                   
created_at          	string              	'2023-01-01'


-- !query
EXECUTE IMMEDIATE 'ALTER TABLE multi_col_table ALTER COLUMN score SET DEFAULT ?' 
USING 200
-- !query schema
struct<>
-- !query output



-- !query
EXECUTE IMMEDIATE 'ALTER TABLE multi_col_table ALTER COLUMN priority SET DEFAULT ?' 
USING 5
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED multi_col_table
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
name                	string              	                    
score               	int                 	                    
active              	boolean             	                    
status              	string              	                    
priority            	int                 	                    
created_at          	string              	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	multi_col_table     	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	MANAGED             	                    
Provider            	PARQUET             	                    
Location [not included in comparison]/{warehouse_dir}/multi_col_table	                    
                    	                    	                    
# Column Default Values	                    	                    
id                  	int                 	1                   
name                	string              	'default_name'      
score               	int                 	200                 
active              	boolean             	true                
status              	string              	'pending'           
priority            	int                 	5                   
created_at          	string              	'2023-01-01'


-- !query
EXECUTE IMMEDIATE 'CREATE FUNCTION complex_func(a INT DEFAULT ?, b STRING DEFAULT ?, c DOUBLE DEFAULT ?) RETURNS STRING RETURN CONCAT(b, CAST(a + c + ? AS STRING))' 
USING 10, 'prefix_', 3.14, 100
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE FUNCTION EXTENDED complex_func
-- !query schema
struct<function_desc:string>
-- !query output
Class: sqlFunction.
Extended Usage:
    No example/argument for complex_func.

Function: spark_catalog.default.complex_func
Usage: {"catalogAndNamespace.part.0":"spark_catalog","referredTempViewNames":"[]","sqlFunction.returnType":"STRING","sqlFunction.isTableFunc":"false","sqlFunction.inputParam":"a INT DEFAULT 10, b STRING DEFAULT 'prefix_', c DOUBLE DEFAULT 3.14BD","sqlFunction.expression":"CONCAT(b, CAST(a + c + 100 AS STRING))","catalogAndNamespace.numParts":"2","sqlConfig.spark.sql.binaryOutputStyle":"UTF-8","sqlFunction.createTime":"1752544836904","sqlConfig.spark.sql.ansi.enabled":"true","referredTempFunctionsNames":"[]","catalogAndNamespace.part.1":"default","sqlFunction.deterministic":"true","sqlConfig.spark.sql.datetime.java8API.enabled":"true","referredTempVariableNames":"[]"}


-- !query
EXECUTE IMMEDIATE 'CREATE TABLE mixed_expressions (
  id INT DEFAULT ?,
  name STRING DEFAULT ?,
  base_score INT DEFAULT ?,
  bonus_score INT GENERATED ALWAYS AS (base_score + ?),
  total_score INT GENERATED ALWAYS AS (base_score + bonus_score + ?),
  description STRING DEFAULT ?
) USING PARQUET' 
USING 1, 'test', 50, 10, 5, 'default_desc'
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_FEATURE.TABLE_OPERATION",
  "sqlState" : "0A000",
  "messageParameters" : {
    "operation" : "generated columns",
    "tableName" : "`spark_catalog`.`default`.`mixed_expressions`"
  }
}


-- !query
DESCRIBE EXTENDED mixed_expressions
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "TABLE_OR_VIEW_NOT_FOUND",
  "sqlState" : "42P01",
  "messageParameters" : {
    "relationName" : "`mixed_expressions`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 19,
    "stopIndex" : 35,
    "fragment" : "mixed_expressions"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'CREATE VIEW param_view AS SELECT * FROM multi_col_table WHERE score > ?' 
USING 150
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED param_view
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
name                	string              	                    
score               	int                 	                    
active              	boolean             	                    
status              	string              	                    
priority            	int                 	                    
created_at          	string              	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	param_view          	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	VIEW                	                    
View Text           	SELECT * FROM multi_col_table WHERE score > 150	                    
View Original Text  	SELECT * FROM multi_col_table WHERE score > 150	                    
View Schema Mode    	COMPENSATION        	                    
View Catalog and Namespace	spark_catalog.default	                    
View Query Output Columns	[`id`, `name`, `score`, `active`, `status`, `priority`, `created_at`]	                    
                    	                    	                    
# Column Default Values	                    	                    
id                  	int                 	1                   
name                	string              	'default_name'      
score               	int                 	200                 
active              	boolean             	true                
status              	string              	'pending'           
priority            	int                 	5                   
created_at          	string              	'2023-01-01'


-- !query
EXECUTE IMMEDIATE 'ALTER VIEW param_view AS SELECT id, name FROM multi_col_table WHERE score > ? AND priority > ?' 
USING 100, 3
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED param_view
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
name                	string              	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	param_view          	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	VIEW                	                    
View Text           	SELECT id, name FROM multi_col_table WHERE score > 100 AND priority > 3	                    
View Original Text  	SELECT id, name FROM multi_col_table WHERE score > 100 AND priority > 3	                    
View Schema Mode    	COMPENSATION        	                    
View Catalog and Namespace	spark_catalog.default	                    
View Query Output Columns	[`id`, `name`]      	                    
                    	                    	                    
# Column Default Values	                    	                    
id                  	int                 	1                   
name                	string              	'default_name'


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE test_var_pos INT DEFAULT ?' 
USING 999
-- !query schema
struct<>
-- !query output



-- !query
SELECT test_var_pos
-- !query schema
struct<test_var_pos:int>
-- !query output
999


-- !query
EXECUTE IMMEDIATE 'CREATE FUNCTION error_func(x INT DEFAULT ?) RETURNS INT RETURN x + ?' 
USING 10
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNBOUND_SQL_PARAMETER",
  "sqlState" : "42P02",
  "messageParameters" : {
    "name" : "?"
  }
}


-- !query
EXECUTE IMMEDIATE 'CREATE TABLE error_table_pos (id INT DEFAULT ?, name STRING DEFAULT ?) USING PARQUET' 
USING 1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNBOUND_SQL_PARAMETER",
  "sqlState" : "42P02",
  "messageParameters" : {
    "name" : "?"
  }
}


-- !query
EXECUTE IMMEDIATE 'CREATE VIEW nested_view AS SELECT test_func(:input_val) as result' USING 20 as input_val
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED nested_view
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
result              	int                 	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	nested_view         	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	VIEW                	                    
View Text           	SELECT test_func(20) as result	                    
View Original Text  	SELECT test_func(20) as result	                    
View Schema Mode    	COMPENSATION        	                    
View Catalog and Namespace	spark_catalog.default	                    
View Query Output Columns	[`result`]


-- !query
EXECUTE IMMEDIATE 'CREATE TABLE gen_table (id INT, doubled INT GENERATED ALWAYS AS (id * :multiplier)) USING PARQUET' 
USING 2 as multiplier
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_FEATURE.TABLE_OPERATION",
  "sqlState" : "0A000",
  "messageParameters" : {
    "operation" : "generated columns",
    "tableName" : "`spark_catalog`.`default`.`gen_table`"
  }
}


-- !query
DESCRIBE EXTENDED gen_table
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.ExtendedAnalysisException
{
  "errorClass" : "TABLE_OR_VIEW_NOT_FOUND",
  "sqlState" : "42P01",
  "messageParameters" : {
    "relationName" : "`gen_table`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 19,
    "stopIndex" : 27,
    "fragment" : "gen_table"
  } ]
}


-- !query
EXECUTE IMMEDIATE 'CREATE TABLE multi_param (id INT DEFAULT :val, name STRING DEFAULT :name, score INT DEFAULT :val) USING PARQUET' 
USING 42 as val, 'test' as name
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED multi_param
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
name                	string              	                    
score               	int                 	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	multi_param         	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	MANAGED             	                    
Provider            	PARQUET             	                    
Location [not included in comparison]/{warehouse_dir}/multi_param	                    
                    	                    	                    
# Column Default Values	                    	                    
id                  	int                 	42                  
name                	string              	'test'              
score               	int                 	42


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE quote_test STRING DEFAULT ?' 
USING 'It\'s a test with \'embedded\' single quotes'
-- !query schema
struct<>
-- !query output



-- !query
SELECT quote_test, typeof(quote_test)
-- !query schema
struct<quote_test:string,typeof(variablereference(system.session.quote_test='It\'s a test with \'embedded\' single quotes')):string>
-- !query output
It's a test with 'embedded' single quotes	string


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE mixed_quotes STRING DEFAULT ?' 
USING 'String with "double" and \'single\' quotes'
-- !query schema
struct<>
-- !query output



-- !query
SELECT mixed_quotes, typeof(mixed_quotes)
-- !query schema
struct<mixed_quotes:string,typeof(variablereference(system.session.mixed_quotes='String with "double" and \'single\' quotes')):string>
-- !query output
String with "double" and 'single' quotes	string


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE long_string STRING DEFAULT ?' 
USING 'This is a very long string that contains multiple words and should test the parameter substitution with lengthy content to ensure it works correctly with large parameter values'
-- !query schema
struct<>
-- !query output



-- !query
SELECT long_string, typeof(long_string)
-- !query schema
struct<long_string:string,typeof(variablereference(system.session.long_string='This is a very long string that contains multiple words and should test the parameter substitution with lengthy content to ensure it works correctly with large parameter values')):string>
-- !query output
This is a very long string that contains multiple words and should test the parameter substitution with lengthy content to ensure it works correctly with large parameter values	string


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE empty_string STRING DEFAULT ?' 
USING ''
-- !query schema
struct<>
-- !query output



-- !query
SELECT empty_string, typeof(empty_string)
-- !query schema
struct<empty_string:string,typeof(variablereference(system.session.empty_string='')):string>
-- !query output
	string


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE special_chars STRING DEFAULT ?' 
USING 'Special chars: \\n\\t\\r\\\\ and unicode: café naïve résumé'
-- !query schema
struct<>
-- !query output



-- !query
SELECT special_chars, typeof(special_chars)
-- !query schema
struct<special_chars:string,typeof(variablereference(system.session.special_chars='Special chars: \\n\\t\\r\\\\ and unicode: café naïve résumé')):string>
-- !query output
Special chars: \n\t\r\\ and unicode: café naïve résumé	string


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE sql_keywords STRING DEFAULT ?' 
USING 'SELECT INSERT UPDATE DELETE FROM WHERE JOIN'
-- !query schema
struct<>
-- !query output



-- !query
SELECT sql_keywords, typeof(sql_keywords)
-- !query schema
struct<sql_keywords:string,typeof(variablereference(system.session.sql_keywords='SELECT INSERT UPDATE DELETE FROM WHERE JOIN')):string>
-- !query output
SELECT INSERT UPDATE DELETE FROM WHERE JOIN	string


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE array_param ARRAY<INT> DEFAULT ?' 
USING ARRAY(1, 2, 3, 4, 5)
-- !query schema
struct<>
-- !query output



-- !query
SELECT array_param, typeof(array_param)
-- !query schema
struct<array_param:array<int>,typeof(variablereference(system.session.array_param=ARRAY(1, 2, 3, 4, 5))):string>
-- !query output
[1,2,3,4,5]	array<int>


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE struct_param STRUCT<name: STRING, age: INT, active: BOOLEAN> DEFAULT ?' 
USING STRUCT('John', 25, true)
-- !query schema
struct<>
-- !query output



-- !query
SELECT struct_param, typeof(struct_param)
-- !query schema
struct<struct_param:struct<name:string,age:int,active:boolean>,typeof(variablereference(system.session.struct_param=NAMED_STRUCT('name', 'John', 'age', 25, 'active', true))):string>
-- !query output
{"name":"John","age":25,"active":true}	struct<name:string,age:int,active:boolean>


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE map_param MAP<STRING, INT> DEFAULT ?' 
USING MAP('key1', 100, 'key2', 200, 'key3', 300)
-- !query schema
struct<>
-- !query output



-- !query
SELECT map_param, typeof(map_param)
-- !query schema
struct<map_param:map<string,int>,typeof(variablereference(system.session.map_param=MAP('key1', 100, 'key2', 200, 'key3', 300))):string>
-- !query output
{"key1":100,"key2":200,"key3":300}	map<string,int>


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE nested_param STRUCT<user:STRUCT<name:STRING, age:INT>, scores:ARRAY<INT>> DEFAULT ?' 
USING STRUCT(STRUCT('Jane', 30), ARRAY(95, 87, 92))
-- !query schema
struct<>
-- !query output



-- !query
SELECT nested_param, typeof(nested_param)
-- !query schema
struct<nested_param:struct<user:struct<name:string,age:int>,scores:array<int>>,typeof(variablereference(system.session.nested_param=NAMED_STRUCT('user', NAMED_STRUCT('name', 'Jane', 'age', 30), 'scores', ARRAY(95, 87, 92)))):string>
-- !query output
{"user":{"name":"Jane","age":30},"scores":[95,87,92]}	struct<user:struct<name:string,age:int>,scores:array<int>>


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE json_param STRING DEFAULT ?' 
USING '{"name": "Alice", "age": 28, "hobbies": ["reading", "swimming"], "address": {"street": "123 Main St", "city": "Boston"}}'
-- !query schema
struct<>
-- !query output



-- !query
SELECT json_param, typeof(json_param)
-- !query schema
struct<json_param:string,typeof(variablereference(system.session.json_param='{"name": "Alice", "age": 28, "hobbies": ["reading", "swimming"], "address": {"street": "123 Main St", "city": "Boston"}}')):string>
-- !query output
{"name": "Alice", "age": 28, "hobbies": ["reading", "swimming"], "address": {"street": "123 Main St", "city": "Boston"}}	string


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE big_int INT DEFAULT ?' 
USING 2147483647
-- !query schema
struct<>
-- !query output



-- !query
SELECT big_int, typeof(big_int)
-- !query schema
struct<big_int:int,typeof(variablereference(system.session.big_int=2147483647)):string>
-- !query output
2147483647	int


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE max_long BIGINT DEFAULT ?' 
USING 9223372036854775807
-- !query schema
struct<>
-- !query output



-- !query
SELECT max_long, typeof(max_long)
-- !query schema
struct<max_long:bigint,typeof(variablereference(system.session.max_long=9223372036854775807L)):string>
-- !query output
9223372036854775807	bigint


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE tiny_byte TINYINT DEFAULT ?' 
USING 127
-- !query schema
struct<>
-- !query output



-- !query
SELECT tiny_byte, typeof(tiny_byte)
-- !query schema
struct<tiny_byte:tinyint,typeof(variablereference(system.session.tiny_byte=127Y)):string>
-- !query output
127	tinyint


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE small_short SMALLINT DEFAULT ?' 
USING 32767
-- !query schema
struct<>
-- !query output



-- !query
SELECT small_short, typeof(small_short)
-- !query schema
struct<small_short:smallint,typeof(variablereference(system.session.small_short=32767S)):string>
-- !query output
32767	smallint


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE scientific_double DOUBLE DEFAULT ?' 
USING 1.23456789e-10
-- !query schema
struct<>
-- !query output



-- !query
SELECT scientific_double, typeof(scientific_double)
-- !query schema
struct<scientific_double:double,typeof(variablereference(system.session.scientific_double=1.23456789E-10D)):string>
-- !query output
1.23456789E-10	double


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE float_param FLOAT DEFAULT ?' 
USING 3.14159
-- !query schema
struct<>
-- !query output



-- !query
SELECT float_param, typeof(float_param)
-- !query schema
struct<float_param:float,typeof(variablereference(system.session.float_param=CAST('3.14159' AS FLOAT))):string>
-- !query output
3.14159	float


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE precise_decimal DECIMAL(20,10) DEFAULT ?' 
USING 123456789.0123456789
-- !query schema
struct<>
-- !query output



-- !query
SELECT precise_decimal, typeof(precise_decimal)
-- !query schema
struct<precise_decimal:decimal(20,10),typeof(variablereference(system.session.precise_decimal=123456789.0123456789BD)):string>
-- !query output
123456789.0123456789	decimal(20,10)


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE bool_true BOOLEAN DEFAULT ?' 
USING true
-- !query schema
struct<>
-- !query output



-- !query
SELECT bool_true, typeof(bool_true)
-- !query schema
struct<bool_true:boolean,typeof(variablereference(system.session.bool_true=true)):string>
-- !query output
true	boolean


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE bool_false BOOLEAN DEFAULT ?' 
USING false
-- !query schema
struct<>
-- !query output



-- !query
SELECT bool_false, typeof(bool_false)
-- !query schema
struct<bool_false:boolean,typeof(variablereference(system.session.bool_false=false)):string>
-- !query output
false	boolean


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE timestamp_param TIMESTAMP DEFAULT ?' 
USING TIMESTAMP '2023-12-25 14:30:45.123456'
-- !query schema
struct<>
-- !query output



-- !query
SELECT timestamp_param, typeof(timestamp_param)
-- !query schema
struct<timestamp_param:timestamp,typeof(variablereference(system.session.timestamp_param=TIMESTAMP '2023-12-25 14:30:45.123456')):string>
-- !query output
2023-12-25 14:30:45.123456	timestamp


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE date_param DATE DEFAULT ?' 
USING DATE '2023-12-25'
-- !query schema
struct<>
-- !query output



-- !query
SELECT date_param, typeof(date_param)
-- !query schema
struct<date_param:date,typeof(variablereference(system.session.date_param=DATE '2023-12-25')):string>
-- !query output
2023-12-25	date


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE binary_param BINARY DEFAULT ?' 
USING X'48656C6C6F20576F726C64'
-- !query schema
struct<>
-- !query output



-- !query
SELECT binary_param, typeof(binary_param)
-- !query schema
struct<binary_param:binary,typeof(variablereference(system.session.binary_param=X'48656C6C6F20576F726C64')):string>
-- !query output
Hello World	binary


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE escape_test STRING DEFAULT ?' 
USING 'Path: C:\\\\Users\\\\Name\\\\Documents\\\\file.txt'
-- !query schema
struct<>
-- !query output



-- !query
SELECT escape_test, typeof(escape_test)
-- !query schema
struct<escape_test:string,typeof(variablereference(system.session.escape_test='Path: C:\\\\Users\\\\Name\\\\Documents\\\\file.txt')):string>
-- !query output
Path: C:\\Users\\Name\\Documents\\file.txt	string


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE multiline_param STRING DEFAULT ?' 
USING 'Line 1\\nLine 2\\n\\tIndented line\\nLine 4'
-- !query schema
struct<>
-- !query output



-- !query
SELECT multiline_param, typeof(multiline_param)
-- !query schema
struct<multiline_param:string,typeof(variablereference(system.session.multiline_param='Line 1\\nLine 2\\n\\tIndented line\\nLine 4')):string>
-- !query output
Line 1\nLine 2\n\tIndented line\nLine 4	string


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE pos_inf DOUBLE DEFAULT ?' 
USING CAST('Infinity' AS DOUBLE)
-- !query schema
struct<>
-- !query output



-- !query
SELECT pos_inf, typeof(pos_inf)
-- !query schema
struct<pos_inf:double,typeof(variablereference(system.session.pos_inf=CAST('Infinity' AS DOUBLE))):string>
-- !query output
Infinity	double


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE neg_inf DOUBLE DEFAULT ?' 
USING CAST('-Infinity' AS DOUBLE)
-- !query schema
struct<>
-- !query output



-- !query
SELECT neg_inf, typeof(neg_inf)
-- !query schema
struct<neg_inf:double,typeof(variablereference(system.session.neg_inf=CAST('-Infinity' AS DOUBLE))):string>
-- !query output
-Infinity	double


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE nan_val DOUBLE DEFAULT ?' 
USING CAST('NaN' AS DOUBLE)
-- !query schema
struct<>
-- !query output



-- !query
SELECT nan_val, typeof(nan_val)
-- !query schema
struct<nan_val:double,typeof(variablereference(system.session.nan_val=CAST('NaN' AS DOUBLE))):string>
-- !query output
NaN	double


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE string_array ARRAY<STRING> DEFAULT ?' 
USING ARRAY('first\'s value', 'second "quoted" value', 'third\nwith\ttabs')
-- !query schema
struct<>
-- !query output



-- !query
SELECT string_array, typeof(string_array)
-- !query schema
struct<string_array:array<string>,typeof(variablereference(system.session.string_array=ARRAY('first\'s value', 'second "quoted" value', 'third
with	tabs'))):string>
-- !query output
["first's value","second "quoted" value","third
with	tabs"]	array<string>


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE struct_array ARRAY<STRUCT<name:STRING, age:INT>> DEFAULT ?' 
USING ARRAY(STRUCT('Alice', 25), STRUCT('Bob', 30), STRUCT('Charlie', 35))
-- !query schema
struct<>
-- !query output



-- !query
SELECT struct_array, typeof(struct_array)
-- !query schema
struct<struct_array:array<struct<name:string,age:int>>,typeof(variablereference(system.session.struct_array=ARRAY(NAMED_STRUCT('name', 'Alice', 'age', 25), NAMED_STRUCT('name', 'Bob', 'age', 30), NAMED_STRUCT('name', 'Charlie', 'age', 35)))):string>
-- !query output
[{"name":"Alice","age":25},{"name":"Bob","age":30},{"name":"Charlie","age":35}]	array<struct<name:string,age:int>>


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE complex_map MAP<STRING, STRUCT<id:INT, active:BOOLEAN>> DEFAULT ?' 
USING MAP('user1', STRUCT(1, true), 'user2', STRUCT(2, false))
-- !query schema
struct<>
-- !query output



-- !query
SELECT complex_map, typeof(complex_map)
-- !query schema
struct<complex_map:map<string,struct<id:int,active:boolean>>,typeof(variablereference(system.session.complex_map=MAP('user1', NAMED_STRUCT('id', 1, 'active', true), 'user2', NAMED_STRUCT('id', 2, 'active', false)))):string>
-- !query output
{"user1":{"id":1,"active":true},"user2":{"id":2,"active":false}}	map<string,struct<id:int,active:boolean>>


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE deep_nested STRUCT<level1:STRUCT<level2:STRUCT<data:ARRAY<MAP<STRING, INT>>>>> DEFAULT ?' 
USING STRUCT(STRUCT(STRUCT(ARRAY(MAP('a', 1, 'b', 2), MAP('c', 3, 'd', 4)))))
-- !query schema
struct<>
-- !query output



-- !query
SELECT deep_nested, typeof(deep_nested)
-- !query schema
struct<deep_nested:struct<level1:struct<level2:struct<data:array<map<string,int>>>>>,typeof(variablereference(system.session.deep_nested=NAMED_STRUCT('level1', NAMED_STRUCT('level2', NAMED_STRUCT('data', ARRAY(MAP('a', 1, 'b', 2), MAP('c', 3, 'd', 4))))))):string>
-- !query output
{"level1":{"level2":{"data":[{"a":1,"b":2},{"c":3,"d":4}]}}}	struct<level1:struct<level2:struct<data:array<map<string,int>>>>>


-- !query
EXECUTE IMMEDIATE 'CREATE TABLE complex_defaults (
  id INT, 
  json_data STRING DEFAULT ?,
  quoted_name STRING DEFAULT ?,
  large_number BIGINT DEFAULT ?,
  precise_val DECIMAL(15,5) DEFAULT ?,
  bool_flag BOOLEAN DEFAULT ?,
  created_date DATE DEFAULT ?
) USING PARQUET' 
USING '{"type": "user", "data": {"name": "Test\'User", "active": true}}',
      'Name with \'quotes\' and "double quotes"',
      9223372036854775807,
      12345.67890,
      true,
      DATE '2023-12-25'
-- !query schema
struct<>
-- !query output



-- !query
DESCRIBE EXTENDED complex_defaults
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
id                  	int                 	                    
json_data           	string              	                    
quoted_name         	string              	                    
large_number        	bigint              	                    
precise_val         	decimal(15,5)       	                    
bool_flag           	boolean             	                    
created_date        	date                	                    
                    	                    	                    
# Detailed Table Information	                    	                    
Catalog             	spark_catalog       	                    
Database            	default             	                    
Table               	complex_defaults    	                    
Created Time [not included in comparison]
Last Access [not included in comparison]
Created By [not included in comparison]
Type                	MANAGED             	                    
Provider            	PARQUET             	                    
Location [not included in comparison]/{warehouse_dir}/complex_defaults	                    
                    	                    	                    
# Column Default Values	                    	                    
json_data           	string              	'{"type": "user", "data": {"name": "Test\'User", "active": true}}'
quoted_name         	string              	'Name with \'quotes\' and "double quotes"'
large_number        	bigint              	9223372036854775807L
precise_val         	decimal(15,5)       	12345.67890BD       
bool_flag           	boolean             	true                
created_date        	date                	DATE '2023-12-25'


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE case_sensitive STRING DEFAULT ?' 
USING 'MiXeD CaSe StRiNg WiTh UPPER and lower'
-- !query schema
struct<>
-- !query output



-- !query
SELECT case_sensitive, typeof(case_sensitive)
-- !query schema
struct<case_sensitive:string,typeof(variablereference(system.session.case_sensitive='MiXeD CaSe StRiNg WiTh UPPER and lower')):string>
-- !query output
MiXeD CaSe StRiNg WiTh UPPER and lower	string


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE year_interval DEFAULT ?'
USING INTERVAL '2' years
-- !query schema
struct<>
-- !query output



-- !query
SELECT year_interval, typeof(year_interval)
-- !query schema
struct<year_interval:interval year,typeof(variablereference(system.session.year_interval=INTERVAL '2' YEAR)):string>
-- !query output
2-0	interval year


-- !query
EXECUTE IMMEDIATE 'DECLARE VARIABLE day_interval DEFAULT ?'
USING INTERVAL '10' DAYS
-- !query schema
struct<>
-- !query output



-- !query
SELECT day_interval, typeof(day_interval)
-- !query schema
struct<day_interval:interval day,typeof(variablereference(system.session.day_interval=INTERVAL '10' DAY)):string>
-- !query output
10 00:00:00.000000000	interval day


-- !query
DROP TABLE IF EXISTS complex_defaults
-- !query schema
struct<>
-- !query output



-- !query
DROP FUNCTION IF EXISTS test_func
-- !query schema
struct<>
-- !query output



-- !query
DROP FUNCTION IF EXISTS test_func2
-- !query schema
struct<>
-- !query output



-- !query
DROP FUNCTION IF EXISTS multi_param_func
-- !query schema
struct<>
-- !query output



-- !query
DROP FUNCTION IF EXISTS table_func
-- !query schema
struct<>
-- !query output



-- !query
DROP FUNCTION IF EXISTS complex_func
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS nested_view
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS param_view
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS gen_table
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS multi_param
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS multi_col_table
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS gen_and_default
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS mixed_expressions
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS test_view
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW IF EXISTS test_view2
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS test_table
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS test_table2
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS expr_test
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE x
-- !query schema
struct<>
-- !query output

