== Physical Plan ==
TakeOrderedAndProject (170)
+- * HashAggregate (169)
   +- Exchange (168)
      +- * HashAggregate (167)
         +- Union (166)
            :- * HashAggregate (105)
            :  +- * HashAggregate (104)
            :     +- Union (103)
            :        :- * Filter (72)
            :        :  +- * HashAggregate (71)
            :        :     +- Exchange (70)
            :        :        +- * HashAggregate (69)
            :        :           +- * Project (68)
            :        :              +- * BroadcastHashJoin Inner BuildRight (67)
            :        :                 :- * Project (60)
            :        :                 :  +- * BroadcastHashJoin Inner BuildRight (59)
            :        :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
            :        :                 :     :  :- * Filter (3)
            :        :                 :     :  :  +- * ColumnarToRow (2)
            :        :                 :     :  :     +- Scan parquet spark_catalog.default.store_sales (1)
            :        :                 :     :  +- BroadcastExchange (56)
            :        :                 :     :     +- * Project (55)
            :        :                 :     :        +- * BroadcastHashJoin Inner BuildRight (54)
            :        :                 :     :           :- * Filter (6)
            :        :                 :     :           :  +- * ColumnarToRow (5)
            :        :                 :     :           :     +- Scan parquet spark_catalog.default.item (4)
            :        :                 :     :           +- BroadcastExchange (53)
            :        :                 :     :              +- * SortMergeJoin LeftSemi (52)
            :        :                 :     :                 :- * Sort (40)
            :        :                 :     :                 :  +- Exchange (39)
            :        :                 :     :                 :     +- * HashAggregate (38)
            :        :                 :     :                 :        +- Exchange (37)
            :        :                 :     :                 :           +- * HashAggregate (36)
            :        :                 :     :                 :              +- * Project (35)
            :        :                 :     :                 :                 +- * BroadcastHashJoin Inner BuildRight (34)
            :        :                 :     :                 :                    :- * Project (12)
            :        :                 :     :                 :                    :  +- * BroadcastHashJoin Inner BuildRight (11)
            :        :                 :     :                 :                    :     :- * Filter (9)
            :        :                 :     :                 :                    :     :  +- * ColumnarToRow (8)
            :        :                 :     :                 :                    :     :     +- Scan parquet spark_catalog.default.store_sales (7)
            :        :                 :     :                 :                    :     +- ReusedExchange (10)
            :        :                 :     :                 :                    +- BroadcastExchange (33)
            :        :                 :     :                 :                       +- * SortMergeJoin LeftSemi (32)
            :        :                 :     :                 :                          :- * Sort (17)
            :        :                 :     :                 :                          :  +- Exchange (16)
            :        :                 :     :                 :                          :     +- * Filter (15)
            :        :                 :     :                 :                          :        +- * ColumnarToRow (14)
            :        :                 :     :                 :                          :           +- Scan parquet spark_catalog.default.item (13)
            :        :                 :     :                 :                          +- * Sort (31)
            :        :                 :     :                 :                             +- Exchange (30)
            :        :                 :     :                 :                                +- * Project (29)
            :        :                 :     :                 :                                   +- * BroadcastHashJoin Inner BuildRight (28)
            :        :                 :     :                 :                                      :- * Project (23)
            :        :                 :     :                 :                                      :  +- * BroadcastHashJoin Inner BuildRight (22)
            :        :                 :     :                 :                                      :     :- * Filter (20)
            :        :                 :     :                 :                                      :     :  +- * ColumnarToRow (19)
            :        :                 :     :                 :                                      :     :     +- Scan parquet spark_catalog.default.catalog_sales (18)
            :        :                 :     :                 :                                      :     +- ReusedExchange (21)
            :        :                 :     :                 :                                      +- BroadcastExchange (27)
            :        :                 :     :                 :                                         +- * Filter (26)
            :        :                 :     :                 :                                            +- * ColumnarToRow (25)
            :        :                 :     :                 :                                               +- Scan parquet spark_catalog.default.item (24)
            :        :                 :     :                 +- * Sort (51)
            :        :                 :     :                    +- Exchange (50)
            :        :                 :     :                       +- * Project (49)
            :        :                 :     :                          +- * BroadcastHashJoin Inner BuildRight (48)
            :        :                 :     :                             :- * Project (46)
            :        :                 :     :                             :  +- * BroadcastHashJoin Inner BuildRight (45)
            :        :                 :     :                             :     :- * Filter (43)
            :        :                 :     :                             :     :  +- * ColumnarToRow (42)
            :        :                 :     :                             :     :     +- Scan parquet spark_catalog.default.web_sales (41)
            :        :                 :     :                             :     +- ReusedExchange (44)
            :        :                 :     :                             +- ReusedExchange (47)
            :        :                 :     +- ReusedExchange (58)
            :        :                 +- BroadcastExchange (66)
            :        :                    +- * BroadcastHashJoin LeftSemi BuildRight (65)
            :        :                       :- * Filter (63)
            :        :                       :  +- * ColumnarToRow (62)
            :        :                       :     +- Scan parquet spark_catalog.default.item (61)
            :        :                       +- ReusedExchange (64)
            :        :- * Filter (87)
            :        :  +- * HashAggregate (86)
            :        :     +- Exchange (85)
            :        :        +- * HashAggregate (84)
            :        :           +- * Project (83)
            :        :              +- * BroadcastHashJoin Inner BuildRight (82)
            :        :                 :- * Project (80)
            :        :                 :  +- * BroadcastHashJoin Inner BuildRight (79)
            :        :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (77)
            :        :                 :     :  :- * Filter (75)
            :        :                 :     :  :  +- * ColumnarToRow (74)
            :        :                 :     :  :     +- Scan parquet spark_catalog.default.catalog_sales (73)
            :        :                 :     :  +- ReusedExchange (76)
            :        :                 :     +- ReusedExchange (78)
            :        :                 +- ReusedExchange (81)
            :        +- * Filter (102)
            :           +- * HashAggregate (101)
            :              +- Exchange (100)
            :                 +- * HashAggregate (99)
            :                    +- * Project (98)
            :                       +- * BroadcastHashJoin Inner BuildRight (97)
            :                          :- * Project (95)
            :                          :  +- * BroadcastHashJoin Inner BuildRight (94)
            :                          :     :- * BroadcastHashJoin LeftSemi BuildRight (92)
            :                          :     :  :- * Filter (90)
            :                          :     :  :  +- * ColumnarToRow (89)
            :                          :     :  :     +- Scan parquet spark_catalog.default.web_sales (88)
            :                          :     :  +- ReusedExchange (91)
            :                          :     +- ReusedExchange (93)
            :                          +- ReusedExchange (96)
            :- * HashAggregate (120)
            :  +- Exchange (119)
            :     +- * HashAggregate (118)
            :        +- * HashAggregate (117)
            :           +- * HashAggregate (116)
            :              +- Union (115)
            :                 :- * Filter (108)
            :                 :  +- * HashAggregate (107)
            :                 :     +- ReusedExchange (106)
            :                 :- * Filter (111)
            :                 :  +- * HashAggregate (110)
            :                 :     +- ReusedExchange (109)
            :                 +- * Filter (114)
            :                    +- * HashAggregate (113)
            :                       +- ReusedExchange (112)
            :- * HashAggregate (135)
            :  +- Exchange (134)
            :     +- * HashAggregate (133)
            :        +- * HashAggregate (132)
            :           +- * HashAggregate (131)
            :              +- Union (130)
            :                 :- * Filter (123)
            :                 :  +- * HashAggregate (122)
            :                 :     +- ReusedExchange (121)
            :                 :- * Filter (126)
            :                 :  +- * HashAggregate (125)
            :                 :     +- ReusedExchange (124)
            :                 +- * Filter (129)
            :                    +- * HashAggregate (128)
            :                       +- ReusedExchange (127)
            :- * HashAggregate (150)
            :  +- Exchange (149)
            :     +- * HashAggregate (148)
            :        +- * HashAggregate (147)
            :           +- * HashAggregate (146)
            :              +- Union (145)
            :                 :- * Filter (138)
            :                 :  +- * HashAggregate (137)
            :                 :     +- ReusedExchange (136)
            :                 :- * Filter (141)
            :                 :  +- * HashAggregate (140)
            :                 :     +- ReusedExchange (139)
            :                 +- * Filter (144)
            :                    +- * HashAggregate (143)
            :                       +- ReusedExchange (142)
            +- * HashAggregate (165)
               +- Exchange (164)
                  +- * HashAggregate (163)
                     +- * HashAggregate (162)
                        +- * HashAggregate (161)
                           +- Union (160)
                              :- * Filter (153)
                              :  +- * HashAggregate (152)
                              :     +- ReusedExchange (151)
                              :- * Filter (156)
                              :  +- * HashAggregate (155)
                              :     +- ReusedExchange (154)
                              +- * Filter (159)
                                 +- * HashAggregate (158)
                                    +- ReusedExchange (157)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 37]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 37]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 9]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 9]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) ReusedExchange [Reuses operator id: 204]
Output [1]: [d_date_sk#13]

(11) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#13]
Join type: Inner
Join condition: None

(12) Project [codegen id : 9]
Output [1]: [ss_item_sk#10]
Input [3]: [ss_item_sk#10, ss_sold_date_sk#11, d_date_sk#13]

(13) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) ColumnarToRow [codegen id : 2]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(15) Filter [codegen id : 2]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Condition : (((isnotnull(i_item_sk#14) AND isnotnull(i_brand_id#15)) AND isnotnull(i_class_id#16)) AND isnotnull(i_category_id#17))

(16) Exchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: hashpartitioning(coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17), 5), ENSURE_REQUIREMENTS, [plan_id=1]

(17) Sort [codegen id : 3]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: [coalesce(i_brand_id#15, 0) ASC NULLS FIRST, isnull(i_brand_id#15) ASC NULLS FIRST, coalesce(i_class_id#16, 0) ASC NULLS FIRST, isnull(i_class_id#16) ASC NULLS FIRST, coalesce(i_category_id#17, 0) ASC NULLS FIRST, isnull(i_category_id#17) ASC NULLS FIRST], false, 0

(18) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(19) ColumnarToRow [codegen id : 6]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]

(20) Filter [codegen id : 6]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Condition : isnotnull(cs_item_sk#18)

(21) ReusedExchange [Reuses operator id: 204]
Output [1]: [d_date_sk#20]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#20]
Join type: Inner
Join condition: None

(23) Project [codegen id : 6]
Output [1]: [cs_item_sk#18]
Input [3]: [cs_item_sk#18, cs_sold_date_sk#19, d_date_sk#20]

(24) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(25) ColumnarToRow [codegen id : 5]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(26) Filter [codegen id : 5]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Condition : isnotnull(i_item_sk#21)

(27) BroadcastExchange
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#21]
Join type: Inner
Join condition: None

(29) Project [codegen id : 6]
Output [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Input [5]: [cs_item_sk#18, i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(30) Exchange
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: hashpartitioning(coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24), 5), ENSURE_REQUIREMENTS, [plan_id=3]

(31) Sort [codegen id : 7]
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: [coalesce(i_brand_id#22, 0) ASC NULLS FIRST, isnull(i_brand_id#22) ASC NULLS FIRST, coalesce(i_class_id#23, 0) ASC NULLS FIRST, isnull(i_class_id#23) ASC NULLS FIRST, coalesce(i_category_id#24, 0) ASC NULLS FIRST, isnull(i_category_id#24) ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 8]
Left keys [6]: [coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17)]
Right keys [6]: [coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24)]
Join type: LeftSemi
Join condition: None

(33) BroadcastExchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(34) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#14]
Join type: Inner
Join condition: None

(35) Project [codegen id : 9]
Output [3]: [i_brand_id#15 AS brand_id#25, i_class_id#16 AS class_id#26, i_category_id#17 AS category_id#27]
Input [5]: [ss_item_sk#10, i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(36) HashAggregate [codegen id : 9]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(37) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(brand_id#25, class_id#26, category_id#27, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(38) HashAggregate [codegen id : 10]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(39) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27), 5), ENSURE_REQUIREMENTS, [plan_id=6]

(40) Sort [codegen id : 11]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: [coalesce(brand_id#25, 0) ASC NULLS FIRST, isnull(brand_id#25) ASC NULLS FIRST, coalesce(class_id#26, 0) ASC NULLS FIRST, isnull(class_id#26) ASC NULLS FIRST, coalesce(category_id#27, 0) ASC NULLS FIRST, isnull(category_id#27) ASC NULLS FIRST], false, 0

(41) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#29), dynamicpruningexpression(ws_sold_date_sk#29 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(42) ColumnarToRow [codegen id : 14]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]

(43) Filter [codegen id : 14]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Condition : isnotnull(ws_item_sk#28)

(44) ReusedExchange [Reuses operator id: 204]
Output [1]: [d_date_sk#30]

(45) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#29]
Right keys [1]: [d_date_sk#30]
Join type: Inner
Join condition: None

(46) Project [codegen id : 14]
Output [1]: [ws_item_sk#28]
Input [3]: [ws_item_sk#28, ws_sold_date_sk#29, d_date_sk#30]

(47) ReusedExchange [Reuses operator id: 27]
Output [4]: [i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34]

(48) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_item_sk#28]
Right keys [1]: [i_item_sk#31]
Join type: Inner
Join condition: None

(49) Project [codegen id : 14]
Output [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Input [5]: [ws_item_sk#28, i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34]

(50) Exchange
Input [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Arguments: hashpartitioning(coalesce(i_brand_id#32, 0), isnull(i_brand_id#32), coalesce(i_class_id#33, 0), isnull(i_class_id#33), coalesce(i_category_id#34, 0), isnull(i_category_id#34), 5), ENSURE_REQUIREMENTS, [plan_id=7]

(51) Sort [codegen id : 15]
Input [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Arguments: [coalesce(i_brand_id#32, 0) ASC NULLS FIRST, isnull(i_brand_id#32) ASC NULLS FIRST, coalesce(i_class_id#33, 0) ASC NULLS FIRST, isnull(i_class_id#33) ASC NULLS FIRST, coalesce(i_category_id#34, 0) ASC NULLS FIRST, isnull(i_category_id#34) ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 16]
Left keys [6]: [coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27)]
Right keys [6]: [coalesce(i_brand_id#32, 0), isnull(i_brand_id#32), coalesce(i_class_id#33, 0), isnull(i_class_id#33), coalesce(i_category_id#34, 0), isnull(i_category_id#34)]
Join type: LeftSemi
Join condition: None

(53) BroadcastExchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=8]

(54) BroadcastHashJoin [codegen id : 17]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#25, class_id#26, category_id#27]
Join type: Inner
Join condition: None

(55) Project [codegen id : 17]
Output [1]: [i_item_sk#6 AS ss_item_sk#35]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#25, class_id#26, category_id#27]

(56) BroadcastExchange
Input [1]: [ss_item_sk#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(57) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(58) ReusedExchange [Reuses operator id: 199]
Output [1]: [d_date_sk#36]

(59) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#36]
Join type: Inner
Join condition: None

(60) Project [codegen id : 37]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#36]

(61) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(62) ColumnarToRow [codegen id : 36]
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(63) Filter [codegen id : 36]
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Condition : isnotnull(i_item_sk#37)

(64) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#35]

(65) BroadcastHashJoin [codegen id : 36]
Left keys [1]: [i_item_sk#37]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(66) BroadcastExchange
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=10]

(67) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#37]
Join type: Inner
Join condition: None

(68) Project [codegen id : 37]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#38, i_class_id#39, i_category_id#40]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(69) HashAggregate [codegen id : 37]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#38, i_class_id#39, i_category_id#40]
Keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#41, isEmpty#42, count#43]
Results [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]

(70) Exchange
Input [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]
Arguments: hashpartitioning(i_brand_id#38, i_class_id#39, i_category_id#40, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(71) HashAggregate [codegen id : 38]
Input [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]
Keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47, count(1)#48]
Results [6]: [store AS channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47 AS sales#50, count(1)#48 AS number_sales#51]

(72) Filter [codegen id : 38]
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sales#50, number_sales#51]
Condition : (isnotnull(sales#50) AND (cast(sales#50 as decimal(32,6)) > cast(Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(73) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#53, cs_quantity#54, cs_list_price#55, cs_sold_date_sk#56]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#56), dynamicpruningexpression(cs_sold_date_sk#56 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(74) ColumnarToRow [codegen id : 75]
Input [4]: [cs_item_sk#53, cs_quantity#54, cs_list_price#55, cs_sold_date_sk#56]

(75) Filter [codegen id : 75]
Input [4]: [cs_item_sk#53, cs_quantity#54, cs_list_price#55, cs_sold_date_sk#56]
Condition : isnotnull(cs_item_sk#53)

(76) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#57]

(77) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [cs_item_sk#53]
Right keys [1]: [ss_item_sk#57]
Join type: LeftSemi
Join condition: None

(78) ReusedExchange [Reuses operator id: 199]
Output [1]: [d_date_sk#58]

(79) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [cs_sold_date_sk#56]
Right keys [1]: [d_date_sk#58]
Join type: Inner
Join condition: None

(80) Project [codegen id : 75]
Output [3]: [cs_item_sk#53, cs_quantity#54, cs_list_price#55]
Input [5]: [cs_item_sk#53, cs_quantity#54, cs_list_price#55, cs_sold_date_sk#56, d_date_sk#58]

(81) ReusedExchange [Reuses operator id: 66]
Output [4]: [i_item_sk#59, i_brand_id#60, i_class_id#61, i_category_id#62]

(82) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [cs_item_sk#53]
Right keys [1]: [i_item_sk#59]
Join type: Inner
Join condition: None

(83) Project [codegen id : 75]
Output [5]: [cs_quantity#54, cs_list_price#55, i_brand_id#60, i_class_id#61, i_category_id#62]
Input [7]: [cs_item_sk#53, cs_quantity#54, cs_list_price#55, i_item_sk#59, i_brand_id#60, i_class_id#61, i_category_id#62]

(84) HashAggregate [codegen id : 75]
Input [5]: [cs_quantity#54, cs_list_price#55, i_brand_id#60, i_class_id#61, i_category_id#62]
Keys [3]: [i_brand_id#60, i_class_id#61, i_category_id#62]
Functions [2]: [partial_sum((cast(cs_quantity#54 as decimal(10,0)) * cs_list_price#55)), partial_count(1)]
Aggregate Attributes [3]: [sum#63, isEmpty#64, count#65]
Results [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#66, isEmpty#67, count#68]

(85) Exchange
Input [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#66, isEmpty#67, count#68]
Arguments: hashpartitioning(i_brand_id#60, i_class_id#61, i_category_id#62, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(86) HashAggregate [codegen id : 76]
Input [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#66, isEmpty#67, count#68]
Keys [3]: [i_brand_id#60, i_class_id#61, i_category_id#62]
Functions [2]: [sum((cast(cs_quantity#54 as decimal(10,0)) * cs_list_price#55)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#54 as decimal(10,0)) * cs_list_price#55))#69, count(1)#70]
Results [6]: [catalog AS channel#71, i_brand_id#60, i_class_id#61, i_category_id#62, sum((cast(cs_quantity#54 as decimal(10,0)) * cs_list_price#55))#69 AS sales#72, count(1)#70 AS number_sales#73]

(87) Filter [codegen id : 76]
Input [6]: [channel#71, i_brand_id#60, i_class_id#61, i_category_id#62, sales#72, number_sales#73]
Condition : (isnotnull(sales#72) AND (cast(sales#72 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(88) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#77), dynamicpruningexpression(ws_sold_date_sk#77 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(89) ColumnarToRow [codegen id : 113]
Input [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]

(90) Filter [codegen id : 113]
Input [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]
Condition : isnotnull(ws_item_sk#74)

(91) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#78]

(92) BroadcastHashJoin [codegen id : 113]
Left keys [1]: [ws_item_sk#74]
Right keys [1]: [ss_item_sk#78]
Join type: LeftSemi
Join condition: None

(93) ReusedExchange [Reuses operator id: 199]
Output [1]: [d_date_sk#79]

(94) BroadcastHashJoin [codegen id : 113]
Left keys [1]: [ws_sold_date_sk#77]
Right keys [1]: [d_date_sk#79]
Join type: Inner
Join condition: None

(95) Project [codegen id : 113]
Output [3]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76]
Input [5]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77, d_date_sk#79]

(96) ReusedExchange [Reuses operator id: 66]
Output [4]: [i_item_sk#80, i_brand_id#81, i_class_id#82, i_category_id#83]

(97) BroadcastHashJoin [codegen id : 113]
Left keys [1]: [ws_item_sk#74]
Right keys [1]: [i_item_sk#80]
Join type: Inner
Join condition: None

(98) Project [codegen id : 113]
Output [5]: [ws_quantity#75, ws_list_price#76, i_brand_id#81, i_class_id#82, i_category_id#83]
Input [7]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, i_item_sk#80, i_brand_id#81, i_class_id#82, i_category_id#83]

(99) HashAggregate [codegen id : 113]
Input [5]: [ws_quantity#75, ws_list_price#76, i_brand_id#81, i_class_id#82, i_category_id#83]
Keys [3]: [i_brand_id#81, i_class_id#82, i_category_id#83]
Functions [2]: [partial_sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76)), partial_count(1)]
Aggregate Attributes [3]: [sum#84, isEmpty#85, count#86]
Results [6]: [i_brand_id#81, i_class_id#82, i_category_id#83, sum#87, isEmpty#88, count#89]

(100) Exchange
Input [6]: [i_brand_id#81, i_class_id#82, i_category_id#83, sum#87, isEmpty#88, count#89]
Arguments: hashpartitioning(i_brand_id#81, i_class_id#82, i_category_id#83, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(101) HashAggregate [codegen id : 114]
Input [6]: [i_brand_id#81, i_class_id#82, i_category_id#83, sum#87, isEmpty#88, count#89]
Keys [3]: [i_brand_id#81, i_class_id#82, i_category_id#83]
Functions [2]: [sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76))#90, count(1)#91]
Results [6]: [web AS channel#92, i_brand_id#81, i_class_id#82, i_category_id#83, sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76))#90 AS sales#93, count(1)#91 AS number_sales#94]

(102) Filter [codegen id : 114]
Input [6]: [channel#92, i_brand_id#81, i_class_id#82, i_category_id#83, sales#93, number_sales#94]
Condition : (isnotnull(sales#93) AND (cast(sales#93 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(103) Union

(104) HashAggregate [codegen id : 115]
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sales#50, number_sales#51]
Keys [4]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [partial_sum(sales#50), partial_sum(number_sales#51)]
Aggregate Attributes [3]: [sum#95, isEmpty#96, sum#97]
Results [7]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum#98, isEmpty#99, sum#100]

(105) HashAggregate [codegen id : 115]
Input [7]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum#98, isEmpty#99, sum#100]
Keys [4]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [sum(sales#50), sum(number_sales#51)]
Aggregate Attributes [2]: [sum(sales#50)#101, sum(number_sales#51)#102]
Results [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum(sales#50)#101 AS sum_sales#103, sum(number_sales#51)#102 AS number_sales#104]

(106) ReusedExchange [Reuses operator id: 70]
Output [6]: [i_brand_id#105, i_class_id#106, i_category_id#107, sum#108, isEmpty#109, count#46]

(107) HashAggregate [codegen id : 153]
Input [6]: [i_brand_id#105, i_class_id#106, i_category_id#107, sum#108, isEmpty#109, count#46]
Keys [3]: [i_brand_id#105, i_class_id#106, i_category_id#107]
Functions [2]: [sum((cast(ss_quantity#110 as decimal(10,0)) * ss_list_price#111)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#110 as decimal(10,0)) * ss_list_price#111))#47, count(1)#48]
Results [6]: [store AS channel#112, i_brand_id#105, i_class_id#106, i_category_id#107, sum((cast(ss_quantity#110 as decimal(10,0)) * ss_list_price#111))#47 AS sales#113, count(1)#48 AS number_sales#114]

(108) Filter [codegen id : 153]
Input [6]: [channel#112, i_brand_id#105, i_class_id#106, i_category_id#107, sales#113, number_sales#114]
Condition : (isnotnull(sales#113) AND (cast(sales#113 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(109) ReusedExchange [Reuses operator id: 85]
Output [6]: [i_brand_id#115, i_class_id#116, i_category_id#117, sum#118, isEmpty#119, count#68]

(110) HashAggregate [codegen id : 191]
Input [6]: [i_brand_id#115, i_class_id#116, i_category_id#117, sum#118, isEmpty#119, count#68]
Keys [3]: [i_brand_id#115, i_class_id#116, i_category_id#117]
Functions [2]: [sum((cast(cs_quantity#120 as decimal(10,0)) * cs_list_price#121)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#120 as decimal(10,0)) * cs_list_price#121))#69, count(1)#70]
Results [6]: [catalog AS channel#122, i_brand_id#115, i_class_id#116, i_category_id#117, sum((cast(cs_quantity#120 as decimal(10,0)) * cs_list_price#121))#69 AS sales#123, count(1)#70 AS number_sales#124]

(111) Filter [codegen id : 191]
Input [6]: [channel#122, i_brand_id#115, i_class_id#116, i_category_id#117, sales#123, number_sales#124]
Condition : (isnotnull(sales#123) AND (cast(sales#123 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(112) ReusedExchange [Reuses operator id: 100]
Output [6]: [i_brand_id#125, i_class_id#126, i_category_id#127, sum#128, isEmpty#129, count#89]

(113) HashAggregate [codegen id : 229]
Input [6]: [i_brand_id#125, i_class_id#126, i_category_id#127, sum#128, isEmpty#129, count#89]
Keys [3]: [i_brand_id#125, i_class_id#126, i_category_id#127]
Functions [2]: [sum((cast(ws_quantity#130 as decimal(10,0)) * ws_list_price#131)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#130 as decimal(10,0)) * ws_list_price#131))#90, count(1)#91]
Results [6]: [web AS channel#132, i_brand_id#125, i_class_id#126, i_category_id#127, sum((cast(ws_quantity#130 as decimal(10,0)) * ws_list_price#131))#90 AS sales#133, count(1)#91 AS number_sales#134]

(114) Filter [codegen id : 229]
Input [6]: [channel#132, i_brand_id#125, i_class_id#126, i_category_id#127, sales#133, number_sales#134]
Condition : (isnotnull(sales#133) AND (cast(sales#133 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(115) Union

(116) HashAggregate [codegen id : 230]
Input [6]: [channel#112, i_brand_id#105, i_class_id#106, i_category_id#107, sales#113, number_sales#114]
Keys [4]: [channel#112, i_brand_id#105, i_class_id#106, i_category_id#107]
Functions [2]: [partial_sum(sales#113), partial_sum(number_sales#114)]
Aggregate Attributes [3]: [sum#135, isEmpty#136, sum#137]
Results [7]: [channel#112, i_brand_id#105, i_class_id#106, i_category_id#107, sum#138, isEmpty#139, sum#140]

(117) HashAggregate [codegen id : 230]
Input [7]: [channel#112, i_brand_id#105, i_class_id#106, i_category_id#107, sum#138, isEmpty#139, sum#140]
Keys [4]: [channel#112, i_brand_id#105, i_class_id#106, i_category_id#107]
Functions [2]: [sum(sales#113), sum(number_sales#114)]
Aggregate Attributes [2]: [sum(sales#113)#101, sum(number_sales#114)#102]
Results [5]: [channel#112, i_brand_id#105, i_class_id#106, sum(sales#113)#101 AS sum_sales#141, sum(number_sales#114)#102 AS number_sales#142]

(118) HashAggregate [codegen id : 230]
Input [5]: [channel#112, i_brand_id#105, i_class_id#106, sum_sales#141, number_sales#142]
Keys [3]: [channel#112, i_brand_id#105, i_class_id#106]
Functions [2]: [partial_sum(sum_sales#141), partial_sum(number_sales#142)]
Aggregate Attributes [3]: [sum#143, isEmpty#144, sum#145]
Results [6]: [channel#112, i_brand_id#105, i_class_id#106, sum#146, isEmpty#147, sum#148]

(119) Exchange
Input [6]: [channel#112, i_brand_id#105, i_class_id#106, sum#146, isEmpty#147, sum#148]
Arguments: hashpartitioning(channel#112, i_brand_id#105, i_class_id#106, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(120) HashAggregate [codegen id : 231]
Input [6]: [channel#112, i_brand_id#105, i_class_id#106, sum#146, isEmpty#147, sum#148]
Keys [3]: [channel#112, i_brand_id#105, i_class_id#106]
Functions [2]: [sum(sum_sales#141), sum(number_sales#142)]
Aggregate Attributes [2]: [sum(sum_sales#141)#149, sum(number_sales#142)#150]
Results [6]: [channel#112, i_brand_id#105, i_class_id#106, null AS i_category_id#151, sum(sum_sales#141)#149 AS sum(sum_sales)#152, sum(number_sales#142)#150 AS sum(number_sales)#153]

(121) ReusedExchange [Reuses operator id: 70]
Output [6]: [i_brand_id#154, i_class_id#155, i_category_id#156, sum#157, isEmpty#158, count#46]

(122) HashAggregate [codegen id : 269]
Input [6]: [i_brand_id#154, i_class_id#155, i_category_id#156, sum#157, isEmpty#158, count#46]
Keys [3]: [i_brand_id#154, i_class_id#155, i_category_id#156]
Functions [2]: [sum((cast(ss_quantity#159 as decimal(10,0)) * ss_list_price#160)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#159 as decimal(10,0)) * ss_list_price#160))#47, count(1)#48]
Results [6]: [store AS channel#161, i_brand_id#154, i_class_id#155, i_category_id#156, sum((cast(ss_quantity#159 as decimal(10,0)) * ss_list_price#160))#47 AS sales#162, count(1)#48 AS number_sales#163]

(123) Filter [codegen id : 269]
Input [6]: [channel#161, i_brand_id#154, i_class_id#155, i_category_id#156, sales#162, number_sales#163]
Condition : (isnotnull(sales#162) AND (cast(sales#162 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(124) ReusedExchange [Reuses operator id: 85]
Output [6]: [i_brand_id#164, i_class_id#165, i_category_id#166, sum#167, isEmpty#168, count#68]

(125) HashAggregate [codegen id : 307]
Input [6]: [i_brand_id#164, i_class_id#165, i_category_id#166, sum#167, isEmpty#168, count#68]
Keys [3]: [i_brand_id#164, i_class_id#165, i_category_id#166]
Functions [2]: [sum((cast(cs_quantity#169 as decimal(10,0)) * cs_list_price#170)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#169 as decimal(10,0)) * cs_list_price#170))#69, count(1)#70]
Results [6]: [catalog AS channel#171, i_brand_id#164, i_class_id#165, i_category_id#166, sum((cast(cs_quantity#169 as decimal(10,0)) * cs_list_price#170))#69 AS sales#172, count(1)#70 AS number_sales#173]

(126) Filter [codegen id : 307]
Input [6]: [channel#171, i_brand_id#164, i_class_id#165, i_category_id#166, sales#172, number_sales#173]
Condition : (isnotnull(sales#172) AND (cast(sales#172 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(127) ReusedExchange [Reuses operator id: 100]
Output [6]: [i_brand_id#174, i_class_id#175, i_category_id#176, sum#177, isEmpty#178, count#89]

(128) HashAggregate [codegen id : 345]
Input [6]: [i_brand_id#174, i_class_id#175, i_category_id#176, sum#177, isEmpty#178, count#89]
Keys [3]: [i_brand_id#174, i_class_id#175, i_category_id#176]
Functions [2]: [sum((cast(ws_quantity#179 as decimal(10,0)) * ws_list_price#180)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#179 as decimal(10,0)) * ws_list_price#180))#90, count(1)#91]
Results [6]: [web AS channel#181, i_brand_id#174, i_class_id#175, i_category_id#176, sum((cast(ws_quantity#179 as decimal(10,0)) * ws_list_price#180))#90 AS sales#182, count(1)#91 AS number_sales#183]

(129) Filter [codegen id : 345]
Input [6]: [channel#181, i_brand_id#174, i_class_id#175, i_category_id#176, sales#182, number_sales#183]
Condition : (isnotnull(sales#182) AND (cast(sales#182 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(130) Union

(131) HashAggregate [codegen id : 346]
Input [6]: [channel#161, i_brand_id#154, i_class_id#155, i_category_id#156, sales#162, number_sales#163]
Keys [4]: [channel#161, i_brand_id#154, i_class_id#155, i_category_id#156]
Functions [2]: [partial_sum(sales#162), partial_sum(number_sales#163)]
Aggregate Attributes [3]: [sum#184, isEmpty#185, sum#186]
Results [7]: [channel#161, i_brand_id#154, i_class_id#155, i_category_id#156, sum#187, isEmpty#188, sum#189]

(132) HashAggregate [codegen id : 346]
Input [7]: [channel#161, i_brand_id#154, i_class_id#155, i_category_id#156, sum#187, isEmpty#188, sum#189]
Keys [4]: [channel#161, i_brand_id#154, i_class_id#155, i_category_id#156]
Functions [2]: [sum(sales#162), sum(number_sales#163)]
Aggregate Attributes [2]: [sum(sales#162)#101, sum(number_sales#163)#102]
Results [4]: [channel#161, i_brand_id#154, sum(sales#162)#101 AS sum_sales#190, sum(number_sales#163)#102 AS number_sales#191]

(133) HashAggregate [codegen id : 346]
Input [4]: [channel#161, i_brand_id#154, sum_sales#190, number_sales#191]
Keys [2]: [channel#161, i_brand_id#154]
Functions [2]: [partial_sum(sum_sales#190), partial_sum(number_sales#191)]
Aggregate Attributes [3]: [sum#192, isEmpty#193, sum#194]
Results [5]: [channel#161, i_brand_id#154, sum#195, isEmpty#196, sum#197]

(134) Exchange
Input [5]: [channel#161, i_brand_id#154, sum#195, isEmpty#196, sum#197]
Arguments: hashpartitioning(channel#161, i_brand_id#154, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(135) HashAggregate [codegen id : 347]
Input [5]: [channel#161, i_brand_id#154, sum#195, isEmpty#196, sum#197]
Keys [2]: [channel#161, i_brand_id#154]
Functions [2]: [sum(sum_sales#190), sum(number_sales#191)]
Aggregate Attributes [2]: [sum(sum_sales#190)#198, sum(number_sales#191)#199]
Results [6]: [channel#161, i_brand_id#154, null AS i_class_id#200, null AS i_category_id#201, sum(sum_sales#190)#198 AS sum(sum_sales)#202, sum(number_sales#191)#199 AS sum(number_sales)#203]

(136) ReusedExchange [Reuses operator id: 70]
Output [6]: [i_brand_id#204, i_class_id#205, i_category_id#206, sum#207, isEmpty#208, count#46]

(137) HashAggregate [codegen id : 385]
Input [6]: [i_brand_id#204, i_class_id#205, i_category_id#206, sum#207, isEmpty#208, count#46]
Keys [3]: [i_brand_id#204, i_class_id#205, i_category_id#206]
Functions [2]: [sum((cast(ss_quantity#209 as decimal(10,0)) * ss_list_price#210)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#209 as decimal(10,0)) * ss_list_price#210))#47, count(1)#48]
Results [6]: [store AS channel#211, i_brand_id#204, i_class_id#205, i_category_id#206, sum((cast(ss_quantity#209 as decimal(10,0)) * ss_list_price#210))#47 AS sales#212, count(1)#48 AS number_sales#213]

(138) Filter [codegen id : 385]
Input [6]: [channel#211, i_brand_id#204, i_class_id#205, i_category_id#206, sales#212, number_sales#213]
Condition : (isnotnull(sales#212) AND (cast(sales#212 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(139) ReusedExchange [Reuses operator id: 85]
Output [6]: [i_brand_id#214, i_class_id#215, i_category_id#216, sum#217, isEmpty#218, count#68]

(140) HashAggregate [codegen id : 423]
Input [6]: [i_brand_id#214, i_class_id#215, i_category_id#216, sum#217, isEmpty#218, count#68]
Keys [3]: [i_brand_id#214, i_class_id#215, i_category_id#216]
Functions [2]: [sum((cast(cs_quantity#219 as decimal(10,0)) * cs_list_price#220)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#219 as decimal(10,0)) * cs_list_price#220))#69, count(1)#70]
Results [6]: [catalog AS channel#221, i_brand_id#214, i_class_id#215, i_category_id#216, sum((cast(cs_quantity#219 as decimal(10,0)) * cs_list_price#220))#69 AS sales#222, count(1)#70 AS number_sales#223]

(141) Filter [codegen id : 423]
Input [6]: [channel#221, i_brand_id#214, i_class_id#215, i_category_id#216, sales#222, number_sales#223]
Condition : (isnotnull(sales#222) AND (cast(sales#222 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(142) ReusedExchange [Reuses operator id: 100]
Output [6]: [i_brand_id#224, i_class_id#225, i_category_id#226, sum#227, isEmpty#228, count#89]

(143) HashAggregate [codegen id : 461]
Input [6]: [i_brand_id#224, i_class_id#225, i_category_id#226, sum#227, isEmpty#228, count#89]
Keys [3]: [i_brand_id#224, i_class_id#225, i_category_id#226]
Functions [2]: [sum((cast(ws_quantity#229 as decimal(10,0)) * ws_list_price#230)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#229 as decimal(10,0)) * ws_list_price#230))#90, count(1)#91]
Results [6]: [web AS channel#231, i_brand_id#224, i_class_id#225, i_category_id#226, sum((cast(ws_quantity#229 as decimal(10,0)) * ws_list_price#230))#90 AS sales#232, count(1)#91 AS number_sales#233]

(144) Filter [codegen id : 461]
Input [6]: [channel#231, i_brand_id#224, i_class_id#225, i_category_id#226, sales#232, number_sales#233]
Condition : (isnotnull(sales#232) AND (cast(sales#232 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(145) Union

(146) HashAggregate [codegen id : 462]
Input [6]: [channel#211, i_brand_id#204, i_class_id#205, i_category_id#206, sales#212, number_sales#213]
Keys [4]: [channel#211, i_brand_id#204, i_class_id#205, i_category_id#206]
Functions [2]: [partial_sum(sales#212), partial_sum(number_sales#213)]
Aggregate Attributes [3]: [sum#234, isEmpty#235, sum#236]
Results [7]: [channel#211, i_brand_id#204, i_class_id#205, i_category_id#206, sum#237, isEmpty#238, sum#239]

(147) HashAggregate [codegen id : 462]
Input [7]: [channel#211, i_brand_id#204, i_class_id#205, i_category_id#206, sum#237, isEmpty#238, sum#239]
Keys [4]: [channel#211, i_brand_id#204, i_class_id#205, i_category_id#206]
Functions [2]: [sum(sales#212), sum(number_sales#213)]
Aggregate Attributes [2]: [sum(sales#212)#101, sum(number_sales#213)#102]
Results [3]: [channel#211, sum(sales#212)#101 AS sum_sales#240, sum(number_sales#213)#102 AS number_sales#241]

(148) HashAggregate [codegen id : 462]
Input [3]: [channel#211, sum_sales#240, number_sales#241]
Keys [1]: [channel#211]
Functions [2]: [partial_sum(sum_sales#240), partial_sum(number_sales#241)]
Aggregate Attributes [3]: [sum#242, isEmpty#243, sum#244]
Results [4]: [channel#211, sum#245, isEmpty#246, sum#247]

(149) Exchange
Input [4]: [channel#211, sum#245, isEmpty#246, sum#247]
Arguments: hashpartitioning(channel#211, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(150) HashAggregate [codegen id : 463]
Input [4]: [channel#211, sum#245, isEmpty#246, sum#247]
Keys [1]: [channel#211]
Functions [2]: [sum(sum_sales#240), sum(number_sales#241)]
Aggregate Attributes [2]: [sum(sum_sales#240)#248, sum(number_sales#241)#249]
Results [6]: [channel#211, null AS i_brand_id#250, null AS i_class_id#251, null AS i_category_id#252, sum(sum_sales#240)#248 AS sum(sum_sales)#253, sum(number_sales#241)#249 AS sum(number_sales)#254]

(151) ReusedExchange [Reuses operator id: 70]
Output [6]: [i_brand_id#255, i_class_id#256, i_category_id#257, sum#258, isEmpty#259, count#46]

(152) HashAggregate [codegen id : 501]
Input [6]: [i_brand_id#255, i_class_id#256, i_category_id#257, sum#258, isEmpty#259, count#46]
Keys [3]: [i_brand_id#255, i_class_id#256, i_category_id#257]
Functions [2]: [sum((cast(ss_quantity#260 as decimal(10,0)) * ss_list_price#261)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#260 as decimal(10,0)) * ss_list_price#261))#47, count(1)#48]
Results [6]: [store AS channel#262, i_brand_id#255, i_class_id#256, i_category_id#257, sum((cast(ss_quantity#260 as decimal(10,0)) * ss_list_price#261))#47 AS sales#263, count(1)#48 AS number_sales#264]

(153) Filter [codegen id : 501]
Input [6]: [channel#262, i_brand_id#255, i_class_id#256, i_category_id#257, sales#263, number_sales#264]
Condition : (isnotnull(sales#263) AND (cast(sales#263 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(154) ReusedExchange [Reuses operator id: 85]
Output [6]: [i_brand_id#265, i_class_id#266, i_category_id#267, sum#268, isEmpty#269, count#68]

(155) HashAggregate [codegen id : 539]
Input [6]: [i_brand_id#265, i_class_id#266, i_category_id#267, sum#268, isEmpty#269, count#68]
Keys [3]: [i_brand_id#265, i_class_id#266, i_category_id#267]
Functions [2]: [sum((cast(cs_quantity#270 as decimal(10,0)) * cs_list_price#271)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#270 as decimal(10,0)) * cs_list_price#271))#69, count(1)#70]
Results [6]: [catalog AS channel#272, i_brand_id#265, i_class_id#266, i_category_id#267, sum((cast(cs_quantity#270 as decimal(10,0)) * cs_list_price#271))#69 AS sales#273, count(1)#70 AS number_sales#274]

(156) Filter [codegen id : 539]
Input [6]: [channel#272, i_brand_id#265, i_class_id#266, i_category_id#267, sales#273, number_sales#274]
Condition : (isnotnull(sales#273) AND (cast(sales#273 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(157) ReusedExchange [Reuses operator id: 100]
Output [6]: [i_brand_id#275, i_class_id#276, i_category_id#277, sum#278, isEmpty#279, count#89]

(158) HashAggregate [codegen id : 577]
Input [6]: [i_brand_id#275, i_class_id#276, i_category_id#277, sum#278, isEmpty#279, count#89]
Keys [3]: [i_brand_id#275, i_class_id#276, i_category_id#277]
Functions [2]: [sum((cast(ws_quantity#280 as decimal(10,0)) * ws_list_price#281)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#280 as decimal(10,0)) * ws_list_price#281))#90, count(1)#91]
Results [6]: [web AS channel#282, i_brand_id#275, i_class_id#276, i_category_id#277, sum((cast(ws_quantity#280 as decimal(10,0)) * ws_list_price#281))#90 AS sales#283, count(1)#91 AS number_sales#284]

(159) Filter [codegen id : 577]
Input [6]: [channel#282, i_brand_id#275, i_class_id#276, i_category_id#277, sales#283, number_sales#284]
Condition : (isnotnull(sales#283) AND (cast(sales#283 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#12] as decimal(32,6))))

(160) Union

(161) HashAggregate [codegen id : 578]
Input [6]: [channel#262, i_brand_id#255, i_class_id#256, i_category_id#257, sales#263, number_sales#264]
Keys [4]: [channel#262, i_brand_id#255, i_class_id#256, i_category_id#257]
Functions [2]: [partial_sum(sales#263), partial_sum(number_sales#264)]
Aggregate Attributes [3]: [sum#285, isEmpty#286, sum#287]
Results [7]: [channel#262, i_brand_id#255, i_class_id#256, i_category_id#257, sum#288, isEmpty#289, sum#290]

(162) HashAggregate [codegen id : 578]
Input [7]: [channel#262, i_brand_id#255, i_class_id#256, i_category_id#257, sum#288, isEmpty#289, sum#290]
Keys [4]: [channel#262, i_brand_id#255, i_class_id#256, i_category_id#257]
Functions [2]: [sum(sales#263), sum(number_sales#264)]
Aggregate Attributes [2]: [sum(sales#263)#101, sum(number_sales#264)#102]
Results [2]: [sum(sales#263)#101 AS sum_sales#291, sum(number_sales#264)#102 AS number_sales#292]

(163) HashAggregate [codegen id : 578]
Input [2]: [sum_sales#291, number_sales#292]
Keys: []
Functions [2]: [partial_sum(sum_sales#291), partial_sum(number_sales#292)]
Aggregate Attributes [3]: [sum#293, isEmpty#294, sum#295]
Results [3]: [sum#296, isEmpty#297, sum#298]

(164) Exchange
Input [3]: [sum#296, isEmpty#297, sum#298]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=18]

(165) HashAggregate [codegen id : 579]
Input [3]: [sum#296, isEmpty#297, sum#298]
Keys: []
Functions [2]: [sum(sum_sales#291), sum(number_sales#292)]
Aggregate Attributes [2]: [sum(sum_sales#291)#299, sum(number_sales#292)#300]
Results [6]: [null AS channel#301, null AS i_brand_id#302, null AS i_class_id#303, null AS i_category_id#304, sum(sum_sales#291)#299 AS sum(sum_sales)#305, sum(number_sales#292)#300 AS sum(number_sales)#306]

(166) Union

(167) HashAggregate [codegen id : 580]
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#103, number_sales#104]
Keys [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#103, number_sales#104]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#103, number_sales#104]

(168) Exchange
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#103, number_sales#104]
Arguments: hashpartitioning(channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#103, number_sales#104, 5), ENSURE_REQUIREMENTS, [plan_id=19]

(169) HashAggregate [codegen id : 581]
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#103, number_sales#104]
Keys [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#103, number_sales#104]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#103, number_sales#104]

(170) TakeOrderedAndProject
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#103, number_sales#104]
Arguments: 100, [channel#49 ASC NULLS FIRST, i_brand_id#38 ASC NULLS FIRST, i_class_id#39 ASC NULLS FIRST, i_category_id#40 ASC NULLS FIRST], [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#103, number_sales#104]

===== Subqueries =====

Subquery:1 Hosting operator id = 72 Hosting Expression = Subquery scalar-subquery#52, [id=#12]
* HashAggregate (189)
+- Exchange (188)
   +- * HashAggregate (187)
      +- Union (186)
         :- * Project (175)
         :  +- * BroadcastHashJoin Inner BuildRight (174)
         :     :- * ColumnarToRow (172)
         :     :  +- Scan parquet spark_catalog.default.store_sales (171)
         :     +- ReusedExchange (173)
         :- * Project (180)
         :  +- * BroadcastHashJoin Inner BuildRight (179)
         :     :- * ColumnarToRow (177)
         :     :  +- Scan parquet spark_catalog.default.catalog_sales (176)
         :     +- ReusedExchange (178)
         +- * Project (185)
            +- * BroadcastHashJoin Inner BuildRight (184)
               :- * ColumnarToRow (182)
               :  +- Scan parquet spark_catalog.default.web_sales (181)
               +- ReusedExchange (183)


(171) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#307, ss_list_price#308, ss_sold_date_sk#309]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#309), dynamicpruningexpression(ss_sold_date_sk#309 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(172) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#307, ss_list_price#308, ss_sold_date_sk#309]

(173) ReusedExchange [Reuses operator id: 204]
Output [1]: [d_date_sk#310]

(174) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#309]
Right keys [1]: [d_date_sk#310]
Join type: Inner
Join condition: None

(175) Project [codegen id : 2]
Output [2]: [ss_quantity#307 AS quantity#311, ss_list_price#308 AS list_price#312]
Input [4]: [ss_quantity#307, ss_list_price#308, ss_sold_date_sk#309, d_date_sk#310]

(176) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#313, cs_list_price#314, cs_sold_date_sk#315]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#315), dynamicpruningexpression(cs_sold_date_sk#315 IN dynamicpruning#316)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(177) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#313, cs_list_price#314, cs_sold_date_sk#315]

(178) ReusedExchange [Reuses operator id: 194]
Output [1]: [d_date_sk#317]

(179) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#315]
Right keys [1]: [d_date_sk#317]
Join type: Inner
Join condition: None

(180) Project [codegen id : 4]
Output [2]: [cs_quantity#313 AS quantity#318, cs_list_price#314 AS list_price#319]
Input [4]: [cs_quantity#313, cs_list_price#314, cs_sold_date_sk#315, d_date_sk#317]

(181) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#320, ws_list_price#321, ws_sold_date_sk#322]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#322), dynamicpruningexpression(ws_sold_date_sk#322 IN dynamicpruning#316)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(182) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#320, ws_list_price#321, ws_sold_date_sk#322]

(183) ReusedExchange [Reuses operator id: 194]
Output [1]: [d_date_sk#323]

(184) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#322]
Right keys [1]: [d_date_sk#323]
Join type: Inner
Join condition: None

(185) Project [codegen id : 6]
Output [2]: [ws_quantity#320 AS quantity#324, ws_list_price#321 AS list_price#325]
Input [4]: [ws_quantity#320, ws_list_price#321, ws_sold_date_sk#322, d_date_sk#323]

(186) Union

(187) HashAggregate [codegen id : 7]
Input [2]: [quantity#311, list_price#312]
Keys: []
Functions [1]: [partial_avg((cast(quantity#311 as decimal(10,0)) * list_price#312))]
Aggregate Attributes [2]: [sum#326, count#327]
Results [2]: [sum#328, count#329]

(188) Exchange
Input [2]: [sum#328, count#329]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=20]

(189) HashAggregate [codegen id : 8]
Input [2]: [sum#328, count#329]
Keys: []
Functions [1]: [avg((cast(quantity#311 as decimal(10,0)) * list_price#312))]
Aggregate Attributes [1]: [avg((cast(quantity#311 as decimal(10,0)) * list_price#312))#330]
Results [1]: [avg((cast(quantity#311 as decimal(10,0)) * list_price#312))#330 AS average_sales#331]

Subquery:2 Hosting operator id = 171 Hosting Expression = ss_sold_date_sk#309 IN dynamicpruning#12

Subquery:3 Hosting operator id = 176 Hosting Expression = cs_sold_date_sk#315 IN dynamicpruning#316
BroadcastExchange (194)
+- * Project (193)
   +- * Filter (192)
      +- * ColumnarToRow (191)
         +- Scan parquet spark_catalog.default.date_dim (190)


(190) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#317, d_year#332]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(191) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#317, d_year#332]

(192) Filter [codegen id : 1]
Input [2]: [d_date_sk#317, d_year#332]
Condition : (((isnotnull(d_year#332) AND (d_year#332 >= 1998)) AND (d_year#332 <= 2000)) AND isnotnull(d_date_sk#317))

(193) Project [codegen id : 1]
Output [1]: [d_date_sk#317]
Input [2]: [d_date_sk#317, d_year#332]

(194) BroadcastExchange
Input [1]: [d_date_sk#317]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=21]

Subquery:4 Hosting operator id = 181 Hosting Expression = ws_sold_date_sk#322 IN dynamicpruning#316

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (199)
+- * Project (198)
   +- * Filter (197)
      +- * ColumnarToRow (196)
         +- Scan parquet spark_catalog.default.date_dim (195)


(195) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#36, d_year#333, d_moy#334]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(196) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#36, d_year#333, d_moy#334]

(197) Filter [codegen id : 1]
Input [3]: [d_date_sk#36, d_year#333, d_moy#334]
Condition : ((((isnotnull(d_year#333) AND isnotnull(d_moy#334)) AND (d_year#333 = 2000)) AND (d_moy#334 = 11)) AND isnotnull(d_date_sk#36))

(198) Project [codegen id : 1]
Output [1]: [d_date_sk#36]
Input [3]: [d_date_sk#36, d_year#333, d_moy#334]

(199) BroadcastExchange
Input [1]: [d_date_sk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=22]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (204)
+- * Project (203)
   +- * Filter (202)
      +- * ColumnarToRow (201)
         +- Scan parquet spark_catalog.default.date_dim (200)


(200) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#13, d_year#335]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(201) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#335]

(202) Filter [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#335]
Condition : (((isnotnull(d_year#335) AND (d_year#335 >= 1999)) AND (d_year#335 <= 2001)) AND isnotnull(d_date_sk#13))

(203) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_year#335]

(204) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=23]

Subquery:7 Hosting operator id = 18 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#12

Subquery:8 Hosting operator id = 41 Hosting Expression = ws_sold_date_sk#29 IN dynamicpruning#12

Subquery:9 Hosting operator id = 87 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]

Subquery:10 Hosting operator id = 73 Hosting Expression = cs_sold_date_sk#56 IN dynamicpruning#5

Subquery:11 Hosting operator id = 102 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]

Subquery:12 Hosting operator id = 88 Hosting Expression = ws_sold_date_sk#77 IN dynamicpruning#5

Subquery:13 Hosting operator id = 108 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]

Subquery:14 Hosting operator id = 111 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]

Subquery:15 Hosting operator id = 114 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]

Subquery:16 Hosting operator id = 123 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]

Subquery:17 Hosting operator id = 126 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]

Subquery:18 Hosting operator id = 129 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]

Subquery:19 Hosting operator id = 138 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]

Subquery:20 Hosting operator id = 141 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]

Subquery:21 Hosting operator id = 144 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]

Subquery:22 Hosting operator id = 153 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]

Subquery:23 Hosting operator id = 156 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]

Subquery:24 Hosting operator id = 159 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#12]


