== Physical Plan ==
TakeOrderedAndProject (125)
+- * HashAggregate (124)
   +- Exchange (123)
      +- * HashAggregate (122)
         +- Union (121)
            :- * HashAggregate (100)
            :  +- Exchange (99)
            :     +- * HashAggregate (98)
            :        +- Union (97)
            :           :- * Filter (66)
            :           :  +- * HashAggregate (65)
            :           :     +- Exchange (64)
            :           :        +- * HashAggregate (63)
            :           :           +- * Project (62)
            :           :              +- * BroadcastHashJoin Inner BuildRight (61)
            :           :                 :- * Project (59)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (58)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (51)
            :           :                 :     :  :- * Filter (3)
            :           :                 :     :  :  +- * ColumnarToRow (2)
            :           :                 :     :  :     +- Scan parquet spark_catalog.default.store_sales (1)
            :           :                 :     :  +- BroadcastExchange (50)
            :           :                 :     :     +- * Project (49)
            :           :                 :     :        +- * BroadcastHashJoin Inner BuildRight (48)
            :           :                 :     :           :- * Filter (6)
            :           :                 :     :           :  +- * ColumnarToRow (5)
            :           :                 :     :           :     +- Scan parquet spark_catalog.default.item (4)
            :           :                 :     :           +- BroadcastExchange (47)
            :           :                 :     :              +- * BroadcastHashJoin LeftSemi BuildRight (46)
            :           :                 :     :                 :- * HashAggregate (35)
            :           :                 :     :                 :  +- Exchange (34)
            :           :                 :     :                 :     +- * HashAggregate (33)
            :           :                 :     :                 :        +- * Project (32)
            :           :                 :     :                 :           +- * BroadcastHashJoin Inner BuildRight (31)
            :           :                 :     :                 :              :- * Project (29)
            :           :                 :     :                 :              :  +- * BroadcastHashJoin Inner BuildRight (28)
            :           :                 :     :                 :              :     :- * Filter (9)
            :           :                 :     :                 :              :     :  +- * ColumnarToRow (8)
            :           :                 :     :                 :              :     :     +- Scan parquet spark_catalog.default.store_sales (7)
            :           :                 :     :                 :              :     +- BroadcastExchange (27)
            :           :                 :     :                 :              :        +- * BroadcastHashJoin LeftSemi BuildRight (26)
            :           :                 :     :                 :              :           :- * Filter (12)
            :           :                 :     :                 :              :           :  +- * ColumnarToRow (11)
            :           :                 :     :                 :              :           :     +- Scan parquet spark_catalog.default.item (10)
            :           :                 :     :                 :              :           +- BroadcastExchange (25)
            :           :                 :     :                 :              :              +- * Project (24)
            :           :                 :     :                 :              :                 +- * BroadcastHashJoin Inner BuildRight (23)
            :           :                 :     :                 :              :                    :- * Project (21)
            :           :                 :     :                 :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
            :           :                 :     :                 :              :                    :     :- * Filter (15)
            :           :                 :     :                 :              :                    :     :  +- * ColumnarToRow (14)
            :           :                 :     :                 :              :                    :     :     +- Scan parquet spark_catalog.default.catalog_sales (13)
            :           :                 :     :                 :              :                    :     +- BroadcastExchange (19)
            :           :                 :     :                 :              :                    :        +- * Filter (18)
            :           :                 :     :                 :              :                    :           +- * ColumnarToRow (17)
            :           :                 :     :                 :              :                    :              +- Scan parquet spark_catalog.default.item (16)
            :           :                 :     :                 :              :                    +- ReusedExchange (22)
            :           :                 :     :                 :              +- ReusedExchange (30)
            :           :                 :     :                 +- BroadcastExchange (45)
            :           :                 :     :                    +- * Project (44)
            :           :                 :     :                       +- * BroadcastHashJoin Inner BuildRight (43)
            :           :                 :     :                          :- * Project (41)
            :           :                 :     :                          :  +- * BroadcastHashJoin Inner BuildRight (40)
            :           :                 :     :                          :     :- * Filter (38)
            :           :                 :     :                          :     :  +- * ColumnarToRow (37)
            :           :                 :     :                          :     :     +- Scan parquet spark_catalog.default.web_sales (36)
            :           :                 :     :                          :     +- ReusedExchange (39)
            :           :                 :     :                          +- ReusedExchange (42)
            :           :                 :     +- BroadcastExchange (57)
            :           :                 :        +- * BroadcastHashJoin LeftSemi BuildRight (56)
            :           :                 :           :- * Filter (54)
            :           :                 :           :  +- * ColumnarToRow (53)
            :           :                 :           :     +- Scan parquet spark_catalog.default.item (52)
            :           :                 :           +- ReusedExchange (55)
            :           :                 +- ReusedExchange (60)
            :           :- * Filter (81)
            :           :  +- * HashAggregate (80)
            :           :     +- Exchange (79)
            :           :        +- * HashAggregate (78)
            :           :           +- * Project (77)
            :           :              +- * BroadcastHashJoin Inner BuildRight (76)
            :           :                 :- * Project (74)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (73)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (71)
            :           :                 :     :  :- * Filter (69)
            :           :                 :     :  :  +- * ColumnarToRow (68)
            :           :                 :     :  :     +- Scan parquet spark_catalog.default.catalog_sales (67)
            :           :                 :     :  +- ReusedExchange (70)
            :           :                 :     +- ReusedExchange (72)
            :           :                 +- ReusedExchange (75)
            :           +- * Filter (96)
            :              +- * HashAggregate (95)
            :                 +- Exchange (94)
            :                    +- * HashAggregate (93)
            :                       +- * Project (92)
            :                          +- * BroadcastHashJoin Inner BuildRight (91)
            :                             :- * Project (89)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (88)
            :                             :     :- * BroadcastHashJoin LeftSemi BuildRight (86)
            :                             :     :  :- * Filter (84)
            :                             :     :  :  +- * ColumnarToRow (83)
            :                             :     :  :     +- Scan parquet spark_catalog.default.web_sales (82)
            :                             :     :  +- ReusedExchange (85)
            :                             :     +- ReusedExchange (87)
            :                             +- ReusedExchange (90)
            :- * HashAggregate (105)
            :  +- Exchange (104)
            :     +- * HashAggregate (103)
            :        +- * HashAggregate (102)
            :           +- ReusedExchange (101)
            :- * HashAggregate (110)
            :  +- Exchange (109)
            :     +- * HashAggregate (108)
            :        +- * HashAggregate (107)
            :           +- ReusedExchange (106)
            :- * HashAggregate (115)
            :  +- Exchange (114)
            :     +- * HashAggregate (113)
            :        +- * HashAggregate (112)
            :           +- ReusedExchange (111)
            +- * HashAggregate (120)
               +- Exchange (119)
                  +- * HashAggregate (118)
                     +- * HashAggregate (117)
                        +- ReusedExchange (116)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(13) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(16) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Condition : isnotnull(i_item_sk#19)

(19) BroadcastExchange
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#19]
Join type: Inner
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(22) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#23]

(23) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#23]
Join type: Inner
Join condition: None

(24) Project [codegen id : 3]
Output [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Input [5]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22, d_date_sk#23]

(25) BroadcastExchange
Input [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=2]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#20, 0), isnull(i_brand_id#20), coalesce(i_class_id#21, 0), isnull(i_class_id#21), coalesce(i_category_id#22, 0), isnull(i_category_id#22)]
Join type: LeftSemi
Join condition: None

(27) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(29) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(30) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#24]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#25, i_class_id#15 AS class_id#26, i_category_id#16 AS category_id#27]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#24]

(33) HashAggregate [codegen id : 6]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(34) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(brand_id#25, class_id#26, category_id#27, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(35) HashAggregate [codegen id : 10]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(36) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#29), dynamicpruningexpression(ws_sold_date_sk#29 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(37) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]

(38) Filter [codegen id : 9]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Condition : isnotnull(ws_item_sk#28)

(39) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#30, i_brand_id#31, i_class_id#32, i_category_id#33]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#28]
Right keys [1]: [i_item_sk#30]
Join type: Inner
Join condition: None

(41) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#29, i_brand_id#31, i_class_id#32, i_category_id#33]
Input [6]: [ws_item_sk#28, ws_sold_date_sk#29, i_item_sk#30, i_brand_id#31, i_class_id#32, i_category_id#33]

(42) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#34]

(43) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#29]
Right keys [1]: [d_date_sk#34]
Join type: Inner
Join condition: None

(44) Project [codegen id : 9]
Output [3]: [i_brand_id#31, i_class_id#32, i_category_id#33]
Input [5]: [ws_sold_date_sk#29, i_brand_id#31, i_class_id#32, i_category_id#33, d_date_sk#34]

(45) BroadcastExchange
Input [3]: [i_brand_id#31, i_class_id#32, i_category_id#33]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=5]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27)]
Right keys [6]: [coalesce(i_brand_id#31, 0), isnull(i_brand_id#31), coalesce(i_class_id#32, 0), isnull(i_class_id#32), coalesce(i_category_id#33, 0), isnull(i_category_id#33)]
Join type: LeftSemi
Join condition: None

(47) BroadcastExchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=6]

(48) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#25, class_id#26, category_id#27]
Join type: Inner
Join condition: None

(49) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#35]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#25, class_id#26, category_id#27]

(50) BroadcastExchange
Input [1]: [ss_item_sk#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(51) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(52) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(53) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(54) Filter [codegen id : 23]
Input [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]
Condition : isnotnull(i_item_sk#36)

(55) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#35]

(56) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#36]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(57) BroadcastExchange
Input [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(58) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#36]
Join type: Inner
Join condition: None

(59) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#37, i_class_id#38, i_category_id#39]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(60) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#40]

(61) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#40]
Join type: Inner
Join condition: None

(62) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#37, i_class_id#38, i_category_id#39]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#37, i_class_id#38, i_category_id#39, d_date_sk#40]

(63) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#37, i_class_id#38, i_category_id#39]
Keys [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#41, isEmpty#42, count#43]
Results [6]: [i_brand_id#37, i_class_id#38, i_category_id#39, sum#44, isEmpty#45, count#46]

(64) Exchange
Input [6]: [i_brand_id#37, i_class_id#38, i_category_id#39, sum#44, isEmpty#45, count#46]
Arguments: hashpartitioning(i_brand_id#37, i_class_id#38, i_category_id#39, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(65) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#37, i_class_id#38, i_category_id#39, sum#44, isEmpty#45, count#46]
Keys [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47, count(1)#48]
Results [6]: [store AS channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47 AS sales#50, count(1)#48 AS number_sales#51]

(66) Filter [codegen id : 26]
Input [6]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sales#50, number_sales#51]
Condition : (isnotnull(sales#50) AND (cast(sales#50 as decimal(32,6)) > cast(Subquery scalar-subquery#52, [id=#10] as decimal(32,6))))

(67) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#53, cs_quantity#54, cs_list_price#55, cs_sold_date_sk#56]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#56), dynamicpruningexpression(cs_sold_date_sk#56 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(68) ColumnarToRow [codegen id : 51]
Input [4]: [cs_item_sk#53, cs_quantity#54, cs_list_price#55, cs_sold_date_sk#56]

(69) Filter [codegen id : 51]
Input [4]: [cs_item_sk#53, cs_quantity#54, cs_list_price#55, cs_sold_date_sk#56]
Condition : isnotnull(cs_item_sk#53)

(70) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#57]

(71) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#53]
Right keys [1]: [ss_item_sk#57]
Join type: LeftSemi
Join condition: None

(72) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#58, i_brand_id#59, i_class_id#60, i_category_id#61]

(73) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#53]
Right keys [1]: [i_item_sk#58]
Join type: Inner
Join condition: None

(74) Project [codegen id : 51]
Output [6]: [cs_quantity#54, cs_list_price#55, cs_sold_date_sk#56, i_brand_id#59, i_class_id#60, i_category_id#61]
Input [8]: [cs_item_sk#53, cs_quantity#54, cs_list_price#55, cs_sold_date_sk#56, i_item_sk#58, i_brand_id#59, i_class_id#60, i_category_id#61]

(75) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#62]

(76) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#56]
Right keys [1]: [d_date_sk#62]
Join type: Inner
Join condition: None

(77) Project [codegen id : 51]
Output [5]: [cs_quantity#54, cs_list_price#55, i_brand_id#59, i_class_id#60, i_category_id#61]
Input [7]: [cs_quantity#54, cs_list_price#55, cs_sold_date_sk#56, i_brand_id#59, i_class_id#60, i_category_id#61, d_date_sk#62]

(78) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#54, cs_list_price#55, i_brand_id#59, i_class_id#60, i_category_id#61]
Keys [3]: [i_brand_id#59, i_class_id#60, i_category_id#61]
Functions [2]: [partial_sum((cast(cs_quantity#54 as decimal(10,0)) * cs_list_price#55)), partial_count(1)]
Aggregate Attributes [3]: [sum#63, isEmpty#64, count#65]
Results [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sum#66, isEmpty#67, count#68]

(79) Exchange
Input [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sum#66, isEmpty#67, count#68]
Arguments: hashpartitioning(i_brand_id#59, i_class_id#60, i_category_id#61, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(80) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sum#66, isEmpty#67, count#68]
Keys [3]: [i_brand_id#59, i_class_id#60, i_category_id#61]
Functions [2]: [sum((cast(cs_quantity#54 as decimal(10,0)) * cs_list_price#55)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#54 as decimal(10,0)) * cs_list_price#55))#69, count(1)#70]
Results [6]: [catalog AS channel#71, i_brand_id#59, i_class_id#60, i_category_id#61, sum((cast(cs_quantity#54 as decimal(10,0)) * cs_list_price#55))#69 AS sales#72, count(1)#70 AS number_sales#73]

(81) Filter [codegen id : 52]
Input [6]: [channel#71, i_brand_id#59, i_class_id#60, i_category_id#61, sales#72, number_sales#73]
Condition : (isnotnull(sales#72) AND (cast(sales#72 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#10] as decimal(32,6))))

(82) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#77), dynamicpruningexpression(ws_sold_date_sk#77 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(83) ColumnarToRow [codegen id : 77]
Input [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]

(84) Filter [codegen id : 77]
Input [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]
Condition : isnotnull(ws_item_sk#74)

(85) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#78]

(86) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#74]
Right keys [1]: [ss_item_sk#78]
Join type: LeftSemi
Join condition: None

(87) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(88) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#74]
Right keys [1]: [i_item_sk#79]
Join type: Inner
Join condition: None

(89) Project [codegen id : 77]
Output [6]: [ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77, i_brand_id#80, i_class_id#81, i_category_id#82]
Input [8]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77, i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(90) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#83]

(91) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#77]
Right keys [1]: [d_date_sk#83]
Join type: Inner
Join condition: None

(92) Project [codegen id : 77]
Output [5]: [ws_quantity#75, ws_list_price#76, i_brand_id#80, i_class_id#81, i_category_id#82]
Input [7]: [ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77, i_brand_id#80, i_class_id#81, i_category_id#82, d_date_sk#83]

(93) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#75, ws_list_price#76, i_brand_id#80, i_class_id#81, i_category_id#82]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [partial_sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76)), partial_count(1)]
Aggregate Attributes [3]: [sum#84, isEmpty#85, count#86]
Results [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#87, isEmpty#88, count#89]

(94) Exchange
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#87, isEmpty#88, count#89]
Arguments: hashpartitioning(i_brand_id#80, i_class_id#81, i_category_id#82, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(95) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#87, isEmpty#88, count#89]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76))#90, count(1)#91]
Results [6]: [web AS channel#92, i_brand_id#80, i_class_id#81, i_category_id#82, sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76))#90 AS sales#93, count(1)#91 AS number_sales#94]

(96) Filter [codegen id : 78]
Input [6]: [channel#92, i_brand_id#80, i_class_id#81, i_category_id#82, sales#93, number_sales#94]
Condition : (isnotnull(sales#93) AND (cast(sales#93 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#10] as decimal(32,6))))

(97) Union

(98) HashAggregate [codegen id : 79]
Input [6]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sales#50, number_sales#51]
Keys [4]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39]
Functions [2]: [partial_sum(sales#50), partial_sum(number_sales#51)]
Aggregate Attributes [3]: [sum#95, isEmpty#96, sum#97]
Results [7]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum#98, isEmpty#99, sum#100]

(99) Exchange
Input [7]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum#98, isEmpty#99, sum#100]
Arguments: hashpartitioning(channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(100) HashAggregate [codegen id : 80]
Input [7]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum#98, isEmpty#99, sum#100]
Keys [4]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39]
Functions [2]: [sum(sales#50), sum(number_sales#51)]
Aggregate Attributes [2]: [sum(sales#50)#101, sum(number_sales#51)#102]
Results [6]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum(sales#50)#101 AS sum_sales#103, sum(number_sales#51)#102 AS number_sales#104]

(101) ReusedExchange [Reuses operator id: 99]
Output [7]: [channel#105, i_brand_id#106, i_class_id#107, i_category_id#108, sum#109, isEmpty#110, sum#111]

(102) HashAggregate [codegen id : 160]
Input [7]: [channel#105, i_brand_id#106, i_class_id#107, i_category_id#108, sum#109, isEmpty#110, sum#111]
Keys [4]: [channel#105, i_brand_id#106, i_class_id#107, i_category_id#108]
Functions [2]: [sum(sales#112), sum(number_sales#113)]
Aggregate Attributes [2]: [sum(sales#112)#101, sum(number_sales#113)#102]
Results [5]: [channel#105, i_brand_id#106, i_class_id#107, sum(sales#112)#101 AS sum_sales#114, sum(number_sales#113)#102 AS number_sales#115]

(103) HashAggregate [codegen id : 160]
Input [5]: [channel#105, i_brand_id#106, i_class_id#107, sum_sales#114, number_sales#115]
Keys [3]: [channel#105, i_brand_id#106, i_class_id#107]
Functions [2]: [partial_sum(sum_sales#114), partial_sum(number_sales#115)]
Aggregate Attributes [3]: [sum#116, isEmpty#117, sum#118]
Results [6]: [channel#105, i_brand_id#106, i_class_id#107, sum#119, isEmpty#120, sum#121]

(104) Exchange
Input [6]: [channel#105, i_brand_id#106, i_class_id#107, sum#119, isEmpty#120, sum#121]
Arguments: hashpartitioning(channel#105, i_brand_id#106, i_class_id#107, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(105) HashAggregate [codegen id : 161]
Input [6]: [channel#105, i_brand_id#106, i_class_id#107, sum#119, isEmpty#120, sum#121]
Keys [3]: [channel#105, i_brand_id#106, i_class_id#107]
Functions [2]: [sum(sum_sales#114), sum(number_sales#115)]
Aggregate Attributes [2]: [sum(sum_sales#114)#122, sum(number_sales#115)#123]
Results [6]: [channel#105, i_brand_id#106, i_class_id#107, null AS i_category_id#124, sum(sum_sales#114)#122 AS sum(sum_sales)#125, sum(number_sales#115)#123 AS sum(number_sales)#126]

(106) ReusedExchange [Reuses operator id: 99]
Output [7]: [channel#127, i_brand_id#128, i_class_id#129, i_category_id#130, sum#131, isEmpty#132, sum#133]

(107) HashAggregate [codegen id : 241]
Input [7]: [channel#127, i_brand_id#128, i_class_id#129, i_category_id#130, sum#131, isEmpty#132, sum#133]
Keys [4]: [channel#127, i_brand_id#128, i_class_id#129, i_category_id#130]
Functions [2]: [sum(sales#134), sum(number_sales#135)]
Aggregate Attributes [2]: [sum(sales#134)#101, sum(number_sales#135)#102]
Results [4]: [channel#127, i_brand_id#128, sum(sales#134)#101 AS sum_sales#136, sum(number_sales#135)#102 AS number_sales#137]

(108) HashAggregate [codegen id : 241]
Input [4]: [channel#127, i_brand_id#128, sum_sales#136, number_sales#137]
Keys [2]: [channel#127, i_brand_id#128]
Functions [2]: [partial_sum(sum_sales#136), partial_sum(number_sales#137)]
Aggregate Attributes [3]: [sum#138, isEmpty#139, sum#140]
Results [5]: [channel#127, i_brand_id#128, sum#141, isEmpty#142, sum#143]

(109) Exchange
Input [5]: [channel#127, i_brand_id#128, sum#141, isEmpty#142, sum#143]
Arguments: hashpartitioning(channel#127, i_brand_id#128, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(110) HashAggregate [codegen id : 242]
Input [5]: [channel#127, i_brand_id#128, sum#141, isEmpty#142, sum#143]
Keys [2]: [channel#127, i_brand_id#128]
Functions [2]: [sum(sum_sales#136), sum(number_sales#137)]
Aggregate Attributes [2]: [sum(sum_sales#136)#144, sum(number_sales#137)#145]
Results [6]: [channel#127, i_brand_id#128, null AS i_class_id#146, null AS i_category_id#147, sum(sum_sales#136)#144 AS sum(sum_sales)#148, sum(number_sales#137)#145 AS sum(number_sales)#149]

(111) ReusedExchange [Reuses operator id: 99]
Output [7]: [channel#150, i_brand_id#151, i_class_id#152, i_category_id#153, sum#154, isEmpty#155, sum#156]

(112) HashAggregate [codegen id : 322]
Input [7]: [channel#150, i_brand_id#151, i_class_id#152, i_category_id#153, sum#154, isEmpty#155, sum#156]
Keys [4]: [channel#150, i_brand_id#151, i_class_id#152, i_category_id#153]
Functions [2]: [sum(sales#157), sum(number_sales#158)]
Aggregate Attributes [2]: [sum(sales#157)#101, sum(number_sales#158)#102]
Results [3]: [channel#150, sum(sales#157)#101 AS sum_sales#159, sum(number_sales#158)#102 AS number_sales#160]

(113) HashAggregate [codegen id : 322]
Input [3]: [channel#150, sum_sales#159, number_sales#160]
Keys [1]: [channel#150]
Functions [2]: [partial_sum(sum_sales#159), partial_sum(number_sales#160)]
Aggregate Attributes [3]: [sum#161, isEmpty#162, sum#163]
Results [4]: [channel#150, sum#164, isEmpty#165, sum#166]

(114) Exchange
Input [4]: [channel#150, sum#164, isEmpty#165, sum#166]
Arguments: hashpartitioning(channel#150, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(115) HashAggregate [codegen id : 323]
Input [4]: [channel#150, sum#164, isEmpty#165, sum#166]
Keys [1]: [channel#150]
Functions [2]: [sum(sum_sales#159), sum(number_sales#160)]
Aggregate Attributes [2]: [sum(sum_sales#159)#167, sum(number_sales#160)#168]
Results [6]: [channel#150, null AS i_brand_id#169, null AS i_class_id#170, null AS i_category_id#171, sum(sum_sales#159)#167 AS sum(sum_sales)#172, sum(number_sales#160)#168 AS sum(number_sales)#173]

(116) ReusedExchange [Reuses operator id: 99]
Output [7]: [channel#174, i_brand_id#175, i_class_id#176, i_category_id#177, sum#178, isEmpty#179, sum#180]

(117) HashAggregate [codegen id : 403]
Input [7]: [channel#174, i_brand_id#175, i_class_id#176, i_category_id#177, sum#178, isEmpty#179, sum#180]
Keys [4]: [channel#174, i_brand_id#175, i_class_id#176, i_category_id#177]
Functions [2]: [sum(sales#181), sum(number_sales#182)]
Aggregate Attributes [2]: [sum(sales#181)#101, sum(number_sales#182)#102]
Results [2]: [sum(sales#181)#101 AS sum_sales#183, sum(number_sales#182)#102 AS number_sales#184]

(118) HashAggregate [codegen id : 403]
Input [2]: [sum_sales#183, number_sales#184]
Keys: []
Functions [2]: [partial_sum(sum_sales#183), partial_sum(number_sales#184)]
Aggregate Attributes [3]: [sum#185, isEmpty#186, sum#187]
Results [3]: [sum#188, isEmpty#189, sum#190]

(119) Exchange
Input [3]: [sum#188, isEmpty#189, sum#190]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=17]

(120) HashAggregate [codegen id : 404]
Input [3]: [sum#188, isEmpty#189, sum#190]
Keys: []
Functions [2]: [sum(sum_sales#183), sum(number_sales#184)]
Aggregate Attributes [2]: [sum(sum_sales#183)#191, sum(number_sales#184)#192]
Results [6]: [null AS channel#193, null AS i_brand_id#194, null AS i_class_id#195, null AS i_category_id#196, sum(sum_sales#183)#191 AS sum(sum_sales)#197, sum(number_sales#184)#192 AS sum(number_sales)#198]

(121) Union

(122) HashAggregate [codegen id : 405]
Input [6]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum_sales#103, number_sales#104]
Keys [6]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum_sales#103, number_sales#104]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum_sales#103, number_sales#104]

(123) Exchange
Input [6]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum_sales#103, number_sales#104]
Arguments: hashpartitioning(channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum_sales#103, number_sales#104, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(124) HashAggregate [codegen id : 406]
Input [6]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum_sales#103, number_sales#104]
Keys [6]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum_sales#103, number_sales#104]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum_sales#103, number_sales#104]

(125) TakeOrderedAndProject
Input [6]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum_sales#103, number_sales#104]
Arguments: 100, [channel#49 ASC NULLS FIRST, i_brand_id#37 ASC NULLS FIRST, i_class_id#38 ASC NULLS FIRST, i_category_id#39 ASC NULLS FIRST], [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum_sales#103, number_sales#104]

===== Subqueries =====

Subquery:1 Hosting operator id = 66 Hosting Expression = Subquery scalar-subquery#52, [id=#10]
* HashAggregate (144)
+- Exchange (143)
   +- * HashAggregate (142)
      +- Union (141)
         :- * Project (130)
         :  +- * BroadcastHashJoin Inner BuildRight (129)
         :     :- * ColumnarToRow (127)
         :     :  +- Scan parquet spark_catalog.default.store_sales (126)
         :     +- ReusedExchange (128)
         :- * Project (135)
         :  +- * BroadcastHashJoin Inner BuildRight (134)
         :     :- * ColumnarToRow (132)
         :     :  +- Scan parquet spark_catalog.default.catalog_sales (131)
         :     +- ReusedExchange (133)
         +- * Project (140)
            +- * BroadcastHashJoin Inner BuildRight (139)
               :- * ColumnarToRow (137)
               :  +- Scan parquet spark_catalog.default.web_sales (136)
               +- ReusedExchange (138)


(126) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#199, ss_list_price#200, ss_sold_date_sk#201]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#201), dynamicpruningexpression(ss_sold_date_sk#201 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(127) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#199, ss_list_price#200, ss_sold_date_sk#201]

(128) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#202]

(129) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#201]
Right keys [1]: [d_date_sk#202]
Join type: Inner
Join condition: None

(130) Project [codegen id : 2]
Output [2]: [ss_quantity#199 AS quantity#203, ss_list_price#200 AS list_price#204]
Input [4]: [ss_quantity#199, ss_list_price#200, ss_sold_date_sk#201, d_date_sk#202]

(131) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#205, cs_list_price#206, cs_sold_date_sk#207]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#207), dynamicpruningexpression(cs_sold_date_sk#207 IN dynamicpruning#208)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(132) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#205, cs_list_price#206, cs_sold_date_sk#207]

(133) ReusedExchange [Reuses operator id: 149]
Output [1]: [d_date_sk#209]

(134) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#207]
Right keys [1]: [d_date_sk#209]
Join type: Inner
Join condition: None

(135) Project [codegen id : 4]
Output [2]: [cs_quantity#205 AS quantity#210, cs_list_price#206 AS list_price#211]
Input [4]: [cs_quantity#205, cs_list_price#206, cs_sold_date_sk#207, d_date_sk#209]

(136) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#212, ws_list_price#213, ws_sold_date_sk#214]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#214), dynamicpruningexpression(ws_sold_date_sk#214 IN dynamicpruning#208)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(137) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#212, ws_list_price#213, ws_sold_date_sk#214]

(138) ReusedExchange [Reuses operator id: 149]
Output [1]: [d_date_sk#215]

(139) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#214]
Right keys [1]: [d_date_sk#215]
Join type: Inner
Join condition: None

(140) Project [codegen id : 6]
Output [2]: [ws_quantity#212 AS quantity#216, ws_list_price#213 AS list_price#217]
Input [4]: [ws_quantity#212, ws_list_price#213, ws_sold_date_sk#214, d_date_sk#215]

(141) Union

(142) HashAggregate [codegen id : 7]
Input [2]: [quantity#203, list_price#204]
Keys: []
Functions [1]: [partial_avg((cast(quantity#203 as decimal(10,0)) * list_price#204))]
Aggregate Attributes [2]: [sum#218, count#219]
Results [2]: [sum#220, count#221]

(143) Exchange
Input [2]: [sum#220, count#221]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=19]

(144) HashAggregate [codegen id : 8]
Input [2]: [sum#220, count#221]
Keys: []
Functions [1]: [avg((cast(quantity#203 as decimal(10,0)) * list_price#204))]
Aggregate Attributes [1]: [avg((cast(quantity#203 as decimal(10,0)) * list_price#204))#222]
Results [1]: [avg((cast(quantity#203 as decimal(10,0)) * list_price#204))#222 AS average_sales#223]

Subquery:2 Hosting operator id = 126 Hosting Expression = ss_sold_date_sk#201 IN dynamicpruning#12

Subquery:3 Hosting operator id = 131 Hosting Expression = cs_sold_date_sk#207 IN dynamicpruning#208
BroadcastExchange (149)
+- * Project (148)
   +- * Filter (147)
      +- * ColumnarToRow (146)
         +- Scan parquet spark_catalog.default.date_dim (145)


(145) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#209, d_year#224]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(146) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#209, d_year#224]

(147) Filter [codegen id : 1]
Input [2]: [d_date_sk#209, d_year#224]
Condition : (((isnotnull(d_year#224) AND (d_year#224 >= 1998)) AND (d_year#224 <= 2000)) AND isnotnull(d_date_sk#209))

(148) Project [codegen id : 1]
Output [1]: [d_date_sk#209]
Input [2]: [d_date_sk#209, d_year#224]

(149) BroadcastExchange
Input [1]: [d_date_sk#209]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=20]

Subquery:4 Hosting operator id = 136 Hosting Expression = ws_sold_date_sk#214 IN dynamicpruning#208

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (154)
+- * Project (153)
   +- * Filter (152)
      +- * ColumnarToRow (151)
         +- Scan parquet spark_catalog.default.date_dim (150)


(150) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#40, d_year#225, d_moy#226]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(151) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#40, d_year#225, d_moy#226]

(152) Filter [codegen id : 1]
Input [3]: [d_date_sk#40, d_year#225, d_moy#226]
Condition : ((((isnotnull(d_year#225) AND isnotnull(d_moy#226)) AND (d_year#225 = 2000)) AND (d_moy#226 = 11)) AND isnotnull(d_date_sk#40))

(153) Project [codegen id : 1]
Output [1]: [d_date_sk#40]
Input [3]: [d_date_sk#40, d_year#225, d_moy#226]

(154) BroadcastExchange
Input [1]: [d_date_sk#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=21]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (159)
+- * Project (158)
   +- * Filter (157)
      +- * ColumnarToRow (156)
         +- Scan parquet spark_catalog.default.date_dim (155)


(155) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#24, d_year#227]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(156) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#227]

(157) Filter [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#227]
Condition : (((isnotnull(d_year#227) AND (d_year#227 >= 1999)) AND (d_year#227 <= 2001)) AND isnotnull(d_date_sk#24))

(158) Project [codegen id : 1]
Output [1]: [d_date_sk#24]
Input [2]: [d_date_sk#24, d_year#227]

(159) BroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=22]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#29 IN dynamicpruning#12

Subquery:9 Hosting operator id = 81 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#10]

Subquery:10 Hosting operator id = 67 Hosting Expression = cs_sold_date_sk#56 IN dynamicpruning#5

Subquery:11 Hosting operator id = 96 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#10]

Subquery:12 Hosting operator id = 82 Hosting Expression = ws_sold_date_sk#77 IN dynamicpruning#5


