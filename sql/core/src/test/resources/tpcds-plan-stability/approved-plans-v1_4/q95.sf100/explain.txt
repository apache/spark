== Physical Plan ==
* HashAggregate (57)
+- Exchange (56)
   +- * HashAggregate (55)
      +- * HashAggregate (54)
         +- * HashAggregate (53)
            +- * Project (52)
               +- * BroadcastHashJoin Inner BuildRight (51)
                  :- * Project (45)
                  :  +- * BroadcastHashJoin Inner BuildRight (44)
                  :     :- * Project (38)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (37)
                  :     :     :- * SortMergeJoin LeftSemi (31)
                  :     :     :  :- * SortMergeJoin LeftSemi (17)
                  :     :     :  :  :- * Sort (6)
                  :     :     :  :  :  +- Exchange (5)
                  :     :     :  :  :     +- * Project (4)
                  :     :     :  :  :        +- * Filter (3)
                  :     :     :  :  :           +- * ColumnarToRow (2)
                  :     :     :  :  :              +- Scan parquet spark_catalog.default.web_sales (1)
                  :     :     :  :  +- * Project (16)
                  :     :     :  :     +- * SortMergeJoin Inner (15)
                  :     :     :  :        :- * Sort (12)
                  :     :     :  :        :  +- Exchange (11)
                  :     :     :  :        :     +- * Project (10)
                  :     :     :  :        :        +- * Filter (9)
                  :     :     :  :        :           +- * ColumnarToRow (8)
                  :     :     :  :        :              +- Scan parquet spark_catalog.default.web_sales (7)
                  :     :     :  :        +- * Sort (14)
                  :     :     :  :           +- ReusedExchange (13)
                  :     :     :  +- * Project (30)
                  :     :     :     +- * SortMergeJoin Inner (29)
                  :     :     :        :- * SortMergeJoin Inner (26)
                  :     :     :        :  :- * Sort (23)
                  :     :     :        :  :  +- Exchange (22)
                  :     :     :        :  :     +- * Project (21)
                  :     :     :        :  :        +- * Filter (20)
                  :     :     :        :  :           +- * ColumnarToRow (19)
                  :     :     :        :  :              +- Scan parquet spark_catalog.default.web_returns (18)
                  :     :     :        :  +- * Sort (25)
                  :     :     :        :     +- ReusedExchange (24)
                  :     :     :        +- * Sort (28)
                  :     :     :           +- ReusedExchange (27)
                  :     :     +- BroadcastExchange (36)
                  :     :        +- * Project (35)
                  :     :           +- * Filter (34)
                  :     :              +- * ColumnarToRow (33)
                  :     :                 +- Scan parquet spark_catalog.default.customer_address (32)
                  :     +- BroadcastExchange (43)
                  :        +- * Project (42)
                  :           +- * Filter (41)
                  :              +- * ColumnarToRow (40)
                  :                 +- Scan parquet spark_catalog.default.web_site (39)
                  +- BroadcastExchange (50)
                     +- * Project (49)
                        +- * Filter (48)
                           +- * ColumnarToRow (47)
                              +- Scan parquet spark_catalog.default.date_dim (46)


(1) Scan parquet spark_catalog.default.web_sales
Output [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:int,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]

(3) Filter [codegen id : 1]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Condition : (((((isnotnull(ws_ship_date_sk#1) AND isnotnull(ws_ship_addr_sk#2)) AND isnotnull(ws_web_site_sk#3)) AND might_contain(Subquery scalar-subquery#8, [id=#9], xxhash64(ws_ship_addr_sk#2, 42))) AND might_contain(Subquery scalar-subquery#10, [id=#11], xxhash64(ws_web_site_sk#3, 42))) AND might_contain(Subquery scalar-subquery#12, [id=#13], xxhash64(ws_ship_date_sk#1, 42)))

(4) Project [codegen id : 1]
Output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]

(5) Exchange
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(6) Sort [codegen id : 2]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: [ws_order_number#4 ASC NULLS FIRST], false, 0

(7) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_warehouse_sk#14, ws_order_number#15, ws_sold_date_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(8) ColumnarToRow [codegen id : 3]
Input [3]: [ws_warehouse_sk#14, ws_order_number#15, ws_sold_date_sk#16]

(9) Filter [codegen id : 3]
Input [3]: [ws_warehouse_sk#14, ws_order_number#15, ws_sold_date_sk#16]
Condition : (isnotnull(ws_order_number#15) AND isnotnull(ws_warehouse_sk#14))

(10) Project [codegen id : 3]
Output [2]: [ws_warehouse_sk#14, ws_order_number#15]
Input [3]: [ws_warehouse_sk#14, ws_order_number#15, ws_sold_date_sk#16]

(11) Exchange
Input [2]: [ws_warehouse_sk#14, ws_order_number#15]
Arguments: hashpartitioning(ws_order_number#15, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(12) Sort [codegen id : 4]
Input [2]: [ws_warehouse_sk#14, ws_order_number#15]
Arguments: [ws_order_number#15 ASC NULLS FIRST], false, 0

(13) ReusedExchange [Reuses operator id: 11]
Output [2]: [ws_warehouse_sk#17, ws_order_number#18]

(14) Sort [codegen id : 6]
Input [2]: [ws_warehouse_sk#17, ws_order_number#18]
Arguments: [ws_order_number#18 ASC NULLS FIRST], false, 0

(15) SortMergeJoin [codegen id : 7]
Left keys [1]: [ws_order_number#15]
Right keys [1]: [ws_order_number#18]
Join type: Inner
Join condition: NOT (ws_warehouse_sk#14 = ws_warehouse_sk#17)

(16) Project [codegen id : 7]
Output [1]: [ws_order_number#15]
Input [4]: [ws_warehouse_sk#14, ws_order_number#15, ws_warehouse_sk#17, ws_order_number#18]

(17) SortMergeJoin [codegen id : 8]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#15]
Join type: LeftSemi
Join condition: None

(18) Scan parquet spark_catalog.default.web_returns
Output [2]: [wr_order_number#19, wr_returned_date_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number)]
ReadSchema: struct<wr_order_number:int>

(19) ColumnarToRow [codegen id : 9]
Input [2]: [wr_order_number#19, wr_returned_date_sk#20]

(20) Filter [codegen id : 9]
Input [2]: [wr_order_number#19, wr_returned_date_sk#20]
Condition : isnotnull(wr_order_number#19)

(21) Project [codegen id : 9]
Output [1]: [wr_order_number#19]
Input [2]: [wr_order_number#19, wr_returned_date_sk#20]

(22) Exchange
Input [1]: [wr_order_number#19]
Arguments: hashpartitioning(wr_order_number#19, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(23) Sort [codegen id : 10]
Input [1]: [wr_order_number#19]
Arguments: [wr_order_number#19 ASC NULLS FIRST], false, 0

(24) ReusedExchange [Reuses operator id: 11]
Output [2]: [ws_warehouse_sk#21, ws_order_number#22]

(25) Sort [codegen id : 12]
Input [2]: [ws_warehouse_sk#21, ws_order_number#22]
Arguments: [ws_order_number#22 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 13]
Left keys [1]: [wr_order_number#19]
Right keys [1]: [ws_order_number#22]
Join type: Inner
Join condition: None

(27) ReusedExchange [Reuses operator id: 11]
Output [2]: [ws_warehouse_sk#23, ws_order_number#24]

(28) Sort [codegen id : 15]
Input [2]: [ws_warehouse_sk#23, ws_order_number#24]
Arguments: [ws_order_number#24 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 16]
Left keys [1]: [ws_order_number#22]
Right keys [1]: [ws_order_number#24]
Join type: Inner
Join condition: NOT (ws_warehouse_sk#21 = ws_warehouse_sk#23)

(30) Project [codegen id : 16]
Output [1]: [wr_order_number#19]
Input [5]: [wr_order_number#19, ws_warehouse_sk#21, ws_order_number#22, ws_warehouse_sk#23, ws_order_number#24]

(31) SortMergeJoin [codegen id : 20]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [wr_order_number#19]
Join type: LeftSemi
Join condition: None

(32) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#25, ca_state#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(33) ColumnarToRow [codegen id : 17]
Input [2]: [ca_address_sk#25, ca_state#26]

(34) Filter [codegen id : 17]
Input [2]: [ca_address_sk#25, ca_state#26]
Condition : ((isnotnull(ca_state#26) AND (ca_state#26 = IL)) AND isnotnull(ca_address_sk#25))

(35) Project [codegen id : 17]
Output [1]: [ca_address_sk#25]
Input [2]: [ca_address_sk#25, ca_state#26]

(36) BroadcastExchange
Input [1]: [ca_address_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(37) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#25]
Join type: Inner
Join condition: None

(38) Project [codegen id : 20]
Output [5]: [ws_ship_date_sk#1, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ca_address_sk#25]

(39) Scan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#27, web_company_name#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri                                               ), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(40) ColumnarToRow [codegen id : 18]
Input [2]: [web_site_sk#27, web_company_name#28]

(41) Filter [codegen id : 18]
Input [2]: [web_site_sk#27, web_company_name#28]
Condition : ((isnotnull(web_company_name#28) AND (web_company_name#28 = pri                                               )) AND isnotnull(web_site_sk#27))

(42) Project [codegen id : 18]
Output [1]: [web_site_sk#27]
Input [2]: [web_site_sk#27, web_company_name#28]

(43) BroadcastExchange
Input [1]: [web_site_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(44) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_web_site_sk#3]
Right keys [1]: [web_site_sk#27]
Join type: Inner
Join condition: None

(45) Project [codegen id : 20]
Output [4]: [ws_ship_date_sk#1, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [6]: [ws_ship_date_sk#1, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, web_site_sk#27]

(46) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#29, d_date#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(47) ColumnarToRow [codegen id : 19]
Input [2]: [d_date_sk#29, d_date#30]

(48) Filter [codegen id : 19]
Input [2]: [d_date_sk#29, d_date#30]
Condition : (((isnotnull(d_date#30) AND (d_date#30 >= 1999-02-01)) AND (d_date#30 <= 1999-04-02)) AND isnotnull(d_date_sk#29))

(49) Project [codegen id : 19]
Output [1]: [d_date_sk#29]
Input [2]: [d_date_sk#29, d_date#30]

(50) BroadcastExchange
Input [1]: [d_date_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(51) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_ship_date_sk#1]
Right keys [1]: [d_date_sk#29]
Join type: Inner
Join condition: None

(52) Project [codegen id : 20]
Output [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [5]: [ws_ship_date_sk#1, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, d_date_sk#29]

(53) HashAggregate [codegen id : 20]
Input [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Keys [1]: [ws_order_number#4]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#5)), partial_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#31, sum(UnscaledValue(ws_net_profit#6))#32]
Results [3]: [ws_order_number#4, sum#33, sum#34]

(54) HashAggregate [codegen id : 20]
Input [3]: [ws_order_number#4, sum#33, sum#34]
Keys [1]: [ws_order_number#4]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#31, sum(UnscaledValue(ws_net_profit#6))#32]
Results [3]: [ws_order_number#4, sum#33, sum#34]

(55) HashAggregate [codegen id : 20]
Input [3]: [ws_order_number#4, sum#33, sum#34]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6)), partial_count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#31, sum(UnscaledValue(ws_net_profit#6))#32, count(ws_order_number#4)#35]
Results [3]: [sum#33, sum#34, count#36]

(56) Exchange
Input [3]: [sum#33, sum#34, count#36]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7]

(57) HashAggregate [codegen id : 21]
Input [3]: [sum#33, sum#34, count#36]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#5)), sum(UnscaledValue(ws_net_profit#6)), count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#31, sum(UnscaledValue(ws_net_profit#6))#32, count(ws_order_number#4)#35]
Results [3]: [count(ws_order_number#4)#35 AS order count #37, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#5))#31,17,2) AS total shipping cost #38, MakeDecimal(sum(UnscaledValue(ws_net_profit#6))#32,17,2) AS total net profit #39]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#8, [id=#9]
ObjectHashAggregate (64)
+- Exchange (63)
   +- ObjectHashAggregate (62)
      +- * Project (61)
         +- * Filter (60)
            +- * ColumnarToRow (59)
               +- Scan parquet spark_catalog.default.customer_address (58)


(58) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#25, ca_state#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(59) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#25, ca_state#26]

(60) Filter [codegen id : 1]
Input [2]: [ca_address_sk#25, ca_state#26]
Condition : ((isnotnull(ca_state#26) AND (ca_state#26 = IL)) AND isnotnull(ca_address_sk#25))

(61) Project [codegen id : 1]
Output [1]: [ca_address_sk#25]
Input [2]: [ca_address_sk#25, ca_state#26]

(62) ObjectHashAggregate
Input [1]: [ca_address_sk#25]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#25, 42), 17961, 333176, 0, 0)]
Aggregate Attributes [1]: [buf#40]
Results [1]: [buf#41]

(63) Exchange
Input [1]: [buf#41]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(64) ObjectHashAggregate
Input [1]: [buf#41]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#25, 42), 17961, 333176, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#25, 42), 17961, 333176, 0, 0)#42]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#25, 42), 17961, 333176, 0, 0)#42 AS bloomFilter#43]

Subquery:2 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#10, [id=#11]
ObjectHashAggregate (71)
+- Exchange (70)
   +- ObjectHashAggregate (69)
      +- * Project (68)
         +- * Filter (67)
            +- * ColumnarToRow (66)
               +- Scan parquet spark_catalog.default.web_site (65)


(65) Scan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#27, web_company_name#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri                                               ), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(66) ColumnarToRow [codegen id : 1]
Input [2]: [web_site_sk#27, web_company_name#28]

(67) Filter [codegen id : 1]
Input [2]: [web_site_sk#27, web_company_name#28]
Condition : ((isnotnull(web_company_name#28) AND (web_company_name#28 = pri                                               )) AND isnotnull(web_site_sk#27))

(68) Project [codegen id : 1]
Output [1]: [web_site_sk#27]
Input [2]: [web_site_sk#27, web_company_name#28]

(69) ObjectHashAggregate
Input [1]: [web_site_sk#27]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(web_site_sk#27, 42), 4, 144, 0, 0)]
Aggregate Attributes [1]: [buf#44]
Results [1]: [buf#45]

(70) Exchange
Input [1]: [buf#45]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(71) ObjectHashAggregate
Input [1]: [buf#45]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(web_site_sk#27, 42), 4, 144, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(web_site_sk#27, 42), 4, 144, 0, 0)#46]
Results [1]: [bloom_filter_agg(xxhash64(web_site_sk#27, 42), 4, 144, 0, 0)#46 AS bloomFilter#47]

Subquery:3 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#12, [id=#13]
ObjectHashAggregate (78)
+- Exchange (77)
   +- ObjectHashAggregate (76)
      +- * Project (75)
         +- * Filter (74)
            +- * ColumnarToRow (73)
               +- Scan parquet spark_catalog.default.date_dim (72)


(72) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#29, d_date#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(73) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#29, d_date#30]

(74) Filter [codegen id : 1]
Input [2]: [d_date_sk#29, d_date#30]
Condition : (((isnotnull(d_date#30) AND (d_date#30 >= 1999-02-01)) AND (d_date#30 <= 1999-04-02)) AND isnotnull(d_date_sk#29))

(75) Project [codegen id : 1]
Output [1]: [d_date_sk#29]
Input [2]: [d_date_sk#29, d_date#30]

(76) ObjectHashAggregate
Input [1]: [d_date_sk#29]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#29, 42), 73049, 1141755, 0, 0)]
Aggregate Attributes [1]: [buf#48]
Results [1]: [buf#49]

(77) Exchange
Input [1]: [buf#49]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(78) ObjectHashAggregate
Input [1]: [buf#49]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#29, 42), 73049, 1141755, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#29, 42), 73049, 1141755, 0, 0)#50]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#29, 42), 73049, 1141755, 0, 0)#50 AS bloomFilter#51]


