== Physical Plan ==
TakeOrderedAndProject (85)
+- * HashAggregate (84)
   +- Exchange (83)
      +- * HashAggregate (82)
         +- * Expand (81)
            +- Union (80)
               :- * Project (30)
               :  +- * BroadcastHashJoin LeftOuter BuildRight (29)
               :     :- * HashAggregate (15)
               :     :  +- Exchange (14)
               :     :     +- * HashAggregate (13)
               :     :        +- * Project (12)
               :     :           +- * BroadcastHashJoin Inner BuildRight (11)
               :     :              :- * Project (6)
               :     :              :  +- * BroadcastHashJoin Inner BuildRight (5)
               :     :              :     :- * Filter (3)
               :     :              :     :  +- * ColumnarToRow (2)
               :     :              :     :     +- Scan parquet spark_catalog.default.store_sales (1)
               :     :              :     +- ReusedExchange (4)
               :     :              +- BroadcastExchange (10)
               :     :                 +- * Filter (9)
               :     :                    +- * ColumnarToRow (8)
               :     :                       +- Scan parquet spark_catalog.default.store (7)
               :     +- BroadcastExchange (28)
               :        +- * HashAggregate (27)
               :           +- Exchange (26)
               :              +- * HashAggregate (25)
               :                 +- * Project (24)
               :                    +- * BroadcastHashJoin Inner BuildRight (23)
               :                       :- * Project (21)
               :                       :  +- * BroadcastHashJoin Inner BuildRight (20)
               :                       :     :- * Filter (18)
               :                       :     :  +- * ColumnarToRow (17)
               :                       :     :     +- Scan parquet spark_catalog.default.store_returns (16)
               :                       :     +- ReusedExchange (19)
               :                       +- ReusedExchange (22)
               :- * Project (49)
               :  +- * BroadcastNestedLoopJoin Inner BuildRight (48)
               :     :- * HashAggregate (38)
               :     :  +- Exchange (37)
               :     :     +- * HashAggregate (36)
               :     :        +- * Project (35)
               :     :           +- * BroadcastHashJoin Inner BuildRight (34)
               :     :              :- * ColumnarToRow (32)
               :     :              :  +- Scan parquet spark_catalog.default.catalog_sales (31)
               :     :              +- ReusedExchange (33)
               :     +- BroadcastExchange (47)
               :        +- * HashAggregate (46)
               :           +- Exchange (45)
               :              +- * HashAggregate (44)
               :                 +- * Project (43)
               :                    +- * BroadcastHashJoin Inner BuildRight (42)
               :                       :- * ColumnarToRow (40)
               :                       :  +- Scan parquet spark_catalog.default.catalog_returns (39)
               :                       +- ReusedExchange (41)
               +- * Project (79)
                  +- * BroadcastHashJoin LeftOuter BuildRight (78)
                     :- * HashAggregate (64)
                     :  +- Exchange (63)
                     :     +- * HashAggregate (62)
                     :        +- * Project (61)
                     :           +- * BroadcastHashJoin Inner BuildRight (60)
                     :              :- * Project (55)
                     :              :  +- * BroadcastHashJoin Inner BuildRight (54)
                     :              :     :- * Filter (52)
                     :              :     :  +- * ColumnarToRow (51)
                     :              :     :     +- Scan parquet spark_catalog.default.web_sales (50)
                     :              :     +- ReusedExchange (53)
                     :              +- BroadcastExchange (59)
                     :                 +- * Filter (58)
                     :                    +- * ColumnarToRow (57)
                     :                       +- Scan parquet spark_catalog.default.web_page (56)
                     +- BroadcastExchange (77)
                        +- * HashAggregate (76)
                           +- Exchange (75)
                              +- * HashAggregate (74)
                                 +- * Project (73)
                                    +- * BroadcastHashJoin Inner BuildRight (72)
                                       :- * Project (70)
                                       :  +- * BroadcastHashJoin Inner BuildRight (69)
                                       :     :- * Filter (67)
                                       :     :  +- * ColumnarToRow (66)
                                       :     :     +- Scan parquet spark_catalog.default.web_returns (65)
                                       :     +- ReusedExchange (68)
                                       +- ReusedExchange (71)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 3]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(4) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(6) Project [codegen id : 3]
Output [3]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]
Input [5]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4, d_date_sk#6]

(7) Scan parquet spark_catalog.default.store
Output [1]: [s_store_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(8) ColumnarToRow [codegen id : 2]
Input [1]: [s_store_sk#7]

(9) Filter [codegen id : 2]
Input [1]: [s_store_sk#7]
Condition : isnotnull(s_store_sk#7)

(10) BroadcastExchange
Input [1]: [s_store_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#7]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#7]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#7]

(13) HashAggregate [codegen id : 3]
Input [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#7]
Keys [1]: [s_store_sk#7]
Functions [2]: [partial_sum(UnscaledValue(ss_ext_sales_price#2)), partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum#8, sum#9]
Results [3]: [s_store_sk#7, sum#10, sum#11]

(14) Exchange
Input [3]: [s_store_sk#7, sum#10, sum#11]
Arguments: hashpartitioning(s_store_sk#7, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 8]
Input [3]: [s_store_sk#7, sum#10, sum#11]
Keys [1]: [s_store_sk#7]
Functions [2]: [sum(UnscaledValue(ss_ext_sales_price#2)), sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_ext_sales_price#2))#12, sum(UnscaledValue(ss_net_profit#3))#13]
Results [3]: [s_store_sk#7, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#12,17,2) AS sales#14, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#13,17,2) AS profit#15]

(16) Scan parquet spark_catalog.default.store_returns
Output [4]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, sr_returned_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#19), dynamicpruningexpression(sr_returned_date_sk#19 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(17) ColumnarToRow [codegen id : 6]
Input [4]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, sr_returned_date_sk#19]

(18) Filter [codegen id : 6]
Input [4]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, sr_returned_date_sk#19]
Condition : isnotnull(sr_store_sk#16)

(19) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#20]

(20) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_returned_date_sk#19]
Right keys [1]: [d_date_sk#20]
Join type: Inner
Join condition: None

(21) Project [codegen id : 6]
Output [3]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18]
Input [5]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, sr_returned_date_sk#19, d_date_sk#20]

(22) ReusedExchange [Reuses operator id: 10]
Output [1]: [s_store_sk#21]

(23) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_store_sk#16]
Right keys [1]: [s_store_sk#21]
Join type: Inner
Join condition: None

(24) Project [codegen id : 6]
Output [3]: [sr_return_amt#17, sr_net_loss#18, s_store_sk#21]
Input [4]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, s_store_sk#21]

(25) HashAggregate [codegen id : 6]
Input [3]: [sr_return_amt#17, sr_net_loss#18, s_store_sk#21]
Keys [1]: [s_store_sk#21]
Functions [2]: [partial_sum(UnscaledValue(sr_return_amt#17)), partial_sum(UnscaledValue(sr_net_loss#18))]
Aggregate Attributes [2]: [sum#22, sum#23]
Results [3]: [s_store_sk#21, sum#24, sum#25]

(26) Exchange
Input [3]: [s_store_sk#21, sum#24, sum#25]
Arguments: hashpartitioning(s_store_sk#21, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(27) HashAggregate [codegen id : 7]
Input [3]: [s_store_sk#21, sum#24, sum#25]
Keys [1]: [s_store_sk#21]
Functions [2]: [sum(UnscaledValue(sr_return_amt#17)), sum(UnscaledValue(sr_net_loss#18))]
Aggregate Attributes [2]: [sum(UnscaledValue(sr_return_amt#17))#26, sum(UnscaledValue(sr_net_loss#18))#27]
Results [3]: [s_store_sk#21, MakeDecimal(sum(UnscaledValue(sr_return_amt#17))#26,17,2) AS returns#28, MakeDecimal(sum(UnscaledValue(sr_net_loss#18))#27,17,2) AS profit_loss#29]

(28) BroadcastExchange
Input [3]: [s_store_sk#21, returns#28, profit_loss#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(29) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [s_store_sk#7]
Right keys [1]: [s_store_sk#21]
Join type: LeftOuter
Join condition: None

(30) Project [codegen id : 8]
Output [5]: [sales#14, coalesce(returns#28, 0.00) AS returns#30, (profit#15 - coalesce(profit_loss#29, 0.00)) AS profit#31, store channel AS channel#32, s_store_sk#7 AS id#33]
Input [6]: [s_store_sk#7, sales#14, profit#15, s_store_sk#21, returns#28, profit_loss#29]

(31) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_call_center_sk#34, cs_ext_sales_price#35, cs_net_profit#36, cs_sold_date_sk#37]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#37), dynamicpruningexpression(cs_sold_date_sk#37 IN dynamicpruning#5)]
ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(32) ColumnarToRow [codegen id : 10]
Input [4]: [cs_call_center_sk#34, cs_ext_sales_price#35, cs_net_profit#36, cs_sold_date_sk#37]

(33) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#38]

(34) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#37]
Right keys [1]: [d_date_sk#38]
Join type: Inner
Join condition: None

(35) Project [codegen id : 10]
Output [3]: [cs_call_center_sk#34, cs_ext_sales_price#35, cs_net_profit#36]
Input [5]: [cs_call_center_sk#34, cs_ext_sales_price#35, cs_net_profit#36, cs_sold_date_sk#37, d_date_sk#38]

(36) HashAggregate [codegen id : 10]
Input [3]: [cs_call_center_sk#34, cs_ext_sales_price#35, cs_net_profit#36]
Keys [1]: [cs_call_center_sk#34]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_sales_price#35)), partial_sum(UnscaledValue(cs_net_profit#36))]
Aggregate Attributes [2]: [sum#39, sum#40]
Results [3]: [cs_call_center_sk#34, sum#41, sum#42]

(37) Exchange
Input [3]: [cs_call_center_sk#34, sum#41, sum#42]
Arguments: hashpartitioning(cs_call_center_sk#34, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(38) HashAggregate [codegen id : 14]
Input [3]: [cs_call_center_sk#34, sum#41, sum#42]
Keys [1]: [cs_call_center_sk#34]
Functions [2]: [sum(UnscaledValue(cs_ext_sales_price#35)), sum(UnscaledValue(cs_net_profit#36))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_sales_price#35))#43, sum(UnscaledValue(cs_net_profit#36))#44]
Results [3]: [cs_call_center_sk#34, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#35))#43,17,2) AS sales#45, MakeDecimal(sum(UnscaledValue(cs_net_profit#36))#44,17,2) AS profit#46]

(39) Scan parquet spark_catalog.default.catalog_returns
Output [3]: [cr_return_amount#47, cr_net_loss#48, cr_returned_date_sk#49]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#49), dynamicpruningexpression(cr_returned_date_sk#49 IN dynamicpruning#5)]
ReadSchema: struct<cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(40) ColumnarToRow [codegen id : 12]
Input [3]: [cr_return_amount#47, cr_net_loss#48, cr_returned_date_sk#49]

(41) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#50]

(42) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cr_returned_date_sk#49]
Right keys [1]: [d_date_sk#50]
Join type: Inner
Join condition: None

(43) Project [codegen id : 12]
Output [2]: [cr_return_amount#47, cr_net_loss#48]
Input [4]: [cr_return_amount#47, cr_net_loss#48, cr_returned_date_sk#49, d_date_sk#50]

(44) HashAggregate [codegen id : 12]
Input [2]: [cr_return_amount#47, cr_net_loss#48]
Keys: []
Functions [2]: [partial_sum(UnscaledValue(cr_return_amount#47)), partial_sum(UnscaledValue(cr_net_loss#48))]
Aggregate Attributes [2]: [sum#51, sum#52]
Results [2]: [sum#53, sum#54]

(45) Exchange
Input [2]: [sum#53, sum#54]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(46) HashAggregate [codegen id : 13]
Input [2]: [sum#53, sum#54]
Keys: []
Functions [2]: [sum(UnscaledValue(cr_return_amount#47)), sum(UnscaledValue(cr_net_loss#48))]
Aggregate Attributes [2]: [sum(UnscaledValue(cr_return_amount#47))#55, sum(UnscaledValue(cr_net_loss#48))#56]
Results [2]: [MakeDecimal(sum(UnscaledValue(cr_return_amount#47))#55,17,2) AS returns#57, MakeDecimal(sum(UnscaledValue(cr_net_loss#48))#56,17,2) AS profit_loss#58]

(47) BroadcastExchange
Input [2]: [returns#57, profit_loss#58]
Arguments: IdentityBroadcastMode, [plan_id=7]

(48) BroadcastNestedLoopJoin [codegen id : 14]
Join type: Inner
Join condition: None

(49) Project [codegen id : 14]
Output [5]: [sales#45, returns#57, (profit#46 - profit_loss#58) AS profit#59, catalog channel AS channel#60, cs_call_center_sk#34 AS id#61]
Input [5]: [cs_call_center_sk#34, sales#45, profit#46, returns#57, profit_loss#58]

(50) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_web_page_sk#62, ws_ext_sales_price#63, ws_net_profit#64, ws_sold_date_sk#65]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#65), dynamicpruningexpression(ws_sold_date_sk#65 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_web_page_sk)]
ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(51) ColumnarToRow [codegen id : 17]
Input [4]: [ws_web_page_sk#62, ws_ext_sales_price#63, ws_net_profit#64, ws_sold_date_sk#65]

(52) Filter [codegen id : 17]
Input [4]: [ws_web_page_sk#62, ws_ext_sales_price#63, ws_net_profit#64, ws_sold_date_sk#65]
Condition : isnotnull(ws_web_page_sk#62)

(53) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#66]

(54) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#65]
Right keys [1]: [d_date_sk#66]
Join type: Inner
Join condition: None

(55) Project [codegen id : 17]
Output [3]: [ws_web_page_sk#62, ws_ext_sales_price#63, ws_net_profit#64]
Input [5]: [ws_web_page_sk#62, ws_ext_sales_price#63, ws_net_profit#64, ws_sold_date_sk#65, d_date_sk#66]

(56) Scan parquet spark_catalog.default.web_page
Output [1]: [wp_web_page_sk#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(57) ColumnarToRow [codegen id : 16]
Input [1]: [wp_web_page_sk#67]

(58) Filter [codegen id : 16]
Input [1]: [wp_web_page_sk#67]
Condition : isnotnull(wp_web_page_sk#67)

(59) BroadcastExchange
Input [1]: [wp_web_page_sk#67]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(60) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_web_page_sk#62]
Right keys [1]: [wp_web_page_sk#67]
Join type: Inner
Join condition: None

(61) Project [codegen id : 17]
Output [3]: [ws_ext_sales_price#63, ws_net_profit#64, wp_web_page_sk#67]
Input [4]: [ws_web_page_sk#62, ws_ext_sales_price#63, ws_net_profit#64, wp_web_page_sk#67]

(62) HashAggregate [codegen id : 17]
Input [3]: [ws_ext_sales_price#63, ws_net_profit#64, wp_web_page_sk#67]
Keys [1]: [wp_web_page_sk#67]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_sales_price#63)), partial_sum(UnscaledValue(ws_net_profit#64))]
Aggregate Attributes [2]: [sum#68, sum#69]
Results [3]: [wp_web_page_sk#67, sum#70, sum#71]

(63) Exchange
Input [3]: [wp_web_page_sk#67, sum#70, sum#71]
Arguments: hashpartitioning(wp_web_page_sk#67, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(64) HashAggregate [codegen id : 22]
Input [3]: [wp_web_page_sk#67, sum#70, sum#71]
Keys [1]: [wp_web_page_sk#67]
Functions [2]: [sum(UnscaledValue(ws_ext_sales_price#63)), sum(UnscaledValue(ws_net_profit#64))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_sales_price#63))#72, sum(UnscaledValue(ws_net_profit#64))#73]
Results [3]: [wp_web_page_sk#67, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#63))#72,17,2) AS sales#74, MakeDecimal(sum(UnscaledValue(ws_net_profit#64))#73,17,2) AS profit#75]

(65) Scan parquet spark_catalog.default.web_returns
Output [4]: [wr_web_page_sk#76, wr_return_amt#77, wr_net_loss#78, wr_returned_date_sk#79]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#79), dynamicpruningexpression(wr_returned_date_sk#79 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(wr_web_page_sk)]
ReadSchema: struct<wr_web_page_sk:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(66) ColumnarToRow [codegen id : 20]
Input [4]: [wr_web_page_sk#76, wr_return_amt#77, wr_net_loss#78, wr_returned_date_sk#79]

(67) Filter [codegen id : 20]
Input [4]: [wr_web_page_sk#76, wr_return_amt#77, wr_net_loss#78, wr_returned_date_sk#79]
Condition : isnotnull(wr_web_page_sk#76)

(68) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#80]

(69) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [wr_returned_date_sk#79]
Right keys [1]: [d_date_sk#80]
Join type: Inner
Join condition: None

(70) Project [codegen id : 20]
Output [3]: [wr_web_page_sk#76, wr_return_amt#77, wr_net_loss#78]
Input [5]: [wr_web_page_sk#76, wr_return_amt#77, wr_net_loss#78, wr_returned_date_sk#79, d_date_sk#80]

(71) ReusedExchange [Reuses operator id: 59]
Output [1]: [wp_web_page_sk#81]

(72) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [wr_web_page_sk#76]
Right keys [1]: [wp_web_page_sk#81]
Join type: Inner
Join condition: None

(73) Project [codegen id : 20]
Output [3]: [wr_return_amt#77, wr_net_loss#78, wp_web_page_sk#81]
Input [4]: [wr_web_page_sk#76, wr_return_amt#77, wr_net_loss#78, wp_web_page_sk#81]

(74) HashAggregate [codegen id : 20]
Input [3]: [wr_return_amt#77, wr_net_loss#78, wp_web_page_sk#81]
Keys [1]: [wp_web_page_sk#81]
Functions [2]: [partial_sum(UnscaledValue(wr_return_amt#77)), partial_sum(UnscaledValue(wr_net_loss#78))]
Aggregate Attributes [2]: [sum#82, sum#83]
Results [3]: [wp_web_page_sk#81, sum#84, sum#85]

(75) Exchange
Input [3]: [wp_web_page_sk#81, sum#84, sum#85]
Arguments: hashpartitioning(wp_web_page_sk#81, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(76) HashAggregate [codegen id : 21]
Input [3]: [wp_web_page_sk#81, sum#84, sum#85]
Keys [1]: [wp_web_page_sk#81]
Functions [2]: [sum(UnscaledValue(wr_return_amt#77)), sum(UnscaledValue(wr_net_loss#78))]
Aggregate Attributes [2]: [sum(UnscaledValue(wr_return_amt#77))#86, sum(UnscaledValue(wr_net_loss#78))#87]
Results [3]: [wp_web_page_sk#81, MakeDecimal(sum(UnscaledValue(wr_return_amt#77))#86,17,2) AS returns#88, MakeDecimal(sum(UnscaledValue(wr_net_loss#78))#87,17,2) AS profit_loss#89]

(77) BroadcastExchange
Input [3]: [wp_web_page_sk#81, returns#88, profit_loss#89]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

(78) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [wp_web_page_sk#67]
Right keys [1]: [wp_web_page_sk#81]
Join type: LeftOuter
Join condition: None

(79) Project [codegen id : 22]
Output [5]: [sales#74, coalesce(returns#88, 0.00) AS returns#90, (profit#75 - coalesce(profit_loss#89, 0.00)) AS profit#91, web channel AS channel#92, wp_web_page_sk#67 AS id#93]
Input [6]: [wp_web_page_sk#67, sales#74, profit#75, wp_web_page_sk#81, returns#88, profit_loss#89]

(80) Union

(81) Expand [codegen id : 23]
Input [5]: [sales#14, returns#30, profit#31, channel#32, id#33]
Arguments: [[sales#14, returns#30, profit#31, channel#32, id#33, 0], [sales#14, returns#30, profit#31, channel#32, null, 1], [sales#14, returns#30, profit#31, null, null, 3]], [sales#14, returns#30, profit#31, channel#94, id#95, spark_grouping_id#96]

(82) HashAggregate [codegen id : 23]
Input [6]: [sales#14, returns#30, profit#31, channel#94, id#95, spark_grouping_id#96]
Keys [3]: [channel#94, id#95, spark_grouping_id#96]
Functions [3]: [partial_sum(sales#14), partial_sum(returns#30), partial_sum(profit#31)]
Aggregate Attributes [6]: [sum#97, isEmpty#98, sum#99, isEmpty#100, sum#101, isEmpty#102]
Results [9]: [channel#94, id#95, spark_grouping_id#96, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]

(83) Exchange
Input [9]: [channel#94, id#95, spark_grouping_id#96, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Arguments: hashpartitioning(channel#94, id#95, spark_grouping_id#96, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(84) HashAggregate [codegen id : 24]
Input [9]: [channel#94, id#95, spark_grouping_id#96, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Keys [3]: [channel#94, id#95, spark_grouping_id#96]
Functions [3]: [sum(sales#14), sum(returns#30), sum(profit#31)]
Aggregate Attributes [3]: [sum(sales#14)#109, sum(returns#30)#110, sum(profit#31)#111]
Results [5]: [channel#94, id#95, sum(sales#14)#109 AS sales#112, sum(returns#30)#110 AS returns#113, sum(profit#31)#111 AS profit#114]

(85) TakeOrderedAndProject
Input [5]: [channel#94, id#95, sales#112, returns#113, profit#114]
Arguments: 100, [channel#94 ASC NULLS FIRST, id#95 ASC NULLS FIRST], [channel#94, id#95, sales#112, returns#113, profit#114]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (90)
+- * Project (89)
   +- * Filter (88)
      +- * ColumnarToRow (87)
         +- Scan parquet spark_catalog.default.date_dim (86)


(86) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_date#115]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-03), LessThanOrEqual(d_date,2000-09-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(87) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_date#115]

(88) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_date#115]
Condition : (((isnotnull(d_date#115) AND (d_date#115 >= 2000-08-03)) AND (d_date#115 <= 2000-09-02)) AND isnotnull(d_date_sk#6))

(89) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_date#115]

(90) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:2 Hosting operator id = 16 Hosting Expression = sr_returned_date_sk#19 IN dynamicpruning#5

Subquery:3 Hosting operator id = 31 Hosting Expression = cs_sold_date_sk#37 IN dynamicpruning#5

Subquery:4 Hosting operator id = 39 Hosting Expression = cr_returned_date_sk#49 IN dynamicpruning#5

Subquery:5 Hosting operator id = 50 Hosting Expression = ws_sold_date_sk#65 IN dynamicpruning#5

Subquery:6 Hosting operator id = 65 Hosting Expression = wr_returned_date_sk#79 IN dynamicpruning#5


