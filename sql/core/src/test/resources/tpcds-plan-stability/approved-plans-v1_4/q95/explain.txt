== Physical Plan ==
* HashAggregate (55)
+- Exchange (54)
   +- * HashAggregate (53)
      +- * HashAggregate (52)
         +- * HashAggregate (51)
            +- * Project (50)
               +- * BroadcastHashJoin Inner BuildRight (49)
                  :- * Project (43)
                  :  +- * BroadcastHashJoin Inner BuildRight (42)
                  :     :- * Project (36)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (35)
                  :     :     :- * SortMergeJoin LeftSemi (29)
                  :     :     :  :- * Sort (19)
                  :     :     :  :  +- Exchange (18)
                  :     :     :  :     +- * BroadcastHashJoin LeftSemi BuildRight (17)
                  :     :     :  :        :- * Project (4)
                  :     :     :  :        :  +- * Filter (3)
                  :     :     :  :        :     +- * ColumnarToRow (2)
                  :     :     :  :        :        +- Scan parquet spark_catalog.default.web_sales (1)
                  :     :     :  :        +- BroadcastExchange (16)
                  :     :     :  :           +- * Project (15)
                  :     :     :  :              +- * BroadcastHashJoin Inner BuildRight (14)
                  :     :     :  :                 :- * Project (8)
                  :     :     :  :                 :  +- * Filter (7)
                  :     :     :  :                 :     +- * ColumnarToRow (6)
                  :     :     :  :                 :        +- Scan parquet spark_catalog.default.web_sales (5)
                  :     :     :  :                 +- BroadcastExchange (13)
                  :     :     :  :                    +- * Project (12)
                  :     :     :  :                       +- * Filter (11)
                  :     :     :  :                          +- * ColumnarToRow (10)
                  :     :     :  :                             +- Scan parquet spark_catalog.default.web_sales (9)
                  :     :     :  +- * Sort (28)
                  :     :     :     +- Exchange (27)
                  :     :     :        +- * Project (26)
                  :     :     :           +- * BroadcastHashJoin Inner BuildRight (25)
                  :     :     :              :- * Project (23)
                  :     :     :              :  +- * Filter (22)
                  :     :     :              :     +- * ColumnarToRow (21)
                  :     :     :              :        +- Scan parquet spark_catalog.default.web_returns (20)
                  :     :     :              +- ReusedExchange (24)
                  :     :     +- BroadcastExchange (34)
                  :     :        +- * Project (33)
                  :     :           +- * Filter (32)
                  :     :              +- * ColumnarToRow (31)
                  :     :                 +- Scan parquet spark_catalog.default.date_dim (30)
                  :     +- BroadcastExchange (41)
                  :        +- * Project (40)
                  :           +- * Filter (39)
                  :              +- * ColumnarToRow (38)
                  :                 +- Scan parquet spark_catalog.default.customer_address (37)
                  +- BroadcastExchange (48)
                     +- * Project (47)
                        +- * Filter (46)
                           +- * ColumnarToRow (45)
                              +- Scan parquet spark_catalog.default.web_site (44)


(1) Scan parquet spark_catalog.default.web_sales
Output [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:int,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]

(3) Filter [codegen id : 3]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Condition : ((isnotnull(ws_ship_date_sk#1) AND isnotnull(ws_ship_addr_sk#2)) AND isnotnull(ws_web_site_sk#3))

(4) Project [codegen id : 3]
Output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]

(5) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_warehouse_sk#8, ws_order_number#9, ws_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex []
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(6) ColumnarToRow [codegen id : 2]
Input [3]: [ws_warehouse_sk#8, ws_order_number#9, ws_sold_date_sk#10]

(7) Filter [codegen id : 2]
Input [3]: [ws_warehouse_sk#8, ws_order_number#9, ws_sold_date_sk#10]
Condition : (isnotnull(ws_order_number#9) AND isnotnull(ws_warehouse_sk#8))

(8) Project [codegen id : 2]
Output [2]: [ws_warehouse_sk#8, ws_order_number#9]
Input [3]: [ws_warehouse_sk#8, ws_order_number#9, ws_sold_date_sk#10]

(9) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_warehouse_sk#11, ws_order_number#12, ws_sold_date_sk#13]
Batched: true
Location: InMemoryFileIndex []
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(10) ColumnarToRow [codegen id : 1]
Input [3]: [ws_warehouse_sk#11, ws_order_number#12, ws_sold_date_sk#13]

(11) Filter [codegen id : 1]
Input [3]: [ws_warehouse_sk#11, ws_order_number#12, ws_sold_date_sk#13]
Condition : (isnotnull(ws_order_number#12) AND isnotnull(ws_warehouse_sk#11))

(12) Project [codegen id : 1]
Output [2]: [ws_warehouse_sk#11, ws_order_number#12]
Input [3]: [ws_warehouse_sk#11, ws_order_number#12, ws_sold_date_sk#13]

(13) BroadcastExchange
Input [2]: [ws_warehouse_sk#11, ws_order_number#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=1]

(14) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_order_number#9]
Right keys [1]: [ws_order_number#12]
Join type: Inner
Join condition: NOT (ws_warehouse_sk#8 = ws_warehouse_sk#11)

(15) Project [codegen id : 2]
Output [1]: [ws_order_number#9]
Input [4]: [ws_warehouse_sk#8, ws_order_number#9, ws_warehouse_sk#11, ws_order_number#12]

(16) BroadcastExchange
Input [1]: [ws_order_number#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#9]
Join type: LeftSemi
Join condition: None

(18) Exchange
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(19) Sort [codegen id : 4]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: [ws_order_number#4 ASC NULLS FIRST], false, 0

(20) Scan parquet spark_catalog.default.web_returns
Output [2]: [wr_order_number#14, wr_returned_date_sk#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number)]
ReadSchema: struct<wr_order_number:int>

(21) ColumnarToRow [codegen id : 7]
Input [2]: [wr_order_number#14, wr_returned_date_sk#15]

(22) Filter [codegen id : 7]
Input [2]: [wr_order_number#14, wr_returned_date_sk#15]
Condition : isnotnull(wr_order_number#14)

(23) Project [codegen id : 7]
Output [1]: [wr_order_number#14]
Input [2]: [wr_order_number#14, wr_returned_date_sk#15]

(24) ReusedExchange [Reuses operator id: 16]
Output [1]: [ws_order_number#16]

(25) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [wr_order_number#14]
Right keys [1]: [ws_order_number#16]
Join type: Inner
Join condition: None

(26) Project [codegen id : 7]
Output [1]: [wr_order_number#14]
Input [2]: [wr_order_number#14, ws_order_number#16]

(27) Exchange
Input [1]: [wr_order_number#14]
Arguments: hashpartitioning(wr_order_number#14, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(28) Sort [codegen id : 8]
Input [1]: [wr_order_number#14]
Arguments: [wr_order_number#14 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 12]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [wr_order_number#14]
Join type: LeftSemi
Join condition: None

(30) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#17, d_date#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(31) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#17, d_date#18]

(32) Filter [codegen id : 9]
Input [2]: [d_date_sk#17, d_date#18]
Condition : (((isnotnull(d_date#18) AND (d_date#18 >= 1999-02-01)) AND (d_date#18 <= 1999-04-02)) AND isnotnull(d_date_sk#17))

(33) Project [codegen id : 9]
Output [1]: [d_date_sk#17]
Input [2]: [d_date_sk#17, d_date#18]

(34) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(35) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_ship_date_sk#1]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(36) Project [codegen id : 12]
Output [5]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, d_date_sk#17]

(37) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#19, ca_state#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(38) ColumnarToRow [codegen id : 10]
Input [2]: [ca_address_sk#19, ca_state#20]

(39) Filter [codegen id : 10]
Input [2]: [ca_address_sk#19, ca_state#20]
Condition : ((isnotnull(ca_state#20) AND (ca_state#20 = IL)) AND isnotnull(ca_address_sk#19))

(40) Project [codegen id : 10]
Output [1]: [ca_address_sk#19]
Input [2]: [ca_address_sk#19, ca_state#20]

(41) BroadcastExchange
Input [1]: [ca_address_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(42) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#19]
Join type: Inner
Join condition: None

(43) Project [codegen id : 12]
Output [4]: [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [6]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ca_address_sk#19]

(44) Scan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#21, web_company_name#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri                                               ), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(45) ColumnarToRow [codegen id : 11]
Input [2]: [web_site_sk#21, web_company_name#22]

(46) Filter [codegen id : 11]
Input [2]: [web_site_sk#21, web_company_name#22]
Condition : ((isnotnull(web_company_name#22) AND (web_company_name#22 = pri                                               )) AND isnotnull(web_site_sk#21))

(47) Project [codegen id : 11]
Output [1]: [web_site_sk#21]
Input [2]: [web_site_sk#21, web_company_name#22]

(48) BroadcastExchange
Input [1]: [web_site_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(49) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_web_site_sk#3]
Right keys [1]: [web_site_sk#21]
Join type: Inner
Join condition: None

(50) Project [codegen id : 12]
Output [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [5]: [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, web_site_sk#21]

(51) HashAggregate [codegen id : 12]
Input [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Keys [1]: [ws_order_number#4]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#5)), partial_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#23, sum(UnscaledValue(ws_net_profit#6))#24]
Results [3]: [ws_order_number#4, sum#25, sum#26]

(52) HashAggregate [codegen id : 12]
Input [3]: [ws_order_number#4, sum#25, sum#26]
Keys [1]: [ws_order_number#4]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#23, sum(UnscaledValue(ws_net_profit#6))#24]
Results [3]: [ws_order_number#4, sum#25, sum#26]

(53) HashAggregate [codegen id : 12]
Input [3]: [ws_order_number#4, sum#25, sum#26]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6)), partial_count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#23, sum(UnscaledValue(ws_net_profit#6))#24, count(ws_order_number#4)#27]
Results [3]: [sum#25, sum#26, count#28]

(54) Exchange
Input [3]: [sum#25, sum#26, count#28]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(55) HashAggregate [codegen id : 13]
Input [3]: [sum#25, sum#26, count#28]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#5)), sum(UnscaledValue(ws_net_profit#6)), count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#23, sum(UnscaledValue(ws_net_profit#6))#24, count(ws_order_number#4)#27]
Results [3]: [count(ws_order_number#4)#27 AS order count #29, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#5))#23,17,2) AS total shipping cost #30, MakeDecimal(sum(UnscaledValue(ws_net_profit#6))#24,17,2) AS total net profit #31]

