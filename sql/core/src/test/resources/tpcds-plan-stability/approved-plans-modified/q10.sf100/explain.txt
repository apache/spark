== Physical Plan ==
TakeOrderedAndProject (48)
+- * HashAggregate (47)
   +- Exchange (46)
      +- * HashAggregate (45)
         +- * Project (44)
            +- * BroadcastHashJoin Inner BuildLeft (43)
               :- BroadcastExchange (39)
               :  +- * Project (38)
               :     +- * BroadcastHashJoin Inner BuildRight (37)
               :        :- * Project (31)
               :        :  +- * SortMergeJoin LeftSemi (30)
               :        :     :- * SortMergeJoin LeftSemi (21)
               :        :     :  :- * Sort (5)
               :        :     :  :  +- Exchange (4)
               :        :     :  :     +- * Filter (3)
               :        :     :  :        +- * ColumnarToRow (2)
               :        :     :  :           +- Scan parquet spark_catalog.default.customer (1)
               :        :     :  +- * Sort (20)
               :        :     :     +- Exchange (19)
               :        :     :        +- Union (18)
               :        :     :           :- * Project (11)
               :        :     :           :  +- * BroadcastHashJoin Inner BuildRight (10)
               :        :     :           :     :- * Filter (8)
               :        :     :           :     :  +- * ColumnarToRow (7)
               :        :     :           :     :     +- Scan parquet spark_catalog.default.web_sales (6)
               :        :     :           :     +- ReusedExchange (9)
               :        :     :           +- * Project (17)
               :        :     :              +- * BroadcastHashJoin Inner BuildRight (16)
               :        :     :                 :- * Filter (14)
               :        :     :                 :  +- * ColumnarToRow (13)
               :        :     :                 :     +- Scan parquet spark_catalog.default.catalog_sales (12)
               :        :     :                 +- ReusedExchange (15)
               :        :     +- * Sort (29)
               :        :        +- Exchange (28)
               :        :           +- * Project (27)
               :        :              +- * BroadcastHashJoin Inner BuildRight (26)
               :        :                 :- * Filter (24)
               :        :                 :  +- * ColumnarToRow (23)
               :        :                 :     +- Scan parquet spark_catalog.default.store_sales (22)
               :        :                 +- ReusedExchange (25)
               :        +- BroadcastExchange (36)
               :           +- * Project (35)
               :              +- * Filter (34)
               :                 +- * ColumnarToRow (33)
               :                    +- Scan parquet spark_catalog.default.customer_address (32)
               +- * Filter (42)
                  +- * ColumnarToRow (41)
                     +- Scan parquet spark_catalog.default.customer_demographics (40)


(1) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (((isnotnull(c_customer_sk#1) AND isnotnull(c_current_addr_sk#3)) AND isnotnull(c_current_cdemo_sk#2)) AND might_contain(Subquery scalar-subquery#4, [id=#1], xxhash64(c_current_addr_sk#3, 42)))

(4) Exchange
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#5, ws_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#6), dynamicpruningexpression(ws_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ws_bill_customer_sk#5, ws_sold_date_sk#6]

(8) Filter [codegen id : 4]
Input [2]: [ws_bill_customer_sk#5, ws_sold_date_sk#6]
Condition : isnotnull(ws_bill_customer_sk#5)

(9) ReusedExchange [Reuses operator id: 60]
Output [1]: [d_date_sk#8]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(11) Project [codegen id : 4]
Output [1]: [ws_bill_customer_sk#5 AS customer_sk#9]
Input [3]: [ws_bill_customer_sk#5, ws_sold_date_sk#6, d_date_sk#8]

(12) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_ship_customer_sk#10, cs_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#11), dynamicpruningexpression(cs_sold_date_sk#11 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(cs_ship_customer_sk)]
ReadSchema: struct<cs_ship_customer_sk:int>

(13) ColumnarToRow [codegen id : 6]
Input [2]: [cs_ship_customer_sk#10, cs_sold_date_sk#11]

(14) Filter [codegen id : 6]
Input [2]: [cs_ship_customer_sk#10, cs_sold_date_sk#11]
Condition : isnotnull(cs_ship_customer_sk#10)

(15) ReusedExchange [Reuses operator id: 60]
Output [1]: [d_date_sk#12]

(16) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#11]
Right keys [1]: [d_date_sk#12]
Join type: Inner
Join condition: None

(17) Project [codegen id : 6]
Output [1]: [cs_ship_customer_sk#10 AS customer_sk#13]
Input [3]: [cs_ship_customer_sk#10, cs_sold_date_sk#11, d_date_sk#12]

(18) Union

(19) Exchange
Input [1]: [customer_sk#9]
Arguments: hashpartitioning(customer_sk#9, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(20) Sort [codegen id : 7]
Input [1]: [customer_sk#9]
Arguments: [customer_sk#9 ASC NULLS FIRST], false, 0

(21) SortMergeJoin [codegen id : 8]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customer_sk#9]
Join type: LeftSemi
Join condition: None

(22) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#14, ss_sold_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#15), dynamicpruningexpression(ss_sold_date_sk#15 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(23) ColumnarToRow [codegen id : 10]
Input [2]: [ss_customer_sk#14, ss_sold_date_sk#15]

(24) Filter [codegen id : 10]
Input [2]: [ss_customer_sk#14, ss_sold_date_sk#15]
Condition : isnotnull(ss_customer_sk#14)

(25) ReusedExchange [Reuses operator id: 60]
Output [1]: [d_date_sk#16]

(26) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#15]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(27) Project [codegen id : 10]
Output [1]: [ss_customer_sk#14 AS customer_sk#17]
Input [3]: [ss_customer_sk#14, ss_sold_date_sk#15, d_date_sk#16]

(28) Exchange
Input [1]: [customer_sk#17]
Arguments: hashpartitioning(customer_sk#17, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(29) Sort [codegen id : 11]
Input [1]: [customer_sk#17]
Arguments: [customer_sk#17 ASC NULLS FIRST], false, 0

(30) SortMergeJoin [codegen id : 13]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customer_sk#17]
Join type: LeftSemi
Join condition: None

(31) Project [codegen id : 13]
Output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(32) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#18, ca_county#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Dona Ana County,Douglas County,Gaines County,Richland County,Walker County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(33) ColumnarToRow [codegen id : 12]
Input [2]: [ca_address_sk#18, ca_county#19]

(34) Filter [codegen id : 12]
Input [2]: [ca_address_sk#18, ca_county#19]
Condition : (ca_county#19 IN (Walker County,Richland County,Gaines County,Douglas County,Dona Ana County) AND isnotnull(ca_address_sk#18))

(35) Project [codegen id : 12]
Output [1]: [ca_address_sk#18]
Input [2]: [ca_address_sk#18, ca_county#19]

(36) BroadcastExchange
Input [1]: [ca_address_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(37) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#18]
Join type: Inner
Join condition: None

(38) Project [codegen id : 13]
Output [1]: [c_current_cdemo_sk#2]
Input [3]: [c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#18]

(39) BroadcastExchange
Input [1]: [c_current_cdemo_sk#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(40) Scan parquet spark_catalog.default.customer_demographics
Output [9]: [cd_demo_sk#20, cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(41) ColumnarToRow
Input [9]: [cd_demo_sk#20, cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]

(42) Filter
Input [9]: [cd_demo_sk#20, cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Condition : isnotnull(cd_demo_sk#20)

(43) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#20]
Join type: Inner
Join condition: None

(44) Project [codegen id : 14]
Output [8]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Input [10]: [c_current_cdemo_sk#2, cd_demo_sk#20, cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]

(45) HashAggregate [codegen id : 14]
Input [8]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Keys [8]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#29]
Results [9]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28, count#30]

(46) Exchange
Input [9]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28, count#30]
Arguments: hashpartitioning(cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(47) HashAggregate [codegen id : 15]
Input [9]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28, count#30]
Keys [8]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#31]
Results [14]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, count(1)#31 AS cnt1#32, cd_purchase_estimate#24, count(1)#31 AS cnt2#33, cd_credit_rating#25, count(1)#31 AS cnt3#34, cd_dep_count#26, count(1)#31 AS cnt4#35, cd_dep_employed_count#27, count(1)#31 AS cnt5#36, cd_dep_college_count#28, count(1)#31 AS cnt6#37]

(48) TakeOrderedAndProject
Input [14]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cnt1#32, cd_purchase_estimate#24, cnt2#33, cd_credit_rating#25, cnt3#34, cd_dep_count#26, cnt4#35, cd_dep_employed_count#27, cnt5#36, cd_dep_college_count#28, cnt6#37]
Arguments: 100, [cd_gender#21 ASC NULLS FIRST, cd_marital_status#22 ASC NULLS FIRST, cd_education_status#23 ASC NULLS FIRST, cd_purchase_estimate#24 ASC NULLS FIRST, cd_credit_rating#25 ASC NULLS FIRST, cd_dep_count#26 ASC NULLS FIRST, cd_dep_employed_count#27 ASC NULLS FIRST, cd_dep_college_count#28 ASC NULLS FIRST], [cd_gender#21, cd_marital_status#22, cd_education_status#23, cnt1#32, cd_purchase_estimate#24, cnt2#33, cd_credit_rating#25, cnt3#34, cd_dep_count#26, cnt4#35, cd_dep_employed_count#27, cnt5#36, cd_dep_college_count#28, cnt6#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#4, [id=#1]
ObjectHashAggregate (55)
+- Exchange (54)
   +- ObjectHashAggregate (53)
      +- * Project (52)
         +- * Filter (51)
            +- * ColumnarToRow (50)
               +- Scan parquet spark_catalog.default.customer_address (49)


(49) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#18, ca_county#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Dona Ana County,Douglas County,Gaines County,Richland County,Walker County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(50) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#18, ca_county#19]

(51) Filter [codegen id : 1]
Input [2]: [ca_address_sk#18, ca_county#19]
Condition : (ca_county#19 IN (Walker County,Richland County,Gaines County,Douglas County,Dona Ana County) AND isnotnull(ca_address_sk#18))

(52) Project [codegen id : 1]
Output [1]: [ca_address_sk#18]
Input [2]: [ca_address_sk#18, ca_county#19]

(53) ObjectHashAggregate
Input [1]: [ca_address_sk#18]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#18, 42), 2555, 57765, 0, 0)]
Aggregate Attributes [1]: [buf#38]
Results [1]: [buf#39]

(54) Exchange
Input [1]: [buf#39]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(55) ObjectHashAggregate
Input [1]: [buf#39]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#18, 42), 2555, 57765, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#18, 42), 2555, 57765, 0, 0)#40]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#18, 42), 2555, 57765, 0, 0)#40 AS bloomFilter#41]

Subquery:2 Hosting operator id = 6 Hosting Expression = ws_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (60)
+- * Project (59)
   +- * Filter (58)
      +- * ColumnarToRow (57)
         +- Scan parquet spark_catalog.default.date_dim (56)


(56) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#8, d_year#42, d_moy#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(57) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#8, d_year#42, d_moy#43]

(58) Filter [codegen id : 1]
Input [3]: [d_date_sk#8, d_year#42, d_moy#43]
Condition : (((((isnotnull(d_year#42) AND isnotnull(d_moy#43)) AND (d_year#42 = 2002)) AND (d_moy#43 >= 4)) AND (d_moy#43 <= 7)) AND isnotnull(d_date_sk#8))

(59) Project [codegen id : 1]
Output [1]: [d_date_sk#8]
Input [3]: [d_date_sk#8, d_year#42, d_moy#43]

(60) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:3 Hosting operator id = 12 Hosting Expression = cs_sold_date_sk#11 IN dynamicpruning#7

Subquery:4 Hosting operator id = 22 Hosting Expression = ss_sold_date_sk#15 IN dynamicpruning#7


