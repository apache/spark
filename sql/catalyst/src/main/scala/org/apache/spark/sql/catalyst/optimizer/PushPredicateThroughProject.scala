/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.sql.catalyst.optimizer

import org.apache.spark.sql.catalyst.expressions.{And, PredicateHelper}
import org.apache.spark.sql.catalyst.plans.logical.{Filter, LogicalPlan, Project}
import org.apache.spark.sql.catalyst.rules.Rule
import org.apache.spark.sql.catalyst.trees.TreePattern.{FILTER, PROJECT}

/**
 * Using With, we can perfectly push the filter along with the project, but if we actually create
 * the project in the end, there may be a risk of regression, because some rules cannot match the
 * filter using PhysicalOperation. This rule is added after rewrite With, which uses the cost model
 * to determine whether to push the predicate down through the project generated by With.
 */
object PushPredicateThroughProject extends Rule[LogicalPlan] with PredicateHelper {
  override def apply(plan: LogicalPlan): LogicalPlan = {
    val costThreshold = conf.pushPredicateThroughProjectCostThreshold
    plan.transformWithPruning(_.containsAllPatterns(FILTER, PROJECT)) {
      case filter @ Filter(condition, project @ Project(fields, grandChild))
        if fields.forall(_.deterministic) &&
          PushPredicateThroughNonJoin.canPushThroughCondition(grandChild, condition) =>
        val aliasMap = getAliasMap(project)
        val (pushDown, stayUp) = splitConjunctivePredicates(condition).partition { cond =>
          if (cond.expectedCost < costThreshold) {
            replaceAlias(cond, aliasMap).expectedCost < costThreshold
          } else false
        }
        if (pushDown.nonEmpty) {
          val pushDownPredicate = pushDown.reduce(And)
          val replaced = replaceAlias(pushDownPredicate, aliasMap)
          val newProject = project.copy(child = Filter(replaced, grandChild))
          if (stayUp.isEmpty) newProject else Filter(stayUp.reduce(And), newProject)
        } else {
          filter
        }
    }
  }
}
