// Generated from SqlBaseParser.g4 by ANTLR 4.9.3
package org.apache.spark.sql.catalyst.parser;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SqlBaseParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SEMICOLON=1, LEFT_PAREN=2, RIGHT_PAREN=3, COMMA=4, DOT=5, LEFT_BRACKET=6, 
		RIGHT_BRACKET=7, BANG=8, ADD=9, AFTER=10, AGGREGATE=11, ALL=12, ALTER=13, 
		ALWAYS=14, ANALYZE=15, AND=16, ANTI=17, ANY=18, ANY_VALUE=19, ARCHIVE=20, 
		ARRAY=21, AS=22, ASC=23, AT=24, ATOMIC=25, AUTHORIZATION=26, BEGIN=27, 
		BETWEEN=28, BIGINT=29, BINARY=30, BINDING=31, BOOLEAN=32, BOTH=33, BUCKET=34, 
		BUCKETS=35, BY=36, BYTE=37, CACHE=38, CALL=39, CALLED=40, CASCADE=41, 
		CASE=42, CAST=43, CATALOG=44, CATALOGS=45, CHANGE=46, CHAR=47, CHARACTER=48, 
		CHECK=49, CLEAR=50, CLUSTER=51, CLUSTERED=52, CODEGEN=53, COLLATE=54, 
		COLLATION=55, COLLECTION=56, COLUMN=57, COLUMNS=58, COMMENT=59, COMMIT=60, 
		COMPACT=61, COMPACTIONS=62, COMPENSATION=63, COMPUTE=64, CONCATENATE=65, 
		CONDITION=66, CONSTRAINT=67, CONTAINS=68, CONTINUE=69, COST=70, CREATE=71, 
		CROSS=72, CUBE=73, CURRENT=74, CURRENT_DATE=75, CURRENT_TIME=76, CURRENT_TIMESTAMP=77, 
		CURRENT_USER=78, DAY=79, DAYS=80, DAYOFYEAR=81, DATA=82, DATE=83, DATABASE=84, 
		DATABASES=85, DATEADD=86, DATE_ADD=87, DATEDIFF=88, DATE_DIFF=89, DBPROPERTIES=90, 
		DEC=91, DECIMAL=92, DECLARE=93, DEFAULT=94, DEFINED=95, DEFINER=96, DELETE=97, 
		DELIMITED=98, DESC=99, DESCRIBE=100, DETERMINISTIC=101, DFS=102, DIRECTORIES=103, 
		DIRECTORY=104, DISTINCT=105, DISTRIBUTE=106, DIV=107, DO=108, DOUBLE=109, 
		DROP=110, ELSE=111, ELSEIF=112, END=113, ENFORCED=114, ESCAPE=115, ESCAPED=116, 
		EVOLUTION=117, EXCEPT=118, EXCHANGE=119, EXCLUDE=120, EXISTS=121, EXIT=122, 
		EXPLAIN=123, EXPORT=124, EXTEND=125, EXTENDED=126, EXTERNAL=127, EXTRACT=128, 
		FALSE=129, FETCH=130, FIELDS=131, FILTER=132, FILEFORMAT=133, FIRST=134, 
		FLOAT=135, FLOW=136, FOLLOWING=137, FOR=138, FOREIGN=139, FORMAT=140, 
		FORMATTED=141, FOUND=142, FROM=143, FULL=144, FUNCTION=145, FUNCTIONS=146, 
		GENERATED=147, GLOBAL=148, GRANT=149, GROUP=150, GROUPING=151, HANDLER=152, 
		HAVING=153, BINARY_HEX=154, HOUR=155, HOURS=156, IDENTIFIER_KW=157, IDENTITY=158, 
		IF=159, IGNORE=160, IMMEDIATE=161, IMPORT=162, IN=163, INCLUDE=164, INCREMENT=165, 
		INDEX=166, INDEXES=167, INNER=168, INPATH=169, INPUT=170, INPUTFORMAT=171, 
		INSERT=172, INTERSECT=173, INTERVAL=174, INT=175, INTEGER=176, INTO=177, 
		INVOKER=178, IS=179, ITEMS=180, ITERATE=181, JOIN=182, JSON=183, KEY=184, 
		KEYS=185, LANGUAGE=186, LAST=187, LATERAL=188, LAZY=189, LEADING=190, 
		LEAVE=191, LEFT=192, LEVEL=193, LIKE=194, ILIKE=195, LIMIT=196, LINES=197, 
		LIST=198, LOAD=199, LOCAL=200, LOCATION=201, LOCK=202, LOCKS=203, LOGICAL=204, 
		LONG=205, LOOP=206, MACRO=207, MAP=208, MATCHED=209, MATERIALIZED=210, 
		MAX=211, MERGE=212, MICROSECOND=213, MICROSECONDS=214, MILLISECOND=215, 
		MILLISECONDS=216, MINUTE=217, MINUTES=218, MODIFIES=219, MONTH=220, MONTHS=221, 
		MSCK=222, NAME=223, NAMESPACE=224, NAMESPACES=225, NANOSECOND=226, NANOSECONDS=227, 
		NATURAL=228, NO=229, NONE=230, NOT=231, NULL=232, NULLS=233, NUMERIC=234, 
		NORELY=235, OF=236, OFFSET=237, ON=238, ONLY=239, OPTION=240, OPTIONS=241, 
		OR=242, ORDER=243, OUT=244, OUTER=245, OUTPUTFORMAT=246, OVER=247, OVERLAPS=248, 
		OVERLAY=249, OVERWRITE=250, PARTITION=251, PARTITIONED=252, PARTITIONS=253, 
		PERCENTLIT=254, PIVOT=255, PLACING=256, POSITION=257, PRECEDING=258, PRIMARY=259, 
		PRINCIPALS=260, PROCEDURE=261, PROCEDURES=262, PROPERTIES=263, PURGE=264, 
		QUARTER=265, QUERY=266, RANGE=267, READS=268, REAL=269, RECORDREADER=270, 
		RECORDWRITER=271, RECOVER=272, RECURSION=273, RECURSIVE=274, REDUCE=275, 
		REFERENCES=276, REFRESH=277, RELY=278, RENAME=279, REPAIR=280, REPEAT=281, 
		REPEATABLE=282, REPLACE=283, RESET=284, RESPECT=285, RESTRICT=286, RETURN=287, 
		RETURNS=288, REVOKE=289, RIGHT=290, RLIKE=291, ROLE=292, ROLES=293, ROLLBACK=294, 
		ROLLUP=295, ROW=296, ROWS=297, SECOND=298, SECONDS=299, SCHEMA=300, SCHEMAS=301, 
		SECURITY=302, SELECT=303, SEMI=304, SEPARATED=305, SERDE=306, SERDEPROPERTIES=307, 
		SESSION_USER=308, SET=309, SETMINUS=310, SETS=311, SHORT=312, SHOW=313, 
		SINGLE=314, SKEWED=315, SMALLINT=316, SOME=317, SORT=318, SORTED=319, 
		SOURCE=320, SPECIFIC=321, SQL=322, SQLEXCEPTION=323, SQLSTATE=324, START=325, 
		STATISTICS=326, STORED=327, STRATIFY=328, STREAM=329, STREAMING=330, STRING=331, 
		STRUCT=332, SUBSTR=333, SUBSTRING=334, SYNC=335, SYSTEM_TIME=336, SYSTEM_VERSION=337, 
		TABLE=338, TABLES=339, TABLESAMPLE=340, TARGET=341, TBLPROPERTIES=342, 
		TEMPORARY=343, TERMINATED=344, THEN=345, TIME=346, TIMEDIFF=347, TIMESTAMP=348, 
		TIMESTAMP_LTZ=349, TIMESTAMP_NTZ=350, TIMESTAMPADD=351, TIMESTAMPDIFF=352, 
		TINYINT=353, TO=354, EXECUTE=355, TOUCH=356, TRAILING=357, TRANSACTION=358, 
		TRANSACTIONS=359, TRANSFORM=360, TRIM=361, TRUE=362, TRUNCATE=363, TRY_CAST=364, 
		TYPE=365, UNARCHIVE=366, UNBOUNDED=367, UNCACHE=368, UNION=369, UNIQUE=370, 
		UNKNOWN=371, UNLOCK=372, UNPIVOT=373, UNSET=374, UNTIL=375, UPDATE=376, 
		USE=377, USER=378, USING=379, VALUE=380, VALUES=381, VARCHAR=382, VAR=383, 
		VARIABLE=384, VARIANT=385, VERSION=386, VIEW=387, VIEWS=388, VOID=389, 
		WEEK=390, WEEKS=391, WHEN=392, WHERE=393, WHILE=394, WINDOW=395, WITH=396, 
		WITHIN=397, WITHOUT=398, YEAR=399, YEARS=400, ZONE=401, EQ=402, NSEQ=403, 
		NEQ=404, NEQJ=405, LT=406, LTE=407, GT=408, GTE=409, SHIFT_LEFT=410, SHIFT_RIGHT=411, 
		SHIFT_RIGHT_UNSIGNED=412, PLUS=413, MINUS=414, ASTERISK=415, SLASH=416, 
		PERCENT=417, TILDE=418, AMPERSAND=419, PIPE=420, CONCAT_PIPE=421, OPERATOR_PIPE=422, 
		HAT=423, COLON=424, DOUBLE_COLON=425, ARROW=426, FAT_ARROW=427, HENT_START=428, 
		HENT_END=429, QUESTION=430, STRING_LITERAL=431, DOUBLEQUOTED_STRING=432, 
		BIGINT_LITERAL=433, SMALLINT_LITERAL=434, TINYINT_LITERAL=435, INTEGER_VALUE=436, 
		EXPONENT_VALUE=437, DECIMAL_VALUE=438, FLOAT_LITERAL=439, DOUBLE_LITERAL=440, 
		BIGDECIMAL_LITERAL=441, IDENTIFIER=442, BACKQUOTED_IDENTIFIER=443, SIMPLE_COMMENT=444, 
		BRACKETED_COMMENT=445, WS=446, UNRECOGNIZED=447;
	public static final int
		RULE_compoundOrSingleStatement = 0, RULE_singleCompoundStatement = 1, 
		RULE_beginEndCompoundBlock = 2, RULE_compoundBody = 3, RULE_compoundStatement = 4, 
		RULE_setStatementInsideSqlScript = 5, RULE_sqlStateValue = 6, RULE_declareConditionStatement = 7, 
		RULE_conditionValue = 8, RULE_conditionValues = 9, RULE_declareHandlerStatement = 10, 
		RULE_whileStatement = 11, RULE_ifElseStatement = 12, RULE_repeatStatement = 13, 
		RULE_leaveStatement = 14, RULE_iterateStatement = 15, RULE_caseStatement = 16, 
		RULE_loopStatement = 17, RULE_forStatement = 18, RULE_singleStatement = 19, 
		RULE_beginLabel = 20, RULE_endLabel = 21, RULE_singleExpression = 22, 
		RULE_singleTableIdentifier = 23, RULE_singleMultipartIdentifier = 24, 
		RULE_singleFunctionIdentifier = 25, RULE_singleDataType = 26, RULE_singleTableSchema = 27, 
		RULE_singleRoutineParamList = 28, RULE_statement = 29, RULE_materializedView = 30, 
		RULE_streamingTable = 31, RULE_createPipelineDatasetHeader = 32, RULE_streamRelationPrimary = 33, 
		RULE_setResetStatement = 34, RULE_executeImmediate = 35, RULE_executeImmediateUsing = 36, 
		RULE_timezone = 37, RULE_configKey = 38, RULE_configValue = 39, RULE_unsupportedHiveNativeCommands = 40, 
		RULE_createTableHeader = 41, RULE_replaceTableHeader = 42, RULE_clusterBySpec = 43, 
		RULE_bucketSpec = 44, RULE_skewSpec = 45, RULE_locationSpec = 46, RULE_schemaBinding = 47, 
		RULE_commentSpec = 48, RULE_singleQuery = 49, RULE_query = 50, RULE_insertInto = 51, 
		RULE_partitionSpecLocation = 52, RULE_partitionSpec = 53, RULE_partitionVal = 54, 
		RULE_createPipelineFlowHeader = 55, RULE_namespace = 56, RULE_namespaces = 57, 
		RULE_variable = 58, RULE_describeFuncName = 59, RULE_describeColName = 60, 
		RULE_ctes = 61, RULE_namedQuery = 62, RULE_tableProvider = 63, RULE_createTableClauses = 64, 
		RULE_propertyList = 65, RULE_property = 66, RULE_propertyKey = 67, RULE_propertyValue = 68, 
		RULE_expressionPropertyList = 69, RULE_expressionProperty = 70, RULE_constantList = 71, 
		RULE_nestedConstantList = 72, RULE_createFileFormat = 73, RULE_fileFormat = 74, 
		RULE_storageHandler = 75, RULE_resource = 76, RULE_dmlStatementNoWith = 77, 
		RULE_identifierReference = 78, RULE_catalogIdentifierReference = 79, RULE_queryOrganization = 80, 
		RULE_multiInsertQueryBody = 81, RULE_queryTerm = 82, RULE_queryPrimary = 83, 
		RULE_sortItem = 84, RULE_fromStatement = 85, RULE_fromStatementBody = 86, 
		RULE_querySpecification = 87, RULE_transformClause = 88, RULE_selectClause = 89, 
		RULE_setClause = 90, RULE_matchedClause = 91, RULE_notMatchedClause = 92, 
		RULE_notMatchedBySourceClause = 93, RULE_matchedAction = 94, RULE_notMatchedAction = 95, 
		RULE_notMatchedBySourceAction = 96, RULE_exceptClause = 97, RULE_assignmentList = 98, 
		RULE_assignment = 99, RULE_whereClause = 100, RULE_havingClause = 101, 
		RULE_hint = 102, RULE_hintStatement = 103, RULE_fromClause = 104, RULE_temporalClause = 105, 
		RULE_aggregationClause = 106, RULE_groupByClause = 107, RULE_groupingAnalytics = 108, 
		RULE_groupingElement = 109, RULE_groupingSet = 110, RULE_pivotClause = 111, 
		RULE_pivotColumn = 112, RULE_pivotValue = 113, RULE_unpivotClause = 114, 
		RULE_unpivotNullClause = 115, RULE_unpivotOperator = 116, RULE_unpivotSingleValueColumnClause = 117, 
		RULE_unpivotMultiValueColumnClause = 118, RULE_unpivotColumnSet = 119, 
		RULE_unpivotValueColumn = 120, RULE_unpivotNameColumn = 121, RULE_unpivotColumnAndAlias = 122, 
		RULE_unpivotColumn = 123, RULE_unpivotAlias = 124, RULE_lateralView = 125, 
		RULE_setQuantifier = 126, RULE_relation = 127, RULE_relationExtension = 128, 
		RULE_joinRelation = 129, RULE_joinType = 130, RULE_joinCriteria = 131, 
		RULE_sample = 132, RULE_sampleMethod = 133, RULE_identifierList = 134, 
		RULE_identifierSeq = 135, RULE_orderedIdentifierList = 136, RULE_orderedIdentifier = 137, 
		RULE_identifierCommentList = 138, RULE_identifierComment = 139, RULE_relationPrimary = 140, 
		RULE_optionsClause = 141, RULE_inlineTable = 142, RULE_functionTableSubqueryArgument = 143, 
		RULE_tableArgumentPartitioning = 144, RULE_functionTableNamedArgumentExpression = 145, 
		RULE_functionTableReferenceArgument = 146, RULE_functionTableArgument = 147, 
		RULE_functionTable = 148, RULE_tableAlias = 149, RULE_rowFormat = 150, 
		RULE_multipartIdentifierList = 151, RULE_multipartIdentifier = 152, RULE_multipartIdentifierPropertyList = 153, 
		RULE_multipartIdentifierProperty = 154, RULE_tableIdentifier = 155, RULE_functionIdentifier = 156, 
		RULE_namedExpression = 157, RULE_namedExpressionSeq = 158, RULE_partitionFieldList = 159, 
		RULE_partitionField = 160, RULE_transform = 161, RULE_transformArgument = 162, 
		RULE_expression = 163, RULE_namedArgumentExpression = 164, RULE_functionArgument = 165, 
		RULE_expressionSeq = 166, RULE_booleanExpression = 167, RULE_predicate = 168, 
		RULE_errorCapturingNot = 169, RULE_valueExpression = 170, RULE_shiftOperator = 171, 
		RULE_datetimeUnit = 172, RULE_primaryExpression = 173, RULE_semiStructuredExtractionPath = 174, 
		RULE_jsonPathIdentifier = 175, RULE_jsonPathBracketedIdentifier = 176, 
		RULE_jsonPathFirstPart = 177, RULE_jsonPathParts = 178, RULE_literalType = 179, 
		RULE_constant = 180, RULE_comparisonOperator = 181, RULE_arithmeticOperator = 182, 
		RULE_predicateOperator = 183, RULE_booleanValue = 184, RULE_interval = 185, 
		RULE_errorCapturingMultiUnitsInterval = 186, RULE_multiUnitsInterval = 187, 
		RULE_errorCapturingUnitToUnitInterval = 188, RULE_unitToUnitInterval = 189, 
		RULE_intervalValue = 190, RULE_unitInMultiUnits = 191, RULE_unitInUnitToUnit = 192, 
		RULE_colPosition = 193, RULE_collationSpec = 194, RULE_collateClause = 195, 
		RULE_nonTrivialPrimitiveType = 196, RULE_trivialPrimitiveType = 197, RULE_primitiveType = 198, 
		RULE_dataType = 199, RULE_qualifiedColTypeWithPositionList = 200, RULE_qualifiedColTypeWithPosition = 201, 
		RULE_colDefinitionDescriptorWithPosition = 202, RULE_defaultExpression = 203, 
		RULE_variableDefaultExpression = 204, RULE_colTypeList = 205, RULE_colType = 206, 
		RULE_tableElementList = 207, RULE_tableElement = 208, RULE_colDefinitionList = 209, 
		RULE_colDefinition = 210, RULE_colDefinitionOption = 211, RULE_generationExpression = 212, 
		RULE_identityColSpec = 213, RULE_sequenceGeneratorOption = 214, RULE_sequenceGeneratorStartOrStep = 215, 
		RULE_complexColTypeList = 216, RULE_complexColType = 217, RULE_routineCharacteristics = 218, 
		RULE_routineLanguage = 219, RULE_specificName = 220, RULE_deterministic = 221, 
		RULE_sqlDataAccess = 222, RULE_nullCall = 223, RULE_rightsClause = 224, 
		RULE_whenClause = 225, RULE_windowClause = 226, RULE_namedWindow = 227, 
		RULE_windowSpec = 228, RULE_windowFrame = 229, RULE_frameBound = 230, 
		RULE_qualifiedNameList = 231, RULE_functionName = 232, RULE_qualifiedName = 233, 
		RULE_errorCapturingIdentifier = 234, RULE_errorCapturingIdentifierExtra = 235, 
		RULE_identifier = 236, RULE_strictIdentifier = 237, RULE_quotedIdentifier = 238, 
		RULE_backQuotedIdentifier = 239, RULE_number = 240, RULE_columnConstraintDefinition = 241, 
		RULE_columnConstraint = 242, RULE_tableConstraintDefinition = 243, RULE_tableConstraint = 244, 
		RULE_checkConstraint = 245, RULE_uniqueSpec = 246, RULE_uniqueConstraint = 247, 
		RULE_referenceSpec = 248, RULE_foreignKeyConstraint = 249, RULE_constraintCharacteristic = 250, 
		RULE_enforcedCharacteristic = 251, RULE_relyCharacteristic = 252, RULE_alterColumnSpecList = 253, 
		RULE_alterColumnSpec = 254, RULE_alterColumnAction = 255, RULE_stringLit = 256, 
		RULE_comment = 257, RULE_version = 258, RULE_operatorPipeRightSide = 259, 
		RULE_operatorPipeSetAssignmentSeq = 260, RULE_ansiNonReserved = 261, RULE_strictNonReserved = 262, 
		RULE_nonReserved = 263;
	private static String[] makeRuleNames() {
		return new String[] {
			"compoundOrSingleStatement", "singleCompoundStatement", "beginEndCompoundBlock", 
			"compoundBody", "compoundStatement", "setStatementInsideSqlScript", "sqlStateValue", 
			"declareConditionStatement", "conditionValue", "conditionValues", "declareHandlerStatement", 
			"whileStatement", "ifElseStatement", "repeatStatement", "leaveStatement", 
			"iterateStatement", "caseStatement", "loopStatement", "forStatement", 
			"singleStatement", "beginLabel", "endLabel", "singleExpression", "singleTableIdentifier", 
			"singleMultipartIdentifier", "singleFunctionIdentifier", "singleDataType", 
			"singleTableSchema", "singleRoutineParamList", "statement", "materializedView", 
			"streamingTable", "createPipelineDatasetHeader", "streamRelationPrimary", 
			"setResetStatement", "executeImmediate", "executeImmediateUsing", "timezone", 
			"configKey", "configValue", "unsupportedHiveNativeCommands", "createTableHeader", 
			"replaceTableHeader", "clusterBySpec", "bucketSpec", "skewSpec", "locationSpec", 
			"schemaBinding", "commentSpec", "singleQuery", "query", "insertInto", 
			"partitionSpecLocation", "partitionSpec", "partitionVal", "createPipelineFlowHeader", 
			"namespace", "namespaces", "variable", "describeFuncName", "describeColName", 
			"ctes", "namedQuery", "tableProvider", "createTableClauses", "propertyList", 
			"property", "propertyKey", "propertyValue", "expressionPropertyList", 
			"expressionProperty", "constantList", "nestedConstantList", "createFileFormat", 
			"fileFormat", "storageHandler", "resource", "dmlStatementNoWith", "identifierReference", 
			"catalogIdentifierReference", "queryOrganization", "multiInsertQueryBody", 
			"queryTerm", "queryPrimary", "sortItem", "fromStatement", "fromStatementBody", 
			"querySpecification", "transformClause", "selectClause", "setClause", 
			"matchedClause", "notMatchedClause", "notMatchedBySourceClause", "matchedAction", 
			"notMatchedAction", "notMatchedBySourceAction", "exceptClause", "assignmentList", 
			"assignment", "whereClause", "havingClause", "hint", "hintStatement", 
			"fromClause", "temporalClause", "aggregationClause", "groupByClause", 
			"groupingAnalytics", "groupingElement", "groupingSet", "pivotClause", 
			"pivotColumn", "pivotValue", "unpivotClause", "unpivotNullClause", "unpivotOperator", 
			"unpivotSingleValueColumnClause", "unpivotMultiValueColumnClause", "unpivotColumnSet", 
			"unpivotValueColumn", "unpivotNameColumn", "unpivotColumnAndAlias", "unpivotColumn", 
			"unpivotAlias", "lateralView", "setQuantifier", "relation", "relationExtension", 
			"joinRelation", "joinType", "joinCriteria", "sample", "sampleMethod", 
			"identifierList", "identifierSeq", "orderedIdentifierList", "orderedIdentifier", 
			"identifierCommentList", "identifierComment", "relationPrimary", "optionsClause", 
			"inlineTable", "functionTableSubqueryArgument", "tableArgumentPartitioning", 
			"functionTableNamedArgumentExpression", "functionTableReferenceArgument", 
			"functionTableArgument", "functionTable", "tableAlias", "rowFormat", 
			"multipartIdentifierList", "multipartIdentifier", "multipartIdentifierPropertyList", 
			"multipartIdentifierProperty", "tableIdentifier", "functionIdentifier", 
			"namedExpression", "namedExpressionSeq", "partitionFieldList", "partitionField", 
			"transform", "transformArgument", "expression", "namedArgumentExpression", 
			"functionArgument", "expressionSeq", "booleanExpression", "predicate", 
			"errorCapturingNot", "valueExpression", "shiftOperator", "datetimeUnit", 
			"primaryExpression", "semiStructuredExtractionPath", "jsonPathIdentifier", 
			"jsonPathBracketedIdentifier", "jsonPathFirstPart", "jsonPathParts", 
			"literalType", "constant", "comparisonOperator", "arithmeticOperator", 
			"predicateOperator", "booleanValue", "interval", "errorCapturingMultiUnitsInterval", 
			"multiUnitsInterval", "errorCapturingUnitToUnitInterval", "unitToUnitInterval", 
			"intervalValue", "unitInMultiUnits", "unitInUnitToUnit", "colPosition", 
			"collationSpec", "collateClause", "nonTrivialPrimitiveType", "trivialPrimitiveType", 
			"primitiveType", "dataType", "qualifiedColTypeWithPositionList", "qualifiedColTypeWithPosition", 
			"colDefinitionDescriptorWithPosition", "defaultExpression", "variableDefaultExpression", 
			"colTypeList", "colType", "tableElementList", "tableElement", "colDefinitionList", 
			"colDefinition", "colDefinitionOption", "generationExpression", "identityColSpec", 
			"sequenceGeneratorOption", "sequenceGeneratorStartOrStep", "complexColTypeList", 
			"complexColType", "routineCharacteristics", "routineLanguage", "specificName", 
			"deterministic", "sqlDataAccess", "nullCall", "rightsClause", "whenClause", 
			"windowClause", "namedWindow", "windowSpec", "windowFrame", "frameBound", 
			"qualifiedNameList", "functionName", "qualifiedName", "errorCapturingIdentifier", 
			"errorCapturingIdentifierExtra", "identifier", "strictIdentifier", "quotedIdentifier", 
			"backQuotedIdentifier", "number", "columnConstraintDefinition", "columnConstraint", 
			"tableConstraintDefinition", "tableConstraint", "checkConstraint", "uniqueSpec", 
			"uniqueConstraint", "referenceSpec", "foreignKeyConstraint", "constraintCharacteristic", 
			"enforcedCharacteristic", "relyCharacteristic", "alterColumnSpecList", 
			"alterColumnSpec", "alterColumnAction", "stringLit", "comment", "version", 
			"operatorPipeRightSide", "operatorPipeSetAssignmentSeq", "ansiNonReserved", 
			"strictNonReserved", "nonReserved"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "';'", "'('", "')'", "','", "'.'", "'['", "']'", "'!'", "'ADD'", 
			"'AFTER'", "'AGGREGATE'", "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", 
			"'AND'", "'ANTI'", "'ANY'", "'ANY_VALUE'", "'ARCHIVE'", "'ARRAY'", "'AS'", 
			"'ASC'", "'AT'", "'ATOMIC'", "'AUTHORIZATION'", "'BEGIN'", "'BETWEEN'", 
			"'BIGINT'", "'BINARY'", "'BINDING'", "'BOOLEAN'", "'BOTH'", "'BUCKET'", 
			"'BUCKETS'", "'BY'", "'BYTE'", "'CACHE'", "'CALL'", "'CALLED'", "'CASCADE'", 
			"'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", "'CHANGE'", "'CHAR'", 
			"'CHARACTER'", "'CHECK'", "'CLEAR'", "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'", 
			"'COLLATE'", "'COLLATION'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'", 
			"'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", "'COMPENSATION'", 
			"'COMPUTE'", "'CONCATENATE'", "'CONDITION'", "'CONSTRAINT'", "'CONTAINS'", 
			"'CONTINUE'", "'COST'", "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", 
			"'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
			"'DAY'", "'DAYS'", "'DAYOFYEAR'", "'DATA'", "'DATE'", "'DATABASE'", "'DATABASES'", 
			"'DATEADD'", "'DATE_ADD'", "'DATEDIFF'", "'DATE_DIFF'", "'DBPROPERTIES'", 
			"'DEC'", "'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DEFINED'", "'DEFINER'", 
			"'DELETE'", "'DELIMITED'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
			"'DFS'", "'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'", "'DISTRIBUTE'", 
			"'DIV'", "'DO'", "'DOUBLE'", "'DROP'", "'ELSE'", "'ELSEIF'", "'END'", 
			"'ENFORCED'", "'ESCAPE'", "'ESCAPED'", "'EVOLUTION'", "'EXCEPT'", "'EXCHANGE'", 
			"'EXCLUDE'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'EXPORT'", "'EXTEND'", 
			"'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", 
			"'FILTER'", "'FILEFORMAT'", "'FIRST'", "'FLOAT'", "'FLOW'", "'FOLLOWING'", 
			"'FOR'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FOUND'", "'FROM'", 
			"'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GENERATED'", "'GLOBAL'", "'GRANT'", 
			"'GROUP'", "'GROUPING'", "'HANDLER'", "'HAVING'", "'X'", "'HOUR'", "'HOURS'", 
			"'IDENTIFIER'", "'IDENTITY'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IMPORT'", 
			"'IN'", "'INCLUDE'", "'INCREMENT'", "'INDEX'", "'INDEXES'", "'INNER'", 
			"'INPATH'", "'INPUT'", "'INPUTFORMAT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", 
			"'INT'", "'INTEGER'", "'INTO'", "'INVOKER'", "'IS'", "'ITEMS'", "'ITERATE'", 
			"'JOIN'", "'JSON'", "'KEY'", "'KEYS'", "'LANGUAGE'", "'LAST'", "'LATERAL'", 
			"'LAZY'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LEVEL'", "'LIKE'", "'ILIKE'", 
			"'LIMIT'", "'LINES'", "'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", 
			"'LOCKS'", "'LOGICAL'", "'LONG'", "'LOOP'", "'MACRO'", "'MAP'", "'MATCHED'", 
			"'MATERIALIZED'", "'MAX'", "'MERGE'", "'MICROSECOND'", "'MICROSECONDS'", 
			"'MILLISECOND'", "'MILLISECONDS'", "'MINUTE'", "'MINUTES'", "'MODIFIES'", 
			"'MONTH'", "'MONTHS'", "'MSCK'", "'NAME'", "'NAMESPACE'", "'NAMESPACES'", 
			"'NANOSECOND'", "'NANOSECONDS'", "'NATURAL'", "'NO'", "'NONE'", "'NOT'", 
			"'NULL'", "'NULLS'", "'NUMERIC'", "'NORELY'", "'OF'", "'OFFSET'", "'ON'", 
			"'ONLY'", "'OPTION'", "'OPTIONS'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", 
			"'OUTPUTFORMAT'", "'OVER'", "'OVERLAPS'", "'OVERLAY'", "'OVERWRITE'", 
			"'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENT'", "'PIVOT'", 
			"'PLACING'", "'POSITION'", "'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'", 
			"'PROCEDURE'", "'PROCEDURES'", "'PROPERTIES'", "'PURGE'", "'QUARTER'", 
			"'QUERY'", "'RANGE'", "'READS'", "'REAL'", "'RECORDREADER'", "'RECORDWRITER'", 
			"'RECOVER'", "'RECURSION'", "'RECURSIVE'", "'REDUCE'", "'REFERENCES'", 
			"'REFRESH'", "'RELY'", "'RENAME'", "'REPAIR'", "'REPEAT'", "'REPEATABLE'", 
			"'REPLACE'", "'RESET'", "'RESPECT'", "'RESTRICT'", "'RETURN'", "'RETURNS'", 
			"'REVOKE'", "'RIGHT'", null, "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", 
			"'ROW'", "'ROWS'", "'SECOND'", "'SECONDS'", "'SCHEMA'", "'SCHEMAS'", 
			"'SECURITY'", "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'", "'SERDEPROPERTIES'", 
			"'SESSION_USER'", "'SET'", "'MINUS'", "'SETS'", "'SHORT'", "'SHOW'", 
			"'SINGLE'", "'SKEWED'", "'SMALLINT'", "'SOME'", "'SORT'", "'SORTED'", 
			"'SOURCE'", "'SPECIFIC'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'START'", 
			"'STATISTICS'", "'STORED'", "'STRATIFY'", "'STREAM'", "'STREAMING'", 
			"'STRING'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", "'SYNC'", "'SYSTEM_TIME'", 
			"'SYSTEM_VERSION'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TARGET'", 
			"'TBLPROPERTIES'", null, "'TERMINATED'", "'THEN'", "'TIME'", "'TIMEDIFF'", 
			"'TIMESTAMP'", "'TIMESTAMP_LTZ'", "'TIMESTAMP_NTZ'", "'TIMESTAMPADD'", 
			"'TIMESTAMPDIFF'", "'TINYINT'", "'TO'", "'EXECUTE'", "'TOUCH'", "'TRAILING'", 
			"'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", "'TRIM'", "'TRUE'", 
			"'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UNARCHIVE'", "'UNBOUNDED'", "'UNCACHE'", 
			"'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNLOCK'", "'UNPIVOT'", "'UNSET'", 
			"'UNTIL'", "'UPDATE'", "'USE'", "'USER'", "'USING'", "'VALUE'", "'VALUES'", 
			"'VARCHAR'", "'VAR'", "'VARIABLE'", "'VARIANT'", "'VERSION'", "'VIEW'", 
			"'VIEWS'", "'VOID'", "'WEEK'", "'WEEKS'", "'WHEN'", "'WHERE'", "'WHILE'", 
			"'WINDOW'", "'WITH'", "'WITHIN'", "'WITHOUT'", "'YEAR'", "'YEARS'", "'ZONE'", 
			null, "'<=>'", "'<>'", "'!='", "'<'", null, "'>'", null, "'<<'", "'>>'", 
			"'>>>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'&'", "'|'", "'||'", 
			"'|>'", "'^'", "':'", "'::'", "'->'", "'=>'", "'/*+'", "'*/'", "'?'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "DOT", "LEFT_BRACKET", 
			"RIGHT_BRACKET", "BANG", "ADD", "AFTER", "AGGREGATE", "ALL", "ALTER", 
			"ALWAYS", "ANALYZE", "AND", "ANTI", "ANY", "ANY_VALUE", "ARCHIVE", "ARRAY", 
			"AS", "ASC", "AT", "ATOMIC", "AUTHORIZATION", "BEGIN", "BETWEEN", "BIGINT", 
			"BINARY", "BINDING", "BOOLEAN", "BOTH", "BUCKET", "BUCKETS", "BY", "BYTE", 
			"CACHE", "CALL", "CALLED", "CASCADE", "CASE", "CAST", "CATALOG", "CATALOGS", 
			"CHANGE", "CHAR", "CHARACTER", "CHECK", "CLEAR", "CLUSTER", "CLUSTERED", 
			"CODEGEN", "COLLATE", "COLLATION", "COLLECTION", "COLUMN", "COLUMNS", 
			"COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", "COMPENSATION", "COMPUTE", 
			"CONCATENATE", "CONDITION", "CONSTRAINT", "CONTAINS", "CONTINUE", "COST", 
			"CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
			"CURRENT_TIMESTAMP", "CURRENT_USER", "DAY", "DAYS", "DAYOFYEAR", "DATA", 
			"DATE", "DATABASE", "DATABASES", "DATEADD", "DATE_ADD", "DATEDIFF", "DATE_DIFF", 
			"DBPROPERTIES", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFINED", "DEFINER", 
			"DELETE", "DELIMITED", "DESC", "DESCRIBE", "DETERMINISTIC", "DFS", "DIRECTORIES", 
			"DIRECTORY", "DISTINCT", "DISTRIBUTE", "DIV", "DO", "DOUBLE", "DROP", 
			"ELSE", "ELSEIF", "END", "ENFORCED", "ESCAPE", "ESCAPED", "EVOLUTION", 
			"EXCEPT", "EXCHANGE", "EXCLUDE", "EXISTS", "EXIT", "EXPLAIN", "EXPORT", 
			"EXTEND", "EXTENDED", "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FIELDS", 
			"FILTER", "FILEFORMAT", "FIRST", "FLOAT", "FLOW", "FOLLOWING", "FOR", 
			"FOREIGN", "FORMAT", "FORMATTED", "FOUND", "FROM", "FULL", "FUNCTION", 
			"FUNCTIONS", "GENERATED", "GLOBAL", "GRANT", "GROUP", "GROUPING", "HANDLER", 
			"HAVING", "BINARY_HEX", "HOUR", "HOURS", "IDENTIFIER_KW", "IDENTITY", 
			"IF", "IGNORE", "IMMEDIATE", "IMPORT", "IN", "INCLUDE", "INCREMENT", 
			"INDEX", "INDEXES", "INNER", "INPATH", "INPUT", "INPUTFORMAT", "INSERT", 
			"INTERSECT", "INTERVAL", "INT", "INTEGER", "INTO", "INVOKER", "IS", "ITEMS", 
			"ITERATE", "JOIN", "JSON", "KEY", "KEYS", "LANGUAGE", "LAST", "LATERAL", 
			"LAZY", "LEADING", "LEAVE", "LEFT", "LEVEL", "LIKE", "ILIKE", "LIMIT", 
			"LINES", "LIST", "LOAD", "LOCAL", "LOCATION", "LOCK", "LOCKS", "LOGICAL", 
			"LONG", "LOOP", "MACRO", "MAP", "MATCHED", "MATERIALIZED", "MAX", "MERGE", 
			"MICROSECOND", "MICROSECONDS", "MILLISECOND", "MILLISECONDS", "MINUTE", 
			"MINUTES", "MODIFIES", "MONTH", "MONTHS", "MSCK", "NAME", "NAMESPACE", 
			"NAMESPACES", "NANOSECOND", "NANOSECONDS", "NATURAL", "NO", "NONE", "NOT", 
			"NULL", "NULLS", "NUMERIC", "NORELY", "OF", "OFFSET", "ON", "ONLY", "OPTION", 
			"OPTIONS", "OR", "ORDER", "OUT", "OUTER", "OUTPUTFORMAT", "OVER", "OVERLAPS", 
			"OVERLAY", "OVERWRITE", "PARTITION", "PARTITIONED", "PARTITIONS", "PERCENTLIT", 
			"PIVOT", "PLACING", "POSITION", "PRECEDING", "PRIMARY", "PRINCIPALS", 
			"PROCEDURE", "PROCEDURES", "PROPERTIES", "PURGE", "QUARTER", "QUERY", 
			"RANGE", "READS", "REAL", "RECORDREADER", "RECORDWRITER", "RECOVER", 
			"RECURSION", "RECURSIVE", "REDUCE", "REFERENCES", "REFRESH", "RELY", 
			"RENAME", "REPAIR", "REPEAT", "REPEATABLE", "REPLACE", "RESET", "RESPECT", 
			"RESTRICT", "RETURN", "RETURNS", "REVOKE", "RIGHT", "RLIKE", "ROLE", 
			"ROLES", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "SECOND", "SECONDS", "SCHEMA", 
			"SCHEMAS", "SECURITY", "SELECT", "SEMI", "SEPARATED", "SERDE", "SERDEPROPERTIES", 
			"SESSION_USER", "SET", "SETMINUS", "SETS", "SHORT", "SHOW", "SINGLE", 
			"SKEWED", "SMALLINT", "SOME", "SORT", "SORTED", "SOURCE", "SPECIFIC", 
			"SQL", "SQLEXCEPTION", "SQLSTATE", "START", "STATISTICS", "STORED", "STRATIFY", 
			"STREAM", "STREAMING", "STRING", "STRUCT", "SUBSTR", "SUBSTRING", "SYNC", 
			"SYSTEM_TIME", "SYSTEM_VERSION", "TABLE", "TABLES", "TABLESAMPLE", "TARGET", 
			"TBLPROPERTIES", "TEMPORARY", "TERMINATED", "THEN", "TIME", "TIMEDIFF", 
			"TIMESTAMP", "TIMESTAMP_LTZ", "TIMESTAMP_NTZ", "TIMESTAMPADD", "TIMESTAMPDIFF", 
			"TINYINT", "TO", "EXECUTE", "TOUCH", "TRAILING", "TRANSACTION", "TRANSACTIONS", 
			"TRANSFORM", "TRIM", "TRUE", "TRUNCATE", "TRY_CAST", "TYPE", "UNARCHIVE", 
			"UNBOUNDED", "UNCACHE", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNPIVOT", 
			"UNSET", "UNTIL", "UPDATE", "USE", "USER", "USING", "VALUE", "VALUES", 
			"VARCHAR", "VAR", "VARIABLE", "VARIANT", "VERSION", "VIEW", "VIEWS", 
			"VOID", "WEEK", "WEEKS", "WHEN", "WHERE", "WHILE", "WINDOW", "WITH", 
			"WITHIN", "WITHOUT", "YEAR", "YEARS", "ZONE", "EQ", "NSEQ", "NEQ", "NEQJ", 
			"LT", "LTE", "GT", "GTE", "SHIFT_LEFT", "SHIFT_RIGHT", "SHIFT_RIGHT_UNSIGNED", 
			"PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "TILDE", "AMPERSAND", 
			"PIPE", "CONCAT_PIPE", "OPERATOR_PIPE", "HAT", "COLON", "DOUBLE_COLON", 
			"ARROW", "FAT_ARROW", "HENT_START", "HENT_END", "QUESTION", "STRING_LITERAL", 
			"DOUBLEQUOTED_STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", "TINYINT_LITERAL", 
			"INTEGER_VALUE", "EXPONENT_VALUE", "DECIMAL_VALUE", "FLOAT_LITERAL", 
			"DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
			"SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "SqlBaseParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }


	  /**
	   * When false, INTERSECT is given the greater precedence over the other set
	   * operations (UNION, EXCEPT and MINUS) as per the SQL standard.
	   */
	  public boolean legacy_setops_precedence_enabled = false;

	  /**
	   * When false, a literal with an exponent would be converted into
	   * double type rather than decimal type.
	   */
	  public boolean legacy_exponent_literal_as_decimal_enabled = false;

	  /**
	   * When true, the behavior of keywords follows ANSI SQL standard.
	   */
	  public boolean SQL_standard_keyword_behavior = false;

	  /**
	   * When true, double quoted literals are identifiers rather than STRINGs.
	   */
	  public boolean double_quoted_identifiers = false;

	public SqlBaseParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class CompoundOrSingleStatementContext extends ParserRuleContext {
		public SingleStatementContext singleStatement() {
			return getRuleContext(SingleStatementContext.class,0);
		}
		public SingleCompoundStatementContext singleCompoundStatement() {
			return getRuleContext(SingleCompoundStatementContext.class,0);
		}
		public CompoundOrSingleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundOrSingleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCompoundOrSingleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCompoundOrSingleStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCompoundOrSingleStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundOrSingleStatementContext compoundOrSingleStatement() throws RecognitionException {
		CompoundOrSingleStatementContext _localctx = new CompoundOrSingleStatementContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_compoundOrSingleStatement);
		try {
			setState(530);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
			case ADD:
			case ALTER:
			case ANALYZE:
			case CACHE:
			case CALL:
			case CLEAR:
			case COMMENT:
			case COMMIT:
			case CREATE:
			case DECLARE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DFS:
			case DROP:
			case EXPLAIN:
			case EXPORT:
			case FROM:
			case GRANT:
			case IMPORT:
			case INSERT:
			case LIST:
			case LOAD:
			case LOCK:
			case MAP:
			case MERGE:
			case MSCK:
			case REDUCE:
			case REFRESH:
			case REPAIR:
			case REPLACE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SELECT:
			case SET:
			case SHOW:
			case START:
			case TABLE:
			case EXECUTE:
			case TRUNCATE:
			case UNCACHE:
			case UNLOCK:
			case UPDATE:
			case USE:
			case VALUES:
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(528);
				singleStatement();
				}
				break;
			case BEGIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(529);
				singleCompoundStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleCompoundStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(SqlBaseParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode ATOMIC() { return getToken(SqlBaseParser.ATOMIC, 0); }
		public CompoundBodyContext compoundBody() {
			return getRuleContext(CompoundBodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(SqlBaseParser.SEMICOLON, 0); }
		public SingleCompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleCompoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleCompoundStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleCompoundStatementContext singleCompoundStatement() throws RecognitionException {
		SingleCompoundStatementContext _localctx = new SingleCompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_singleCompoundStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(532);
			match(BEGIN);
			setState(535);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				setState(533);
				match(NOT);
				setState(534);
				match(ATOMIC);
				}
				break;
			}
			setState(538);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				setState(537);
				compoundBody();
				}
				break;
			}
			setState(540);
			match(END);
			setState(542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(541);
				match(SEMICOLON);
				}
			}

			setState(544);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginEndCompoundBlockContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(SqlBaseParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public BeginLabelContext beginLabel() {
			return getRuleContext(BeginLabelContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode ATOMIC() { return getToken(SqlBaseParser.ATOMIC, 0); }
		public CompoundBodyContext compoundBody() {
			return getRuleContext(CompoundBodyContext.class,0);
		}
		public EndLabelContext endLabel() {
			return getRuleContext(EndLabelContext.class,0);
		}
		public BeginEndCompoundBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginEndCompoundBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBeginEndCompoundBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBeginEndCompoundBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBeginEndCompoundBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginEndCompoundBlockContext beginEndCompoundBlock() throws RecognitionException {
		BeginEndCompoundBlockContext _localctx = new BeginEndCompoundBlockContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_beginEndCompoundBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(547);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				setState(546);
				beginLabel();
				}
				break;
			}
			setState(549);
			match(BEGIN);
			setState(552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				setState(550);
				match(NOT);
				setState(551);
				match(ATOMIC);
				}
				break;
			}
			setState(555);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				setState(554);
				compoundBody();
				}
				break;
			}
			setState(557);
			match(END);
			setState(559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				setState(558);
				endLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundBodyContext extends ParserRuleContext {
		public CompoundStatementContext compoundStatement;
		public List<CompoundStatementContext> compoundStatements = new ArrayList<CompoundStatementContext>();
		public List<TerminalNode> SEMICOLON() { return getTokens(SqlBaseParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(SqlBaseParser.SEMICOLON, i);
		}
		public List<CompoundStatementContext> compoundStatement() {
			return getRuleContexts(CompoundStatementContext.class);
		}
		public CompoundStatementContext compoundStatement(int i) {
			return getRuleContext(CompoundStatementContext.class,i);
		}
		public CompoundBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCompoundBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCompoundBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCompoundBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundBodyContext compoundBody() throws RecognitionException {
		CompoundBodyContext _localctx = new CompoundBodyContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_compoundBody);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(564); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(561);
					((CompoundBodyContext)_localctx).compoundStatement = compoundStatement();
					((CompoundBodyContext)_localctx).compoundStatements.add(((CompoundBodyContext)_localctx).compoundStatement);
					setState(562);
					match(SEMICOLON);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(566); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,8,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public DeclareConditionStatementContext declareConditionStatement() {
			return getRuleContext(DeclareConditionStatementContext.class,0);
		}
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public SetStatementInsideSqlScriptContext setStatementInsideSqlScript() {
			return getRuleContext(SetStatementInsideSqlScriptContext.class,0);
		}
		public BeginEndCompoundBlockContext beginEndCompoundBlock() {
			return getRuleContext(BeginEndCompoundBlockContext.class,0);
		}
		public DeclareHandlerStatementContext declareHandlerStatement() {
			return getRuleContext(DeclareHandlerStatementContext.class,0);
		}
		public IfElseStatementContext ifElseStatement() {
			return getRuleContext(IfElseStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public ForStatementContext forStatement() {
			return getRuleContext(ForStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCompoundStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_compoundStatement);
		try {
			setState(581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(568);
				declareConditionStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(569);
				statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(570);
				setStatementInsideSqlScript();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(571);
				beginEndCompoundBlock();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(572);
				declareHandlerStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(573);
				ifElseStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(574);
				caseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(575);
				whileStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(576);
				repeatStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(577);
				leaveStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(578);
				iterateStatement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(579);
				loopStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(580);
				forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementInsideSqlScriptContext extends ParserRuleContext {
		public SetStatementInsideSqlScriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatementInsideSqlScript; }
	 
		public SetStatementInsideSqlScriptContext() { }
		public void copyFrom(SetStatementInsideSqlScriptContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetVariableInsideSqlScriptContext extends SetStatementInsideSqlScriptContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public AssignmentListContext assignmentList() {
			return getRuleContext(AssignmentListContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public SetVariableInsideSqlScriptContext(SetStatementInsideSqlScriptContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetVariableInsideSqlScript(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetVariableInsideSqlScript(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetVariableInsideSqlScript(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementInsideSqlScriptContext setStatementInsideSqlScript() throws RecognitionException {
		SetStatementInsideSqlScriptContext _localctx = new SetStatementInsideSqlScriptContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_setStatementInsideSqlScript);
		try {
			setState(594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				_localctx = new SetVariableInsideSqlScriptContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(583);
				match(SET);
				setState(584);
				assignmentList();
				}
				break;
			case 2:
				_localctx = new SetVariableInsideSqlScriptContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(585);
				match(SET);
				setState(586);
				match(LEFT_PAREN);
				setState(587);
				multipartIdentifierList();
				setState(588);
				match(RIGHT_PAREN);
				setState(589);
				match(EQ);
				setState(590);
				match(LEFT_PAREN);
				setState(591);
				query();
				setState(592);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStateValueContext extends ParserRuleContext {
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public SqlStateValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStateValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSqlStateValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSqlStateValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSqlStateValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStateValueContext sqlStateValue() throws RecognitionException {
		SqlStateValueContext _localctx = new SqlStateValueContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_sqlStateValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(596);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(SqlBaseParser.DECLARE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(SqlBaseParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public TerminalNode SQLSTATE() { return getToken(SqlBaseParser.SQLSTATE, 0); }
		public SqlStateValueContext sqlStateValue() {
			return getRuleContext(SqlStateValueContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(SqlBaseParser.VALUE, 0); }
		public DeclareConditionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareConditionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDeclareConditionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDeclareConditionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDeclareConditionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareConditionStatementContext declareConditionStatement() throws RecognitionException {
		DeclareConditionStatementContext _localctx = new DeclareConditionStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_declareConditionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(598);
			match(DECLARE);
			setState(599);
			multipartIdentifier();
			setState(600);
			match(CONDITION);
			setState(607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(601);
				match(FOR);
				setState(602);
				match(SQLSTATE);
				setState(604);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					setState(603);
					match(VALUE);
					}
					break;
				}
				setState(606);
				sqlStateValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionValueContext extends ParserRuleContext {
		public TerminalNode SQLSTATE() { return getToken(SqlBaseParser.SQLSTATE, 0); }
		public SqlStateValueContext sqlStateValue() {
			return getRuleContext(SqlStateValueContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(SqlBaseParser.VALUE, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(SqlBaseParser.SQLEXCEPTION, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(SqlBaseParser.FOUND, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterConditionValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitConditionValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitConditionValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionValueContext conditionValue() throws RecognitionException {
		ConditionValueContext _localctx = new ConditionValueContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_conditionValue);
		try {
			setState(618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(609);
				match(SQLSTATE);
				setState(611);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					setState(610);
					match(VALUE);
					}
					break;
				}
				setState(613);
				sqlStateValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(614);
				match(SQLEXCEPTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(615);
				match(NOT);
				setState(616);
				match(FOUND);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(617);
				multipartIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionValuesContext extends ParserRuleContext {
		public ConditionValueContext conditionValue;
		public List<ConditionValueContext> cvList = new ArrayList<ConditionValueContext>();
		public List<ConditionValueContext> conditionValue() {
			return getRuleContexts(ConditionValueContext.class);
		}
		public ConditionValueContext conditionValue(int i) {
			return getRuleContext(ConditionValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ConditionValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterConditionValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitConditionValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitConditionValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionValuesContext conditionValues() throws RecognitionException {
		ConditionValuesContext _localctx = new ConditionValuesContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_conditionValues);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(620);
			((ConditionValuesContext)_localctx).conditionValue = conditionValue();
			((ConditionValuesContext)_localctx).cvList.add(((ConditionValuesContext)_localctx).conditionValue);
			setState(625);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(621);
					match(COMMA);
					setState(622);
					((ConditionValuesContext)_localctx).conditionValue = conditionValue();
					((ConditionValuesContext)_localctx).cvList.add(((ConditionValuesContext)_localctx).conditionValue);
					}
					} 
				}
				setState(627);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,15,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(SqlBaseParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(SqlBaseParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public ConditionValuesContext conditionValues() {
			return getRuleContext(ConditionValuesContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(SqlBaseParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(SqlBaseParser.EXIT, 0); }
		public BeginEndCompoundBlockContext beginEndCompoundBlock() {
			return getRuleContext(BeginEndCompoundBlockContext.class,0);
		}
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public SetStatementInsideSqlScriptContext setStatementInsideSqlScript() {
			return getRuleContext(SetStatementInsideSqlScriptContext.class,0);
		}
		public DeclareHandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDeclareHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDeclareHandlerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDeclareHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareHandlerStatementContext declareHandlerStatement() throws RecognitionException {
		DeclareHandlerStatementContext _localctx = new DeclareHandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_declareHandlerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(628);
			match(DECLARE);
			setState(629);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(630);
			match(HANDLER);
			setState(631);
			match(FOR);
			setState(632);
			conditionValues();
			setState(636);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				setState(633);
				beginEndCompoundBlock();
				}
				break;
			case 2:
				{
				setState(634);
				statement();
				}
				break;
			case 3:
				{
				setState(635);
				setStatementInsideSqlScript();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(SqlBaseParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(SqlBaseParser.WHILE, i);
		}
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(SqlBaseParser.DO, 0); }
		public CompoundBodyContext compoundBody() {
			return getRuleContext(CompoundBodyContext.class,0);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public BeginLabelContext beginLabel() {
			return getRuleContext(BeginLabelContext.class,0);
		}
		public EndLabelContext endLabel() {
			return getRuleContext(EndLabelContext.class,0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterWhileStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitWhileStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitWhileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_whileStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				setState(638);
				beginLabel();
				}
				break;
			}
			setState(641);
			match(WHILE);
			setState(642);
			booleanExpression(0);
			setState(643);
			match(DO);
			setState(644);
			compoundBody();
			setState(645);
			match(END);
			setState(646);
			match(WHILE);
			setState(648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				setState(647);
				endLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfElseStatementContext extends ParserRuleContext {
		public CompoundBodyContext compoundBody;
		public List<CompoundBodyContext> conditionalBodies = new ArrayList<CompoundBodyContext>();
		public CompoundBodyContext elseBody;
		public List<TerminalNode> IF() { return getTokens(SqlBaseParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(SqlBaseParser.IF, i);
		}
		public List<BooleanExpressionContext> booleanExpression() {
			return getRuleContexts(BooleanExpressionContext.class);
		}
		public BooleanExpressionContext booleanExpression(int i) {
			return getRuleContext(BooleanExpressionContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(SqlBaseParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(SqlBaseParser.THEN, i);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public List<CompoundBodyContext> compoundBody() {
			return getRuleContexts(CompoundBodyContext.class);
		}
		public CompoundBodyContext compoundBody(int i) {
			return getRuleContext(CompoundBodyContext.class,i);
		}
		public List<TerminalNode> ELSEIF() { return getTokens(SqlBaseParser.ELSEIF); }
		public TerminalNode ELSEIF(int i) {
			return getToken(SqlBaseParser.ELSEIF, i);
		}
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public IfElseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifElseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIfElseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIfElseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIfElseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfElseStatementContext ifElseStatement() throws RecognitionException {
		IfElseStatementContext _localctx = new IfElseStatementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_ifElseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(650);
			match(IF);
			setState(651);
			booleanExpression(0);
			setState(652);
			match(THEN);
			setState(653);
			((IfElseStatementContext)_localctx).compoundBody = compoundBody();
			((IfElseStatementContext)_localctx).conditionalBodies.add(((IfElseStatementContext)_localctx).compoundBody);
			setState(661);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(654);
				match(ELSEIF);
				setState(655);
				booleanExpression(0);
				setState(656);
				match(THEN);
				setState(657);
				((IfElseStatementContext)_localctx).compoundBody = compoundBody();
				((IfElseStatementContext)_localctx).conditionalBodies.add(((IfElseStatementContext)_localctx).compoundBody);
				}
				}
				setState(663);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(664);
				match(ELSE);
				setState(665);
				((IfElseStatementContext)_localctx).elseBody = compoundBody();
				}
			}

			setState(668);
			match(END);
			setState(669);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(SqlBaseParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(SqlBaseParser.REPEAT, i);
		}
		public CompoundBodyContext compoundBody() {
			return getRuleContext(CompoundBodyContext.class,0);
		}
		public TerminalNode UNTIL() { return getToken(SqlBaseParser.UNTIL, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public BeginLabelContext beginLabel() {
			return getRuleContext(BeginLabelContext.class,0);
		}
		public EndLabelContext endLabel() {
			return getRuleContext(EndLabelContext.class,0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRepeatStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRepeatStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRepeatStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_repeatStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(671);
				beginLabel();
				}
				break;
			}
			setState(674);
			match(REPEAT);
			setState(675);
			compoundBody();
			setState(676);
			match(UNTIL);
			setState(677);
			booleanExpression(0);
			setState(678);
			match(END);
			setState(679);
			match(REPEAT);
			setState(681);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				setState(680);
				endLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(SqlBaseParser.LEAVE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLeaveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLeaveStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(683);
			match(LEAVE);
			setState(684);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(SqlBaseParser.ITERATE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIterateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIterateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(686);
			match(ITERATE);
			setState(687);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
	 
		public CaseStatementContext() { }
		public void copyFrom(CaseStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleCaseStatementContext extends CaseStatementContext {
		public ExpressionContext caseVariable;
		public ExpressionContext expression;
		public List<ExpressionContext> conditionExpressions = new ArrayList<ExpressionContext>();
		public CompoundBodyContext compoundBody;
		public List<CompoundBodyContext> conditionalBodies = new ArrayList<CompoundBodyContext>();
		public CompoundBodyContext elseBody;
		public List<TerminalNode> CASE() { return getTokens(SqlBaseParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(SqlBaseParser.CASE, i);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> WHEN() { return getTokens(SqlBaseParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(SqlBaseParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(SqlBaseParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(SqlBaseParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public List<CompoundBodyContext> compoundBody() {
			return getRuleContexts(CompoundBodyContext.class);
		}
		public CompoundBodyContext compoundBody(int i) {
			return getRuleContext(CompoundBodyContext.class,i);
		}
		public SimpleCaseStatementContext(CaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSimpleCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSimpleCaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSimpleCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SearchedCaseStatementContext extends CaseStatementContext {
		public BooleanExpressionContext booleanExpression;
		public List<BooleanExpressionContext> conditions = new ArrayList<BooleanExpressionContext>();
		public CompoundBodyContext compoundBody;
		public List<CompoundBodyContext> conditionalBodies = new ArrayList<CompoundBodyContext>();
		public CompoundBodyContext elseBody;
		public List<TerminalNode> CASE() { return getTokens(SqlBaseParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(SqlBaseParser.CASE, i);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public List<TerminalNode> WHEN() { return getTokens(SqlBaseParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(SqlBaseParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(SqlBaseParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(SqlBaseParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public List<BooleanExpressionContext> booleanExpression() {
			return getRuleContexts(BooleanExpressionContext.class);
		}
		public BooleanExpressionContext booleanExpression(int i) {
			return getRuleContext(BooleanExpressionContext.class,i);
		}
		public List<CompoundBodyContext> compoundBody() {
			return getRuleContexts(CompoundBodyContext.class);
		}
		public CompoundBodyContext compoundBody(int i) {
			return getRuleContext(CompoundBodyContext.class,i);
		}
		public SearchedCaseStatementContext(CaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSearchedCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSearchedCaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSearchedCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_caseStatement);
		int _la;
		try {
			setState(724);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				_localctx = new SearchedCaseStatementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(689);
				match(CASE);
				setState(695); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(690);
					match(WHEN);
					setState(691);
					((SearchedCaseStatementContext)_localctx).booleanExpression = booleanExpression(0);
					((SearchedCaseStatementContext)_localctx).conditions.add(((SearchedCaseStatementContext)_localctx).booleanExpression);
					setState(692);
					match(THEN);
					setState(693);
					((SearchedCaseStatementContext)_localctx).compoundBody = compoundBody();
					((SearchedCaseStatementContext)_localctx).conditionalBodies.add(((SearchedCaseStatementContext)_localctx).compoundBody);
					}
					}
					setState(697); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(699);
					match(ELSE);
					setState(700);
					((SearchedCaseStatementContext)_localctx).elseBody = compoundBody();
					}
				}

				setState(703);
				match(END);
				setState(704);
				match(CASE);
				}
				break;
			case 2:
				_localctx = new SimpleCaseStatementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(706);
				match(CASE);
				setState(707);
				((SimpleCaseStatementContext)_localctx).caseVariable = expression();
				setState(713); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(708);
					match(WHEN);
					setState(709);
					((SimpleCaseStatementContext)_localctx).expression = expression();
					((SimpleCaseStatementContext)_localctx).conditionExpressions.add(((SimpleCaseStatementContext)_localctx).expression);
					setState(710);
					match(THEN);
					setState(711);
					((SimpleCaseStatementContext)_localctx).compoundBody = compoundBody();
					((SimpleCaseStatementContext)_localctx).conditionalBodies.add(((SimpleCaseStatementContext)_localctx).compoundBody);
					}
					}
					setState(715); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(717);
					match(ELSE);
					setState(718);
					((SimpleCaseStatementContext)_localctx).elseBody = compoundBody();
					}
				}

				setState(721);
				match(END);
				setState(722);
				match(CASE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(SqlBaseParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(SqlBaseParser.LOOP, i);
		}
		public CompoundBodyContext compoundBody() {
			return getRuleContext(CompoundBodyContext.class,0);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public BeginLabelContext beginLabel() {
			return getRuleContext(BeginLabelContext.class,0);
		}
		public EndLabelContext endLabel() {
			return getRuleContext(EndLabelContext.class,0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLoopStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLoopStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLoopStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_loopStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(726);
				beginLabel();
				}
				break;
			}
			setState(729);
			match(LOOP);
			setState(730);
			compoundBody();
			setState(731);
			match(END);
			setState(732);
			match(LOOP);
			setState(734);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(733);
				endLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForStatementContext extends ParserRuleContext {
		public List<TerminalNode> FOR() { return getTokens(SqlBaseParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(SqlBaseParser.FOR, i);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode DO() { return getToken(SqlBaseParser.DO, 0); }
		public CompoundBodyContext compoundBody() {
			return getRuleContext(CompoundBodyContext.class,0);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public BeginLabelContext beginLabel() {
			return getRuleContext(BeginLabelContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public EndLabelContext endLabel() {
			return getRuleContext(EndLabelContext.class,0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterForStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitForStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitForStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForStatementContext forStatement() throws RecognitionException {
		ForStatementContext _localctx = new ForStatementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_forStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(737);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				setState(736);
				beginLabel();
				}
				break;
			}
			setState(739);
			match(FOR);
			setState(743);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				setState(740);
				multipartIdentifier();
				setState(741);
				match(AS);
				}
				break;
			}
			setState(745);
			query();
			setState(746);
			match(DO);
			setState(747);
			compoundBody();
			setState(748);
			match(END);
			setState(749);
			match(FOR);
			setState(751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				setState(750);
				endLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleStatementContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public SetResetStatementContext setResetStatement() {
			return getRuleContext(SetResetStatementContext.class,0);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(SqlBaseParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(SqlBaseParser.SEMICOLON, i);
		}
		public SingleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleStatementContext singleStatement() throws RecognitionException {
		SingleStatementContext _localctx = new SingleStatementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_singleStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				setState(753);
				statement();
				}
				break;
			case 2:
				{
				setState(754);
				setResetStatement();
				}
				break;
			}
			setState(760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				setState(757);
				match(SEMICOLON);
				}
				}
				setState(762);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(763);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginLabelContext extends ParserRuleContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode COLON() { return getToken(SqlBaseParser.COLON, 0); }
		public BeginLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBeginLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBeginLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBeginLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginLabelContext beginLabel() throws RecognitionException {
		BeginLabelContext _localctx = new BeginLabelContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_beginLabel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(765);
			multipartIdentifier();
			setState(766);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EndLabelContext extends ParserRuleContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public EndLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterEndLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitEndLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitEndLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EndLabelContext endLabel() throws RecognitionException {
		EndLabelContext _localctx = new EndLabelContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_endLabel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(768);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleExpressionContext extends ParserRuleContext {
		public NamedExpressionContext namedExpression() {
			return getRuleContext(NamedExpressionContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleExpressionContext singleExpression() throws RecognitionException {
		SingleExpressionContext _localctx = new SingleExpressionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_singleExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(770);
			namedExpression();
			setState(771);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableIdentifierContext extends ParserRuleContext {
		public TableIdentifierContext tableIdentifier() {
			return getRuleContext(TableIdentifierContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleTableIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleTableIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleTableIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleTableIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableIdentifierContext singleTableIdentifier() throws RecognitionException {
		SingleTableIdentifierContext _localctx = new SingleTableIdentifierContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_singleTableIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(773);
			tableIdentifier();
			setState(774);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleMultipartIdentifierContext extends ParserRuleContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleMultipartIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleMultipartIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleMultipartIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleMultipartIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleMultipartIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleMultipartIdentifierContext singleMultipartIdentifier() throws RecognitionException {
		SingleMultipartIdentifierContext _localctx = new SingleMultipartIdentifierContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_singleMultipartIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(776);
			multipartIdentifier();
			setState(777);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleFunctionIdentifierContext extends ParserRuleContext {
		public FunctionIdentifierContext functionIdentifier() {
			return getRuleContext(FunctionIdentifierContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleFunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleFunctionIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleFunctionIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleFunctionIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleFunctionIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleFunctionIdentifierContext singleFunctionIdentifier() throws RecognitionException {
		SingleFunctionIdentifierContext _localctx = new SingleFunctionIdentifierContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_singleFunctionIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(779);
			functionIdentifier();
			setState(780);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDataTypeContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleDataTypeContext singleDataType() throws RecognitionException {
		SingleDataTypeContext _localctx = new SingleDataTypeContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_singleDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(782);
			dataType();
			setState(783);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableSchemaContext extends ParserRuleContext {
		public ColTypeListContext colTypeList() {
			return getRuleContext(ColTypeListContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleTableSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleTableSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleTableSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleTableSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableSchemaContext singleTableSchema() throws RecognitionException {
		SingleTableSchemaContext _localctx = new SingleTableSchemaContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_singleTableSchema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(785);
			colTypeList();
			setState(786);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleRoutineParamListContext extends ParserRuleContext {
		public ColDefinitionListContext colDefinitionList() {
			return getRuleContext(ColDefinitionListContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleRoutineParamListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleRoutineParamList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleRoutineParamList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleRoutineParamList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleRoutineParamList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleRoutineParamListContext singleRoutineParamList() throws RecognitionException {
		SingleRoutineParamListContext _localctx = new SingleRoutineParamListContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_singleRoutineParamList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(788);
			colDefinitionList();
			setState(789);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
	 
		public StatementContext() { }
		public void copyFrom(StatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ExplainContext extends StatementContext {
		public TerminalNode EXPLAIN() { return getToken(SqlBaseParser.EXPLAIN, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public SetResetStatementContext setResetStatement() {
			return getRuleContext(SetResetStatementContext.class,0);
		}
		public TerminalNode LOGICAL() { return getToken(SqlBaseParser.LOGICAL, 0); }
		public TerminalNode FORMATTED() { return getToken(SqlBaseParser.FORMATTED, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode CODEGEN() { return getToken(SqlBaseParser.CODEGEN, 0); }
		public TerminalNode COST() { return getToken(SqlBaseParser.COST, 0); }
		public ExplainContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExplain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExplain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExplain(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamespaceCollationContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public CollationSpecContext collationSpec() {
			return getRuleContext(CollationSpecContext.class,0);
		}
		public SetNamespaceCollationContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetNamespaceCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetNamespaceCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetNamespaceCollation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterViewQueryContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public AlterViewQueryContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAlterViewQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAlterViewQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAlterViewQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreatePipelineInsertIntoFlowContext extends StatementContext {
		public CreatePipelineFlowHeaderContext createPipelineFlowHeader() {
			return getRuleContext(CreatePipelineFlowHeaderContext.class,0);
		}
		public InsertIntoContext insertInto() {
			return getRuleContext(InsertIntoContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public CreatePipelineInsertIntoFlowContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreatePipelineInsertIntoFlow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreatePipelineInsertIntoFlow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreatePipelineInsertIntoFlow(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UseContext extends StatementContext {
		public TerminalNode USE() { return getToken(SqlBaseParser.USE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public UseContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUse(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropNamespaceContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlBaseParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(SqlBaseParser.CASCADE, 0); }
		public DropNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropNamespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateTempViewUsingContext extends StatementContext {
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TableIdentifierContext tableIdentifier() {
			return getRuleContext(TableIdentifierContext.class,0);
		}
		public TableProviderContext tableProvider() {
			return getRuleContext(TableProviderContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlBaseParser.GLOBAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ColTypeListContext colTypeList() {
			return getRuleContext(ColTypeListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public CreateTempViewUsingContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateTempViewUsing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateTempViewUsing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateTempViewUsing(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowProceduresContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode PROCEDURES() { return getToken(SqlBaseParser.PROCEDURES, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public ShowProceduresContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowProcedures(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowProcedures(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowProcedures(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RenameTableContext extends StatementContext {
		public IdentifierReferenceContext from;
		public MultipartIdentifierContext to;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public RenameTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FailNativeCommandContext extends StatementContext {
		public UnsupportedHiveNativeCommandsContext unsupportedHiveNativeCommands() {
			return getRuleContext(UnsupportedHiveNativeCommandsContext.class,0);
		}
		public FailNativeCommandContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFailNativeCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFailNativeCommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFailNativeCommand(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCatalogContext extends StatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode CATALOG() { return getToken(SqlBaseParser.CATALOG, 0); }
		public CatalogIdentifierReferenceContext catalogIdentifierReference() {
			return getRuleContext(CatalogIdentifierReferenceContext.class,0);
		}
		public SetCatalogContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetCatalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetCatalog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetCatalog(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ClearCacheContext extends StatementContext {
		public TerminalNode CLEAR() { return getToken(SqlBaseParser.CLEAR, 0); }
		public TerminalNode CACHE() { return getToken(SqlBaseParser.CACHE, 0); }
		public ClearCacheContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterClearCache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitClearCache(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitClearCache(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropViewContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public DropViewContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowTablesContext extends StatementContext {
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode TABLES() { return getToken(SqlBaseParser.TABLES, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public ShowTablesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowTables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RecoverPartitionsContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode RECOVER() { return getToken(SqlBaseParser.RECOVER, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public RecoverPartitionsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRecoverPartitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRecoverPartitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRecoverPartitions(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropTableConstraintContext extends StatementContext {
		public IdentifierContext name;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlBaseParser.CONSTRAINT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlBaseParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(SqlBaseParser.CASCADE, 0); }
		public DropTableConstraintContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropIndexContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public DropIndexContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCatalogsContext extends StatementContext {
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode CATALOGS() { return getToken(SqlBaseParser.CATALOGS, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public ShowCatalogsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowCatalogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowCatalogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowCatalogs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCurrentNamespaceContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public ShowCurrentNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowCurrentNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowCurrentNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowCurrentNamespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RenameTablePartitionContext extends StatementContext {
		public PartitionSpecContext from;
		public PartitionSpecContext to;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public List<PartitionSpecContext> partitionSpec() {
			return getRuleContexts(PartitionSpecContext.class);
		}
		public PartitionSpecContext partitionSpec(int i) {
			return getRuleContext(PartitionSpecContext.class,i);
		}
		public RenameTablePartitionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRenameTablePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRenameTablePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRenameTablePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RepairTableContext extends StatementContext {
		public Token option;
		public TerminalNode REPAIR() { return getToken(SqlBaseParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode MSCK() { return getToken(SqlBaseParser.MSCK, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode SYNC() { return getToken(SqlBaseParser.SYNC, 0); }
		public RepairTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRepairTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRepairTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AddTableConstraintContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TableConstraintDefinitionContext tableConstraintDefinition() {
			return getRuleContext(TableConstraintDefinitionContext.class,0);
		}
		public AddTableConstraintContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAddTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAddTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAddTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RefreshResourceContext extends StatementContext {
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public RefreshResourceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRefreshResource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRefreshResource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRefreshResource(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterViewSchemaBindingContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public SchemaBindingContext schemaBinding() {
			return getRuleContext(SchemaBindingContext.class,0);
		}
		public AlterViewSchemaBindingContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAlterViewSchemaBinding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAlterViewSchemaBinding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAlterViewSchemaBinding(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateVariableContext extends StatementContext {
		public IdentifierReferenceContext identifierReference;
		public List<IdentifierReferenceContext> identifierReferences = new ArrayList<IdentifierReferenceContext>();
		public TerminalNode DECLARE() { return getToken(SqlBaseParser.DECLARE, 0); }
		public List<IdentifierReferenceContext> identifierReference() {
			return getRuleContexts(IdentifierReferenceContext.class);
		}
		public IdentifierReferenceContext identifierReference(int i) {
			return getRuleContext(IdentifierReferenceContext.class,i);
		}
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public VariableDefaultExpressionContext variableDefaultExpression() {
			return getRuleContext(VariableDefaultExpressionContext.class,0);
		}
		public CreateVariableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateVariable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreatePipelineDatasetContext extends StatementContext {
		public CreatePipelineDatasetHeaderContext createPipelineDatasetHeader() {
			return getRuleContext(CreatePipelineDatasetHeaderContext.class,0);
		}
		public CreateTableClausesContext createTableClauses() {
			return getRuleContext(CreateTableClausesContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableProviderContext tableProvider() {
			return getRuleContext(TableProviderContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public CreatePipelineDatasetContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreatePipelineDataset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreatePipelineDataset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreatePipelineDataset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateTableContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public ShowCreateTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowNamespacesContext extends StatementContext {
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public NamespacesContext namespaces() {
			return getRuleContext(NamespacesContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public ShowNamespacesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowNamespaces(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowNamespaces(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowNamespaces(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowColumnsContext extends StatementContext {
		public IdentifierReferenceContext table;
		public MultipartIdentifierContext ns;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public List<TerminalNode> FROM() { return getTokens(SqlBaseParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(SqlBaseParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(SqlBaseParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(SqlBaseParser.IN, i);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ShowColumnsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReplaceTableContext extends StatementContext {
		public ReplaceTableHeaderContext replaceTableHeader() {
			return getRuleContext(ReplaceTableHeaderContext.class,0);
		}
		public CreateTableClausesContext createTableClauses() {
			return getRuleContext(CreateTableClausesContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableProviderContext tableProvider() {
			return getRuleContext(TableProviderContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public ReplaceTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterReplaceTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitReplaceTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitReplaceTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AnalyzeTablesContext extends StatementContext {
		public TerminalNode ANALYZE() { return getToken(SqlBaseParser.ANALYZE, 0); }
		public TerminalNode TABLES() { return getToken(SqlBaseParser.TABLES, 0); }
		public TerminalNode COMPUTE() { return getToken(SqlBaseParser.COMPUTE, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlBaseParser.STATISTICS, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public AnalyzeTablesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAnalyzeTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAnalyzeTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAnalyzeTables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnsetNamespacePropertiesContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SqlBaseParser.UNSET, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode DBPROPERTIES() { return getToken(SqlBaseParser.DBPROPERTIES, 0); }
		public TerminalNode PROPERTIES() { return getToken(SqlBaseParser.PROPERTIES, 0); }
		public UnsetNamespacePropertiesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnsetNamespaceProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnsetNamespaceProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnsetNamespaceProperties(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AddTablePartitionContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public List<PartitionSpecLocationContext> partitionSpecLocation() {
			return getRuleContexts(PartitionSpecLocationContext.class);
		}
		public PartitionSpecLocationContext partitionSpecLocation(int i) {
			return getRuleContext(PartitionSpecLocationContext.class,i);
		}
		public AddTablePartitionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAddTablePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAddTablePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAddTablePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamespaceLocationContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public LocationSpecContext locationSpec() {
			return getRuleContext(LocationSpecContext.class,0);
		}
		public SetNamespaceLocationContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetNamespaceLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetNamespaceLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetNamespaceLocation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RefreshTableContext extends StatementContext {
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public RefreshTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRefreshTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRefreshTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRefreshTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableCollationContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public CollationSpecContext collationSpec() {
			return getRuleContext(CollationSpecContext.class,0);
		}
		public AlterTableCollationContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAlterTableCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAlterTableCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAlterTableCollation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamespacePropertiesContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode DBPROPERTIES() { return getToken(SqlBaseParser.DBPROPERTIES, 0); }
		public TerminalNode PROPERTIES() { return getToken(SqlBaseParser.PROPERTIES, 0); }
		public SetNamespacePropertiesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetNamespaceProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetNamespaceProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetNamespaceProperties(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ManageResourceContext extends StatementContext {
		public Token op;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode LIST() { return getToken(SqlBaseParser.LIST, 0); }
		public ManageResourceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterManageResource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitManageResource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitManageResource(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AnalyzeContext extends StatementContext {
		public TerminalNode ANALYZE() { return getToken(SqlBaseParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode COMPUTE() { return getToken(SqlBaseParser.COMPUTE, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlBaseParser.STATISTICS, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public IdentifierSeqContext identifierSeq() {
			return getRuleContext(IdentifierSeqContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public AnalyzeContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAnalyze(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAnalyze(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAnalyze(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateFunctionContext extends StatementContext {
		public StringLitContext className;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public List<ResourceContext> resource() {
			return getRuleContexts(ResourceContext.class);
		}
		public ResourceContext resource(int i) {
			return getRuleContext(ResourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public CreateFunctionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveReplaceColumnsContext extends StatementContext {
		public IdentifierReferenceContext table;
		public QualifiedColTypeWithPositionListContext columns;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() {
			return getRuleContext(QualifiedColTypeWithPositionListContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public HiveReplaceColumnsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterHiveReplaceColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitHiveReplaceColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitHiveReplaceColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentNamespaceContext extends StatementContext {
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IS() { return getToken(SqlBaseParser.IS, 0); }
		public CommentContext comment() {
			return getRuleContext(CommentContext.class,0);
		}
		public CommentNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCommentNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCommentNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCommentNamespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateTableContext extends StatementContext {
		public CreateTableHeaderContext createTableHeader() {
			return getRuleContext(CreateTableHeaderContext.class,0);
		}
		public CreateTableClausesContext createTableClauses() {
			return getRuleContext(CreateTableClausesContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableProviderContext tableProvider() {
			return getRuleContext(TableProviderContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public CreateTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DmlStatementContext extends StatementContext {
		public DmlStatementNoWithContext dmlStatementNoWith() {
			return getRuleContext(DmlStatementNoWithContext.class,0);
		}
		public CtesContext ctes() {
			return getRuleContext(CtesContext.class,0);
		}
		public DmlStatementContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateTableLikeContext extends StatementContext {
		public TableIdentifierContext target;
		public TableIdentifierContext source;
		public PropertyListContext tableProps;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public List<TableIdentifierContext> tableIdentifier() {
			return getRuleContexts(TableIdentifierContext.class);
		}
		public TableIdentifierContext tableIdentifier(int i) {
			return getRuleContext(TableIdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public List<TableProviderContext> tableProvider() {
			return getRuleContexts(TableProviderContext.class);
		}
		public TableProviderContext tableProvider(int i) {
			return getRuleContext(TableProviderContext.class,i);
		}
		public List<RowFormatContext> rowFormat() {
			return getRuleContexts(RowFormatContext.class);
		}
		public RowFormatContext rowFormat(int i) {
			return getRuleContext(RowFormatContext.class,i);
		}
		public List<CreateFileFormatContext> createFileFormat() {
			return getRuleContexts(CreateFileFormatContext.class);
		}
		public CreateFileFormatContext createFileFormat(int i) {
			return getRuleContext(CreateFileFormatContext.class,i);
		}
		public List<LocationSpecContext> locationSpec() {
			return getRuleContexts(LocationSpecContext.class);
		}
		public LocationSpecContext locationSpec(int i) {
			return getRuleContext(LocationSpecContext.class,i);
		}
		public List<TerminalNode> TBLPROPERTIES() { return getTokens(SqlBaseParser.TBLPROPERTIES); }
		public TerminalNode TBLPROPERTIES(int i) {
			return getToken(SqlBaseParser.TBLPROPERTIES, i);
		}
		public List<PropertyListContext> propertyList() {
			return getRuleContexts(PropertyListContext.class);
		}
		public PropertyListContext propertyList(int i) {
			return getRuleContext(PropertyListContext.class,i);
		}
		public CreateTableLikeContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateTableLike(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateTableLike(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateTableLike(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UncacheTableContext extends StatementContext {
		public TerminalNode UNCACHE() { return getToken(SqlBaseParser.UNCACHE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public UncacheTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUncacheTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUncacheTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUncacheTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropFunctionContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public DropFunctionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeRelationContext extends StatementContext {
		public Token option;
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public DescribeColNameContext describeColName() {
			return getRuleContext(DescribeColNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode JSON() { return getToken(SqlBaseParser.JSON, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode FORMATTED() { return getToken(SqlBaseParser.FORMATTED, 0); }
		public DescribeRelationContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDescribeRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDescribeRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDescribeRelation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LoadDataContext extends StatementContext {
		public StringLitContext path;
		public TerminalNode LOAD() { return getToken(SqlBaseParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(SqlBaseParser.DATA, 0); }
		public TerminalNode INPATH() { return getToken(SqlBaseParser.INPATH, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public LoadDataContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLoadData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLoadData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLoadData(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowPartitionsContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public ShowPartitionsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowPartitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowPartitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowPartitions(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeFunctionContext extends StatementContext {
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public DescribeFuncNameContext describeFuncName() {
			return getRuleContext(DescribeFuncNameContext.class,0);
		}
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public DescribeFunctionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDescribeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDescribeFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDescribeFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RenameTableColumnContext extends StatementContext {
		public IdentifierReferenceContext table;
		public MultipartIdentifierContext from;
		public ErrorCapturingIdentifierContext to;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public RenameTableColumnContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRenameTableColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRenameTableColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRenameTableColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateUserDefinedFunctionContext extends StatementContext {
		public ColDefinitionListContext parameters;
		public ColTypeListContext returnParams;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public RoutineCharacteristicsContext routineCharacteristics() {
			return getRuleContext(RoutineCharacteristicsContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(SqlBaseParser.RETURN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode RETURNS() { return getToken(SqlBaseParser.RETURNS, 0); }
		public ColDefinitionListContext colDefinitionList() {
			return getRuleContext(ColDefinitionListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public ColTypeListContext colTypeList() {
			return getRuleContext(ColTypeListContext.class,0);
		}
		public CreateUserDefinedFunctionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateUserDefinedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateUserDefinedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateUserDefinedFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StatementDefaultContext extends StatementContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public StatementDefaultContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStatementDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStatementDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStatementDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterClusterByContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public ClusterBySpecContext clusterBySpec() {
			return getRuleContext(ClusterBySpecContext.class,0);
		}
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode NONE() { return getToken(SqlBaseParser.NONE, 0); }
		public AlterClusterByContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAlterClusterBy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAlterClusterBy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAlterClusterBy(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HiveChangeColumnContext extends StatementContext {
		public IdentifierReferenceContext table;
		public MultipartIdentifierContext colName;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode CHANGE() { return getToken(SqlBaseParser.CHANGE, 0); }
		public ColTypeContext colType() {
			return getRuleContext(ColTypeContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public ColPositionContext colPosition() {
			return getRuleContext(ColPositionContext.class,0);
		}
		public HiveChangeColumnContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterHiveChangeColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitHiveChangeColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitHiveChangeColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeQueryContext extends StatementContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode QUERY() { return getToken(SqlBaseParser.QUERY, 0); }
		public DescribeQueryContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDescribeQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDescribeQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDescribeQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TruncateTableContext extends StatementContext {
		public TerminalNode TRUNCATE() { return getToken(SqlBaseParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TruncateTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetTableSerDeContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public SetTableSerDeContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetTableSerDe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetTableSerDe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetTableSerDe(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateViewContext extends StatementContext {
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public IdentifierCommentListContext identifierCommentList() {
			return getRuleContext(IdentifierCommentListContext.class,0);
		}
		public List<CommentSpecContext> commentSpec() {
			return getRuleContexts(CommentSpecContext.class);
		}
		public CommentSpecContext commentSpec(int i) {
			return getRuleContext(CommentSpecContext.class,i);
		}
		public List<SchemaBindingContext> schemaBinding() {
			return getRuleContexts(SchemaBindingContext.class);
		}
		public SchemaBindingContext schemaBinding(int i) {
			return getRuleContext(SchemaBindingContext.class,i);
		}
		public List<CollationSpecContext> collationSpec() {
			return getRuleContexts(CollationSpecContext.class);
		}
		public CollationSpecContext collationSpec(int i) {
			return getRuleContext(CollationSpecContext.class,i);
		}
		public List<TerminalNode> PARTITIONED() { return getTokens(SqlBaseParser.PARTITIONED); }
		public TerminalNode PARTITIONED(int i) {
			return getToken(SqlBaseParser.PARTITIONED, i);
		}
		public List<TerminalNode> ON() { return getTokens(SqlBaseParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(SqlBaseParser.ON, i);
		}
		public List<IdentifierListContext> identifierList() {
			return getRuleContexts(IdentifierListContext.class);
		}
		public IdentifierListContext identifierList(int i) {
			return getRuleContext(IdentifierListContext.class,i);
		}
		public List<TerminalNode> TBLPROPERTIES() { return getTokens(SqlBaseParser.TBLPROPERTIES); }
		public TerminalNode TBLPROPERTIES(int i) {
			return getToken(SqlBaseParser.TBLPROPERTIES, i);
		}
		public List<PropertyListContext> propertyList() {
			return getRuleContexts(PropertyListContext.class);
		}
		public PropertyListContext propertyList(int i) {
			return getRuleContext(PropertyListContext.class,i);
		}
		public TerminalNode GLOBAL() { return getToken(SqlBaseParser.GLOBAL, 0); }
		public CreateViewContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropTablePartitionsContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public List<PartitionSpecContext> partitionSpec() {
			return getRuleContexts(PartitionSpecContext.class);
		}
		public PartitionSpecContext partitionSpec(int i) {
			return getRuleContext(PartitionSpecContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode PURGE() { return getToken(SqlBaseParser.PURGE, 0); }
		public DropTablePartitionsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropTablePartitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropTablePartitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropTablePartitions(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropTableContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode PURGE() { return getToken(SqlBaseParser.PURGE, 0); }
		public DropTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowTableExtendedContext extends StatementContext {
		public IdentifierReferenceContext ns;
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public ShowTableExtendedContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowTableExtended(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowTableExtended(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowTableExtended(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeNamespaceContext extends StatementContext {
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public DescribeNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDescribeNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDescribeNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDescribeNamespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAlterColumnContext extends StatementContext {
		public IdentifierReferenceContext table;
		public AlterColumnSpecListContext columns;
		public List<TerminalNode> ALTER() { return getTokens(SqlBaseParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(SqlBaseParser.ALTER, i);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode CHANGE() { return getToken(SqlBaseParser.CHANGE, 0); }
		public AlterColumnSpecListContext alterColumnSpecList() {
			return getRuleContext(AlterColumnSpecListContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public AlterTableAlterColumnContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAlterTableAlterColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAlterTableAlterColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAlterTableAlterColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RefreshFunctionContext extends StatementContext {
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public RefreshFunctionContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRefreshFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRefreshFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRefreshFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentTableContext extends StatementContext {
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IS() { return getToken(SqlBaseParser.IS, 0); }
		public CommentContext comment() {
			return getRuleContext(CommentContext.class,0);
		}
		public CommentTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCommentTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCommentTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCommentTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeProcedureContext extends StatementContext {
		public TerminalNode PROCEDURE() { return getToken(SqlBaseParser.PROCEDURE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public DescribeProcedureContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDescribeProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDescribeProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDescribeProcedure(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateIndexContext extends StatementContext {
		public IdentifierContext indexType;
		public MultipartIdentifierPropertyListContext columns;
		public PropertyListContext options;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public MultipartIdentifierPropertyListContext multipartIdentifierPropertyList() {
			return getRuleContext(MultipartIdentifierPropertyListContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public CreateIndexContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UseNamespaceContext extends StatementContext {
		public TerminalNode USE() { return getToken(SqlBaseParser.USE, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public UseNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUseNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUseNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUseNamespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropVariableContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public DropVariableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropVariable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateNamespaceContext extends StatementContext {
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public List<CommentSpecContext> commentSpec() {
			return getRuleContexts(CommentSpecContext.class);
		}
		public CommentSpecContext commentSpec(int i) {
			return getRuleContext(CommentSpecContext.class,i);
		}
		public List<LocationSpecContext> locationSpec() {
			return getRuleContexts(LocationSpecContext.class);
		}
		public LocationSpecContext locationSpec(int i) {
			return getRuleContext(LocationSpecContext.class,i);
		}
		public List<CollationSpecContext> collationSpec() {
			return getRuleContexts(CollationSpecContext.class);
		}
		public CollationSpecContext collationSpec(int i) {
			return getRuleContext(CollationSpecContext.class,i);
		}
		public List<TerminalNode> WITH() { return getTokens(SqlBaseParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(SqlBaseParser.WITH, i);
		}
		public List<PropertyListContext> propertyList() {
			return getRuleContexts(PropertyListContext.class);
		}
		public PropertyListContext propertyList(int i) {
			return getRuleContext(PropertyListContext.class,i);
		}
		public List<TerminalNode> DBPROPERTIES() { return getTokens(SqlBaseParser.DBPROPERTIES); }
		public TerminalNode DBPROPERTIES(int i) {
			return getToken(SqlBaseParser.DBPROPERTIES, i);
		}
		public List<TerminalNode> PROPERTIES() { return getTokens(SqlBaseParser.PROPERTIES); }
		public TerminalNode PROPERTIES(int i) {
			return getToken(SqlBaseParser.PROPERTIES, i);
		}
		public CreateNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateNamespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CallContext extends StatementContext {
		public TerminalNode CALL() { return getToken(SqlBaseParser.CALL, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<FunctionArgumentContext> functionArgument() {
			return getRuleContexts(FunctionArgumentContext.class);
		}
		public FunctionArgumentContext functionArgument(int i) {
			return getRuleContext(FunctionArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public CallContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowTblPropertiesContext extends StatementContext {
		public IdentifierReferenceContext table;
		public PropertyKeyContext key;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public PropertyKeyContext propertyKey() {
			return getRuleContext(PropertyKeyContext.class,0);
		}
		public ShowTblPropertiesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowTblProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowTblProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowTblProperties(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class VisitExecuteImmediateContext extends StatementContext {
		public ExecuteImmediateContext executeImmediate() {
			return getRuleContext(ExecuteImmediateContext.class,0);
		}
		public VisitExecuteImmediateContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterVisitExecuteImmediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitVisitExecuteImmediate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitVisitExecuteImmediate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnsetTablePropertiesContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SqlBaseParser.UNSET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public UnsetTablePropertiesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnsetTableProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnsetTableProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnsetTableProperties(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetTableLocationContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public LocationSpecContext locationSpec() {
			return getRuleContext(LocationSpecContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public SetTableLocationContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetTableLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetTableLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetTableLocation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DropTableColumnsContext extends StatementContext {
		public MultipartIdentifierListContext columns;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public DropTableColumnsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDropTableColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDropTableColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDropTableColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowViewsContext extends StatementContext {
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode VIEWS() { return getToken(SqlBaseParser.VIEWS, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public ShowViewsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowViews(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowViews(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowViews(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowFunctionsContext extends StatementContext {
		public IdentifierReferenceContext ns;
		public MultipartIdentifierContext legacy;
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlBaseParser.FUNCTIONS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public ShowFunctionsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShowFunctions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShowFunctions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShowFunctions(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CacheTableContext extends StatementContext {
		public PropertyListContext options;
		public TerminalNode CACHE() { return getToken(SqlBaseParser.CACHE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode LAZY() { return getToken(SqlBaseParser.LAZY, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public CacheTableContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCacheTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCacheTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCacheTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AddTableColumnsContext extends StatementContext {
		public QualifiedColTypeWithPositionListContext columns;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() {
			return getRuleContext(QualifiedColTypeWithPositionListContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public AddTableColumnsContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAddTableColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAddTableColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAddTableColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetTablePropertiesContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public SetTablePropertiesContext(StatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetTableProperties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetTableProperties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetTableProperties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_statement);
		int _la;
		try {
			int _alt;
			setState(1703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				_localctx = new StatementDefaultContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(791);
				query();
				}
				break;
			case 2:
				_localctx = new VisitExecuteImmediateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(792);
				executeImmediate();
				}
				break;
			case 3:
				_localctx = new DmlStatementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(793);
					ctes();
					}
				}

				setState(796);
				dmlStatementNoWith();
				}
				break;
			case 4:
				_localctx = new UseContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(797);
				match(USE);
				setState(798);
				identifierReference();
				}
				break;
			case 5:
				_localctx = new UseNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(799);
				match(USE);
				setState(800);
				namespace();
				setState(801);
				identifierReference();
				}
				break;
			case 6:
				_localctx = new SetCatalogContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(803);
				match(SET);
				setState(804);
				match(CATALOG);
				setState(805);
				catalogIdentifierReference();
				}
				break;
			case 7:
				_localctx = new CreateNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(806);
				match(CREATE);
				setState(807);
				namespace();
				setState(812);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(808);
					match(IF);
					setState(809);
					errorCapturingNot();
					setState(810);
					match(EXISTS);
					}
					break;
				}
				setState(814);
				identifierReference();
				setState(823);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMENT || _la==DEFAULT || _la==LOCATION || _la==WITH) {
					{
					setState(821);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case COMMENT:
						{
						setState(815);
						commentSpec();
						}
						break;
					case LOCATION:
						{
						setState(816);
						locationSpec();
						}
						break;
					case DEFAULT:
						{
						setState(817);
						collationSpec();
						}
						break;
					case WITH:
						{
						{
						setState(818);
						match(WITH);
						setState(819);
						_la = _input.LA(1);
						if ( !(_la==DBPROPERTIES || _la==PROPERTIES) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(820);
						propertyList();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(825);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new SetNamespacePropertiesContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(826);
				match(ALTER);
				setState(827);
				namespace();
				setState(828);
				identifierReference();
				setState(829);
				match(SET);
				setState(830);
				_la = _input.LA(1);
				if ( !(_la==DBPROPERTIES || _la==PROPERTIES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(831);
				propertyList();
				}
				break;
			case 9:
				_localctx = new UnsetNamespacePropertiesContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(833);
				match(ALTER);
				setState(834);
				namespace();
				setState(835);
				identifierReference();
				setState(836);
				match(UNSET);
				setState(837);
				_la = _input.LA(1);
				if ( !(_la==DBPROPERTIES || _la==PROPERTIES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(838);
				propertyList();
				}
				break;
			case 10:
				_localctx = new SetNamespaceCollationContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(840);
				match(ALTER);
				setState(841);
				namespace();
				setState(842);
				identifierReference();
				setState(843);
				collationSpec();
				}
				break;
			case 11:
				_localctx = new SetNamespaceLocationContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(845);
				match(ALTER);
				setState(846);
				namespace();
				setState(847);
				identifierReference();
				setState(848);
				match(SET);
				setState(849);
				locationSpec();
				}
				break;
			case 12:
				_localctx = new DropNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(851);
				match(DROP);
				setState(852);
				namespace();
				setState(855);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					setState(853);
					match(IF);
					setState(854);
					match(EXISTS);
					}
					break;
				}
				setState(857);
				identifierReference();
				setState(859);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(858);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowNamespacesContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(861);
				match(SHOW);
				setState(862);
				namespaces();
				setState(865);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(863);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(864);
					multipartIdentifier();
					}
					break;
				}
				setState(871);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					setState(868);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
					case 1:
						{
						setState(867);
						match(LIKE);
						}
						break;
					}
					setState(870);
					((ShowNamespacesContext)_localctx).pattern = stringLit();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new CreateTableContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(873);
				createTableHeader();
				setState(878);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					setState(874);
					match(LEFT_PAREN);
					setState(875);
					tableElementList();
					setState(876);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(880);
					tableProvider();
					}
				}

				setState(883);
				createTableClauses();
				setState(888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN || _la==AS || _la==FROM || _la==MAP || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (REDUCE - 275)) | (1L << (SELECT - 275)) | (1L << (TABLE - 275)))) != 0) || _la==VALUES || _la==WITH) {
					{
					setState(885);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(884);
						match(AS);
						}
					}

					setState(887);
					query();
					}
				}

				}
				break;
			case 15:
				_localctx = new CreateTableLikeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(890);
				match(CREATE);
				setState(891);
				match(TABLE);
				setState(896);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(892);
					match(IF);
					setState(893);
					errorCapturingNot();
					setState(894);
					match(EXISTS);
					}
					break;
				}
				setState(898);
				((CreateTableLikeContext)_localctx).target = tableIdentifier();
				setState(899);
				match(LIKE);
				setState(900);
				((CreateTableLikeContext)_localctx).source = tableIdentifier();
				setState(909);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==LOCATION || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (ROW - 296)) | (1L << (STORED - 296)) | (1L << (TBLPROPERTIES - 296)))) != 0) || _la==USING) {
					{
					setState(907);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case USING:
						{
						setState(901);
						tableProvider();
						}
						break;
					case ROW:
						{
						setState(902);
						rowFormat();
						}
						break;
					case STORED:
						{
						setState(903);
						createFileFormat();
						}
						break;
					case LOCATION:
						{
						setState(904);
						locationSpec();
						}
						break;
					case TBLPROPERTIES:
						{
						{
						setState(905);
						match(TBLPROPERTIES);
						setState(906);
						((CreateTableLikeContext)_localctx).tableProps = propertyList();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(911);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 16:
				_localctx = new ReplaceTableContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(912);
				replaceTableHeader();
				setState(917);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					setState(913);
					match(LEFT_PAREN);
					setState(914);
					tableElementList();
					setState(915);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(920);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(919);
					tableProvider();
					}
				}

				setState(922);
				createTableClauses();
				setState(927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN || _la==AS || _la==FROM || _la==MAP || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (REDUCE - 275)) | (1L << (SELECT - 275)) | (1L << (TABLE - 275)))) != 0) || _la==VALUES || _la==WITH) {
					{
					setState(924);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(923);
						match(AS);
						}
					}

					setState(926);
					query();
					}
				}

				}
				break;
			case 17:
				_localctx = new AnalyzeContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(929);
				match(ANALYZE);
				setState(930);
				match(TABLE);
				setState(931);
				identifierReference();
				setState(933);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(932);
					partitionSpec();
					}
				}

				setState(935);
				match(COMPUTE);
				setState(936);
				match(STATISTICS);
				setState(944);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
				case 1:
					{
					setState(937);
					identifier();
					}
					break;
				case 2:
					{
					setState(938);
					match(FOR);
					setState(939);
					match(COLUMNS);
					setState(940);
					identifierSeq();
					}
					break;
				case 3:
					{
					setState(941);
					match(FOR);
					setState(942);
					match(ALL);
					setState(943);
					match(COLUMNS);
					}
					break;
				}
				}
				break;
			case 18:
				_localctx = new AnalyzeTablesContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(946);
				match(ANALYZE);
				setState(947);
				match(TABLES);
				setState(950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(948);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(949);
					identifierReference();
					}
				}

				setState(952);
				match(COMPUTE);
				setState(953);
				match(STATISTICS);
				setState(955);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(954);
					identifier();
					}
					break;
				}
				}
				break;
			case 19:
				_localctx = new AddTableColumnsContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(957);
				match(ALTER);
				setState(958);
				match(TABLE);
				setState(959);
				identifierReference();
				setState(960);
				match(ADD);
				setState(961);
				_la = _input.LA(1);
				if ( !(_la==COLUMN || _la==COLUMNS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(962);
				((AddTableColumnsContext)_localctx).columns = qualifiedColTypeWithPositionList();
				}
				break;
			case 20:
				_localctx = new AddTableColumnsContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(964);
				match(ALTER);
				setState(965);
				match(TABLE);
				setState(966);
				identifierReference();
				setState(967);
				match(ADD);
				setState(968);
				_la = _input.LA(1);
				if ( !(_la==COLUMN || _la==COLUMNS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(969);
				match(LEFT_PAREN);
				setState(970);
				((AddTableColumnsContext)_localctx).columns = qualifiedColTypeWithPositionList();
				setState(971);
				match(RIGHT_PAREN);
				}
				break;
			case 21:
				_localctx = new RenameTableColumnContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(973);
				match(ALTER);
				setState(974);
				match(TABLE);
				setState(975);
				((RenameTableColumnContext)_localctx).table = identifierReference();
				setState(976);
				match(RENAME);
				setState(977);
				match(COLUMN);
				setState(978);
				((RenameTableColumnContext)_localctx).from = multipartIdentifier();
				setState(979);
				match(TO);
				setState(980);
				((RenameTableColumnContext)_localctx).to = errorCapturingIdentifier();
				}
				break;
			case 22:
				_localctx = new DropTableColumnsContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(982);
				match(ALTER);
				setState(983);
				match(TABLE);
				setState(984);
				identifierReference();
				setState(985);
				match(DROP);
				setState(986);
				_la = _input.LA(1);
				if ( !(_la==COLUMN || _la==COLUMNS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(987);
					match(IF);
					setState(988);
					match(EXISTS);
					}
				}

				setState(991);
				match(LEFT_PAREN);
				setState(992);
				((DropTableColumnsContext)_localctx).columns = multipartIdentifierList();
				setState(993);
				match(RIGHT_PAREN);
				}
				break;
			case 23:
				_localctx = new DropTableColumnsContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(995);
				match(ALTER);
				setState(996);
				match(TABLE);
				setState(997);
				identifierReference();
				setState(998);
				match(DROP);
				setState(999);
				_la = _input.LA(1);
				if ( !(_la==COLUMN || _la==COLUMNS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1002);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					setState(1000);
					match(IF);
					setState(1001);
					match(EXISTS);
					}
					break;
				}
				setState(1004);
				((DropTableColumnsContext)_localctx).columns = multipartIdentifierList();
				}
				break;
			case 24:
				_localctx = new RenameTableContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1006);
				match(ALTER);
				setState(1007);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1008);
				((RenameTableContext)_localctx).from = identifierReference();
				setState(1009);
				match(RENAME);
				setState(1010);
				match(TO);
				setState(1011);
				((RenameTableContext)_localctx).to = multipartIdentifier();
				}
				break;
			case 25:
				_localctx = new SetTablePropertiesContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1013);
				match(ALTER);
				setState(1014);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1015);
				identifierReference();
				setState(1016);
				match(SET);
				setState(1017);
				match(TBLPROPERTIES);
				setState(1018);
				propertyList();
				}
				break;
			case 26:
				_localctx = new UnsetTablePropertiesContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1020);
				match(ALTER);
				setState(1021);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1022);
				identifierReference();
				setState(1023);
				match(UNSET);
				setState(1024);
				match(TBLPROPERTIES);
				setState(1027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1025);
					match(IF);
					setState(1026);
					match(EXISTS);
					}
				}

				setState(1029);
				propertyList();
				}
				break;
			case 27:
				_localctx = new AlterTableAlterColumnContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(1031);
				match(ALTER);
				setState(1032);
				match(TABLE);
				setState(1033);
				((AlterTableAlterColumnContext)_localctx).table = identifierReference();
				setState(1034);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CHANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
				case 1:
					{
					setState(1035);
					match(COLUMN);
					}
					break;
				}
				setState(1038);
				((AlterTableAlterColumnContext)_localctx).columns = alterColumnSpecList();
				}
				break;
			case 28:
				_localctx = new HiveChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(1040);
				match(ALTER);
				setState(1041);
				match(TABLE);
				setState(1042);
				((HiveChangeColumnContext)_localctx).table = identifierReference();
				setState(1044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1043);
					partitionSpec();
					}
				}

				setState(1046);
				match(CHANGE);
				setState(1048);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					setState(1047);
					match(COLUMN);
					}
					break;
				}
				setState(1050);
				((HiveChangeColumnContext)_localctx).colName = multipartIdentifier();
				setState(1051);
				colType();
				setState(1053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER || _la==FIRST) {
					{
					setState(1052);
					colPosition();
					}
				}

				}
				break;
			case 29:
				_localctx = new HiveReplaceColumnsContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(1055);
				match(ALTER);
				setState(1056);
				match(TABLE);
				setState(1057);
				((HiveReplaceColumnsContext)_localctx).table = identifierReference();
				setState(1059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1058);
					partitionSpec();
					}
				}

				setState(1061);
				match(REPLACE);
				setState(1062);
				match(COLUMNS);
				setState(1063);
				match(LEFT_PAREN);
				setState(1064);
				((HiveReplaceColumnsContext)_localctx).columns = qualifiedColTypeWithPositionList();
				setState(1065);
				match(RIGHT_PAREN);
				}
				break;
			case 30:
				_localctx = new SetTableSerDeContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(1067);
				match(ALTER);
				setState(1068);
				match(TABLE);
				setState(1069);
				identifierReference();
				setState(1071);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1070);
					partitionSpec();
					}
				}

				setState(1073);
				match(SET);
				setState(1074);
				match(SERDE);
				setState(1075);
				stringLit();
				setState(1079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1076);
					match(WITH);
					setState(1077);
					match(SERDEPROPERTIES);
					setState(1078);
					propertyList();
					}
				}

				}
				break;
			case 31:
				_localctx = new SetTableSerDeContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(1081);
				match(ALTER);
				setState(1082);
				match(TABLE);
				setState(1083);
				identifierReference();
				setState(1085);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1084);
					partitionSpec();
					}
				}

				setState(1087);
				match(SET);
				setState(1088);
				match(SERDEPROPERTIES);
				setState(1089);
				propertyList();
				}
				break;
			case 32:
				_localctx = new AddTablePartitionContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(1091);
				match(ALTER);
				setState(1092);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1093);
				identifierReference();
				setState(1094);
				match(ADD);
				setState(1099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1095);
					match(IF);
					setState(1096);
					errorCapturingNot();
					setState(1097);
					match(EXISTS);
					}
				}

				setState(1102); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1101);
					partitionSpecLocation();
					}
					}
					setState(1104); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION );
				}
				break;
			case 33:
				_localctx = new RenameTablePartitionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(1106);
				match(ALTER);
				setState(1107);
				match(TABLE);
				setState(1108);
				identifierReference();
				setState(1109);
				((RenameTablePartitionContext)_localctx).from = partitionSpec();
				setState(1110);
				match(RENAME);
				setState(1111);
				match(TO);
				setState(1112);
				((RenameTablePartitionContext)_localctx).to = partitionSpec();
				}
				break;
			case 34:
				_localctx = new DropTablePartitionsContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(1114);
				match(ALTER);
				setState(1115);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1116);
				identifierReference();
				setState(1117);
				match(DROP);
				setState(1120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1118);
					match(IF);
					setState(1119);
					match(EXISTS);
					}
				}

				setState(1122);
				partitionSpec();
				setState(1127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1123);
					match(COMMA);
					setState(1124);
					partitionSpec();
					}
					}
					setState(1129);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PURGE) {
					{
					setState(1130);
					match(PURGE);
					}
				}

				}
				break;
			case 35:
				_localctx = new SetTableLocationContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(1133);
				match(ALTER);
				setState(1134);
				match(TABLE);
				setState(1135);
				identifierReference();
				setState(1137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1136);
					partitionSpec();
					}
				}

				setState(1139);
				match(SET);
				setState(1140);
				locationSpec();
				}
				break;
			case 36:
				_localctx = new RecoverPartitionsContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(1142);
				match(ALTER);
				setState(1143);
				match(TABLE);
				setState(1144);
				identifierReference();
				setState(1145);
				match(RECOVER);
				setState(1146);
				match(PARTITIONS);
				}
				break;
			case 37:
				_localctx = new AlterClusterByContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(1148);
				match(ALTER);
				setState(1149);
				match(TABLE);
				setState(1150);
				identifierReference();
				setState(1155);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					setState(1151);
					clusterBySpec();
					}
					break;
				case 2:
					{
					setState(1152);
					match(CLUSTER);
					setState(1153);
					match(BY);
					setState(1154);
					match(NONE);
					}
					break;
				}
				}
				break;
			case 38:
				_localctx = new AlterTableCollationContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(1157);
				match(ALTER);
				setState(1158);
				match(TABLE);
				setState(1159);
				identifierReference();
				setState(1160);
				collationSpec();
				}
				break;
			case 39:
				_localctx = new AddTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(1162);
				match(ALTER);
				setState(1163);
				match(TABLE);
				setState(1164);
				identifierReference();
				setState(1165);
				match(ADD);
				setState(1166);
				tableConstraintDefinition();
				}
				break;
			case 40:
				_localctx = new DropTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(1168);
				match(ALTER);
				setState(1169);
				match(TABLE);
				setState(1170);
				identifierReference();
				setState(1171);
				match(DROP);
				setState(1172);
				match(CONSTRAINT);
				setState(1175);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
				case 1:
					{
					setState(1173);
					match(IF);
					setState(1174);
					match(EXISTS);
					}
					break;
				}
				setState(1177);
				((DropTableConstraintContext)_localctx).name = identifier();
				setState(1179);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(1178);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 41:
				_localctx = new DropTableContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(1181);
				match(DROP);
				setState(1182);
				match(TABLE);
				setState(1185);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
				case 1:
					{
					setState(1183);
					match(IF);
					setState(1184);
					match(EXISTS);
					}
					break;
				}
				setState(1187);
				identifierReference();
				setState(1189);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PURGE) {
					{
					setState(1188);
					match(PURGE);
					}
				}

				}
				break;
			case 42:
				_localctx = new DropViewContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(1191);
				match(DROP);
				setState(1192);
				match(VIEW);
				setState(1195);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
				case 1:
					{
					setState(1193);
					match(IF);
					setState(1194);
					match(EXISTS);
					}
					break;
				}
				setState(1197);
				identifierReference();
				}
				break;
			case 43:
				_localctx = new CreateViewContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(1198);
				match(CREATE);
				setState(1201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1199);
					match(OR);
					setState(1200);
					match(REPLACE);
					}
				}

				setState(1207);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==TEMPORARY) {
					{
					setState(1204);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==GLOBAL) {
						{
						setState(1203);
						match(GLOBAL);
						}
					}

					setState(1206);
					match(TEMPORARY);
					}
				}

				setState(1209);
				match(VIEW);
				setState(1214);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
				case 1:
					{
					setState(1210);
					match(IF);
					setState(1211);
					errorCapturingNot();
					setState(1212);
					match(EXISTS);
					}
					break;
				}
				setState(1216);
				identifierReference();
				setState(1218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1217);
					identifierCommentList();
					}
				}

				setState(1230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMENT || _la==DEFAULT || _la==PARTITIONED || _la==TBLPROPERTIES || _la==WITH) {
					{
					setState(1228);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case COMMENT:
						{
						setState(1220);
						commentSpec();
						}
						break;
					case WITH:
						{
						setState(1221);
						schemaBinding();
						}
						break;
					case DEFAULT:
						{
						setState(1222);
						collationSpec();
						}
						break;
					case PARTITIONED:
						{
						{
						setState(1223);
						match(PARTITIONED);
						setState(1224);
						match(ON);
						setState(1225);
						identifierList();
						}
						}
						break;
					case TBLPROPERTIES:
						{
						{
						setState(1226);
						match(TBLPROPERTIES);
						setState(1227);
						propertyList();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1232);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1233);
				match(AS);
				setState(1234);
				query();
				}
				break;
			case 44:
				_localctx = new CreateTempViewUsingContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(1236);
				match(CREATE);
				setState(1239);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1237);
					match(OR);
					setState(1238);
					match(REPLACE);
					}
				}

				setState(1242);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL) {
					{
					setState(1241);
					match(GLOBAL);
					}
				}

				setState(1244);
				match(TEMPORARY);
				setState(1245);
				match(VIEW);
				setState(1246);
				tableIdentifier();
				setState(1251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1247);
					match(LEFT_PAREN);
					setState(1248);
					colTypeList();
					setState(1249);
					match(RIGHT_PAREN);
					}
				}

				setState(1253);
				tableProvider();
				setState(1256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(1254);
					match(OPTIONS);
					setState(1255);
					propertyList();
					}
				}

				}
				break;
			case 45:
				_localctx = new AlterViewQueryContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(1258);
				match(ALTER);
				setState(1259);
				match(VIEW);
				setState(1260);
				identifierReference();
				setState(1262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1261);
					match(AS);
					}
				}

				setState(1264);
				query();
				}
				break;
			case 46:
				_localctx = new AlterViewSchemaBindingContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(1266);
				match(ALTER);
				setState(1267);
				match(VIEW);
				setState(1268);
				identifierReference();
				setState(1269);
				schemaBinding();
				}
				break;
			case 47:
				_localctx = new CreateFunctionContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(1271);
				match(CREATE);
				setState(1274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1272);
					match(OR);
					setState(1273);
					match(REPLACE);
					}
				}

				setState(1277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1276);
					match(TEMPORARY);
					}
				}

				setState(1279);
				match(FUNCTION);
				setState(1284);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					setState(1280);
					match(IF);
					setState(1281);
					errorCapturingNot();
					setState(1282);
					match(EXISTS);
					}
					break;
				}
				setState(1286);
				identifierReference();
				setState(1287);
				match(AS);
				setState(1288);
				((CreateFunctionContext)_localctx).className = stringLit();
				setState(1298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1289);
					match(USING);
					setState(1290);
					resource();
					setState(1295);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1291);
						match(COMMA);
						setState(1292);
						resource();
						}
						}
						setState(1297);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 48:
				_localctx = new CreateUserDefinedFunctionContext(_localctx);
				enterOuterAlt(_localctx, 48);
				{
				setState(1300);
				match(CREATE);
				setState(1303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1301);
					match(OR);
					setState(1302);
					match(REPLACE);
					}
				}

				setState(1306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1305);
					match(TEMPORARY);
					}
				}

				setState(1308);
				match(FUNCTION);
				setState(1313);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					setState(1309);
					match(IF);
					setState(1310);
					errorCapturingNot();
					setState(1311);
					match(EXISTS);
					}
					break;
				}
				setState(1315);
				identifierReference();
				setState(1316);
				match(LEFT_PAREN);
				setState(1318);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
				case 1:
					{
					setState(1317);
					((CreateUserDefinedFunctionContext)_localctx).parameters = colDefinitionList();
					}
					break;
				}
				setState(1320);
				match(RIGHT_PAREN);
				setState(1330);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
				case 1:
					{
					setState(1321);
					match(RETURNS);
					setState(1328);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
					case 1:
						{
						setState(1322);
						dataType();
						}
						break;
					case 2:
						{
						setState(1323);
						match(TABLE);
						setState(1324);
						match(LEFT_PAREN);
						setState(1325);
						((CreateUserDefinedFunctionContext)_localctx).returnParams = colTypeList();
						setState(1326);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
					break;
				}
				setState(1332);
				routineCharacteristics();
				setState(1333);
				match(RETURN);
				setState(1336);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					setState(1334);
					query();
					}
					break;
				case 2:
					{
					setState(1335);
					expression();
					}
					break;
				}
				}
				break;
			case 49:
				_localctx = new DropFunctionContext(_localctx);
				enterOuterAlt(_localctx, 49);
				{
				setState(1338);
				match(DROP);
				setState(1340);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1339);
					match(TEMPORARY);
					}
				}

				setState(1342);
				match(FUNCTION);
				setState(1345);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
				case 1:
					{
					setState(1343);
					match(IF);
					setState(1344);
					match(EXISTS);
					}
					break;
				}
				setState(1347);
				identifierReference();
				}
				break;
			case 50:
				_localctx = new CreateVariableContext(_localctx);
				enterOuterAlt(_localctx, 50);
				{
				setState(1348);
				match(DECLARE);
				setState(1351);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
				case 1:
					{
					setState(1349);
					match(OR);
					setState(1350);
					match(REPLACE);
					}
					break;
				}
				setState(1354);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
				case 1:
					{
					setState(1353);
					variable();
					}
					break;
				}
				setState(1356);
				((CreateVariableContext)_localctx).identifierReference = identifierReference();
				((CreateVariableContext)_localctx).identifierReferences.add(((CreateVariableContext)_localctx).identifierReference);
				setState(1361);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,110,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1357);
						match(COMMA);
						setState(1358);
						((CreateVariableContext)_localctx).identifierReference = identifierReference();
						((CreateVariableContext)_localctx).identifierReferences.add(((CreateVariableContext)_localctx).identifierReference);
						}
						} 
					}
					setState(1363);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,110,_ctx);
				}
				setState(1365);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(1364);
					dataType();
					}
					break;
				}
				setState(1368);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==EQ) {
					{
					setState(1367);
					variableDefaultExpression();
					}
				}

				}
				break;
			case 51:
				_localctx = new DropVariableContext(_localctx);
				enterOuterAlt(_localctx, 51);
				{
				setState(1370);
				match(DROP);
				setState(1371);
				match(TEMPORARY);
				setState(1372);
				variable();
				setState(1375);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					setState(1373);
					match(IF);
					setState(1374);
					match(EXISTS);
					}
					break;
				}
				setState(1377);
				identifierReference();
				}
				break;
			case 52:
				_localctx = new ExplainContext(_localctx);
				enterOuterAlt(_localctx, 52);
				{
				setState(1379);
				match(EXPLAIN);
				setState(1381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CODEGEN || _la==COST || _la==EXTENDED || _la==FORMATTED || _la==LOGICAL) {
					{
					setState(1380);
					_la = _input.LA(1);
					if ( !(_la==CODEGEN || _la==COST || _la==EXTENDED || _la==FORMATTED || _la==LOGICAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1385);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					setState(1383);
					statement();
					}
					break;
				case 2:
					{
					setState(1384);
					setResetStatement();
					}
					break;
				}
				}
				break;
			case 53:
				_localctx = new ShowTablesContext(_localctx);
				enterOuterAlt(_localctx, 53);
				{
				setState(1387);
				match(SHOW);
				setState(1388);
				match(TABLES);
				setState(1391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
				case 1:
					{
					setState(1389);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1390);
					identifierReference();
					}
					break;
				}
				setState(1397);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					setState(1394);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
					case 1:
						{
						setState(1393);
						match(LIKE);
						}
						break;
					}
					setState(1396);
					((ShowTablesContext)_localctx).pattern = stringLit();
					}
					break;
				}
				}
				break;
			case 54:
				_localctx = new ShowTableExtendedContext(_localctx);
				enterOuterAlt(_localctx, 54);
				{
				setState(1399);
				match(SHOW);
				setState(1400);
				match(TABLE);
				setState(1401);
				match(EXTENDED);
				setState(1404);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1402);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1403);
					((ShowTableExtendedContext)_localctx).ns = identifierReference();
					}
				}

				setState(1406);
				match(LIKE);
				setState(1407);
				((ShowTableExtendedContext)_localctx).pattern = stringLit();
				setState(1409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1408);
					partitionSpec();
					}
				}

				}
				break;
			case 55:
				_localctx = new ShowTblPropertiesContext(_localctx);
				enterOuterAlt(_localctx, 55);
				{
				setState(1411);
				match(SHOW);
				setState(1412);
				match(TBLPROPERTIES);
				setState(1413);
				((ShowTblPropertiesContext)_localctx).table = identifierReference();
				setState(1418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1414);
					match(LEFT_PAREN);
					setState(1415);
					((ShowTblPropertiesContext)_localctx).key = propertyKey();
					setState(1416);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 56:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 56);
				{
				setState(1420);
				match(SHOW);
				setState(1421);
				match(COLUMNS);
				setState(1422);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1423);
				((ShowColumnsContext)_localctx).table = identifierReference();
				setState(1426);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1424);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1425);
					((ShowColumnsContext)_localctx).ns = multipartIdentifier();
					}
				}

				}
				break;
			case 57:
				_localctx = new ShowViewsContext(_localctx);
				enterOuterAlt(_localctx, 57);
				{
				setState(1428);
				match(SHOW);
				setState(1429);
				match(VIEWS);
				setState(1432);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
				case 1:
					{
					setState(1430);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1431);
					identifierReference();
					}
					break;
				}
				setState(1438);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					setState(1435);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
					case 1:
						{
						setState(1434);
						match(LIKE);
						}
						break;
					}
					setState(1437);
					((ShowViewsContext)_localctx).pattern = stringLit();
					}
					break;
				}
				}
				break;
			case 58:
				_localctx = new ShowPartitionsContext(_localctx);
				enterOuterAlt(_localctx, 58);
				{
				setState(1440);
				match(SHOW);
				setState(1441);
				match(PARTITIONS);
				setState(1442);
				identifierReference();
				setState(1444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1443);
					partitionSpec();
					}
				}

				}
				break;
			case 59:
				_localctx = new ShowFunctionsContext(_localctx);
				enterOuterAlt(_localctx, 59);
				{
				setState(1446);
				match(SHOW);
				setState(1448);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					setState(1447);
					identifier();
					}
					break;
				}
				setState(1450);
				match(FUNCTIONS);
				setState(1453);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(1451);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1452);
					((ShowFunctionsContext)_localctx).ns = identifierReference();
					}
					break;
				}
				setState(1462);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
				case 1:
					{
					setState(1456);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
					case 1:
						{
						setState(1455);
						match(LIKE);
						}
						break;
					}
					setState(1460);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
					case 1:
						{
						setState(1458);
						((ShowFunctionsContext)_localctx).legacy = multipartIdentifier();
						}
						break;
					case 2:
						{
						setState(1459);
						((ShowFunctionsContext)_localctx).pattern = stringLit();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 60:
				_localctx = new ShowProceduresContext(_localctx);
				enterOuterAlt(_localctx, 60);
				{
				setState(1464);
				match(SHOW);
				setState(1465);
				match(PROCEDURES);
				setState(1468);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1466);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1467);
					identifierReference();
					}
				}

				}
				break;
			case 61:
				_localctx = new ShowCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 61);
				{
				setState(1470);
				match(SHOW);
				setState(1471);
				match(CREATE);
				setState(1472);
				match(TABLE);
				setState(1473);
				identifierReference();
				setState(1476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1474);
					match(AS);
					setState(1475);
					match(SERDE);
					}
				}

				}
				break;
			case 62:
				_localctx = new ShowCurrentNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 62);
				{
				setState(1478);
				match(SHOW);
				setState(1479);
				match(CURRENT);
				setState(1480);
				namespace();
				}
				break;
			case 63:
				_localctx = new ShowCatalogsContext(_localctx);
				enterOuterAlt(_localctx, 63);
				{
				setState(1481);
				match(SHOW);
				setState(1482);
				match(CATALOGS);
				setState(1487);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					setState(1484);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
					case 1:
						{
						setState(1483);
						match(LIKE);
						}
						break;
					}
					setState(1486);
					((ShowCatalogsContext)_localctx).pattern = stringLit();
					}
					break;
				}
				}
				break;
			case 64:
				_localctx = new DescribeFunctionContext(_localctx);
				enterOuterAlt(_localctx, 64);
				{
				setState(1489);
				_la = _input.LA(1);
				if ( !(_la==DESC || _la==DESCRIBE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1490);
				match(FUNCTION);
				setState(1492);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
				case 1:
					{
					setState(1491);
					match(EXTENDED);
					}
					break;
				}
				setState(1494);
				describeFuncName();
				}
				break;
			case 65:
				_localctx = new DescribeProcedureContext(_localctx);
				enterOuterAlt(_localctx, 65);
				{
				setState(1495);
				_la = _input.LA(1);
				if ( !(_la==DESC || _la==DESCRIBE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1496);
				match(PROCEDURE);
				setState(1497);
				identifierReference();
				}
				break;
			case 66:
				_localctx = new DescribeNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 66);
				{
				setState(1498);
				_la = _input.LA(1);
				if ( !(_la==DESC || _la==DESCRIBE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1499);
				namespace();
				setState(1501);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
				case 1:
					{
					setState(1500);
					match(EXTENDED);
					}
					break;
				}
				setState(1503);
				identifierReference();
				}
				break;
			case 67:
				_localctx = new DescribeRelationContext(_localctx);
				enterOuterAlt(_localctx, 67);
				{
				setState(1505);
				_la = _input.LA(1);
				if ( !(_la==DESC || _la==DESCRIBE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1507);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
				case 1:
					{
					setState(1506);
					match(TABLE);
					}
					break;
				}
				setState(1510);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
				case 1:
					{
					setState(1509);
					((DescribeRelationContext)_localctx).option = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==EXTENDED || _la==FORMATTED) ) {
						((DescribeRelationContext)_localctx).option = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1512);
				identifierReference();
				setState(1514);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					setState(1513);
					partitionSpec();
					}
					break;
				}
				setState(1517);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
				case 1:
					{
					setState(1516);
					describeColName();
					}
					break;
				}
				setState(1521);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1519);
					match(AS);
					setState(1520);
					match(JSON);
					}
				}

				}
				break;
			case 68:
				_localctx = new DescribeQueryContext(_localctx);
				enterOuterAlt(_localctx, 68);
				{
				setState(1523);
				_la = _input.LA(1);
				if ( !(_la==DESC || _la==DESCRIBE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==QUERY) {
					{
					setState(1524);
					match(QUERY);
					}
				}

				setState(1527);
				query();
				}
				break;
			case 69:
				_localctx = new CommentNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 69);
				{
				setState(1528);
				match(COMMENT);
				setState(1529);
				match(ON);
				setState(1530);
				namespace();
				setState(1531);
				identifierReference();
				setState(1532);
				match(IS);
				setState(1533);
				comment();
				}
				break;
			case 70:
				_localctx = new CommentTableContext(_localctx);
				enterOuterAlt(_localctx, 70);
				{
				setState(1535);
				match(COMMENT);
				setState(1536);
				match(ON);
				setState(1537);
				match(TABLE);
				setState(1538);
				identifierReference();
				setState(1539);
				match(IS);
				setState(1540);
				comment();
				}
				break;
			case 71:
				_localctx = new RefreshTableContext(_localctx);
				enterOuterAlt(_localctx, 71);
				{
				setState(1542);
				match(REFRESH);
				setState(1543);
				match(TABLE);
				setState(1544);
				identifierReference();
				}
				break;
			case 72:
				_localctx = new RefreshFunctionContext(_localctx);
				enterOuterAlt(_localctx, 72);
				{
				setState(1545);
				match(REFRESH);
				setState(1546);
				match(FUNCTION);
				setState(1547);
				identifierReference();
				}
				break;
			case 73:
				_localctx = new RefreshResourceContext(_localctx);
				enterOuterAlt(_localctx, 73);
				{
				setState(1548);
				match(REFRESH);
				setState(1556);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
				case 1:
					{
					setState(1549);
					stringLit();
					}
					break;
				case 2:
					{
					setState(1553);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,144,_ctx);
					while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							setState(1550);
							matchWildcard();
							}
							} 
						}
						setState(1555);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,144,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 74:
				_localctx = new CacheTableContext(_localctx);
				enterOuterAlt(_localctx, 74);
				{
				setState(1558);
				match(CACHE);
				setState(1560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LAZY) {
					{
					setState(1559);
					match(LAZY);
					}
				}

				setState(1562);
				match(TABLE);
				setState(1563);
				identifierReference();
				setState(1566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(1564);
					match(OPTIONS);
					setState(1565);
					((CacheTableContext)_localctx).options = propertyList();
					}
				}

				setState(1572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN || _la==AS || _la==FROM || _la==MAP || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (REDUCE - 275)) | (1L << (SELECT - 275)) | (1L << (TABLE - 275)))) != 0) || _la==VALUES || _la==WITH) {
					{
					setState(1569);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1568);
						match(AS);
						}
					}

					setState(1571);
					query();
					}
				}

				}
				break;
			case 75:
				_localctx = new UncacheTableContext(_localctx);
				enterOuterAlt(_localctx, 75);
				{
				setState(1574);
				match(UNCACHE);
				setState(1575);
				match(TABLE);
				setState(1578);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					setState(1576);
					match(IF);
					setState(1577);
					match(EXISTS);
					}
					break;
				}
				setState(1580);
				identifierReference();
				}
				break;
			case 76:
				_localctx = new ClearCacheContext(_localctx);
				enterOuterAlt(_localctx, 76);
				{
				setState(1581);
				match(CLEAR);
				setState(1582);
				match(CACHE);
				}
				break;
			case 77:
				_localctx = new LoadDataContext(_localctx);
				enterOuterAlt(_localctx, 77);
				{
				setState(1583);
				match(LOAD);
				setState(1584);
				match(DATA);
				setState(1586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(1585);
					match(LOCAL);
					}
				}

				setState(1588);
				match(INPATH);
				setState(1589);
				((LoadDataContext)_localctx).path = stringLit();
				setState(1591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OVERWRITE) {
					{
					setState(1590);
					match(OVERWRITE);
					}
				}

				setState(1593);
				match(INTO);
				setState(1594);
				match(TABLE);
				setState(1595);
				identifierReference();
				setState(1597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1596);
					partitionSpec();
					}
				}

				}
				break;
			case 78:
				_localctx = new TruncateTableContext(_localctx);
				enterOuterAlt(_localctx, 78);
				{
				setState(1599);
				match(TRUNCATE);
				setState(1600);
				match(TABLE);
				setState(1601);
				identifierReference();
				setState(1603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1602);
					partitionSpec();
					}
				}

				}
				break;
			case 79:
				_localctx = new RepairTableContext(_localctx);
				enterOuterAlt(_localctx, 79);
				{
				setState(1606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MSCK) {
					{
					setState(1605);
					match(MSCK);
					}
				}

				setState(1608);
				match(REPAIR);
				setState(1609);
				match(TABLE);
				setState(1610);
				identifierReference();
				setState(1613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADD || _la==DROP || _la==SYNC) {
					{
					setState(1611);
					((RepairTableContext)_localctx).option = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP || _la==SYNC) ) {
						((RepairTableContext)_localctx).option = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1612);
					match(PARTITIONS);
					}
				}

				}
				break;
			case 80:
				_localctx = new ManageResourceContext(_localctx);
				enterOuterAlt(_localctx, 80);
				{
				setState(1615);
				((ManageResourceContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==LIST) ) {
					((ManageResourceContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1616);
				identifier();
				setState(1620);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,157,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1617);
						matchWildcard();
						}
						} 
					}
					setState(1622);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,157,_ctx);
				}
				}
				break;
			case 81:
				_localctx = new CreateIndexContext(_localctx);
				enterOuterAlt(_localctx, 81);
				{
				setState(1623);
				match(CREATE);
				setState(1624);
				match(INDEX);
				setState(1629);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					setState(1625);
					match(IF);
					setState(1626);
					errorCapturingNot();
					setState(1627);
					match(EXISTS);
					}
					break;
				}
				setState(1631);
				identifier();
				setState(1632);
				match(ON);
				setState(1634);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
				case 1:
					{
					setState(1633);
					match(TABLE);
					}
					break;
				}
				setState(1636);
				identifierReference();
				setState(1639);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1637);
					match(USING);
					setState(1638);
					((CreateIndexContext)_localctx).indexType = identifier();
					}
				}

				setState(1641);
				match(LEFT_PAREN);
				setState(1642);
				((CreateIndexContext)_localctx).columns = multipartIdentifierPropertyList();
				setState(1643);
				match(RIGHT_PAREN);
				setState(1646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(1644);
					match(OPTIONS);
					setState(1645);
					((CreateIndexContext)_localctx).options = propertyList();
					}
				}

				}
				break;
			case 82:
				_localctx = new DropIndexContext(_localctx);
				enterOuterAlt(_localctx, 82);
				{
				setState(1648);
				match(DROP);
				setState(1649);
				match(INDEX);
				setState(1652);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
				case 1:
					{
					setState(1650);
					match(IF);
					setState(1651);
					match(EXISTS);
					}
					break;
				}
				setState(1654);
				identifier();
				setState(1655);
				match(ON);
				setState(1657);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					setState(1656);
					match(TABLE);
					}
					break;
				}
				setState(1659);
				identifierReference();
				}
				break;
			case 83:
				_localctx = new CallContext(_localctx);
				enterOuterAlt(_localctx, 83);
				{
				setState(1661);
				match(CALL);
				setState(1662);
				identifierReference();
				setState(1663);
				match(LEFT_PAREN);
				setState(1672);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
				case 1:
					{
					setState(1664);
					functionArgument();
					setState(1669);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1665);
						match(COMMA);
						setState(1666);
						functionArgument();
						}
						}
						setState(1671);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(1674);
				match(RIGHT_PAREN);
				}
				break;
			case 84:
				_localctx = new FailNativeCommandContext(_localctx);
				enterOuterAlt(_localctx, 84);
				{
				setState(1676);
				unsupportedHiveNativeCommands();
				setState(1680);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1677);
						matchWildcard();
						}
						} 
					}
					setState(1682);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
				}
				}
				break;
			case 85:
				_localctx = new CreatePipelineDatasetContext(_localctx);
				enterOuterAlt(_localctx, 85);
				{
				setState(1683);
				createPipelineDatasetHeader();
				setState(1689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1684);
					match(LEFT_PAREN);
					setState(1686);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
					case 1:
						{
						setState(1685);
						tableElementList();
						}
						break;
					}
					setState(1688);
					match(RIGHT_PAREN);
					}
				}

				setState(1692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1691);
					tableProvider();
					}
				}

				setState(1694);
				createTableClauses();
				setState(1697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1695);
					match(AS);
					setState(1696);
					query();
					}
				}

				}
				break;
			case 86:
				_localctx = new CreatePipelineInsertIntoFlowContext(_localctx);
				enterOuterAlt(_localctx, 86);
				{
				setState(1699);
				createPipelineFlowHeader();
				setState(1700);
				insertInto();
				setState(1701);
				query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaterializedViewContext extends ParserRuleContext {
		public TerminalNode MATERIALIZED() { return getToken(SqlBaseParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public MaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materializedView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMaterializedView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMaterializedView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaterializedViewContext materializedView() throws RecognitionException {
		MaterializedViewContext _localctx = new MaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_materializedView);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1705);
			match(MATERIALIZED);
			setState(1706);
			match(VIEW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StreamingTableContext extends ParserRuleContext {
		public TerminalNode STREAMING() { return getToken(SqlBaseParser.STREAMING, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public StreamingTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streamingTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStreamingTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStreamingTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStreamingTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StreamingTableContext streamingTable() throws RecognitionException {
		StreamingTableContext _localctx = new StreamingTableContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_streamingTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1708);
			match(STREAMING);
			setState(1709);
			match(TABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatePipelineDatasetHeaderContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public MaterializedViewContext materializedView() {
			return getRuleContext(MaterializedViewContext.class,0);
		}
		public StreamingTableContext streamingTable() {
			return getRuleContext(StreamingTableContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public CreatePipelineDatasetHeaderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPipelineDatasetHeader; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreatePipelineDatasetHeader(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreatePipelineDatasetHeader(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreatePipelineDatasetHeader(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePipelineDatasetHeaderContext createPipelineDatasetHeader() throws RecognitionException {
		CreatePipelineDatasetHeaderContext _localctx = new CreatePipelineDatasetHeaderContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_createPipelineDatasetHeader);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1711);
			match(CREATE);
			setState(1714);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATERIALIZED:
				{
				setState(1712);
				materializedView();
				}
				break;
			case STREAMING:
				{
				setState(1713);
				streamingTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				{
				setState(1716);
				match(IF);
				setState(1717);
				errorCapturingNot();
				setState(1718);
				match(EXISTS);
				}
				break;
			}
			setState(1722);
			identifierReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StreamRelationPrimaryContext extends ParserRuleContext {
		public StreamRelationPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streamRelationPrimary; }
	 
		public StreamRelationPrimaryContext() { }
		public void copyFrom(StreamRelationPrimaryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StreamTableNameContext extends StreamRelationPrimaryContext {
		public TerminalNode STREAM() { return getToken(SqlBaseParser.STREAM, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public OptionsClauseContext optionsClause() {
			return getRuleContext(OptionsClauseContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public StreamTableNameContext(StreamRelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStreamTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStreamTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStreamTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StreamRelationPrimaryContext streamRelationPrimary() throws RecognitionException {
		StreamRelationPrimaryContext _localctx = new StreamRelationPrimaryContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_streamRelationPrimary);
		try {
			setState(1740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				_localctx = new StreamTableNameContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1724);
				match(STREAM);
				setState(1725);
				multipartIdentifier();
				setState(1727);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
				case 1:
					{
					setState(1726);
					optionsClause();
					}
					break;
				}
				setState(1729);
				tableAlias();
				}
				break;
			case 2:
				_localctx = new StreamTableNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1731);
				match(STREAM);
				setState(1732);
				match(LEFT_PAREN);
				setState(1733);
				multipartIdentifier();
				setState(1734);
				match(RIGHT_PAREN);
				setState(1736);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
				case 1:
					{
					setState(1735);
					optionsClause();
					}
					break;
				}
				setState(1738);
				tableAlias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResetStatementContext extends ParserRuleContext {
		public SetResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResetStatement; }
	 
		public SetResetStatementContext() { }
		public void copyFrom(SetResetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetQuotedConfigurationContext extends SetResetStatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public ConfigKeyContext configKey() {
			return getRuleContext(ConfigKeyContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public ConfigValueContext configValue() {
			return getRuleContext(ConfigValueContext.class,0);
		}
		public SetQuotedConfigurationContext(SetResetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetQuotedConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetQuotedConfiguration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetQuotedConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ResetQuotedConfigurationContext extends SetResetStatementContext {
		public TerminalNode RESET() { return getToken(SqlBaseParser.RESET, 0); }
		public ConfigKeyContext configKey() {
			return getRuleContext(ConfigKeyContext.class,0);
		}
		public ResetQuotedConfigurationContext(SetResetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterResetQuotedConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitResetQuotedConfiguration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitResetQuotedConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FailSetRoleContext extends SetResetStatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode ROLE() { return getToken(SqlBaseParser.ROLE, 0); }
		public FailSetRoleContext(SetResetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFailSetRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFailSetRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFailSetRole(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ResetConfigurationContext extends SetResetStatementContext {
		public TerminalNode RESET() { return getToken(SqlBaseParser.RESET, 0); }
		public ResetConfigurationContext(SetResetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterResetConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitResetConfiguration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitResetConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetTimeZoneContext extends SetResetStatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode TIME() { return getToken(SqlBaseParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(SqlBaseParser.ZONE, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TimezoneContext timezone() {
			return getRuleContext(TimezoneContext.class,0);
		}
		public SetTimeZoneContext(SetResetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetTimeZone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetTimeZone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetTimeZone(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetVariableContext extends SetResetStatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public AssignmentListContext assignmentList() {
			return getRuleContext(AssignmentListContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public SetVariableContext(SetResetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetVariable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetConfigurationContext extends SetResetStatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public ConfigKeyContext configKey() {
			return getRuleContext(ConfigKeyContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public SetConfigurationContext(SetResetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetConfiguration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResetStatementContext setResetStatement() throws RecognitionException {
		SetResetStatementContext _localctx = new SetResetStatementContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_setResetStatement);
		int _la;
		try {
			int _alt;
			setState(1822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
			case 1:
				_localctx = new FailSetRoleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1742);
				match(SET);
				setState(1743);
				match(ROLE);
				setState(1747);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,177,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1744);
						matchWildcard();
						}
						} 
					}
					setState(1749);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,177,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new SetTimeZoneContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1750);
				match(SET);
				setState(1751);
				match(TIME);
				setState(1752);
				match(ZONE);
				setState(1753);
				interval();
				}
				break;
			case 3:
				_localctx = new SetTimeZoneContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1754);
				match(SET);
				setState(1755);
				match(TIME);
				setState(1756);
				match(ZONE);
				setState(1757);
				timezone();
				}
				break;
			case 4:
				_localctx = new SetTimeZoneContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1758);
				match(SET);
				setState(1759);
				match(TIME);
				setState(1760);
				match(ZONE);
				setState(1764);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,178,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1761);
						matchWildcard();
						}
						} 
					}
					setState(1766);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,178,_ctx);
				}
				}
				break;
			case 5:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1767);
				match(SET);
				setState(1768);
				variable();
				setState(1769);
				assignmentList();
				}
				break;
			case 6:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1771);
				match(SET);
				setState(1772);
				variable();
				setState(1773);
				match(LEFT_PAREN);
				setState(1774);
				multipartIdentifierList();
				setState(1775);
				match(RIGHT_PAREN);
				setState(1776);
				match(EQ);
				setState(1777);
				match(LEFT_PAREN);
				setState(1778);
				query();
				setState(1779);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				_localctx = new SetQuotedConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1781);
				match(SET);
				setState(1782);
				configKey();
				setState(1783);
				match(EQ);
				setState(1784);
				configValue();
				}
				break;
			case 8:
				_localctx = new SetConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1786);
				match(SET);
				setState(1787);
				configKey();
				setState(1795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ) {
					{
					setState(1788);
					match(EQ);
					setState(1792);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,179,_ctx);
					while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							setState(1789);
							matchWildcard();
							}
							} 
						}
						setState(1794);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,179,_ctx);
					}
					}
				}

				}
				break;
			case 9:
				_localctx = new SetQuotedConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1797);
				match(SET);
				setState(1801);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,181,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1798);
						matchWildcard();
						}
						} 
					}
					setState(1803);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,181,_ctx);
				}
				setState(1804);
				match(EQ);
				setState(1805);
				configValue();
				}
				break;
			case 10:
				_localctx = new SetConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1806);
				match(SET);
				setState(1810);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,182,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1807);
						matchWildcard();
						}
						} 
					}
					setState(1812);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,182,_ctx);
				}
				}
				break;
			case 11:
				_localctx = new ResetQuotedConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1813);
				match(RESET);
				setState(1814);
				configKey();
				}
				break;
			case 12:
				_localctx = new ResetConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1815);
				match(RESET);
				setState(1819);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,183,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1816);
						matchWildcard();
						}
						} 
					}
					setState(1821);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,183,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteImmediateContext extends ParserRuleContext {
		public ExpressionContext queryParam;
		public MultipartIdentifierListContext targetVariable;
		public TerminalNode EXECUTE() { return getToken(SqlBaseParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlBaseParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public ExecuteImmediateUsingContext executeImmediateUsing() {
			return getRuleContext(ExecuteImmediateUsingContext.class,0);
		}
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public ExecuteImmediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeImmediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExecuteImmediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExecuteImmediate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExecuteImmediate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteImmediateContext executeImmediate() throws RecognitionException {
		ExecuteImmediateContext _localctx = new ExecuteImmediateContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_executeImmediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1824);
			match(EXECUTE);
			setState(1825);
			match(IMMEDIATE);
			setState(1826);
			((ExecuteImmediateContext)_localctx).queryParam = expression();
			setState(1829);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1827);
				match(INTO);
				setState(1828);
				((ExecuteImmediateContext)_localctx).targetVariable = multipartIdentifierList();
				}
			}

			setState(1832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1831);
				executeImmediateUsing();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteImmediateUsingContext extends ParserRuleContext {
		public NamedExpressionSeqContext params;
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public NamedExpressionSeqContext namedExpressionSeq() {
			return getRuleContext(NamedExpressionSeqContext.class,0);
		}
		public ExecuteImmediateUsingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeImmediateUsing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExecuteImmediateUsing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExecuteImmediateUsing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExecuteImmediateUsing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteImmediateUsingContext executeImmediateUsing() throws RecognitionException {
		ExecuteImmediateUsingContext _localctx = new ExecuteImmediateUsingContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_executeImmediateUsing);
		try {
			setState(1841);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1834);
				match(USING);
				setState(1835);
				match(LEFT_PAREN);
				setState(1836);
				((ExecuteImmediateUsingContext)_localctx).params = namedExpressionSeq();
				setState(1837);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1839);
				match(USING);
				setState(1840);
				((ExecuteImmediateUsingContext)_localctx).params = namedExpressionSeq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimezoneContext extends ParserRuleContext {
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TimezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTimezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTimezone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTimezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimezoneContext timezone() throws RecognitionException {
		TimezoneContext _localctx = new TimezoneContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_timezone);
		try {
			setState(1845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1843);
				stringLit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1844);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConfigKeyContext extends ParserRuleContext {
		public QuotedIdentifierContext quotedIdentifier() {
			return getRuleContext(QuotedIdentifierContext.class,0);
		}
		public ConfigKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_configKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterConfigKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitConfigKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitConfigKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConfigKeyContext configKey() throws RecognitionException {
		ConfigKeyContext _localctx = new ConfigKeyContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_configKey);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1847);
			quotedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConfigValueContext extends ParserRuleContext {
		public BackQuotedIdentifierContext backQuotedIdentifier() {
			return getRuleContext(BackQuotedIdentifierContext.class,0);
		}
		public ConfigValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_configValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterConfigValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitConfigValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitConfigValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConfigValueContext configValue() throws RecognitionException {
		ConfigValueContext _localctx = new ConfigValueContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_configValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1849);
			backQuotedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnsupportedHiveNativeCommandsContext extends ParserRuleContext {
		public Token kw1;
		public Token kw2;
		public Token kw3;
		public Token kw4;
		public Token kw5;
		public Token kw6;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(SqlBaseParser.ROLE, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(SqlBaseParser.GRANT, 0); }
		public TerminalNode REVOKE() { return getToken(SqlBaseParser.REVOKE, 0); }
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode PRINCIPALS() { return getToken(SqlBaseParser.PRINCIPALS, 0); }
		public TerminalNode ROLES() { return getToken(SqlBaseParser.ROLES, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public TerminalNode EXPORT() { return getToken(SqlBaseParser.EXPORT, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode IMPORT() { return getToken(SqlBaseParser.IMPORT, 0); }
		public TerminalNode COMPACTIONS() { return getToken(SqlBaseParser.COMPACTIONS, 0); }
		public TerminalNode TRANSACTIONS() { return getToken(SqlBaseParser.TRANSACTIONS, 0); }
		public TerminalNode INDEXES() { return getToken(SqlBaseParser.INDEXES, 0); }
		public TerminalNode LOCKS() { return getToken(SqlBaseParser.LOCKS, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode LOCK() { return getToken(SqlBaseParser.LOCK, 0); }
		public TerminalNode DATABASE() { return getToken(SqlBaseParser.DATABASE, 0); }
		public TerminalNode UNLOCK() { return getToken(SqlBaseParser.UNLOCK, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode MACRO() { return getToken(SqlBaseParser.MACRO, 0); }
		public TableIdentifierContext tableIdentifier() {
			return getRuleContext(TableIdentifierContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode CLUSTERED() { return getToken(SqlBaseParser.CLUSTERED, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode SORTED() { return getToken(SqlBaseParser.SORTED, 0); }
		public TerminalNode SKEWED() { return getToken(SqlBaseParser.SKEWED, 0); }
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode DIRECTORIES() { return getToken(SqlBaseParser.DIRECTORIES, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode LOCATION() { return getToken(SqlBaseParser.LOCATION, 0); }
		public TerminalNode EXCHANGE() { return getToken(SqlBaseParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode ARCHIVE() { return getToken(SqlBaseParser.ARCHIVE, 0); }
		public TerminalNode UNARCHIVE() { return getToken(SqlBaseParser.UNARCHIVE, 0); }
		public TerminalNode TOUCH() { return getToken(SqlBaseParser.TOUCH, 0); }
		public TerminalNode COMPACT() { return getToken(SqlBaseParser.COMPACT, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode CONCATENATE() { return getToken(SqlBaseParser.CONCATENATE, 0); }
		public TerminalNode FILEFORMAT() { return getToken(SqlBaseParser.FILEFORMAT, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public TerminalNode START() { return getToken(SqlBaseParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlBaseParser.TRANSACTION, 0); }
		public TerminalNode COMMIT() { return getToken(SqlBaseParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(SqlBaseParser.ROLLBACK, 0); }
		public TerminalNode DFS() { return getToken(SqlBaseParser.DFS, 0); }
		public UnsupportedHiveNativeCommandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsupportedHiveNativeCommands; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnsupportedHiveNativeCommands(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnsupportedHiveNativeCommands(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnsupportedHiveNativeCommands(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnsupportedHiveNativeCommandsContext unsupportedHiveNativeCommands() throws RecognitionException {
		UnsupportedHiveNativeCommandsContext _localctx = new UnsupportedHiveNativeCommandsContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_unsupportedHiveNativeCommands);
		int _la;
		try {
			setState(2019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1851);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(CREATE);
				setState(1852);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1853);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(DROP);
				setState(1854);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1855);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(GRANT);
				setState(1857);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
				case 1:
					{
					setState(1856);
					((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1859);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(REVOKE);
				setState(1861);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					setState(1860);
					((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1863);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1864);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(GRANT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1865);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1866);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
				setState(1868);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
				case 1:
					{
					setState(1867);
					((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(GRANT);
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1870);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1871);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(PRINCIPALS);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1872);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1873);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLES);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1874);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1875);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(CURRENT);
				setState(1876);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(ROLES);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1877);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(EXPORT);
				setState(1878);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1879);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(IMPORT);
				setState(1880);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1881);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1882);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(COMPACTIONS);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1883);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1884);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(CREATE);
				setState(1885);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(TABLE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1886);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1887);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TRANSACTIONS);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1888);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1889);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(INDEXES);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1890);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1891);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(LOCKS);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1892);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(CREATE);
				setState(1893);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(INDEX);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1894);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(DROP);
				setState(1895);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(INDEX);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1896);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1897);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(INDEX);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1898);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(LOCK);
				setState(1899);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1900);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(LOCK);
				setState(1901);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(DATABASE);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1902);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(UNLOCK);
				setState(1903);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1904);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(UNLOCK);
				setState(1905);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(DATABASE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1906);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(CREATE);
				setState(1907);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TEMPORARY);
				setState(1908);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(MACRO);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1909);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(DROP);
				setState(1910);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TEMPORARY);
				setState(1911);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(MACRO);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1912);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1913);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1914);
				tableIdentifier();
				setState(1915);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(NOT);
				setState(1916);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(CLUSTERED);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1918);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1919);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1920);
				tableIdentifier();
				setState(1921);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(CLUSTERED);
				setState(1922);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(BY);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1924);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1925);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1926);
				tableIdentifier();
				setState(1927);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(NOT);
				setState(1928);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(SORTED);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1930);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1931);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1932);
				tableIdentifier();
				setState(1933);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(SKEWED);
				setState(1934);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(BY);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1936);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1937);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1938);
				tableIdentifier();
				setState(1939);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(NOT);
				setState(1940);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(SKEWED);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1942);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1943);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1944);
				tableIdentifier();
				setState(1945);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(NOT);
				setState(1946);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(STORED);
				setState(1947);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw5 = match(AS);
				setState(1948);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw6 = match(DIRECTORIES);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1950);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1951);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1952);
				tableIdentifier();
				setState(1953);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(SET);
				setState(1954);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(SKEWED);
				setState(1955);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw5 = match(LOCATION);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1957);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1958);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1959);
				tableIdentifier();
				setState(1960);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(EXCHANGE);
				setState(1961);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(PARTITION);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1963);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1964);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1965);
				tableIdentifier();
				setState(1966);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(ARCHIVE);
				setState(1967);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(PARTITION);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1969);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1970);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1971);
				tableIdentifier();
				setState(1972);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(UNARCHIVE);
				setState(1973);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(PARTITION);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1975);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1976);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1977);
				tableIdentifier();
				setState(1978);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(TOUCH);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1980);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1981);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1982);
				tableIdentifier();
				setState(1984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1983);
					partitionSpec();
					}
				}

				setState(1986);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(COMPACT);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1988);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1989);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1990);
				tableIdentifier();
				setState(1992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1991);
					partitionSpec();
					}
				}

				setState(1994);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(CONCATENATE);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1996);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1997);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1998);
				tableIdentifier();
				setState(2000);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1999);
					partitionSpec();
					}
				}

				setState(2002);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(SET);
				setState(2003);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(FILEFORMAT);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2005);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(2006);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(2007);
				tableIdentifier();
				setState(2009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2008);
					partitionSpec();
					}
				}

				setState(2011);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(REPLACE);
				setState(2012);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(COLUMNS);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2014);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(START);
				setState(2015);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TRANSACTION);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2016);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(COMMIT);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(2017);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ROLLBACK);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(2018);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(DFS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableHeaderContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode EXTERNAL() { return getToken(SqlBaseParser.EXTERNAL, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public CreateTableHeaderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableHeader; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateTableHeader(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateTableHeader(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateTableHeader(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableHeaderContext createTableHeader() throws RecognitionException {
		CreateTableHeaderContext _localctx = new CreateTableHeaderContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_createTableHeader);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2021);
			match(CREATE);
			setState(2023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2022);
				match(TEMPORARY);
				}
			}

			setState(2026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(2025);
				match(EXTERNAL);
				}
			}

			setState(2028);
			match(TABLE);
			setState(2033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				setState(2029);
				match(IF);
				setState(2030);
				errorCapturingNot();
				setState(2031);
				match(EXISTS);
				}
				break;
			}
			setState(2035);
			identifierReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceTableHeaderContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public ReplaceTableHeaderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceTableHeader; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterReplaceTableHeader(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitReplaceTableHeader(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitReplaceTableHeader(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceTableHeaderContext replaceTableHeader() throws RecognitionException {
		ReplaceTableHeaderContext _localctx = new ReplaceTableHeaderContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_replaceTableHeader);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(2037);
				match(CREATE);
				setState(2038);
				match(OR);
				}
			}

			setState(2041);
			match(REPLACE);
			setState(2042);
			match(TABLE);
			setState(2043);
			identifierReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterBySpecContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public ClusterBySpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterBySpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterClusterBySpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitClusterBySpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitClusterBySpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterBySpecContext clusterBySpec() throws RecognitionException {
		ClusterBySpecContext _localctx = new ClusterBySpecContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_clusterBySpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2045);
			match(CLUSTER);
			setState(2046);
			match(BY);
			setState(2047);
			match(LEFT_PAREN);
			setState(2048);
			multipartIdentifierList();
			setState(2049);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BucketSpecContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(SqlBaseParser.CLUSTERED, 0); }
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode BUCKETS() { return getToken(SqlBaseParser.BUCKETS, 0); }
		public TerminalNode SORTED() { return getToken(SqlBaseParser.SORTED, 0); }
		public OrderedIdentifierListContext orderedIdentifierList() {
			return getRuleContext(OrderedIdentifierListContext.class,0);
		}
		public BucketSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bucketSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBucketSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBucketSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBucketSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BucketSpecContext bucketSpec() throws RecognitionException {
		BucketSpecContext _localctx = new BucketSpecContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_bucketSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2051);
			match(CLUSTERED);
			setState(2052);
			match(BY);
			setState(2053);
			identifierList();
			setState(2057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SORTED) {
				{
				setState(2054);
				match(SORTED);
				setState(2055);
				match(BY);
				setState(2056);
				orderedIdentifierList();
				}
			}

			setState(2059);
			match(INTO);
			setState(2060);
			match(INTEGER_VALUE);
			setState(2061);
			match(BUCKETS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SkewSpecContext extends ParserRuleContext {
		public TerminalNode SKEWED() { return getToken(SqlBaseParser.SKEWED, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public ConstantListContext constantList() {
			return getRuleContext(ConstantListContext.class,0);
		}
		public NestedConstantListContext nestedConstantList() {
			return getRuleContext(NestedConstantListContext.class,0);
		}
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode DIRECTORIES() { return getToken(SqlBaseParser.DIRECTORIES, 0); }
		public SkewSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSkewSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSkewSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSkewSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SkewSpecContext skewSpec() throws RecognitionException {
		SkewSpecContext _localctx = new SkewSpecContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_skewSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2063);
			match(SKEWED);
			setState(2064);
			match(BY);
			setState(2065);
			identifierList();
			setState(2066);
			match(ON);
			setState(2069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				setState(2067);
				constantList();
				}
				break;
			case 2:
				{
				setState(2068);
				nestedConstantList();
				}
				break;
			}
			setState(2074);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				setState(2071);
				match(STORED);
				setState(2072);
				match(AS);
				setState(2073);
				match(DIRECTORIES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LocationSpecContext extends ParserRuleContext {
		public TerminalNode LOCATION() { return getToken(SqlBaseParser.LOCATION, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public LocationSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locationSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLocationSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLocationSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLocationSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LocationSpecContext locationSpec() throws RecognitionException {
		LocationSpecContext _localctx = new LocationSpecContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_locationSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2076);
			match(LOCATION);
			setState(2077);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaBindingContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlBaseParser.SCHEMA, 0); }
		public TerminalNode BINDING() { return getToken(SqlBaseParser.BINDING, 0); }
		public TerminalNode COMPENSATION() { return getToken(SqlBaseParser.COMPENSATION, 0); }
		public TerminalNode EVOLUTION() { return getToken(SqlBaseParser.EVOLUTION, 0); }
		public TerminalNode TYPE() { return getToken(SqlBaseParser.TYPE, 0); }
		public SchemaBindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaBinding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSchemaBinding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSchemaBinding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSchemaBinding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaBindingContext schemaBinding() throws RecognitionException {
		SchemaBindingContext _localctx = new SchemaBindingContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_schemaBinding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2079);
			match(WITH);
			setState(2080);
			match(SCHEMA);
			setState(2086);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINDING:
				{
				setState(2081);
				match(BINDING);
				}
				break;
			case COMPENSATION:
				{
				setState(2082);
				match(COMPENSATION);
				}
				break;
			case EVOLUTION:
				{
				setState(2083);
				match(EVOLUTION);
				}
				break;
			case TYPE:
				{
				setState(2084);
				match(TYPE);
				setState(2085);
				match(EVOLUTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentSpecContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public CommentSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCommentSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCommentSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCommentSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentSpecContext commentSpec() throws RecognitionException {
		CommentSpecContext _localctx = new CommentSpecContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_commentSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2088);
			match(COMMENT);
			setState(2089);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleQueryContext extends ParserRuleContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleQueryContext singleQuery() throws RecognitionException {
		SingleQueryContext _localctx = new SingleQueryContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_singleQuery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2091);
			query();
			setState(2092);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryContext extends ParserRuleContext {
		public QueryTermContext queryTerm() {
			return getRuleContext(QueryTermContext.class,0);
		}
		public QueryOrganizationContext queryOrganization() {
			return getRuleContext(QueryOrganizationContext.class,0);
		}
		public CtesContext ctes() {
			return getRuleContext(CtesContext.class,0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2094);
				ctes();
				}
			}

			setState(2097);
			queryTerm(0);
			setState(2098);
			queryOrganization();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertIntoContext extends ParserRuleContext {
		public InsertIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertInto; }
	 
		public InsertIntoContext() { }
		public void copyFrom(InsertIntoContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InsertIntoReplaceWhereContext extends InsertIntoContext {
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public OptionsClauseContext optionsClause() {
			return getRuleContext(OptionsClauseContext.class,0);
		}
		public InsertIntoReplaceWhereContext(InsertIntoContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInsertIntoReplaceWhere(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInsertIntoReplaceWhere(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInsertIntoReplaceWhere(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InsertOverwriteHiveDirContext extends InsertIntoContext {
		public StringLitContext path;
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public TerminalNode DIRECTORY() { return getToken(SqlBaseParser.DIRECTORY, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public RowFormatContext rowFormat() {
			return getRuleContext(RowFormatContext.class,0);
		}
		public CreateFileFormatContext createFileFormat() {
			return getRuleContext(CreateFileFormatContext.class,0);
		}
		public InsertOverwriteHiveDirContext(InsertIntoContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInsertOverwriteHiveDir(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInsertOverwriteHiveDir(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInsertOverwriteHiveDir(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InsertOverwriteDirContext extends InsertIntoContext {
		public StringLitContext path;
		public PropertyListContext options;
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public TerminalNode DIRECTORY() { return getToken(SqlBaseParser.DIRECTORY, 0); }
		public TableProviderContext tableProvider() {
			return getRuleContext(TableProviderContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public InsertOverwriteDirContext(InsertIntoContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInsertOverwriteDir(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInsertOverwriteDir(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInsertOverwriteDir(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InsertOverwriteTableContext extends InsertIntoContext {
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public OptionsClauseContext optionsClause() {
			return getRuleContext(OptionsClauseContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode NAME() { return getToken(SqlBaseParser.NAME, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public InsertOverwriteTableContext(InsertIntoContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInsertOverwriteTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInsertOverwriteTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInsertOverwriteTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InsertIntoTableContext extends InsertIntoContext {
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public OptionsClauseContext optionsClause() {
			return getRuleContext(OptionsClauseContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode NAME() { return getToken(SqlBaseParser.NAME, 0); }
		public InsertIntoTableContext(InsertIntoContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInsertIntoTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInsertIntoTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInsertIntoTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertIntoContext insertInto() throws RecognitionException {
		InsertIntoContext _localctx = new InsertIntoContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_insertInto);
		int _la;
		try {
			setState(2185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				_localctx = new InsertOverwriteTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2100);
				match(INSERT);
				setState(2101);
				match(OVERWRITE);
				setState(2103);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					setState(2102);
					match(TABLE);
					}
					break;
				}
				setState(2105);
				identifierReference();
				setState(2107);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
				case 1:
					{
					setState(2106);
					optionsClause();
					}
					break;
				}
				setState(2116);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2109);
					partitionSpec();
					setState(2114);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IF) {
						{
						setState(2110);
						match(IF);
						setState(2111);
						errorCapturingNot();
						setState(2112);
						match(EXISTS);
						}
					}

					}
				}

				setState(2121);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
				case 1:
					{
					{
					setState(2118);
					match(BY);
					setState(2119);
					match(NAME);
					}
					}
					break;
				case 2:
					{
					setState(2120);
					identifierList();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new InsertIntoTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2123);
				match(INSERT);
				setState(2124);
				match(INTO);
				setState(2126);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
				case 1:
					{
					setState(2125);
					match(TABLE);
					}
					break;
				}
				setState(2128);
				identifierReference();
				setState(2130);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
				case 1:
					{
					setState(2129);
					optionsClause();
					}
					break;
				}
				setState(2133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2132);
					partitionSpec();
					}
				}

				setState(2139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2135);
					match(IF);
					setState(2136);
					errorCapturingNot();
					setState(2137);
					match(EXISTS);
					}
				}

				setState(2144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
				case 1:
					{
					{
					setState(2141);
					match(BY);
					setState(2142);
					match(NAME);
					}
					}
					break;
				case 2:
					{
					setState(2143);
					identifierList();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new InsertIntoReplaceWhereContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2146);
				match(INSERT);
				setState(2147);
				match(INTO);
				setState(2149);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
				case 1:
					{
					setState(2148);
					match(TABLE);
					}
					break;
				}
				setState(2151);
				identifierReference();
				setState(2153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2152);
					optionsClause();
					}
				}

				setState(2155);
				match(REPLACE);
				setState(2156);
				whereClause();
				}
				break;
			case 4:
				_localctx = new InsertOverwriteHiveDirContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2158);
				match(INSERT);
				setState(2159);
				match(OVERWRITE);
				setState(2161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(2160);
					match(LOCAL);
					}
				}

				setState(2163);
				match(DIRECTORY);
				setState(2164);
				((InsertOverwriteHiveDirContext)_localctx).path = stringLit();
				setState(2166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW) {
					{
					setState(2165);
					rowFormat();
					}
				}

				setState(2169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED) {
					{
					setState(2168);
					createFileFormat();
					}
				}

				}
				break;
			case 5:
				_localctx = new InsertOverwriteDirContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2171);
				match(INSERT);
				setState(2172);
				match(OVERWRITE);
				setState(2174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(2173);
					match(LOCAL);
					}
				}

				setState(2176);
				match(DIRECTORY);
				setState(2178);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
				case 1:
					{
					setState(2177);
					((InsertOverwriteDirContext)_localctx).path = stringLit();
					}
					break;
				}
				setState(2180);
				tableProvider();
				setState(2183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(2181);
					match(OPTIONS);
					setState(2182);
					((InsertOverwriteDirContext)_localctx).options = propertyList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionSpecLocationContext extends ParserRuleContext {
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public LocationSpecContext locationSpec() {
			return getRuleContext(LocationSpecContext.class,0);
		}
		public PartitionSpecLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpecLocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPartitionSpecLocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPartitionSpecLocation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPartitionSpecLocation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSpecLocationContext partitionSpecLocation() throws RecognitionException {
		PartitionSpecLocationContext _localctx = new PartitionSpecLocationContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_partitionSpecLocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2187);
			partitionSpec();
			setState(2189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCATION) {
				{
				setState(2188);
				locationSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionSpecContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<PartitionValContext> partitionVal() {
			return getRuleContexts(PartitionValContext.class);
		}
		public PartitionValContext partitionVal(int i) {
			return getRuleContext(PartitionValContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPartitionSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPartitionSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPartitionSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSpecContext partitionSpec() throws RecognitionException {
		PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_partitionSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2191);
			match(PARTITION);
			setState(2192);
			match(LEFT_PAREN);
			setState(2193);
			partitionVal();
			setState(2198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2194);
				match(COMMA);
				setState(2195);
				partitionVal();
				}
				}
				setState(2200);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2201);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public PartitionValContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionVal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPartitionVal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPartitionVal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPartitionVal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionValContext partitionVal() throws RecognitionException {
		PartitionValContext _localctx = new PartitionValContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_partitionVal);
		int _la;
		try {
			setState(2212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2203);
				identifier();
				setState(2206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ) {
					{
					setState(2204);
					match(EQ);
					setState(2205);
					constant();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2208);
				identifier();
				setState(2209);
				match(EQ);
				setState(2210);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatePipelineFlowHeaderContext extends ParserRuleContext {
		public IdentifierReferenceContext flowName;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode FLOW() { return getToken(SqlBaseParser.FLOW, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public CreatePipelineFlowHeaderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPipelineFlowHeader; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreatePipelineFlowHeader(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreatePipelineFlowHeader(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreatePipelineFlowHeader(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePipelineFlowHeaderContext createPipelineFlowHeader() throws RecognitionException {
		CreatePipelineFlowHeaderContext _localctx = new CreatePipelineFlowHeaderContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_createPipelineFlowHeader);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2214);
			match(CREATE);
			setState(2215);
			match(FLOW);
			setState(2216);
			((CreatePipelineFlowHeaderContext)_localctx).flowName = identifierReference();
			setState(2218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2217);
				commentSpec();
				}
			}

			setState(2220);
			match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamespaceContext extends ParserRuleContext {
		public TerminalNode NAMESPACE() { return getToken(SqlBaseParser.NAMESPACE, 0); }
		public TerminalNode DATABASE() { return getToken(SqlBaseParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlBaseParser.SCHEMA, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNamespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNamespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNamespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamespaceContext namespace() throws RecognitionException {
		NamespaceContext _localctx = new NamespaceContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_namespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2222);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==NAMESPACE || _la==SCHEMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamespacesContext extends ParserRuleContext {
		public TerminalNode NAMESPACES() { return getToken(SqlBaseParser.NAMESPACES, 0); }
		public TerminalNode DATABASES() { return getToken(SqlBaseParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(SqlBaseParser.SCHEMAS, 0); }
		public NamespacesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespaces; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNamespaces(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNamespaces(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNamespaces(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamespacesContext namespaces() throws RecognitionException {
		NamespacesContext _localctx = new NamespacesContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_namespaces);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2224);
			_la = _input.LA(1);
			if ( !(_la==DATABASES || _la==NAMESPACES || _la==SCHEMAS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public TerminalNode VARIABLE() { return getToken(SqlBaseParser.VARIABLE, 0); }
		public TerminalNode VAR() { return getToken(SqlBaseParser.VAR, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2226);
			_la = _input.LA(1);
			if ( !(_la==VAR || _la==VARIABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeFuncNameContext extends ParserRuleContext {
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public ArithmeticOperatorContext arithmeticOperator() {
			return getRuleContext(ArithmeticOperatorContext.class,0);
		}
		public PredicateOperatorContext predicateOperator() {
			return getRuleContext(PredicateOperatorContext.class,0);
		}
		public ShiftOperatorContext shiftOperator() {
			return getRuleContext(ShiftOperatorContext.class,0);
		}
		public TerminalNode BANG() { return getToken(SqlBaseParser.BANG, 0); }
		public DescribeFuncNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeFuncName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDescribeFuncName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDescribeFuncName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDescribeFuncName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeFuncNameContext describeFuncName() throws RecognitionException {
		DescribeFuncNameContext _localctx = new DescribeFuncNameContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_describeFuncName);
		try {
			setState(2235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2228);
				identifierReference();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2229);
				stringLit();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2230);
				comparisonOperator();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2231);
				arithmeticOperator();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2232);
				predicateOperator();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2233);
				shiftOperator();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2234);
				match(BANG);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeColNameContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> nameParts = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public DescribeColNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeColName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDescribeColName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDescribeColName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDescribeColName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeColNameContext describeColName() throws RecognitionException {
		DescribeColNameContext _localctx = new DescribeColNameContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_describeColName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2237);
			((DescribeColNameContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
			((DescribeColNameContext)_localctx).nameParts.add(((DescribeColNameContext)_localctx).errorCapturingIdentifier);
			setState(2242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT) {
				{
				{
				setState(2238);
				match(DOT);
				setState(2239);
				((DescribeColNameContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
				((DescribeColNameContext)_localctx).nameParts.add(((DescribeColNameContext)_localctx).errorCapturingIdentifier);
				}
				}
				setState(2244);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CtesContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public List<NamedQueryContext> namedQuery() {
			return getRuleContexts(NamedQueryContext.class);
		}
		public NamedQueryContext namedQuery(int i) {
			return getRuleContext(NamedQueryContext.class,i);
		}
		public TerminalNode RECURSIVE() { return getToken(SqlBaseParser.RECURSIVE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public CtesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCtes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCtes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCtes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CtesContext ctes() throws RecognitionException {
		CtesContext _localctx = new CtesContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_ctes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2245);
			match(WITH);
			setState(2247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				setState(2246);
				match(RECURSIVE);
				}
				break;
			}
			setState(2249);
			namedQuery();
			setState(2254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2250);
				match(COMMA);
				setState(2251);
				namedQuery();
				}
				}
				setState(2256);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamedQueryContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext name;
		public IdentifierListContext columnAliases;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode MAX() { return getToken(SqlBaseParser.MAX, 0); }
		public TerminalNode RECURSION() { return getToken(SqlBaseParser.RECURSION, 0); }
		public TerminalNode LEVEL() { return getToken(SqlBaseParser.LEVEL, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public NamedQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNamedQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNamedQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNamedQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamedQueryContext namedQuery() throws RecognitionException {
		NamedQueryContext _localctx = new NamedQueryContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_namedQuery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2257);
			((NamedQueryContext)_localctx).name = errorCapturingIdentifier();
			setState(2259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				setState(2258);
				((NamedQueryContext)_localctx).columnAliases = identifierList();
				}
				break;
			}
			setState(2265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX) {
				{
				setState(2261);
				match(MAX);
				setState(2262);
				match(RECURSION);
				setState(2263);
				match(LEVEL);
				setState(2264);
				match(INTEGER_VALUE);
				}
			}

			setState(2268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2267);
				match(AS);
				}
			}

			setState(2270);
			match(LEFT_PAREN);
			setState(2271);
			query();
			setState(2272);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableProviderContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TableProviderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableProvider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableProvider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableProvider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableProvider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableProviderContext tableProvider() throws RecognitionException {
		TableProviderContext _localctx = new TableProviderContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_tableProvider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2274);
			match(USING);
			setState(2275);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableClausesContext extends ParserRuleContext {
		public ExpressionPropertyListContext options;
		public PartitionFieldListContext partitioning;
		public PropertyListContext tableProps;
		public List<SkewSpecContext> skewSpec() {
			return getRuleContexts(SkewSpecContext.class);
		}
		public SkewSpecContext skewSpec(int i) {
			return getRuleContext(SkewSpecContext.class,i);
		}
		public List<ClusterBySpecContext> clusterBySpec() {
			return getRuleContexts(ClusterBySpecContext.class);
		}
		public ClusterBySpecContext clusterBySpec(int i) {
			return getRuleContext(ClusterBySpecContext.class,i);
		}
		public List<BucketSpecContext> bucketSpec() {
			return getRuleContexts(BucketSpecContext.class);
		}
		public BucketSpecContext bucketSpec(int i) {
			return getRuleContext(BucketSpecContext.class,i);
		}
		public List<RowFormatContext> rowFormat() {
			return getRuleContexts(RowFormatContext.class);
		}
		public RowFormatContext rowFormat(int i) {
			return getRuleContext(RowFormatContext.class,i);
		}
		public List<CreateFileFormatContext> createFileFormat() {
			return getRuleContexts(CreateFileFormatContext.class);
		}
		public CreateFileFormatContext createFileFormat(int i) {
			return getRuleContext(CreateFileFormatContext.class,i);
		}
		public List<LocationSpecContext> locationSpec() {
			return getRuleContexts(LocationSpecContext.class);
		}
		public LocationSpecContext locationSpec(int i) {
			return getRuleContext(LocationSpecContext.class,i);
		}
		public List<CommentSpecContext> commentSpec() {
			return getRuleContexts(CommentSpecContext.class);
		}
		public CommentSpecContext commentSpec(int i) {
			return getRuleContext(CommentSpecContext.class,i);
		}
		public List<CollationSpecContext> collationSpec() {
			return getRuleContexts(CollationSpecContext.class);
		}
		public CollationSpecContext collationSpec(int i) {
			return getRuleContext(CollationSpecContext.class,i);
		}
		public List<TerminalNode> OPTIONS() { return getTokens(SqlBaseParser.OPTIONS); }
		public TerminalNode OPTIONS(int i) {
			return getToken(SqlBaseParser.OPTIONS, i);
		}
		public List<TerminalNode> PARTITIONED() { return getTokens(SqlBaseParser.PARTITIONED); }
		public TerminalNode PARTITIONED(int i) {
			return getToken(SqlBaseParser.PARTITIONED, i);
		}
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public List<TerminalNode> TBLPROPERTIES() { return getTokens(SqlBaseParser.TBLPROPERTIES); }
		public TerminalNode TBLPROPERTIES(int i) {
			return getToken(SqlBaseParser.TBLPROPERTIES, i);
		}
		public List<ExpressionPropertyListContext> expressionPropertyList() {
			return getRuleContexts(ExpressionPropertyListContext.class);
		}
		public ExpressionPropertyListContext expressionPropertyList(int i) {
			return getRuleContext(ExpressionPropertyListContext.class,i);
		}
		public List<PartitionFieldListContext> partitionFieldList() {
			return getRuleContexts(PartitionFieldListContext.class);
		}
		public PartitionFieldListContext partitionFieldList(int i) {
			return getRuleContext(PartitionFieldListContext.class,i);
		}
		public List<PropertyListContext> propertyList() {
			return getRuleContexts(PropertyListContext.class);
		}
		public PropertyListContext propertyList(int i) {
			return getRuleContext(PropertyListContext.class,i);
		}
		public CreateTableClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateTableClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateTableClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateTableClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableClausesContext createTableClauses() throws RecognitionException {
		CreateTableClausesContext _localctx = new CreateTableClausesContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_createTableClauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (CLUSTER - 51)) | (1L << (CLUSTERED - 51)) | (1L << (COMMENT - 51)) | (1L << (DEFAULT - 51)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (LOCATION - 201)) | (1L << (OPTIONS - 201)) | (1L << (PARTITIONED - 201)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (ROW - 296)) | (1L << (SKEWED - 296)) | (1L << (STORED - 296)) | (1L << (TBLPROPERTIES - 296)))) != 0)) {
				{
				setState(2292);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPTIONS:
					{
					{
					setState(2277);
					match(OPTIONS);
					setState(2278);
					((CreateTableClausesContext)_localctx).options = expressionPropertyList();
					}
					}
					break;
				case PARTITIONED:
					{
					{
					setState(2279);
					match(PARTITIONED);
					setState(2280);
					match(BY);
					setState(2281);
					((CreateTableClausesContext)_localctx).partitioning = partitionFieldList();
					}
					}
					break;
				case SKEWED:
					{
					setState(2282);
					skewSpec();
					}
					break;
				case CLUSTER:
					{
					setState(2283);
					clusterBySpec();
					}
					break;
				case CLUSTERED:
					{
					setState(2284);
					bucketSpec();
					}
					break;
				case ROW:
					{
					setState(2285);
					rowFormat();
					}
					break;
				case STORED:
					{
					setState(2286);
					createFileFormat();
					}
					break;
				case LOCATION:
					{
					setState(2287);
					locationSpec();
					}
					break;
				case COMMENT:
					{
					setState(2288);
					commentSpec();
					}
					break;
				case DEFAULT:
					{
					setState(2289);
					collationSpec();
					}
					break;
				case TBLPROPERTIES:
					{
					{
					setState(2290);
					match(TBLPROPERTIES);
					setState(2291);
					((CreateTableClausesContext)_localctx).tableProps = propertyList();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2296);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<PropertyContext> property() {
			return getRuleContexts(PropertyContext.class);
		}
		public PropertyContext property(int i) {
			return getRuleContext(PropertyContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PropertyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPropertyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPropertyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPropertyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyListContext propertyList() throws RecognitionException {
		PropertyListContext _localctx = new PropertyListContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_propertyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2297);
			match(LEFT_PAREN);
			setState(2298);
			property();
			setState(2303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2299);
				match(COMMA);
				setState(2300);
				property();
				}
				}
				setState(2305);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2306);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyContext extends ParserRuleContext {
		public PropertyKeyContext key;
		public PropertyValueContext value;
		public PropertyKeyContext propertyKey() {
			return getRuleContext(PropertyKeyContext.class,0);
		}
		public PropertyValueContext propertyValue() {
			return getRuleContext(PropertyValueContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_property; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterProperty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitProperty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitProperty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyContext property() throws RecognitionException {
		PropertyContext _localctx = new PropertyContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_property);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2308);
			((PropertyContext)_localctx).key = propertyKey();
			setState(2313);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(2310);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
				case 1:
					{
					setState(2309);
					match(EQ);
					}
					break;
				}
				setState(2312);
				((PropertyContext)_localctx).value = propertyValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyKeyContext extends ParserRuleContext {
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PropertyKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPropertyKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPropertyKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPropertyKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyKeyContext propertyKey() throws RecognitionException {
		PropertyKeyContext _localctx = new PropertyKeyContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_propertyKey);
		try {
			int _alt;
			setState(2324);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2315);
				errorCapturingIdentifier();
				setState(2320);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2316);
						match(DOT);
						setState(2317);
						errorCapturingIdentifier();
						}
						} 
					}
					setState(2322);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2323);
				stringLit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyValueContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PropertyValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPropertyValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPropertyValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPropertyValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PropertyValueContext propertyValue() throws RecognitionException {
		PropertyValueContext _localctx = new PropertyValueContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_propertyValue);
		try {
			setState(2330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2326);
				match(INTEGER_VALUE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2327);
				match(DECIMAL_VALUE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2328);
				booleanValue();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2329);
				stringLit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionPropertyListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<ExpressionPropertyContext> expressionProperty() {
			return getRuleContexts(ExpressionPropertyContext.class);
		}
		public ExpressionPropertyContext expressionProperty(int i) {
			return getRuleContext(ExpressionPropertyContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ExpressionPropertyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionPropertyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExpressionPropertyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExpressionPropertyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExpressionPropertyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionPropertyListContext expressionPropertyList() throws RecognitionException {
		ExpressionPropertyListContext _localctx = new ExpressionPropertyListContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_expressionPropertyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2332);
			match(LEFT_PAREN);
			setState(2333);
			expressionProperty();
			setState(2338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2334);
				match(COMMA);
				setState(2335);
				expressionProperty();
				}
				}
				setState(2340);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2341);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionPropertyContext extends ParserRuleContext {
		public PropertyKeyContext key;
		public ExpressionContext value;
		public PropertyKeyContext propertyKey() {
			return getRuleContext(PropertyKeyContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public ExpressionPropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionProperty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExpressionProperty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExpressionProperty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExpressionProperty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionPropertyContext expressionProperty() throws RecognitionException {
		ExpressionPropertyContext _localctx = new ExpressionPropertyContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_expressionProperty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2343);
			((ExpressionPropertyContext)_localctx).key = propertyKey();
			setState(2348);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				{
				setState(2345);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					setState(2344);
					match(EQ);
					}
					break;
				}
				setState(2347);
				((ExpressionPropertyContext)_localctx).value = expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ConstantListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constantList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterConstantList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitConstantList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitConstantList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantListContext constantList() throws RecognitionException {
		ConstantListContext _localctx = new ConstantListContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_constantList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2350);
			match(LEFT_PAREN);
			setState(2351);
			constant();
			setState(2356);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2352);
				match(COMMA);
				setState(2353);
				constant();
				}
				}
				setState(2358);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2359);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NestedConstantListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<ConstantListContext> constantList() {
			return getRuleContexts(ConstantListContext.class);
		}
		public ConstantListContext constantList(int i) {
			return getRuleContext(ConstantListContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public NestedConstantListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedConstantList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNestedConstantList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNestedConstantList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNestedConstantList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NestedConstantListContext nestedConstantList() throws RecognitionException {
		NestedConstantListContext _localctx = new NestedConstantListContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_nestedConstantList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2361);
			match(LEFT_PAREN);
			setState(2362);
			constantList();
			setState(2367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2363);
				match(COMMA);
				setState(2364);
				constantList();
				}
				}
				setState(2369);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2370);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFileFormatContext extends ParserRuleContext {
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public FileFormatContext fileFormat() {
			return getRuleContext(FileFormatContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public StorageHandlerContext storageHandler() {
			return getRuleContext(StorageHandlerContext.class,0);
		}
		public CreateFileFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFileFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCreateFileFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCreateFileFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCreateFileFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFileFormatContext createFileFormat() throws RecognitionException {
		CreateFileFormatContext _localctx = new CreateFileFormatContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_createFileFormat);
		try {
			setState(2378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2372);
				match(STORED);
				setState(2373);
				match(AS);
				setState(2374);
				fileFormat();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2375);
				match(STORED);
				setState(2376);
				match(BY);
				setState(2377);
				storageHandler();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileFormatContext extends ParserRuleContext {
		public FileFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileFormat; }
	 
		public FileFormatContext() { }
		public void copyFrom(FileFormatContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableFileFormatContext extends FileFormatContext {
		public StringLitContext inFmt;
		public StringLitContext outFmt;
		public TerminalNode INPUTFORMAT() { return getToken(SqlBaseParser.INPUTFORMAT, 0); }
		public TerminalNode OUTPUTFORMAT() { return getToken(SqlBaseParser.OUTPUTFORMAT, 0); }
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public TableFileFormatContext(FileFormatContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableFileFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableFileFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableFileFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GenericFileFormatContext extends FileFormatContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public GenericFileFormatContext(FileFormatContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterGenericFileFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitGenericFileFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitGenericFileFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileFormatContext fileFormat() throws RecognitionException {
		FileFormatContext _localctx = new FileFormatContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_fileFormat);
		try {
			setState(2386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				_localctx = new TableFileFormatContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2380);
				match(INPUTFORMAT);
				setState(2381);
				((TableFileFormatContext)_localctx).inFmt = stringLit();
				setState(2382);
				match(OUTPUTFORMAT);
				setState(2383);
				((TableFileFormatContext)_localctx).outFmt = stringLit();
				}
				break;
			case 2:
				_localctx = new GenericFileFormatContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2385);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageHandlerContext extends ParserRuleContext {
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public StorageHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageHandler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStorageHandler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStorageHandler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStorageHandler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageHandlerContext storageHandler() throws RecognitionException {
		StorageHandlerContext _localctx = new StorageHandlerContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_storageHandler);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2388);
			stringLit();
			setState(2392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				setState(2389);
				match(WITH);
				setState(2390);
				match(SERDEPROPERTIES);
				setState(2391);
				propertyList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterResource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitResource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitResource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceContext resource() throws RecognitionException {
		ResourceContext _localctx = new ResourceContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_resource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2394);
			identifier();
			setState(2395);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementNoWithContext extends ParserRuleContext {
		public DmlStatementNoWithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatementNoWith; }
	 
		public DmlStatementNoWithContext() { }
		public void copyFrom(DmlStatementNoWithContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DeleteFromTableContext extends DmlStatementNoWithContext {
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public DeleteFromTableContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDeleteFromTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDeleteFromTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDeleteFromTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SingleInsertQueryContext extends DmlStatementNoWithContext {
		public InsertIntoContext insertInto() {
			return getRuleContext(InsertIntoContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public SingleInsertQueryContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSingleInsertQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSingleInsertQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSingleInsertQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MultiInsertQueryContext extends DmlStatementNoWithContext {
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<MultiInsertQueryBodyContext> multiInsertQueryBody() {
			return getRuleContexts(MultiInsertQueryBodyContext.class);
		}
		public MultiInsertQueryBodyContext multiInsertQueryBody(int i) {
			return getRuleContext(MultiInsertQueryBodyContext.class,i);
		}
		public MultiInsertQueryContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultiInsertQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultiInsertQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultiInsertQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UpdateTableContext extends DmlStatementNoWithContext {
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public SetClauseContext setClause() {
			return getRuleContext(SetClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public UpdateTableContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUpdateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUpdateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUpdateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MergeIntoTableContext extends DmlStatementNoWithContext {
		public IdentifierReferenceContext target;
		public TableAliasContext targetAlias;
		public IdentifierReferenceContext source;
		public QueryContext sourceQuery;
		public TableAliasContext sourceAlias;
		public BooleanExpressionContext mergeCondition;
		public TerminalNode MERGE() { return getToken(SqlBaseParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public List<IdentifierReferenceContext> identifierReference() {
			return getRuleContexts(IdentifierReferenceContext.class);
		}
		public IdentifierReferenceContext identifierReference(int i) {
			return getRuleContext(IdentifierReferenceContext.class,i);
		}
		public List<TableAliasContext> tableAlias() {
			return getRuleContexts(TableAliasContext.class);
		}
		public TableAliasContext tableAlias(int i) {
			return getRuleContext(TableAliasContext.class,i);
		}
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlBaseParser.SCHEMA, 0); }
		public TerminalNode EVOLUTION() { return getToken(SqlBaseParser.EVOLUTION, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public List<MatchedClauseContext> matchedClause() {
			return getRuleContexts(MatchedClauseContext.class);
		}
		public MatchedClauseContext matchedClause(int i) {
			return getRuleContext(MatchedClauseContext.class,i);
		}
		public List<NotMatchedClauseContext> notMatchedClause() {
			return getRuleContexts(NotMatchedClauseContext.class);
		}
		public NotMatchedClauseContext notMatchedClause(int i) {
			return getRuleContext(NotMatchedClauseContext.class,i);
		}
		public List<NotMatchedBySourceClauseContext> notMatchedBySourceClause() {
			return getRuleContexts(NotMatchedBySourceClauseContext.class);
		}
		public NotMatchedBySourceClauseContext notMatchedBySourceClause(int i) {
			return getRuleContext(NotMatchedBySourceClauseContext.class,i);
		}
		public MergeIntoTableContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMergeIntoTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMergeIntoTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMergeIntoTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementNoWithContext dmlStatementNoWith() throws RecognitionException {
		DmlStatementNoWithContext _localctx = new DmlStatementNoWithContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dmlStatementNoWith);
		int _la;
		try {
			int _alt;
			setState(2458);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSERT:
				_localctx = new SingleInsertQueryContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2397);
				insertInto();
				setState(2398);
				query();
				}
				break;
			case FROM:
				_localctx = new MultiInsertQueryContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2400);
				fromClause();
				setState(2402); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2401);
					multiInsertQueryBody();
					}
					}
					setState(2404); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INSERT );
				}
				break;
			case DELETE:
				_localctx = new DeleteFromTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2406);
				match(DELETE);
				setState(2407);
				match(FROM);
				setState(2408);
				identifierReference();
				setState(2409);
				tableAlias();
				setState(2411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(2410);
					whereClause();
					}
				}

				}
				break;
			case UPDATE:
				_localctx = new UpdateTableContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2413);
				match(UPDATE);
				setState(2414);
				identifierReference();
				setState(2415);
				tableAlias();
				setState(2416);
				setClause();
				setState(2418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(2417);
					whereClause();
					}
				}

				}
				break;
			case MERGE:
				_localctx = new MergeIntoTableContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2420);
				match(MERGE);
				setState(2424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2421);
					match(WITH);
					setState(2422);
					match(SCHEMA);
					setState(2423);
					match(EVOLUTION);
					}
				}

				setState(2426);
				match(INTO);
				setState(2427);
				((MergeIntoTableContext)_localctx).target = identifierReference();
				setState(2428);
				((MergeIntoTableContext)_localctx).targetAlias = tableAlias();
				setState(2429);
				match(USING);
				setState(2435);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					setState(2430);
					((MergeIntoTableContext)_localctx).source = identifierReference();
					}
					break;
				case 2:
					{
					setState(2431);
					match(LEFT_PAREN);
					setState(2432);
					((MergeIntoTableContext)_localctx).sourceQuery = query();
					setState(2433);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(2437);
				((MergeIntoTableContext)_localctx).sourceAlias = tableAlias();
				setState(2438);
				match(ON);
				setState(2439);
				((MergeIntoTableContext)_localctx).mergeCondition = booleanExpression(0);
				setState(2443);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,258,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2440);
						matchedClause();
						}
						} 
					}
					setState(2445);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,258,_ctx);
				}
				setState(2449);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,259,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2446);
						notMatchedClause();
						}
						} 
					}
					setState(2451);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,259,_ctx);
				}
				setState(2455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WHEN) {
					{
					{
					setState(2452);
					notMatchedBySourceClause();
					}
					}
					setState(2457);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierReferenceContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_KW() { return getToken(SqlBaseParser.IDENTIFIER_KW, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public IdentifierReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentifierReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentifierReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentifierReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierReferenceContext identifierReference() throws RecognitionException {
		IdentifierReferenceContext _localctx = new IdentifierReferenceContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_identifierReference);
		try {
			setState(2466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2460);
				match(IDENTIFIER_KW);
				setState(2461);
				match(LEFT_PAREN);
				setState(2462);
				expression();
				setState(2463);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2465);
				multipartIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CatalogIdentifierReferenceContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_KW() { return getToken(SqlBaseParser.IDENTIFIER_KW, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public CatalogIdentifierReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogIdentifierReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCatalogIdentifierReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCatalogIdentifierReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCatalogIdentifierReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CatalogIdentifierReferenceContext catalogIdentifierReference() throws RecognitionException {
		CatalogIdentifierReferenceContext _localctx = new CatalogIdentifierReferenceContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_catalogIdentifierReference);
		try {
			setState(2475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2468);
				match(IDENTIFIER_KW);
				setState(2469);
				match(LEFT_PAREN);
				setState(2470);
				expression();
				setState(2471);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2473);
				errorCapturingIdentifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2474);
				stringLit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryOrganizationContext extends ParserRuleContext {
		public SortItemContext sortItem;
		public List<SortItemContext> order = new ArrayList<SortItemContext>();
		public ExpressionContext expression;
		public List<ExpressionContext> clusterBy = new ArrayList<ExpressionContext>();
		public List<ExpressionContext> distributeBy = new ArrayList<ExpressionContext>();
		public List<SortItemContext> sort = new ArrayList<SortItemContext>();
		public ExpressionContext limit;
		public ExpressionContext offset;
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(SqlBaseParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(SqlBaseParser.OFFSET, 0); }
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public QueryOrganizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryOrganization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQueryOrganization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQueryOrganization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQueryOrganization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryOrganizationContext queryOrganization() throws RecognitionException {
		QueryOrganizationContext _localctx = new QueryOrganizationContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_queryOrganization);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				{
				setState(2477);
				match(ORDER);
				setState(2478);
				match(BY);
				setState(2479);
				((QueryOrganizationContext)_localctx).sortItem = sortItem();
				((QueryOrganizationContext)_localctx).order.add(((QueryOrganizationContext)_localctx).sortItem);
				setState(2484);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,264,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2480);
						match(COMMA);
						setState(2481);
						((QueryOrganizationContext)_localctx).sortItem = sortItem();
						((QueryOrganizationContext)_localctx).order.add(((QueryOrganizationContext)_localctx).sortItem);
						}
						} 
					}
					setState(2486);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,264,_ctx);
				}
				}
				break;
			}
			setState(2499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				setState(2489);
				match(CLUSTER);
				setState(2490);
				match(BY);
				setState(2491);
				((QueryOrganizationContext)_localctx).expression = expression();
				((QueryOrganizationContext)_localctx).clusterBy.add(((QueryOrganizationContext)_localctx).expression);
				setState(2496);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,266,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2492);
						match(COMMA);
						setState(2493);
						((QueryOrganizationContext)_localctx).expression = expression();
						((QueryOrganizationContext)_localctx).clusterBy.add(((QueryOrganizationContext)_localctx).expression);
						}
						} 
					}
					setState(2498);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,266,_ctx);
				}
				}
				break;
			}
			setState(2511);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				setState(2501);
				match(DISTRIBUTE);
				setState(2502);
				match(BY);
				setState(2503);
				((QueryOrganizationContext)_localctx).expression = expression();
				((QueryOrganizationContext)_localctx).distributeBy.add(((QueryOrganizationContext)_localctx).expression);
				setState(2508);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,268,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2504);
						match(COMMA);
						setState(2505);
						((QueryOrganizationContext)_localctx).expression = expression();
						((QueryOrganizationContext)_localctx).distributeBy.add(((QueryOrganizationContext)_localctx).expression);
						}
						} 
					}
					setState(2510);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,268,_ctx);
				}
				}
				break;
			}
			setState(2523);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				setState(2513);
				match(SORT);
				setState(2514);
				match(BY);
				setState(2515);
				((QueryOrganizationContext)_localctx).sortItem = sortItem();
				((QueryOrganizationContext)_localctx).sort.add(((QueryOrganizationContext)_localctx).sortItem);
				setState(2520);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,270,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2516);
						match(COMMA);
						setState(2517);
						((QueryOrganizationContext)_localctx).sortItem = sortItem();
						((QueryOrganizationContext)_localctx).sort.add(((QueryOrganizationContext)_localctx).sortItem);
						}
						} 
					}
					setState(2522);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,270,_ctx);
				}
				}
				break;
			}
			setState(2526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(2525);
				windowClause();
				}
				break;
			}
			setState(2533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				{
				setState(2528);
				match(LIMIT);
				setState(2531);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
				case 1:
					{
					setState(2529);
					match(ALL);
					}
					break;
				case 2:
					{
					setState(2530);
					((QueryOrganizationContext)_localctx).limit = expression();
					}
					break;
				}
				}
				break;
			}
			setState(2537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				setState(2535);
				match(OFFSET);
				setState(2536);
				((QueryOrganizationContext)_localctx).offset = expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiInsertQueryBodyContext extends ParserRuleContext {
		public InsertIntoContext insertInto() {
			return getRuleContext(InsertIntoContext.class,0);
		}
		public FromStatementBodyContext fromStatementBody() {
			return getRuleContext(FromStatementBodyContext.class,0);
		}
		public MultiInsertQueryBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiInsertQueryBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultiInsertQueryBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultiInsertQueryBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultiInsertQueryBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiInsertQueryBodyContext multiInsertQueryBody() throws RecognitionException {
		MultiInsertQueryBodyContext _localctx = new MultiInsertQueryBodyContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_multiInsertQueryBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2539);
			insertInto();
			setState(2540);
			fromStatementBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryTermContext extends ParserRuleContext {
		public QueryTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryTerm; }
	 
		public QueryTermContext() { }
		public void copyFrom(QueryTermContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class OperatorPipeStatementContext extends QueryTermContext {
		public QueryTermContext left;
		public TerminalNode OPERATOR_PIPE() { return getToken(SqlBaseParser.OPERATOR_PIPE, 0); }
		public OperatorPipeRightSideContext operatorPipeRightSide() {
			return getRuleContext(OperatorPipeRightSideContext.class,0);
		}
		public QueryTermContext queryTerm() {
			return getRuleContext(QueryTermContext.class,0);
		}
		public OperatorPipeStatementContext(QueryTermContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterOperatorPipeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitOperatorPipeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitOperatorPipeStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QueryTermDefaultContext extends QueryTermContext {
		public QueryPrimaryContext queryPrimary() {
			return getRuleContext(QueryPrimaryContext.class,0);
		}
		public QueryTermDefaultContext(QueryTermContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQueryTermDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQueryTermDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQueryTermDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetOperationContext extends QueryTermContext {
		public QueryTermContext left;
		public Token operator;
		public QueryTermContext right;
		public List<QueryTermContext> queryTerm() {
			return getRuleContexts(QueryTermContext.class);
		}
		public QueryTermContext queryTerm(int i) {
			return getRuleContext(QueryTermContext.class,i);
		}
		public TerminalNode INTERSECT() { return getToken(SqlBaseParser.INTERSECT, 0); }
		public TerminalNode UNION() { return getToken(SqlBaseParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(SqlBaseParser.EXCEPT, 0); }
		public TerminalNode SETMINUS() { return getToken(SqlBaseParser.SETMINUS, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public SetOperationContext(QueryTermContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryTermContext queryTerm() throws RecognitionException {
		return queryTerm(0);
	}

	private QueryTermContext queryTerm(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QueryTermContext _localctx = new QueryTermContext(_ctx, _parentState);
		QueryTermContext _prevctx = _localctx;
		int _startState = 164;
		enterRecursionRule(_localctx, 164, RULE_queryTerm, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new QueryTermDefaultContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(2543);
			queryPrimary();
			}
			_ctx.stop = _input.LT(-1);
			setState(2571);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,280,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2569);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
					case 1:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						setState(2545);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(2546);
						if (!(legacy_setops_precedence_enabled)) throw new FailedPredicateException(this, "legacy_setops_precedence_enabled");
						setState(2547);
						((SetOperationContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==EXCEPT || _la==INTERSECT || _la==SETMINUS || _la==UNION) ) {
							((SetOperationContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2549);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							setState(2548);
							setQuantifier();
							}
						}

						setState(2551);
						((SetOperationContext)_localctx).right = queryTerm(5);
						}
						break;
					case 2:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						setState(2552);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(2553);
						if (!(!legacy_setops_precedence_enabled)) throw new FailedPredicateException(this, "!legacy_setops_precedence_enabled");
						setState(2554);
						((SetOperationContext)_localctx).operator = match(INTERSECT);
						setState(2556);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							setState(2555);
							setQuantifier();
							}
						}

						setState(2558);
						((SetOperationContext)_localctx).right = queryTerm(4);
						}
						break;
					case 3:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						setState(2559);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2560);
						if (!(!legacy_setops_precedence_enabled)) throw new FailedPredicateException(this, "!legacy_setops_precedence_enabled");
						setState(2561);
						((SetOperationContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==EXCEPT || _la==SETMINUS || _la==UNION) ) {
							((SetOperationContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2563);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							setState(2562);
							setQuantifier();
							}
						}

						setState(2565);
						((SetOperationContext)_localctx).right = queryTerm(3);
						}
						break;
					case 4:
						{
						_localctx = new OperatorPipeStatementContext(new QueryTermContext(_parentctx, _parentState));
						((OperatorPipeStatementContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						setState(2566);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(2567);
						match(OPERATOR_PIPE);
						setState(2568);
						operatorPipeRightSide();
						}
						break;
					}
					} 
				}
				setState(2573);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,280,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class QueryPrimaryContext extends ParserRuleContext {
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryPrimary; }
	 
		public QueryPrimaryContext() { }
		public void copyFrom(QueryPrimaryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryContext extends QueryPrimaryContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public SubqueryContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QueryPrimaryDefaultContext extends QueryPrimaryContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryPrimaryDefaultContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQueryPrimaryDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQueryPrimaryDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQueryPrimaryDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InlineTableDefault1Context extends QueryPrimaryContext {
		public InlineTableContext inlineTable() {
			return getRuleContext(InlineTableContext.class,0);
		}
		public InlineTableDefault1Context(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInlineTableDefault1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInlineTableDefault1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInlineTableDefault1(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FromStmtContext extends QueryPrimaryContext {
		public FromStatementContext fromStatement() {
			return getRuleContext(FromStatementContext.class,0);
		}
		public FromStmtContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFromStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFromStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFromStmt(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableContext extends QueryPrimaryContext {
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TableContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryPrimaryContext queryPrimary() throws RecognitionException {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_queryPrimary);
		try {
			setState(2583);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case REDUCE:
			case SELECT:
				_localctx = new QueryPrimaryDefaultContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2574);
				querySpecification();
				}
				break;
			case FROM:
				_localctx = new FromStmtContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2575);
				fromStatement();
				}
				break;
			case TABLE:
				_localctx = new TableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2576);
				match(TABLE);
				setState(2577);
				identifierReference();
				}
				break;
			case VALUES:
				_localctx = new InlineTableDefault1Context(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2578);
				inlineTable();
				}
				break;
			case LEFT_PAREN:
				_localctx = new SubqueryContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2579);
				match(LEFT_PAREN);
				setState(2580);
				query();
				setState(2581);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortItemContext extends ParserRuleContext {
		public Token ordering;
		public Token nullOrder;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(SqlBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode LAST() { return getToken(SqlBaseParser.LAST, 0); }
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public SortItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSortItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSortItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSortItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortItemContext sortItem() throws RecognitionException {
		SortItemContext _localctx = new SortItemContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_sortItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2585);
			expression();
			setState(2587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				{
				setState(2586);
				((SortItemContext)_localctx).ordering = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((SortItemContext)_localctx).ordering = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2591);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
			case 1:
				{
				setState(2589);
				match(NULLS);
				setState(2590);
				((SortItemContext)_localctx).nullOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
					((SortItemContext)_localctx).nullOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromStatementContext extends ParserRuleContext {
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<FromStatementBodyContext> fromStatementBody() {
			return getRuleContexts(FromStatementBodyContext.class);
		}
		public FromStatementBodyContext fromStatementBody(int i) {
			return getRuleContext(FromStatementBodyContext.class,i);
		}
		public FromStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFromStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFromStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFromStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromStatementContext fromStatement() throws RecognitionException {
		FromStatementContext _localctx = new FromStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_fromStatement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2593);
			fromClause();
			setState(2597);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,284,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2594);
					fromStatementBody();
					}
					} 
				}
				setState(2599);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,284,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromStatementBodyContext extends ParserRuleContext {
		public TransformClauseContext transformClause() {
			return getRuleContext(TransformClauseContext.class,0);
		}
		public QueryOrganizationContext queryOrganization() {
			return getRuleContext(QueryOrganizationContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public AggregationClauseContext aggregationClause() {
			return getRuleContext(AggregationClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public FromStatementBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromStatementBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFromStatementBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFromStatementBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFromStatementBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromStatementBodyContext fromStatementBody() throws RecognitionException {
		FromStatementBodyContext _localctx = new FromStatementBodyContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_fromStatementBody);
		try {
			int _alt;
			setState(2627);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2600);
				transformClause();
				setState(2602);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					setState(2601);
					whereClause();
					}
					break;
				}
				setState(2604);
				queryOrganization();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2606);
				selectClause();
				setState(2610);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,286,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2607);
						lateralView();
						}
						} 
					}
					setState(2612);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,286,_ctx);
				}
				setState(2614);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					setState(2613);
					whereClause();
					}
					break;
				}
				setState(2617);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					setState(2616);
					aggregationClause();
					}
					break;
				}
				setState(2620);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(2619);
					havingClause();
					}
					break;
				}
				setState(2623);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(2622);
					windowClause();
					}
					break;
				}
				setState(2625);
				queryOrganization();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
	 
		public QuerySpecificationContext() { }
		public void copyFrom(QuerySpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RegularQuerySpecificationContext extends QuerySpecificationContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public AggregationClauseContext aggregationClause() {
			return getRuleContext(AggregationClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public RegularQuerySpecificationContext(QuerySpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRegularQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRegularQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRegularQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TransformQuerySpecificationContext extends QuerySpecificationContext {
		public TransformClauseContext transformClause() {
			return getRuleContext(TransformClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public AggregationClauseContext aggregationClause() {
			return getRuleContext(AggregationClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public TransformQuerySpecificationContext(QuerySpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTransformQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTransformQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTransformQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_querySpecification);
		try {
			int _alt;
			setState(2673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				_localctx = new TransformQuerySpecificationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2629);
				transformClause();
				setState(2631);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					setState(2630);
					fromClause();
					}
					break;
				}
				setState(2636);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,293,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2633);
						lateralView();
						}
						} 
					}
					setState(2638);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,293,_ctx);
				}
				setState(2640);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					setState(2639);
					whereClause();
					}
					break;
				}
				setState(2643);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					setState(2642);
					aggregationClause();
					}
					break;
				}
				setState(2646);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					setState(2645);
					havingClause();
					}
					break;
				}
				setState(2649);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					setState(2648);
					windowClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new RegularQuerySpecificationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2651);
				selectClause();
				setState(2653);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					setState(2652);
					fromClause();
					}
					break;
				}
				setState(2658);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,299,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2655);
						lateralView();
						}
						} 
					}
					setState(2660);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,299,_ctx);
				}
				setState(2662);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
				case 1:
					{
					setState(2661);
					whereClause();
					}
					break;
				}
				setState(2665);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
				case 1:
					{
					setState(2664);
					aggregationClause();
					}
					break;
				}
				setState(2668);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
				case 1:
					{
					setState(2667);
					havingClause();
					}
					break;
				}
				setState(2671);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
				case 1:
					{
					setState(2670);
					windowClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransformClauseContext extends ParserRuleContext {
		public Token kind;
		public RowFormatContext inRowFormat;
		public StringLitContext recordWriter;
		public StringLitContext script;
		public RowFormatContext outRowFormat;
		public StringLitContext recordReader;
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public TerminalNode SELECT() { return getToken(SqlBaseParser.SELECT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public ExpressionSeqContext expressionSeq() {
			return getRuleContext(ExpressionSeqContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode TRANSFORM() { return getToken(SqlBaseParser.TRANSFORM, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode REDUCE() { return getToken(SqlBaseParser.REDUCE, 0); }
		public TerminalNode RECORDWRITER() { return getToken(SqlBaseParser.RECORDWRITER, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode RECORDREADER() { return getToken(SqlBaseParser.RECORDREADER, 0); }
		public List<RowFormatContext> rowFormat() {
			return getRuleContexts(RowFormatContext.class);
		}
		public RowFormatContext rowFormat(int i) {
			return getRuleContext(RowFormatContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public IdentifierSeqContext identifierSeq() {
			return getRuleContext(IdentifierSeqContext.class,0);
		}
		public ColTypeListContext colTypeList() {
			return getRuleContext(ColTypeListContext.class,0);
		}
		public TransformClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTransformClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTransformClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTransformClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformClauseContext transformClause() throws RecognitionException {
		TransformClauseContext _localctx = new TransformClauseContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_transformClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2694);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(2675);
				match(SELECT);
				setState(2676);
				((TransformClauseContext)_localctx).kind = match(TRANSFORM);
				setState(2677);
				match(LEFT_PAREN);
				setState(2679);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					setState(2678);
					setQuantifier();
					}
					break;
				}
				setState(2681);
				expressionSeq();
				setState(2682);
				match(RIGHT_PAREN);
				}
				break;
			case MAP:
				{
				setState(2684);
				((TransformClauseContext)_localctx).kind = match(MAP);
				setState(2686);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
				case 1:
					{
					setState(2685);
					setQuantifier();
					}
					break;
				}
				setState(2688);
				expressionSeq();
				}
				break;
			case REDUCE:
				{
				setState(2689);
				((TransformClauseContext)_localctx).kind = match(REDUCE);
				setState(2691);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					setState(2690);
					setQuantifier();
					}
					break;
				}
				setState(2693);
				expressionSeq();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROW) {
				{
				setState(2696);
				((TransformClauseContext)_localctx).inRowFormat = rowFormat();
				}
			}

			setState(2701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECORDWRITER) {
				{
				setState(2699);
				match(RECORDWRITER);
				setState(2700);
				((TransformClauseContext)_localctx).recordWriter = stringLit();
				}
			}

			setState(2703);
			match(USING);
			setState(2704);
			((TransformClauseContext)_localctx).script = stringLit();
			setState(2717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				setState(2705);
				match(AS);
				setState(2715);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					setState(2706);
					identifierSeq();
					}
					break;
				case 2:
					{
					setState(2707);
					colTypeList();
					}
					break;
				case 3:
					{
					{
					setState(2708);
					match(LEFT_PAREN);
					setState(2711);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
					case 1:
						{
						setState(2709);
						identifierSeq();
						}
						break;
					case 2:
						{
						setState(2710);
						colTypeList();
						}
						break;
					}
					setState(2713);
					match(RIGHT_PAREN);
					}
					}
					break;
				}
				}
				break;
			}
			setState(2720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				setState(2719);
				((TransformClauseContext)_localctx).outRowFormat = rowFormat();
				}
				break;
			}
			setState(2724);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				{
				setState(2722);
				match(RECORDREADER);
				setState(2723);
				((TransformClauseContext)_localctx).recordReader = stringLit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseContext extends ParserRuleContext {
		public HintContext hint;
		public List<HintContext> hints = new ArrayList<HintContext>();
		public TerminalNode SELECT() { return getToken(SqlBaseParser.SELECT, 0); }
		public NamedExpressionSeqContext namedExpressionSeq() {
			return getRuleContext(NamedExpressionSeqContext.class,0);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public List<HintContext> hint() {
			return getRuleContexts(HintContext.class);
		}
		public HintContext hint(int i) {
			return getRuleContext(HintContext.class,i);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_selectClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2726);
			match(SELECT);
			setState(2730);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2727);
					((SelectClauseContext)_localctx).hint = hint();
					((SelectClauseContext)_localctx).hints.add(((SelectClauseContext)_localctx).hint);
					}
					} 
				}
				setState(2732);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
			}
			setState(2734);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				setState(2733);
				setQuantifier();
				}
				break;
			}
			setState(2736);
			namedExpressionSeq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public AssignmentListContext assignmentList() {
			return getRuleContext(AssignmentListContext.class,0);
		}
		public SetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetClauseContext setClause() throws RecognitionException {
		SetClauseContext _localctx = new SetClauseContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_setClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2738);
			match(SET);
			setState(2739);
			assignmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchedClauseContext extends ParserRuleContext {
		public BooleanExpressionContext matchedCond;
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public MatchedActionContext matchedAction() {
			return getRuleContext(MatchedActionContext.class,0);
		}
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public MatchedClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchedClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMatchedClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMatchedClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMatchedClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchedClauseContext matchedClause() throws RecognitionException {
		MatchedClauseContext _localctx = new MatchedClauseContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_matchedClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2741);
			match(WHEN);
			setState(2742);
			match(MATCHED);
			setState(2745);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(2743);
				match(AND);
				setState(2744);
				((MatchedClauseContext)_localctx).matchedCond = booleanExpression(0);
				}
			}

			setState(2747);
			match(THEN);
			setState(2748);
			matchedAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotMatchedClauseContext extends ParserRuleContext {
		public BooleanExpressionContext notMatchedCond;
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public NotMatchedActionContext notMatchedAction() {
			return getRuleContext(NotMatchedActionContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode TARGET() { return getToken(SqlBaseParser.TARGET, 0); }
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public NotMatchedClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notMatchedClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNotMatchedClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNotMatchedClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNotMatchedClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotMatchedClauseContext notMatchedClause() throws RecognitionException {
		NotMatchedClauseContext _localctx = new NotMatchedClauseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_notMatchedClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2750);
			match(WHEN);
			setState(2751);
			errorCapturingNot();
			setState(2752);
			match(MATCHED);
			setState(2755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(2753);
				match(BY);
				setState(2754);
				match(TARGET);
				}
			}

			setState(2759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(2757);
				match(AND);
				setState(2758);
				((NotMatchedClauseContext)_localctx).notMatchedCond = booleanExpression(0);
				}
			}

			setState(2761);
			match(THEN);
			setState(2762);
			notMatchedAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotMatchedBySourceClauseContext extends ParserRuleContext {
		public BooleanExpressionContext notMatchedBySourceCond;
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode SOURCE() { return getToken(SqlBaseParser.SOURCE, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public NotMatchedBySourceActionContext notMatchedBySourceAction() {
			return getRuleContext(NotMatchedBySourceActionContext.class,0);
		}
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public NotMatchedBySourceClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notMatchedBySourceClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNotMatchedBySourceClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNotMatchedBySourceClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNotMatchedBySourceClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotMatchedBySourceClauseContext notMatchedBySourceClause() throws RecognitionException {
		NotMatchedBySourceClauseContext _localctx = new NotMatchedBySourceClauseContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_notMatchedBySourceClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2764);
			match(WHEN);
			setState(2765);
			errorCapturingNot();
			setState(2766);
			match(MATCHED);
			setState(2767);
			match(BY);
			setState(2768);
			match(SOURCE);
			setState(2771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(2769);
				match(AND);
				setState(2770);
				((NotMatchedBySourceClauseContext)_localctx).notMatchedBySourceCond = booleanExpression(0);
				}
			}

			setState(2773);
			match(THEN);
			setState(2774);
			notMatchedBySourceAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchedActionContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public AssignmentListContext assignmentList() {
			return getRuleContext(AssignmentListContext.class,0);
		}
		public MatchedActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchedAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMatchedAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMatchedAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMatchedAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchedActionContext matchedAction() throws RecognitionException {
		MatchedActionContext _localctx = new MatchedActionContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_matchedAction);
		try {
			setState(2783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2776);
				match(DELETE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2777);
				match(UPDATE);
				setState(2778);
				match(SET);
				setState(2779);
				match(ASTERISK);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2780);
				match(UPDATE);
				setState(2781);
				match(SET);
				setState(2782);
				assignmentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotMatchedActionContext extends ParserRuleContext {
		public MultipartIdentifierListContext columns;
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode VALUES() { return getToken(SqlBaseParser.VALUES, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public NotMatchedActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notMatchedAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNotMatchedAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNotMatchedAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNotMatchedAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotMatchedActionContext notMatchedAction() throws RecognitionException {
		NotMatchedActionContext _localctx = new NotMatchedActionContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_notMatchedAction);
		int _la;
		try {
			setState(2803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2785);
				match(INSERT);
				setState(2786);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2787);
				match(INSERT);
				setState(2788);
				match(LEFT_PAREN);
				setState(2789);
				((NotMatchedActionContext)_localctx).columns = multipartIdentifierList();
				setState(2790);
				match(RIGHT_PAREN);
				setState(2791);
				match(VALUES);
				setState(2792);
				match(LEFT_PAREN);
				setState(2793);
				expression();
				setState(2798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2794);
					match(COMMA);
					setState(2795);
					expression();
					}
					}
					setState(2800);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2801);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotMatchedBySourceActionContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public AssignmentListContext assignmentList() {
			return getRuleContext(AssignmentListContext.class,0);
		}
		public NotMatchedBySourceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notMatchedBySourceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNotMatchedBySourceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNotMatchedBySourceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNotMatchedBySourceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotMatchedBySourceActionContext notMatchedBySourceAction() throws RecognitionException {
		NotMatchedBySourceActionContext _localctx = new NotMatchedBySourceActionContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_notMatchedBySourceAction);
		try {
			setState(2809);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2805);
				match(DELETE);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2806);
				match(UPDATE);
				setState(2807);
				match(SET);
				setState(2808);
				assignmentList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExceptClauseContext extends ParserRuleContext {
		public MultipartIdentifierListContext exceptCols;
		public TerminalNode EXCEPT() { return getToken(SqlBaseParser.EXCEPT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public ExceptClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExceptClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExceptClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExceptClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExceptClauseContext exceptClause() throws RecognitionException {
		ExceptClauseContext _localctx = new ExceptClauseContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_exceptClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2811);
			match(EXCEPT);
			setState(2812);
			match(LEFT_PAREN);
			setState(2813);
			((ExceptClauseContext)_localctx).exceptCols = multipartIdentifierList();
			setState(2814);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentListContext extends ParserRuleContext {
		public List<AssignmentContext> assignment() {
			return getRuleContexts(AssignmentContext.class);
		}
		public AssignmentContext assignment(int i) {
			return getRuleContext(AssignmentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public AssignmentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAssignmentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAssignmentList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAssignmentList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentListContext assignmentList() throws RecognitionException {
		AssignmentListContext _localctx = new AssignmentListContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_assignmentList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2816);
			assignment();
			setState(2821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2817);
				match(COMMA);
				setState(2818);
				assignment();
				}
				}
				setState(2823);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentContext extends ParserRuleContext {
		public MultipartIdentifierContext key;
		public ExpressionContext value;
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAssignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAssignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAssignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentContext assignment() throws RecognitionException {
		AssignmentContext _localctx = new AssignmentContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2824);
			((AssignmentContext)_localctx).key = multipartIdentifier();
			setState(2825);
			match(EQ);
			setState(2826);
			((AssignmentContext)_localctx).value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SqlBaseParser.WHERE, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2828);
			match(WHERE);
			setState(2829);
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(SqlBaseParser.HAVING, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2831);
			match(HAVING);
			setState(2832);
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintContext extends ParserRuleContext {
		public HintStatementContext hintStatement;
		public List<HintStatementContext> hintStatements = new ArrayList<HintStatementContext>();
		public TerminalNode HENT_START() { return getToken(SqlBaseParser.HENT_START, 0); }
		public TerminalNode HENT_END() { return getToken(SqlBaseParser.HENT_END, 0); }
		public List<HintStatementContext> hintStatement() {
			return getRuleContexts(HintStatementContext.class);
		}
		public HintStatementContext hintStatement(int i) {
			return getRuleContext(HintStatementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public HintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintContext hint() throws RecognitionException {
		HintContext _localctx = new HintContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_hint);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2834);
			match(HENT_START);
			setState(2835);
			((HintContext)_localctx).hintStatement = hintStatement();
			((HintContext)_localctx).hintStatements.add(((HintContext)_localctx).hintStatement);
			setState(2842);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2837);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
					case 1:
						{
						setState(2836);
						match(COMMA);
						}
						break;
					}
					setState(2839);
					((HintContext)_localctx).hintStatement = hintStatement();
					((HintContext)_localctx).hintStatements.add(((HintContext)_localctx).hintStatement);
					}
					} 
				}
				setState(2844);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
			}
			setState(2845);
			match(HENT_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintStatementContext extends ParserRuleContext {
		public IdentifierContext hintName;
		public PrimaryExpressionContext primaryExpression;
		public List<PrimaryExpressionContext> parameters = new ArrayList<PrimaryExpressionContext>();
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<PrimaryExpressionContext> primaryExpression() {
			return getRuleContexts(PrimaryExpressionContext.class);
		}
		public PrimaryExpressionContext primaryExpression(int i) {
			return getRuleContext(PrimaryExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public HintStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterHintStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitHintStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitHintStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintStatementContext hintStatement() throws RecognitionException {
		HintStatementContext _localctx = new HintStatementContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_hintStatement);
		int _la;
		try {
			setState(2860);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2847);
				((HintStatementContext)_localctx).hintName = identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2848);
				((HintStatementContext)_localctx).hintName = identifier();
				setState(2849);
				match(LEFT_PAREN);
				setState(2850);
				((HintStatementContext)_localctx).primaryExpression = primaryExpression(0);
				((HintStatementContext)_localctx).parameters.add(((HintStatementContext)_localctx).primaryExpression);
				setState(2855);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2851);
					match(COMMA);
					setState(2852);
					((HintStatementContext)_localctx).primaryExpression = primaryExpression(0);
					((HintStatementContext)_localctx).parameters.add(((HintStatementContext)_localctx).primaryExpression);
					}
					}
					setState(2857);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2858);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public List<RelationContext> relation() {
			return getRuleContexts(RelationContext.class);
		}
		public RelationContext relation(int i) {
			return getRuleContext(RelationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public PivotClauseContext pivotClause() {
			return getRuleContext(PivotClauseContext.class,0);
		}
		public UnpivotClauseContext unpivotClause() {
			return getRuleContext(UnpivotClauseContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_fromClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2862);
			match(FROM);
			setState(2863);
			relation();
			setState(2868);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,331,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2864);
					match(COMMA);
					setState(2865);
					relation();
					}
					} 
				}
				setState(2870);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,331,_ctx);
			}
			setState(2874);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2871);
					lateralView();
					}
					} 
				}
				setState(2876);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
			}
			setState(2878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				{
				setState(2877);
				pivotClause();
				}
				break;
			}
			setState(2881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
			case 1:
				{
				setState(2880);
				unpivotClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TemporalClauseContext extends ParserRuleContext {
		public ValueExpressionContext timestamp;
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode OF() { return getToken(SqlBaseParser.OF, 0); }
		public VersionContext version() {
			return getRuleContext(VersionContext.class,0);
		}
		public TerminalNode SYSTEM_VERSION() { return getToken(SqlBaseParser.SYSTEM_VERSION, 0); }
		public TerminalNode VERSION() { return getToken(SqlBaseParser.VERSION, 0); }
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(SqlBaseParser.SYSTEM_TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlBaseParser.TIMESTAMP, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TemporalClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTemporalClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTemporalClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTemporalClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TemporalClauseContext temporalClause() throws RecognitionException {
		TemporalClauseContext _localctx = new TemporalClauseContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_temporalClause);
		int _la;
		try {
			setState(2897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2883);
					match(FOR);
					}
				}

				setState(2886);
				_la = _input.LA(1);
				if ( !(_la==SYSTEM_VERSION || _la==VERSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2887);
				match(AS);
				setState(2888);
				match(OF);
				setState(2889);
				version();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2890);
					match(FOR);
					}
				}

				setState(2893);
				_la = _input.LA(1);
				if ( !(_la==SYSTEM_TIME || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2894);
				match(AS);
				setState(2895);
				match(OF);
				setState(2896);
				((TemporalClauseContext)_localctx).timestamp = valueExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregationClauseContext extends ParserRuleContext {
		public GroupByClauseContext groupByClause;
		public List<GroupByClauseContext> groupingExpressionsWithGroupingAnalytics = new ArrayList<GroupByClauseContext>();
		public NamedExpressionContext namedExpression;
		public List<NamedExpressionContext> groupingExpressions = new ArrayList<NamedExpressionContext>();
		public Token kind;
		public TerminalNode GROUP() { return getToken(SqlBaseParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public List<GroupByClauseContext> groupByClause() {
			return getRuleContexts(GroupByClauseContext.class);
		}
		public GroupByClauseContext groupByClause(int i) {
			return getRuleContext(GroupByClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public List<NamedExpressionContext> namedExpression() {
			return getRuleContexts(NamedExpressionContext.class);
		}
		public NamedExpressionContext namedExpression(int i) {
			return getRuleContext(NamedExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SETS() { return getToken(SqlBaseParser.SETS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<GroupingSetContext> groupingSet() {
			return getRuleContexts(GroupingSetContext.class);
		}
		public GroupingSetContext groupingSet(int i) {
			return getRuleContext(GroupingSetContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(SqlBaseParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(SqlBaseParser.CUBE, 0); }
		public TerminalNode GROUPING() { return getToken(SqlBaseParser.GROUPING, 0); }
		public AggregationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAggregationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAggregationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAggregationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregationClauseContext aggregationClause() throws RecognitionException {
		AggregationClauseContext _localctx = new AggregationClauseContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_aggregationClause);
		int _la;
		try {
			int _alt;
			setState(2938);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2899);
				match(GROUP);
				setState(2900);
				match(BY);
				setState(2901);
				((AggregationClauseContext)_localctx).groupByClause = groupByClause();
				((AggregationClauseContext)_localctx).groupingExpressionsWithGroupingAnalytics.add(((AggregationClauseContext)_localctx).groupByClause);
				setState(2906);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2902);
						match(COMMA);
						setState(2903);
						((AggregationClauseContext)_localctx).groupByClause = groupByClause();
						((AggregationClauseContext)_localctx).groupingExpressionsWithGroupingAnalytics.add(((AggregationClauseContext)_localctx).groupByClause);
						}
						} 
					}
					setState(2908);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2909);
				match(GROUP);
				setState(2910);
				match(BY);
				setState(2911);
				((AggregationClauseContext)_localctx).namedExpression = namedExpression();
				((AggregationClauseContext)_localctx).groupingExpressions.add(((AggregationClauseContext)_localctx).namedExpression);
				setState(2916);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,339,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2912);
						match(COMMA);
						setState(2913);
						((AggregationClauseContext)_localctx).namedExpression = namedExpression();
						((AggregationClauseContext)_localctx).groupingExpressions.add(((AggregationClauseContext)_localctx).namedExpression);
						}
						} 
					}
					setState(2918);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,339,_ctx);
				}
				setState(2936);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
				case 1:
					{
					setState(2919);
					match(WITH);
					setState(2920);
					((AggregationClauseContext)_localctx).kind = match(ROLLUP);
					}
					break;
				case 2:
					{
					setState(2921);
					match(WITH);
					setState(2922);
					((AggregationClauseContext)_localctx).kind = match(CUBE);
					}
					break;
				case 3:
					{
					setState(2923);
					((AggregationClauseContext)_localctx).kind = match(GROUPING);
					setState(2924);
					match(SETS);
					setState(2925);
					match(LEFT_PAREN);
					setState(2926);
					groupingSet();
					setState(2931);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2927);
						match(COMMA);
						setState(2928);
						groupingSet();
						}
						}
						setState(2933);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2934);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public GroupingAnalyticsContext groupingAnalytics() {
			return getRuleContext(GroupingAnalyticsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_groupByClause);
		try {
			setState(2942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2940);
				groupingAnalytics();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2941);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingAnalyticsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<GroupingSetContext> groupingSet() {
			return getRuleContexts(GroupingSetContext.class);
		}
		public GroupingSetContext groupingSet(int i) {
			return getRuleContext(GroupingSetContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(SqlBaseParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(SqlBaseParser.CUBE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode GROUPING() { return getToken(SqlBaseParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(SqlBaseParser.SETS, 0); }
		public List<GroupingElementContext> groupingElement() {
			return getRuleContexts(GroupingElementContext.class);
		}
		public GroupingElementContext groupingElement(int i) {
			return getRuleContext(GroupingElementContext.class,i);
		}
		public GroupingAnalyticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingAnalytics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterGroupingAnalytics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitGroupingAnalytics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitGroupingAnalytics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingAnalyticsContext groupingAnalytics() throws RecognitionException {
		GroupingAnalyticsContext _localctx = new GroupingAnalyticsContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_groupingAnalytics);
		int _la;
		try {
			setState(2969);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUBE:
			case ROLLUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(2944);
				_la = _input.LA(1);
				if ( !(_la==CUBE || _la==ROLLUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2945);
				match(LEFT_PAREN);
				setState(2946);
				groupingSet();
				setState(2951);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2947);
					match(COMMA);
					setState(2948);
					groupingSet();
					}
					}
					setState(2953);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2954);
				match(RIGHT_PAREN);
				}
				break;
			case GROUPING:
				enterOuterAlt(_localctx, 2);
				{
				setState(2956);
				match(GROUPING);
				setState(2957);
				match(SETS);
				setState(2958);
				match(LEFT_PAREN);
				setState(2959);
				groupingElement();
				setState(2964);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2960);
					match(COMMA);
					setState(2961);
					groupingElement();
					}
					}
					setState(2966);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2967);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingElementContext extends ParserRuleContext {
		public GroupingAnalyticsContext groupingAnalytics() {
			return getRuleContext(GroupingAnalyticsContext.class,0);
		}
		public GroupingSetContext groupingSet() {
			return getRuleContext(GroupingSetContext.class,0);
		}
		public GroupingElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterGroupingElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitGroupingElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitGroupingElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingElementContext groupingElement() throws RecognitionException {
		GroupingElementContext _localctx = new GroupingElementContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_groupingElement);
		try {
			setState(2973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2971);
				groupingAnalytics();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2972);
				groupingSet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public GroupingSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterGroupingSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitGroupingSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitGroupingSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetContext groupingSet() throws RecognitionException {
		GroupingSetContext _localctx = new GroupingSetContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_groupingSet);
		int _la;
		try {
			setState(2988);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2975);
				match(LEFT_PAREN);
				setState(2984);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					setState(2976);
					expression();
					setState(2981);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2977);
						match(COMMA);
						setState(2978);
						expression();
						}
						}
						setState(2983);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(2986);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2987);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PivotClauseContext extends ParserRuleContext {
		public NamedExpressionSeqContext aggregates;
		public PivotValueContext pivotValue;
		public List<PivotValueContext> pivotValues = new ArrayList<PivotValueContext>();
		public TerminalNode PIVOT() { return getToken(SqlBaseParser.PIVOT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public PivotColumnContext pivotColumn() {
			return getRuleContext(PivotColumnContext.class,0);
		}
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public NamedExpressionSeqContext namedExpressionSeq() {
			return getRuleContext(NamedExpressionSeqContext.class,0);
		}
		public List<PivotValueContext> pivotValue() {
			return getRuleContexts(PivotValueContext.class);
		}
		public PivotValueContext pivotValue(int i) {
			return getRuleContext(PivotValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PivotClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivotClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPivotClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPivotClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPivotClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PivotClauseContext pivotClause() throws RecognitionException {
		PivotClauseContext _localctx = new PivotClauseContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_pivotClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2990);
			match(PIVOT);
			setState(2991);
			match(LEFT_PAREN);
			setState(2992);
			((PivotClauseContext)_localctx).aggregates = namedExpressionSeq();
			setState(2993);
			match(FOR);
			setState(2994);
			pivotColumn();
			setState(2995);
			match(IN);
			setState(2996);
			match(LEFT_PAREN);
			setState(2997);
			((PivotClauseContext)_localctx).pivotValue = pivotValue();
			((PivotClauseContext)_localctx).pivotValues.add(((PivotClauseContext)_localctx).pivotValue);
			setState(3002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2998);
				match(COMMA);
				setState(2999);
				((PivotClauseContext)_localctx).pivotValue = pivotValue();
				((PivotClauseContext)_localctx).pivotValues.add(((PivotClauseContext)_localctx).pivotValue);
				}
				}
				setState(3004);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3005);
			match(RIGHT_PAREN);
			setState(3006);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PivotColumnContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> identifiers = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PivotColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivotColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPivotColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPivotColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPivotColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PivotColumnContext pivotColumn() throws RecognitionException {
		PivotColumnContext _localctx = new PivotColumnContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_pivotColumn);
		int _la;
		try {
			setState(3020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3008);
				((PivotColumnContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
				((PivotColumnContext)_localctx).identifiers.add(((PivotColumnContext)_localctx).errorCapturingIdentifier);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3009);
				match(LEFT_PAREN);
				setState(3010);
				((PivotColumnContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
				((PivotColumnContext)_localctx).identifiers.add(((PivotColumnContext)_localctx).errorCapturingIdentifier);
				setState(3015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3011);
					match(COMMA);
					setState(3012);
					((PivotColumnContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
					((PivotColumnContext)_localctx).identifiers.add(((PivotColumnContext)_localctx).errorCapturingIdentifier);
					}
					}
					setState(3017);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3018);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PivotValueContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public PivotValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivotValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPivotValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPivotValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPivotValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PivotValueContext pivotValue() throws RecognitionException {
		PivotValueContext _localctx = new PivotValueContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_pivotValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3022);
			expression();
			setState(3027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				setState(3024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(3023);
					match(AS);
					}
					break;
				}
				setState(3026);
				errorCapturingIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpivotClauseContext extends ParserRuleContext {
		public UnpivotNullClauseContext nullOperator;
		public UnpivotOperatorContext operator;
		public TerminalNode UNPIVOT() { return getToken(SqlBaseParser.UNPIVOT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public UnpivotOperatorContext unpivotOperator() {
			return getRuleContext(UnpivotOperatorContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public UnpivotNullClauseContext unpivotNullClause() {
			return getRuleContext(UnpivotNullClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public UnpivotClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotClauseContext unpivotClause() throws RecognitionException {
		UnpivotClauseContext _localctx = new UnpivotClauseContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_unpivotClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3029);
			match(UNPIVOT);
			setState(3031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(3030);
				((UnpivotClauseContext)_localctx).nullOperator = unpivotNullClause();
				}
			}

			setState(3033);
			match(LEFT_PAREN);
			setState(3034);
			((UnpivotClauseContext)_localctx).operator = unpivotOperator();
			setState(3035);
			match(RIGHT_PAREN);
			setState(3040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(3037);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					setState(3036);
					match(AS);
					}
					break;
				}
				setState(3039);
				errorCapturingIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpivotNullClauseContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(SqlBaseParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(SqlBaseParser.EXCLUDE, 0); }
		public UnpivotNullClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotNullClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotNullClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotNullClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotNullClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotNullClauseContext unpivotNullClause() throws RecognitionException {
		UnpivotNullClauseContext _localctx = new UnpivotNullClauseContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_unpivotNullClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3042);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3043);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpivotOperatorContext extends ParserRuleContext {
		public UnpivotSingleValueColumnClauseContext unpivotSingleValueColumnClause() {
			return getRuleContext(UnpivotSingleValueColumnClauseContext.class,0);
		}
		public UnpivotMultiValueColumnClauseContext unpivotMultiValueColumnClause() {
			return getRuleContext(UnpivotMultiValueColumnClauseContext.class,0);
		}
		public UnpivotOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotOperatorContext unpivotOperator() throws RecognitionException {
		UnpivotOperatorContext _localctx = new UnpivotOperatorContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_unpivotOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				{
				setState(3045);
				unpivotSingleValueColumnClause();
				}
				break;
			case 2:
				{
				setState(3046);
				unpivotMultiValueColumnClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpivotSingleValueColumnClauseContext extends ParserRuleContext {
		public UnpivotColumnAndAliasContext unpivotColumnAndAlias;
		public List<UnpivotColumnAndAliasContext> unpivotColumns = new ArrayList<UnpivotColumnAndAliasContext>();
		public UnpivotValueColumnContext unpivotValueColumn() {
			return getRuleContext(UnpivotValueColumnContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public UnpivotNameColumnContext unpivotNameColumn() {
			return getRuleContext(UnpivotNameColumnContext.class,0);
		}
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<UnpivotColumnAndAliasContext> unpivotColumnAndAlias() {
			return getRuleContexts(UnpivotColumnAndAliasContext.class);
		}
		public UnpivotColumnAndAliasContext unpivotColumnAndAlias(int i) {
			return getRuleContext(UnpivotColumnAndAliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public UnpivotSingleValueColumnClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotSingleValueColumnClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotSingleValueColumnClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotSingleValueColumnClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotSingleValueColumnClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotSingleValueColumnClauseContext unpivotSingleValueColumnClause() throws RecognitionException {
		UnpivotSingleValueColumnClauseContext _localctx = new UnpivotSingleValueColumnClauseContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_unpivotSingleValueColumnClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3049);
			unpivotValueColumn();
			setState(3050);
			match(FOR);
			setState(3051);
			unpivotNameColumn();
			setState(3052);
			match(IN);
			setState(3053);
			match(LEFT_PAREN);
			setState(3054);
			((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumnAndAlias = unpivotColumnAndAlias();
			((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumns.add(((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumnAndAlias);
			setState(3059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3055);
				match(COMMA);
				setState(3056);
				((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumnAndAlias = unpivotColumnAndAlias();
				((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumns.add(((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumnAndAlias);
				}
				}
				setState(3061);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3062);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpivotMultiValueColumnClauseContext extends ParserRuleContext {
		public UnpivotValueColumnContext unpivotValueColumn;
		public List<UnpivotValueColumnContext> unpivotValueColumns = new ArrayList<UnpivotValueColumnContext>();
		public UnpivotColumnSetContext unpivotColumnSet;
		public List<UnpivotColumnSetContext> unpivotColumnSets = new ArrayList<UnpivotColumnSetContext>();
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public UnpivotNameColumnContext unpivotNameColumn() {
			return getRuleContext(UnpivotNameColumnContext.class,0);
		}
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public List<UnpivotValueColumnContext> unpivotValueColumn() {
			return getRuleContexts(UnpivotValueColumnContext.class);
		}
		public UnpivotValueColumnContext unpivotValueColumn(int i) {
			return getRuleContext(UnpivotValueColumnContext.class,i);
		}
		public List<UnpivotColumnSetContext> unpivotColumnSet() {
			return getRuleContexts(UnpivotColumnSetContext.class);
		}
		public UnpivotColumnSetContext unpivotColumnSet(int i) {
			return getRuleContext(UnpivotColumnSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public UnpivotMultiValueColumnClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotMultiValueColumnClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotMultiValueColumnClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotMultiValueColumnClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotMultiValueColumnClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotMultiValueColumnClauseContext unpivotMultiValueColumnClause() throws RecognitionException {
		UnpivotMultiValueColumnClauseContext _localctx = new UnpivotMultiValueColumnClauseContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_unpivotMultiValueColumnClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3064);
			match(LEFT_PAREN);
			setState(3065);
			((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumn = unpivotValueColumn();
			((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumns.add(((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumn);
			setState(3070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3066);
				match(COMMA);
				setState(3067);
				((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumn = unpivotValueColumn();
				((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumns.add(((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumn);
				}
				}
				setState(3072);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3073);
			match(RIGHT_PAREN);
			setState(3074);
			match(FOR);
			setState(3075);
			unpivotNameColumn();
			setState(3076);
			match(IN);
			setState(3077);
			match(LEFT_PAREN);
			setState(3078);
			((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSet = unpivotColumnSet();
			((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSets.add(((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSet);
			setState(3083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3079);
				match(COMMA);
				setState(3080);
				((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSet = unpivotColumnSet();
				((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSets.add(((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSet);
				}
				}
				setState(3085);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3086);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpivotColumnSetContext extends ParserRuleContext {
		public UnpivotColumnContext unpivotColumn;
		public List<UnpivotColumnContext> unpivotColumns = new ArrayList<UnpivotColumnContext>();
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<UnpivotColumnContext> unpivotColumn() {
			return getRuleContexts(UnpivotColumnContext.class);
		}
		public UnpivotColumnContext unpivotColumn(int i) {
			return getRuleContext(UnpivotColumnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public UnpivotAliasContext unpivotAlias() {
			return getRuleContext(UnpivotAliasContext.class,0);
		}
		public UnpivotColumnSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotColumnSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotColumnSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotColumnSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotColumnSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotColumnSetContext unpivotColumnSet() throws RecognitionException {
		UnpivotColumnSetContext _localctx = new UnpivotColumnSetContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_unpivotColumnSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3088);
			match(LEFT_PAREN);
			setState(3089);
			((UnpivotColumnSetContext)_localctx).unpivotColumn = unpivotColumn();
			((UnpivotColumnSetContext)_localctx).unpivotColumns.add(((UnpivotColumnSetContext)_localctx).unpivotColumn);
			setState(3094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3090);
				match(COMMA);
				setState(3091);
				((UnpivotColumnSetContext)_localctx).unpivotColumn = unpivotColumn();
				((UnpivotColumnSetContext)_localctx).unpivotColumns.add(((UnpivotColumnSetContext)_localctx).unpivotColumn);
				}
				}
				setState(3096);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3097);
			match(RIGHT_PAREN);
			setState(3099);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				{
				setState(3098);
				unpivotAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpivotValueColumnContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnpivotValueColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotValueColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotValueColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotValueColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotValueColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotValueColumnContext unpivotValueColumn() throws RecognitionException {
		UnpivotValueColumnContext _localctx = new UnpivotValueColumnContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_unpivotValueColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3101);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpivotNameColumnContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnpivotNameColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotNameColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotNameColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotNameColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotNameColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotNameColumnContext unpivotNameColumn() throws RecognitionException {
		UnpivotNameColumnContext _localctx = new UnpivotNameColumnContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_unpivotNameColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3103);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpivotColumnAndAliasContext extends ParserRuleContext {
		public UnpivotColumnContext unpivotColumn() {
			return getRuleContext(UnpivotColumnContext.class,0);
		}
		public UnpivotAliasContext unpivotAlias() {
			return getRuleContext(UnpivotAliasContext.class,0);
		}
		public UnpivotColumnAndAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotColumnAndAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotColumnAndAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotColumnAndAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotColumnAndAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotColumnAndAliasContext unpivotColumnAndAlias() throws RecognitionException {
		UnpivotColumnAndAliasContext _localctx = new UnpivotColumnAndAliasContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_unpivotColumnAndAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3105);
			unpivotColumn();
			setState(3107);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				setState(3106);
				unpivotAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpivotColumnContext extends ParserRuleContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public UnpivotColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotColumnContext unpivotColumn() throws RecognitionException {
		UnpivotColumnContext _localctx = new UnpivotColumnContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_unpivotColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3109);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpivotAliasContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public UnpivotAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnpivotAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnpivotAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnpivotAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnpivotAliasContext unpivotAlias() throws RecognitionException {
		UnpivotAliasContext _localctx = new UnpivotAliasContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_unpivotAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
			case 1:
				{
				setState(3111);
				match(AS);
				}
				break;
			}
			setState(3114);
			errorCapturingIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LateralViewContext extends ParserRuleContext {
		public IdentifierContext tblName;
		public IdentifierContext identifier;
		public List<IdentifierContext> colName = new ArrayList<IdentifierContext>();
		public TerminalNode LATERAL() { return getToken(SqlBaseParser.LATERAL, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OUTER() { return getToken(SqlBaseParser.OUTER, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public LateralViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lateralView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLateralView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLateralView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLateralView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LateralViewContext lateralView() throws RecognitionException {
		LateralViewContext _localctx = new LateralViewContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_lateralView);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3116);
			match(LATERAL);
			setState(3117);
			match(VIEW);
			setState(3119);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				setState(3118);
				match(OUTER);
				}
				break;
			}
			setState(3121);
			qualifiedName();
			setState(3122);
			match(LEFT_PAREN);
			setState(3131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				setState(3123);
				expression();
				setState(3128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3124);
					match(COMMA);
					setState(3125);
					expression();
					}
					}
					setState(3130);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3133);
			match(RIGHT_PAREN);
			setState(3134);
			((LateralViewContext)_localctx).tblName = identifier();
			setState(3146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				setState(3136);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(3135);
					match(AS);
					}
					break;
				}
				setState(3138);
				((LateralViewContext)_localctx).identifier = identifier();
				((LateralViewContext)_localctx).colName.add(((LateralViewContext)_localctx).identifier);
				setState(3143);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,371,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3139);
						match(COMMA);
						setState(3140);
						((LateralViewContext)_localctx).identifier = identifier();
						((LateralViewContext)_localctx).colName.add(((LateralViewContext)_localctx).identifier);
						}
						} 
					}
					setState(3145);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,371,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetQuantifierContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(SqlBaseParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public SetQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSetQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSetQuantifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSetQuantifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetQuantifierContext setQuantifier() throws RecognitionException {
		SetQuantifierContext _localctx = new SetQuantifierContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_setQuantifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3148);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationContext extends ParserRuleContext {
		public RelationPrimaryContext relationPrimary() {
			return getRuleContext(RelationPrimaryContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(SqlBaseParser.LATERAL, 0); }
		public List<RelationExtensionContext> relationExtension() {
			return getRuleContexts(RelationExtensionContext.class);
		}
		public RelationExtensionContext relationExtension(int i) {
			return getRuleContext(RelationExtensionContext.class,i);
		}
		public RelationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRelation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationContext relation() throws RecognitionException {
		RelationContext _localctx = new RelationContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_relation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				{
				setState(3150);
				match(LATERAL);
				}
				break;
			}
			setState(3153);
			relationPrimary();
			setState(3157);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,374,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3154);
					relationExtension();
					}
					} 
				}
				setState(3159);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,374,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationExtensionContext extends ParserRuleContext {
		public JoinRelationContext joinRelation() {
			return getRuleContext(JoinRelationContext.class,0);
		}
		public PivotClauseContext pivotClause() {
			return getRuleContext(PivotClauseContext.class,0);
		}
		public UnpivotClauseContext unpivotClause() {
			return getRuleContext(UnpivotClauseContext.class,0);
		}
		public RelationExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRelationExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRelationExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRelationExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExtensionContext relationExtension() throws RecognitionException {
		RelationExtensionContext _localctx = new RelationExtensionContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_relationExtension);
		try {
			setState(3163);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANTI:
			case CROSS:
			case FULL:
			case INNER:
			case JOIN:
			case LEFT:
			case NATURAL:
			case RIGHT:
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				setState(3160);
				joinRelation();
				}
				break;
			case PIVOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3161);
				pivotClause();
				}
				break;
			case UNPIVOT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3162);
				unpivotClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinRelationContext extends ParserRuleContext {
		public RelationPrimaryContext right;
		public TerminalNode JOIN() { return getToken(SqlBaseParser.JOIN, 0); }
		public RelationPrimaryContext relationPrimary() {
			return getRuleContext(RelationPrimaryContext.class,0);
		}
		public JoinTypeContext joinType() {
			return getRuleContext(JoinTypeContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(SqlBaseParser.LATERAL, 0); }
		public JoinCriteriaContext joinCriteria() {
			return getRuleContext(JoinCriteriaContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(SqlBaseParser.NATURAL, 0); }
		public JoinRelationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinRelation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterJoinRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitJoinRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitJoinRelation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinRelationContext joinRelation() throws RecognitionException {
		JoinRelationContext _localctx = new JoinRelationContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_joinRelation);
		try {
			setState(3182);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANTI:
			case CROSS:
			case FULL:
			case INNER:
			case JOIN:
			case LEFT:
			case RIGHT:
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3165);
				joinType();
				}
				setState(3166);
				match(JOIN);
				setState(3168);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					setState(3167);
					match(LATERAL);
					}
					break;
				}
				setState(3170);
				((JoinRelationContext)_localctx).right = relationPrimary();
				setState(3172);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
				case 1:
					{
					setState(3171);
					joinCriteria();
					}
					break;
				}
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3174);
				match(NATURAL);
				setState(3175);
				joinType();
				setState(3176);
				match(JOIN);
				setState(3178);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(3177);
					match(LATERAL);
					}
					break;
				}
				setState(3180);
				((JoinRelationContext)_localctx).right = relationPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinTypeContext extends ParserRuleContext {
		public TerminalNode INNER() { return getToken(SqlBaseParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(SqlBaseParser.CROSS, 0); }
		public TerminalNode LEFT() { return getToken(SqlBaseParser.LEFT, 0); }
		public TerminalNode OUTER() { return getToken(SqlBaseParser.OUTER, 0); }
		public TerminalNode SEMI() { return getToken(SqlBaseParser.SEMI, 0); }
		public TerminalNode RIGHT() { return getToken(SqlBaseParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(SqlBaseParser.FULL, 0); }
		public TerminalNode ANTI() { return getToken(SqlBaseParser.ANTI, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinTypeContext joinType() throws RecognitionException {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_joinType);
		int _la;
		try {
			setState(3208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3185);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER) {
					{
					setState(3184);
					match(INNER);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3187);
				match(CROSS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3188);
				match(LEFT);
				setState(3190);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3189);
					match(OUTER);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT) {
					{
					setState(3192);
					match(LEFT);
					}
				}

				setState(3195);
				match(SEMI);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3196);
				match(RIGHT);
				setState(3198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3197);
					match(OUTER);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3200);
				match(FULL);
				setState(3202);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3201);
					match(OUTER);
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT) {
					{
					setState(3204);
					match(LEFT);
					}
				}

				setState(3207);
				match(ANTI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinCriteriaContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public JoinCriteriaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinCriteria; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterJoinCriteria(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitJoinCriteria(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitJoinCriteria(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinCriteriaContext joinCriteria() throws RecognitionException {
		JoinCriteriaContext _localctx = new JoinCriteriaContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_joinCriteria);
		try {
			setState(3214);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3210);
				match(ON);
				setState(3211);
				booleanExpression(0);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3212);
				match(USING);
				setState(3213);
				identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SampleContext extends ParserRuleContext {
		public Token seed;
		public TerminalNode TABLESAMPLE() { return getToken(SqlBaseParser.TABLESAMPLE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public SampleMethodContext sampleMethod() {
			return getRuleContext(SampleMethodContext.class,0);
		}
		public TerminalNode REPEATABLE() { return getToken(SqlBaseParser.REPEATABLE, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public SampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSample(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSample(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SampleContext sample() throws RecognitionException {
		SampleContext _localctx = new SampleContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_sample);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3216);
			match(TABLESAMPLE);
			setState(3217);
			match(LEFT_PAREN);
			setState(3219);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				setState(3218);
				sampleMethod();
				}
				break;
			}
			setState(3221);
			match(RIGHT_PAREN);
			setState(3226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				setState(3222);
				match(REPEATABLE);
				setState(3223);
				match(LEFT_PAREN);
				setState(3224);
				((SampleContext)_localctx).seed = match(INTEGER_VALUE);
				setState(3225);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SampleMethodContext extends ParserRuleContext {
		public SampleMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sampleMethod; }
	 
		public SampleMethodContext() { }
		public void copyFrom(SampleMethodContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SampleByRowsContext extends SampleMethodContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(SqlBaseParser.ROWS, 0); }
		public SampleByRowsContext(SampleMethodContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSampleByRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSampleByRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSampleByRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SampleByPercentileContext extends SampleMethodContext {
		public Token negativeSign;
		public Token percentage;
		public TerminalNode PERCENTLIT() { return getToken(SqlBaseParser.PERCENTLIT, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public SampleByPercentileContext(SampleMethodContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSampleByPercentile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSampleByPercentile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSampleByPercentile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SampleByBucketContext extends SampleMethodContext {
		public Token sampleType;
		public Token numerator;
		public Token denominator;
		public TerminalNode OUT() { return getToken(SqlBaseParser.OUT, 0); }
		public TerminalNode OF() { return getToken(SqlBaseParser.OF, 0); }
		public TerminalNode BUCKET() { return getToken(SqlBaseParser.BUCKET, 0); }
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(SqlBaseParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(SqlBaseParser.INTEGER_VALUE, i);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public SampleByBucketContext(SampleMethodContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSampleByBucket(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSampleByBucket(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSampleByBucket(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SampleByBytesContext extends SampleMethodContext {
		public ExpressionContext bytes;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SampleByBytesContext(SampleMethodContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSampleByBytes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSampleByBytes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSampleByBytes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SampleMethodContext sampleMethod() throws RecognitionException {
		SampleMethodContext _localctx = new SampleMethodContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_sampleMethod);
		int _la;
		try {
			setState(3252);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				_localctx = new SampleByPercentileContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(3228);
					((SampleByPercentileContext)_localctx).negativeSign = match(MINUS);
					}
				}

				setState(3231);
				((SampleByPercentileContext)_localctx).percentage = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_VALUE || _la==DECIMAL_VALUE) ) {
					((SampleByPercentileContext)_localctx).percentage = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3232);
				match(PERCENTLIT);
				}
				break;
			case 2:
				_localctx = new SampleByRowsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3233);
				expression();
				setState(3234);
				match(ROWS);
				}
				break;
			case 3:
				_localctx = new SampleByBucketContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3236);
				((SampleByBucketContext)_localctx).sampleType = match(BUCKET);
				setState(3237);
				((SampleByBucketContext)_localctx).numerator = match(INTEGER_VALUE);
				setState(3238);
				match(OUT);
				setState(3239);
				match(OF);
				setState(3240);
				((SampleByBucketContext)_localctx).denominator = match(INTEGER_VALUE);
				setState(3249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3241);
					match(ON);
					setState(3247);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
					case 1:
						{
						setState(3242);
						identifier();
						}
						break;
					case 2:
						{
						setState(3243);
						qualifiedName();
						setState(3244);
						match(LEFT_PAREN);
						setState(3245);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
				}

				}
				break;
			case 4:
				_localctx = new SampleByBytesContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3251);
				((SampleByBytesContext)_localctx).bytes = expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public IdentifierSeqContext identifierSeq() {
			return getRuleContext(IdentifierSeqContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public IdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentifierList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentifierList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentifierList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierListContext identifierList() throws RecognitionException {
		IdentifierListContext _localctx = new IdentifierListContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_identifierList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3254);
			match(LEFT_PAREN);
			setState(3255);
			identifierSeq();
			setState(3256);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierSeqContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> ident = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public IdentifierSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierSeq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentifierSeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentifierSeq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentifierSeq(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierSeqContext identifierSeq() throws RecognitionException {
		IdentifierSeqContext _localctx = new IdentifierSeqContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_identifierSeq);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3258);
			((IdentifierSeqContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
			((IdentifierSeqContext)_localctx).ident.add(((IdentifierSeqContext)_localctx).errorCapturingIdentifier);
			setState(3263);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,394,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3259);
					match(COMMA);
					setState(3260);
					((IdentifierSeqContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
					((IdentifierSeqContext)_localctx).ident.add(((IdentifierSeqContext)_localctx).errorCapturingIdentifier);
					}
					} 
				}
				setState(3265);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,394,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderedIdentifierListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<OrderedIdentifierContext> orderedIdentifier() {
			return getRuleContexts(OrderedIdentifierContext.class);
		}
		public OrderedIdentifierContext orderedIdentifier(int i) {
			return getRuleContext(OrderedIdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public OrderedIdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderedIdentifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterOrderedIdentifierList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitOrderedIdentifierList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitOrderedIdentifierList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderedIdentifierListContext orderedIdentifierList() throws RecognitionException {
		OrderedIdentifierListContext _localctx = new OrderedIdentifierListContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_orderedIdentifierList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3266);
			match(LEFT_PAREN);
			setState(3267);
			orderedIdentifier();
			setState(3272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3268);
				match(COMMA);
				setState(3269);
				orderedIdentifier();
				}
				}
				setState(3274);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3275);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderedIdentifierContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext ident;
		public Token ordering;
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode ASC() { return getToken(SqlBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public OrderedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterOrderedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitOrderedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitOrderedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderedIdentifierContext orderedIdentifier() throws RecognitionException {
		OrderedIdentifierContext _localctx = new OrderedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_orderedIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3277);
			((OrderedIdentifierContext)_localctx).ident = errorCapturingIdentifier();
			setState(3279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3278);
				((OrderedIdentifierContext)_localctx).ordering = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderedIdentifierContext)_localctx).ordering = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierCommentListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<IdentifierCommentContext> identifierComment() {
			return getRuleContexts(IdentifierCommentContext.class);
		}
		public IdentifierCommentContext identifierComment(int i) {
			return getRuleContext(IdentifierCommentContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public IdentifierCommentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierCommentList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentifierCommentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentifierCommentList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentifierCommentList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierCommentListContext identifierCommentList() throws RecognitionException {
		IdentifierCommentListContext _localctx = new IdentifierCommentListContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_identifierCommentList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3281);
			match(LEFT_PAREN);
			setState(3282);
			identifierComment();
			setState(3287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3283);
				match(COMMA);
				setState(3284);
				identifierComment();
				}
				}
				setState(3289);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3290);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierCommentContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public IdentifierCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierComment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentifierComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentifierComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentifierComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierCommentContext identifierComment() throws RecognitionException {
		IdentifierCommentContext _localctx = new IdentifierCommentContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_identifierComment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3292);
			identifier();
			setState(3294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(3293);
				commentSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationPrimaryContext extends ParserRuleContext {
		public RelationPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationPrimary; }
	 
		public RelationPrimaryContext() { }
		public void copyFrom(RelationPrimaryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StreamRelationContext extends RelationPrimaryContext {
		public StreamRelationPrimaryContext streamRelationPrimary() {
			return getRuleContext(StreamRelationPrimaryContext.class,0);
		}
		public StreamRelationContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStreamRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStreamRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStreamRelation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableValuedFunctionContext extends RelationPrimaryContext {
		public FunctionTableContext functionTable() {
			return getRuleContext(FunctionTableContext.class,0);
		}
		public TableValuedFunctionContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableValuedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableValuedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableValuedFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InlineTableDefault2Context extends RelationPrimaryContext {
		public InlineTableContext inlineTable() {
			return getRuleContext(InlineTableContext.class,0);
		}
		public InlineTableDefault2Context(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInlineTableDefault2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInlineTableDefault2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInlineTableDefault2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AliasedRelationContext extends RelationPrimaryContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public RelationContext relation() {
			return getRuleContext(RelationContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public SampleContext sample() {
			return getRuleContext(SampleContext.class,0);
		}
		public AliasedRelationContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAliasedRelation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAliasedRelation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAliasedRelation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AliasedQueryContext extends RelationPrimaryContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public SampleContext sample() {
			return getRuleContext(SampleContext.class,0);
		}
		public AliasedQueryContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAliasedQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAliasedQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAliasedQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableNameContext extends RelationPrimaryContext {
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TemporalClauseContext temporalClause() {
			return getRuleContext(TemporalClauseContext.class,0);
		}
		public OptionsClauseContext optionsClause() {
			return getRuleContext(OptionsClauseContext.class,0);
		}
		public SampleContext sample() {
			return getRuleContext(SampleContext.class,0);
		}
		public TableNameContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationPrimaryContext relationPrimary() throws RecognitionException {
		RelationPrimaryContext _localctx = new RelationPrimaryContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_relationPrimary);
		try {
			setState(3327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				_localctx = new StreamRelationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3296);
				streamRelationPrimary();
				}
				break;
			case 2:
				_localctx = new TableNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3297);
				identifierReference();
				setState(3299);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
				case 1:
					{
					setState(3298);
					temporalClause();
					}
					break;
				}
				setState(3302);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					setState(3301);
					optionsClause();
					}
					break;
				}
				setState(3305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					setState(3304);
					sample();
					}
					break;
				}
				setState(3307);
				tableAlias();
				}
				break;
			case 3:
				_localctx = new AliasedQueryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3309);
				match(LEFT_PAREN);
				setState(3310);
				query();
				setState(3311);
				match(RIGHT_PAREN);
				setState(3313);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					setState(3312);
					sample();
					}
					break;
				}
				setState(3315);
				tableAlias();
				}
				break;
			case 4:
				_localctx = new AliasedRelationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3317);
				match(LEFT_PAREN);
				setState(3318);
				relation();
				setState(3319);
				match(RIGHT_PAREN);
				setState(3321);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					setState(3320);
					sample();
					}
					break;
				}
				setState(3323);
				tableAlias();
				}
				break;
			case 5:
				_localctx = new InlineTableDefault2Context(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3325);
				inlineTable();
				}
				break;
			case 6:
				_localctx = new TableValuedFunctionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3326);
				functionTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionsClauseContext extends ParserRuleContext {
		public PropertyListContext options;
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public OptionsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterOptionsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitOptionsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitOptionsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionsClauseContext optionsClause() throws RecognitionException {
		OptionsClauseContext _localctx = new OptionsClauseContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_optionsClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3329);
			match(WITH);
			setState(3330);
			((OptionsClauseContext)_localctx).options = propertyList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InlineTableContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(SqlBaseParser.VALUES, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public InlineTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inlineTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInlineTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInlineTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInlineTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InlineTableContext inlineTable() throws RecognitionException {
		InlineTableContext _localctx = new InlineTableContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_inlineTable);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3332);
			match(VALUES);
			setState(3333);
			expression();
			setState(3338);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,405,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3334);
					match(COMMA);
					setState(3335);
					expression();
					}
					} 
				}
				setState(3340);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,405,_ctx);
			}
			setState(3341);
			tableAlias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionTableSubqueryArgumentContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TableArgumentPartitioningContext tableArgumentPartitioning() {
			return getRuleContext(TableArgumentPartitioningContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public FunctionTableSubqueryArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTableSubqueryArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFunctionTableSubqueryArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFunctionTableSubqueryArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFunctionTableSubqueryArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionTableSubqueryArgumentContext functionTableSubqueryArgument() throws RecognitionException {
		FunctionTableSubqueryArgumentContext _localctx = new FunctionTableSubqueryArgumentContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_functionTableSubqueryArgument);
		int _la;
		try {
			setState(3362);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3343);
				match(TABLE);
				setState(3344);
				identifierReference();
				setState(3346);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTRIBUTE || _la==PARTITION || _la==WITH) {
					{
					setState(3345);
					tableArgumentPartitioning();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3348);
				match(TABLE);
				setState(3349);
				match(LEFT_PAREN);
				setState(3350);
				identifierReference();
				setState(3351);
				match(RIGHT_PAREN);
				setState(3353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTRIBUTE || _la==PARTITION || _la==WITH) {
					{
					setState(3352);
					tableArgumentPartitioning();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3355);
				match(TABLE);
				setState(3356);
				match(LEFT_PAREN);
				setState(3357);
				query();
				setState(3358);
				match(RIGHT_PAREN);
				setState(3360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTRIBUTE || _la==PARTITION || _la==WITH) {
					{
					setState(3359);
					tableArgumentPartitioning();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableArgumentPartitioningContext extends ParserRuleContext {
		public ExpressionContext expression;
		public List<ExpressionContext> partition = new ArrayList<ExpressionContext>();
		public ExpressionContext invalidMultiPartitionExpression;
		public SortItemContext invalidMultiSortItem;
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SINGLE() { return getToken(SqlBaseParser.SINGLE, 0); }
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TableArgumentPartitioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableArgumentPartitioning; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableArgumentPartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableArgumentPartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableArgumentPartitioning(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableArgumentPartitioningContext tableArgumentPartitioning() throws RecognitionException {
		TableArgumentPartitioningContext _localctx = new TableArgumentPartitioningContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_tableArgumentPartitioning);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3390);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				{
				setState(3364);
				match(WITH);
				setState(3365);
				match(SINGLE);
				setState(3366);
				match(PARTITION);
				}
				}
				break;
			case DISTRIBUTE:
			case PARTITION:
				{
				{
				setState(3367);
				_la = _input.LA(1);
				if ( !(_la==DISTRIBUTE || _la==PARTITION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3368);
				match(BY);
				setState(3388);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
				case 1:
					{
					{
					{
					setState(3369);
					match(LEFT_PAREN);
					setState(3370);
					((TableArgumentPartitioningContext)_localctx).expression = expression();
					((TableArgumentPartitioningContext)_localctx).partition.add(((TableArgumentPartitioningContext)_localctx).expression);
					setState(3375);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3371);
						match(COMMA);
						setState(3372);
						((TableArgumentPartitioningContext)_localctx).expression = expression();
						((TableArgumentPartitioningContext)_localctx).partition.add(((TableArgumentPartitioningContext)_localctx).expression);
						}
						}
						setState(3377);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3378);
					match(RIGHT_PAREN);
					}
					}
					}
					break;
				case 2:
					{
					{
					setState(3380);
					expression();
					setState(3383); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(3381);
							match(COMMA);
							setState(3382);
							((TableArgumentPartitioningContext)_localctx).invalidMultiPartitionExpression = expression();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3385); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,411,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					break;
				case 3:
					{
					setState(3387);
					((TableArgumentPartitioningContext)_localctx).expression = expression();
					((TableArgumentPartitioningContext)_localctx).partition.add(((TableArgumentPartitioningContext)_localctx).expression);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER || _la==SORT) {
				{
				setState(3392);
				_la = _input.LA(1);
				if ( !(_la==ORDER || _la==SORT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3393);
				match(BY);
				{
				setState(3413);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					{
					setState(3394);
					match(LEFT_PAREN);
					setState(3395);
					sortItem();
					setState(3400);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3396);
						match(COMMA);
						setState(3397);
						sortItem();
						}
						}
						setState(3402);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3403);
					match(RIGHT_PAREN);
					}
					}
					break;
				case 2:
					{
					{
					setState(3405);
					sortItem();
					setState(3408); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(3406);
							match(COMMA);
							setState(3407);
							((TableArgumentPartitioningContext)_localctx).invalidMultiSortItem = sortItem();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3410); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,415,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					break;
				case 3:
					{
					setState(3412);
					sortItem();
					}
					break;
				}
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionTableNamedArgumentExpressionContext extends ParserRuleContext {
		public IdentifierContext key;
		public FunctionTableSubqueryArgumentContext table;
		public TerminalNode FAT_ARROW() { return getToken(SqlBaseParser.FAT_ARROW, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FunctionTableSubqueryArgumentContext functionTableSubqueryArgument() {
			return getRuleContext(FunctionTableSubqueryArgumentContext.class,0);
		}
		public FunctionTableNamedArgumentExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTableNamedArgumentExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFunctionTableNamedArgumentExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFunctionTableNamedArgumentExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFunctionTableNamedArgumentExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionTableNamedArgumentExpressionContext functionTableNamedArgumentExpression() throws RecognitionException {
		FunctionTableNamedArgumentExpressionContext _localctx = new FunctionTableNamedArgumentExpressionContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_functionTableNamedArgumentExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3417);
			((FunctionTableNamedArgumentExpressionContext)_localctx).key = identifier();
			setState(3418);
			match(FAT_ARROW);
			setState(3419);
			((FunctionTableNamedArgumentExpressionContext)_localctx).table = functionTableSubqueryArgument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionTableReferenceArgumentContext extends ParserRuleContext {
		public FunctionTableSubqueryArgumentContext functionTableSubqueryArgument() {
			return getRuleContext(FunctionTableSubqueryArgumentContext.class,0);
		}
		public FunctionTableNamedArgumentExpressionContext functionTableNamedArgumentExpression() {
			return getRuleContext(FunctionTableNamedArgumentExpressionContext.class,0);
		}
		public FunctionTableReferenceArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTableReferenceArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFunctionTableReferenceArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFunctionTableReferenceArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFunctionTableReferenceArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionTableReferenceArgumentContext functionTableReferenceArgument() throws RecognitionException {
		FunctionTableReferenceArgumentContext _localctx = new FunctionTableReferenceArgumentContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_functionTableReferenceArgument);
		try {
			setState(3423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3421);
				functionTableSubqueryArgument();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3422);
				functionTableNamedArgumentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionTableArgumentContext extends ParserRuleContext {
		public FunctionTableReferenceArgumentContext functionTableReferenceArgument() {
			return getRuleContext(FunctionTableReferenceArgumentContext.class,0);
		}
		public FunctionArgumentContext functionArgument() {
			return getRuleContext(FunctionArgumentContext.class,0);
		}
		public FunctionTableArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTableArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFunctionTableArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFunctionTableArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFunctionTableArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionTableArgumentContext functionTableArgument() throws RecognitionException {
		FunctionTableArgumentContext _localctx = new FunctionTableArgumentContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_functionTableArgument);
		try {
			setState(3427);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3425);
				functionTableReferenceArgument();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3426);
				functionArgument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionTableContext extends ParserRuleContext {
		public FunctionNameContext funcName;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public List<FunctionTableArgumentContext> functionTableArgument() {
			return getRuleContexts(FunctionTableArgumentContext.class);
		}
		public FunctionTableArgumentContext functionTableArgument(int i) {
			return getRuleContext(FunctionTableArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public FunctionTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFunctionTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFunctionTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFunctionTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionTableContext functionTable() throws RecognitionException {
		FunctionTableContext _localctx = new FunctionTableContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_functionTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3429);
			((FunctionTableContext)_localctx).funcName = functionName();
			setState(3430);
			match(LEFT_PAREN);
			setState(3439);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				setState(3431);
				functionTableArgument();
				setState(3436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3432);
					match(COMMA);
					setState(3433);
					functionTableArgument();
					}
					}
					setState(3438);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3441);
			match(RIGHT_PAREN);
			setState(3442);
			tableAlias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasContext extends ParserRuleContext {
		public StrictIdentifierContext strictIdentifier() {
			return getRuleContext(StrictIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_tableAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				setState(3445);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
				case 1:
					{
					setState(3444);
					match(AS);
					}
					break;
				}
				setState(3447);
				strictIdentifier();
				setState(3449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					setState(3448);
					identifierList();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowFormatContext extends ParserRuleContext {
		public RowFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowFormat; }
	 
		public RowFormatContext() { }
		public void copyFrom(RowFormatContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RowFormatSerdeContext extends RowFormatContext {
		public StringLitContext name;
		public PropertyListContext props;
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode FORMAT() { return getToken(SqlBaseParser.FORMAT, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public RowFormatSerdeContext(RowFormatContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRowFormatSerde(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRowFormatSerde(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRowFormatSerde(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RowFormatDelimitedContext extends RowFormatContext {
		public StringLitContext fieldsTerminatedBy;
		public StringLitContext escapedBy;
		public StringLitContext collectionItemsTerminatedBy;
		public StringLitContext keysTerminatedBy;
		public StringLitContext linesSeparatedBy;
		public StringLitContext nullDefinedAs;
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode FORMAT() { return getToken(SqlBaseParser.FORMAT, 0); }
		public TerminalNode DELIMITED() { return getToken(SqlBaseParser.DELIMITED, 0); }
		public TerminalNode FIELDS() { return getToken(SqlBaseParser.FIELDS, 0); }
		public List<TerminalNode> TERMINATED() { return getTokens(SqlBaseParser.TERMINATED); }
		public TerminalNode TERMINATED(int i) {
			return getToken(SqlBaseParser.TERMINATED, i);
		}
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public TerminalNode COLLECTION() { return getToken(SqlBaseParser.COLLECTION, 0); }
		public TerminalNode ITEMS() { return getToken(SqlBaseParser.ITEMS, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode KEYS() { return getToken(SqlBaseParser.KEYS, 0); }
		public TerminalNode LINES() { return getToken(SqlBaseParser.LINES, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public TerminalNode DEFINED() { return getToken(SqlBaseParser.DEFINED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public TerminalNode ESCAPED() { return getToken(SqlBaseParser.ESCAPED, 0); }
		public RowFormatDelimitedContext(RowFormatContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRowFormatDelimited(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRowFormatDelimited(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRowFormatDelimited(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowFormatContext rowFormat() throws RecognitionException {
		RowFormatContext _localctx = new RowFormatContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_rowFormat);
		try {
			setState(3502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				_localctx = new RowFormatSerdeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3453);
				match(ROW);
				setState(3454);
				match(FORMAT);
				setState(3455);
				match(SERDE);
				setState(3456);
				((RowFormatSerdeContext)_localctx).name = stringLit();
				setState(3460);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
				case 1:
					{
					setState(3457);
					match(WITH);
					setState(3458);
					match(SERDEPROPERTIES);
					setState(3459);
					((RowFormatSerdeContext)_localctx).props = propertyList();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new RowFormatDelimitedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3462);
				match(ROW);
				setState(3463);
				match(FORMAT);
				setState(3464);
				match(DELIMITED);
				setState(3474);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
				case 1:
					{
					setState(3465);
					match(FIELDS);
					setState(3466);
					match(TERMINATED);
					setState(3467);
					match(BY);
					setState(3468);
					((RowFormatDelimitedContext)_localctx).fieldsTerminatedBy = stringLit();
					setState(3472);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
					case 1:
						{
						setState(3469);
						match(ESCAPED);
						setState(3470);
						match(BY);
						setState(3471);
						((RowFormatDelimitedContext)_localctx).escapedBy = stringLit();
						}
						break;
					}
					}
					break;
				}
				setState(3481);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					setState(3476);
					match(COLLECTION);
					setState(3477);
					match(ITEMS);
					setState(3478);
					match(TERMINATED);
					setState(3479);
					match(BY);
					setState(3480);
					((RowFormatDelimitedContext)_localctx).collectionItemsTerminatedBy = stringLit();
					}
					break;
				}
				setState(3488);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
				case 1:
					{
					setState(3483);
					match(MAP);
					setState(3484);
					match(KEYS);
					setState(3485);
					match(TERMINATED);
					setState(3486);
					match(BY);
					setState(3487);
					((RowFormatDelimitedContext)_localctx).keysTerminatedBy = stringLit();
					}
					break;
				}
				setState(3494);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
				case 1:
					{
					setState(3490);
					match(LINES);
					setState(3491);
					match(TERMINATED);
					setState(3492);
					match(BY);
					setState(3493);
					((RowFormatDelimitedContext)_localctx).linesSeparatedBy = stringLit();
					}
					break;
				}
				setState(3500);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
				case 1:
					{
					setState(3496);
					match(NULL);
					setState(3497);
					match(DEFINED);
					setState(3498);
					match(AS);
					setState(3499);
					((RowFormatDelimitedContext)_localctx).nullDefinedAs = stringLit();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipartIdentifierListContext extends ParserRuleContext {
		public List<MultipartIdentifierContext> multipartIdentifier() {
			return getRuleContexts(MultipartIdentifierContext.class);
		}
		public MultipartIdentifierContext multipartIdentifier(int i) {
			return getRuleContext(MultipartIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public MultipartIdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipartIdentifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultipartIdentifierList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultipartIdentifierList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultipartIdentifierList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipartIdentifierListContext multipartIdentifierList() throws RecognitionException {
		MultipartIdentifierListContext _localctx = new MultipartIdentifierListContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_multipartIdentifierList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3504);
			multipartIdentifier();
			setState(3509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3505);
				match(COMMA);
				setState(3506);
				multipartIdentifier();
				}
				}
				setState(3511);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipartIdentifierContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> parts = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public MultipartIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipartIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultipartIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultipartIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultipartIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipartIdentifierContext multipartIdentifier() throws RecognitionException {
		MultipartIdentifierContext _localctx = new MultipartIdentifierContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_multipartIdentifier);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3512);
			((MultipartIdentifierContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
			((MultipartIdentifierContext)_localctx).parts.add(((MultipartIdentifierContext)_localctx).errorCapturingIdentifier);
			setState(3517);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,434,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3513);
					match(DOT);
					setState(3514);
					((MultipartIdentifierContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
					((MultipartIdentifierContext)_localctx).parts.add(((MultipartIdentifierContext)_localctx).errorCapturingIdentifier);
					}
					} 
				}
				setState(3519);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,434,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipartIdentifierPropertyListContext extends ParserRuleContext {
		public List<MultipartIdentifierPropertyContext> multipartIdentifierProperty() {
			return getRuleContexts(MultipartIdentifierPropertyContext.class);
		}
		public MultipartIdentifierPropertyContext multipartIdentifierProperty(int i) {
			return getRuleContext(MultipartIdentifierPropertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public MultipartIdentifierPropertyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipartIdentifierPropertyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultipartIdentifierPropertyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultipartIdentifierPropertyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultipartIdentifierPropertyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipartIdentifierPropertyListContext multipartIdentifierPropertyList() throws RecognitionException {
		MultipartIdentifierPropertyListContext _localctx = new MultipartIdentifierPropertyListContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_multipartIdentifierPropertyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3520);
			multipartIdentifierProperty();
			setState(3525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3521);
				match(COMMA);
				setState(3522);
				multipartIdentifierProperty();
				}
				}
				setState(3527);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipartIdentifierPropertyContext extends ParserRuleContext {
		public PropertyListContext options;
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public MultipartIdentifierPropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipartIdentifierProperty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultipartIdentifierProperty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultipartIdentifierProperty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultipartIdentifierProperty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipartIdentifierPropertyContext multipartIdentifierProperty() throws RecognitionException {
		MultipartIdentifierPropertyContext _localctx = new MultipartIdentifierPropertyContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_multipartIdentifierProperty);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3528);
			multipartIdentifier();
			setState(3531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(3529);
				match(OPTIONS);
				setState(3530);
				((MultipartIdentifierPropertyContext)_localctx).options = propertyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIdentifierContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext db;
		public ErrorCapturingIdentifierContext table;
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(SqlBaseParser.DOT, 0); }
		public TableIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIdentifierContext tableIdentifier() throws RecognitionException {
		TableIdentifierContext _localctx = new TableIdentifierContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_tableIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				setState(3533);
				((TableIdentifierContext)_localctx).db = errorCapturingIdentifier();
				setState(3534);
				match(DOT);
				}
				break;
			}
			setState(3538);
			((TableIdentifierContext)_localctx).table = errorCapturingIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionIdentifierContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext db;
		public ErrorCapturingIdentifierContext function;
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(SqlBaseParser.DOT, 0); }
		public FunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFunctionIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFunctionIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFunctionIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionIdentifierContext functionIdentifier() throws RecognitionException {
		FunctionIdentifierContext _localctx = new FunctionIdentifierContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_functionIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3543);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(3540);
				((FunctionIdentifierContext)_localctx).db = errorCapturingIdentifier();
				setState(3541);
				match(DOT);
				}
				break;
			}
			setState(3545);
			((FunctionIdentifierContext)_localctx).function = errorCapturingIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamedExpressionContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext name;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public NamedExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNamedExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNamedExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNamedExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamedExpressionContext namedExpression() throws RecognitionException {
		NamedExpressionContext _localctx = new NamedExpressionContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_namedExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3547);
			expression();
			setState(3555);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(3549);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(3548);
					match(AS);
					}
					break;
				}
				setState(3553);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
				case 1:
					{
					setState(3551);
					((NamedExpressionContext)_localctx).name = errorCapturingIdentifier();
					}
					break;
				case 2:
					{
					setState(3552);
					identifierList();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamedExpressionSeqContext extends ParserRuleContext {
		public List<NamedExpressionContext> namedExpression() {
			return getRuleContexts(NamedExpressionContext.class);
		}
		public NamedExpressionContext namedExpression(int i) {
			return getRuleContext(NamedExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public NamedExpressionSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedExpressionSeq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNamedExpressionSeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNamedExpressionSeq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNamedExpressionSeq(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamedExpressionSeqContext namedExpressionSeq() throws RecognitionException {
		NamedExpressionSeqContext _localctx = new NamedExpressionSeqContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_namedExpressionSeq);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3557);
			namedExpression();
			setState(3562);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,442,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3558);
					match(COMMA);
					setState(3559);
					namedExpression();
					}
					} 
				}
				setState(3564);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,442,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFieldListContext extends ParserRuleContext {
		public PartitionFieldContext partitionField;
		public List<PartitionFieldContext> fields = new ArrayList<PartitionFieldContext>();
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<PartitionFieldContext> partitionField() {
			return getRuleContexts(PartitionFieldContext.class);
		}
		public PartitionFieldContext partitionField(int i) {
			return getRuleContext(PartitionFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PartitionFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFieldList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPartitionFieldList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPartitionFieldList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPartitionFieldList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFieldListContext partitionFieldList() throws RecognitionException {
		PartitionFieldListContext _localctx = new PartitionFieldListContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_partitionFieldList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3565);
			match(LEFT_PAREN);
			setState(3566);
			((PartitionFieldListContext)_localctx).partitionField = partitionField();
			((PartitionFieldListContext)_localctx).fields.add(((PartitionFieldListContext)_localctx).partitionField);
			setState(3571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3567);
				match(COMMA);
				setState(3568);
				((PartitionFieldListContext)_localctx).partitionField = partitionField();
				((PartitionFieldListContext)_localctx).fields.add(((PartitionFieldListContext)_localctx).partitionField);
				}
				}
				setState(3573);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3574);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFieldContext extends ParserRuleContext {
		public PartitionFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionField; }
	 
		public PartitionFieldContext() { }
		public void copyFrom(PartitionFieldContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionColumnContext extends PartitionFieldContext {
		public ColTypeContext colType() {
			return getRuleContext(ColTypeContext.class,0);
		}
		public PartitionColumnContext(PartitionFieldContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPartitionColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPartitionColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPartitionColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionTransformContext extends PartitionFieldContext {
		public TransformContext transform() {
			return getRuleContext(TransformContext.class,0);
		}
		public PartitionTransformContext(PartitionFieldContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPartitionTransform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPartitionTransform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPartitionTransform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFieldContext partitionField() throws RecognitionException {
		PartitionFieldContext _localctx = new PartitionFieldContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_partitionField);
		try {
			setState(3578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				_localctx = new PartitionTransformContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3576);
				transform();
				}
				break;
			case 2:
				_localctx = new PartitionColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3577);
				colType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransformContext extends ParserRuleContext {
		public TransformContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform; }
	 
		public TransformContext() { }
		public void copyFrom(TransformContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IdentityTransformContext extends TransformContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public IdentityTransformContext(TransformContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentityTransform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentityTransform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentityTransform(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ApplyTransformContext extends TransformContext {
		public IdentifierContext transformName;
		public TransformArgumentContext transformArgument;
		public List<TransformArgumentContext> argument = new ArrayList<TransformArgumentContext>();
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TransformArgumentContext> transformArgument() {
			return getRuleContexts(TransformArgumentContext.class);
		}
		public TransformArgumentContext transformArgument(int i) {
			return getRuleContext(TransformArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ApplyTransformContext(TransformContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterApplyTransform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitApplyTransform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitApplyTransform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformContext transform() throws RecognitionException {
		TransformContext _localctx = new TransformContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_transform);
		int _la;
		try {
			setState(3593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				_localctx = new IdentityTransformContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3580);
				qualifiedName();
				}
				break;
			case 2:
				_localctx = new ApplyTransformContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3581);
				((ApplyTransformContext)_localctx).transformName = identifier();
				setState(3582);
				match(LEFT_PAREN);
				setState(3583);
				((ApplyTransformContext)_localctx).transformArgument = transformArgument();
				((ApplyTransformContext)_localctx).argument.add(((ApplyTransformContext)_localctx).transformArgument);
				setState(3588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3584);
					match(COMMA);
					setState(3585);
					((ApplyTransformContext)_localctx).transformArgument = transformArgument();
					((ApplyTransformContext)_localctx).argument.add(((ApplyTransformContext)_localctx).transformArgument);
					}
					}
					setState(3590);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3591);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransformArgumentContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TransformArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTransformArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTransformArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTransformArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformArgumentContext transformArgument() throws RecognitionException {
		TransformArgumentContext _localctx = new TransformArgumentContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_transformArgument);
		try {
			setState(3597);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3595);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3596);
				constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3599);
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamedArgumentExpressionContext extends ParserRuleContext {
		public IdentifierContext key;
		public ExpressionContext value;
		public TerminalNode FAT_ARROW() { return getToken(SqlBaseParser.FAT_ARROW, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public NamedArgumentExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedArgumentExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNamedArgumentExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNamedArgumentExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNamedArgumentExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamedArgumentExpressionContext namedArgumentExpression() throws RecognitionException {
		NamedArgumentExpressionContext _localctx = new NamedArgumentExpressionContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_namedArgumentExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3601);
			((NamedArgumentExpressionContext)_localctx).key = identifier();
			setState(3602);
			match(FAT_ARROW);
			setState(3603);
			((NamedArgumentExpressionContext)_localctx).value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgumentContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public NamedArgumentExpressionContext namedArgumentExpression() {
			return getRuleContext(NamedArgumentExpressionContext.class,0);
		}
		public FunctionArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFunctionArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFunctionArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFunctionArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgumentContext functionArgument() throws RecognitionException {
		FunctionArgumentContext _localctx = new FunctionArgumentContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_functionArgument);
		try {
			setState(3607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3605);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3606);
				namedArgumentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionSeqContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ExpressionSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionSeq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExpressionSeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExpressionSeq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExpressionSeq(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionSeqContext expressionSeq() throws RecognitionException {
		ExpressionSeqContext _localctx = new ExpressionSeqContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_expressionSeq);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3609);
			expression();
			setState(3614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3610);
				match(COMMA);
				setState(3611);
				expression();
				}
				}
				setState(3616);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanExpressionContext extends ParserRuleContext {
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanExpression; }
	 
		public BooleanExpressionContext() { }
		public void copyFrom(BooleanExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LogicalNotContext extends BooleanExpressionContext {
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode BANG() { return getToken(SqlBaseParser.BANG, 0); }
		public LogicalNotContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLogicalNot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLogicalNot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLogicalNot(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicatedContext extends BooleanExpressionContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicatedContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPredicated(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPredicated(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPredicated(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsContext extends BooleanExpressionContext {
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public ExistsContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExists(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalBinaryContext extends BooleanExpressionContext {
		public BooleanExpressionContext left;
		public Token operator;
		public BooleanExpressionContext right;
		public List<BooleanExpressionContext> booleanExpression() {
			return getRuleContexts(BooleanExpressionContext.class);
		}
		public BooleanExpressionContext booleanExpression(int i) {
			return getRuleContext(BooleanExpressionContext.class,i);
		}
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public LogicalBinaryContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLogicalBinary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLogicalBinary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLogicalBinary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanExpressionContext booleanExpression() throws RecognitionException {
		return booleanExpression(0);
	}

	private BooleanExpressionContext booleanExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, _parentState);
		BooleanExpressionContext _prevctx = _localctx;
		int _startState = 334;
		enterRecursionRule(_localctx, 334, RULE_booleanExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				_localctx = new LogicalNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3618);
				_la = _input.LA(1);
				if ( !(_la==BANG || _la==NOT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3619);
				booleanExpression(5);
				}
				break;
			case 2:
				{
				_localctx = new ExistsContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3620);
				match(EXISTS);
				setState(3621);
				match(LEFT_PAREN);
				setState(3622);
				query();
				setState(3623);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new PredicatedContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3625);
				valueExpression(0);
				setState(3627);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
				case 1:
					{
					setState(3626);
					predicate();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3639);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,453,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3637);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
					case 1:
						{
						_localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
						((LogicalBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						setState(3631);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3632);
						((LogicalBinaryContext)_localctx).operator = match(AND);
						setState(3633);
						((LogicalBinaryContext)_localctx).right = booleanExpression(3);
						}
						break;
					case 2:
						{
						_localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
						((LogicalBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						setState(3634);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3635);
						((LogicalBinaryContext)_localctx).operator = match(OR);
						setState(3636);
						((LogicalBinaryContext)_localctx).right = booleanExpression(2);
						}
						break;
					}
					} 
				}
				setState(3641);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,453,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public Token kind;
		public ValueExpressionContext lower;
		public ValueExpressionContext upper;
		public ValueExpressionContext pattern;
		public Token quantifier;
		public StringLitContext escapeChar;
		public ValueExpressionContext right;
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlBaseParser.BETWEEN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RLIKE() { return getToken(SqlBaseParser.RLIKE, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(SqlBaseParser.ILIKE, 0); }
		public TerminalNode ANY() { return getToken(SqlBaseParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(SqlBaseParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public TerminalNode ESCAPE() { return getToken(SqlBaseParser.ESCAPE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode IS() { return getToken(SqlBaseParser.IS, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(SqlBaseParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SqlBaseParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SqlBaseParser.UNKNOWN, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlBaseParser.DISTINCT, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_predicate);
		int _la;
		try {
			setState(3724);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3642);
					errorCapturingNot();
					}
				}

				setState(3645);
				((PredicateContext)_localctx).kind = match(BETWEEN);
				setState(3646);
				((PredicateContext)_localctx).lower = valueExpression(0);
				setState(3647);
				match(AND);
				setState(3648);
				((PredicateContext)_localctx).upper = valueExpression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3650);
					errorCapturingNot();
					}
				}

				setState(3653);
				((PredicateContext)_localctx).kind = match(IN);
				setState(3654);
				match(LEFT_PAREN);
				setState(3655);
				expression();
				setState(3660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3656);
					match(COMMA);
					setState(3657);
					expression();
					}
					}
					setState(3662);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3663);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3665);
					errorCapturingNot();
					}
				}

				setState(3668);
				((PredicateContext)_localctx).kind = match(IN);
				setState(3669);
				match(LEFT_PAREN);
				setState(3670);
				query();
				setState(3671);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3673);
					errorCapturingNot();
					}
				}

				setState(3676);
				((PredicateContext)_localctx).kind = match(RLIKE);
				setState(3677);
				((PredicateContext)_localctx).pattern = valueExpression(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3678);
					errorCapturingNot();
					}
				}

				setState(3681);
				((PredicateContext)_localctx).kind = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LIKE || _la==ILIKE) ) {
					((PredicateContext)_localctx).kind = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3682);
				((PredicateContext)_localctx).quantifier = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
					((PredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3696);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
				case 1:
					{
					setState(3683);
					match(LEFT_PAREN);
					setState(3684);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(3685);
					match(LEFT_PAREN);
					setState(3686);
					expression();
					setState(3691);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3687);
						match(COMMA);
						setState(3688);
						expression();
						}
						}
						setState(3693);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3694);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3698);
					errorCapturingNot();
					}
				}

				setState(3701);
				((PredicateContext)_localctx).kind = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LIKE || _la==ILIKE) ) {
					((PredicateContext)_localctx).kind = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3702);
				((PredicateContext)_localctx).pattern = valueExpression(0);
				setState(3705);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
				case 1:
					{
					setState(3703);
					match(ESCAPE);
					setState(3704);
					((PredicateContext)_localctx).escapeChar = stringLit();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3707);
				match(IS);
				setState(3709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3708);
					errorCapturingNot();
					}
				}

				setState(3711);
				((PredicateContext)_localctx).kind = match(NULL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3712);
				match(IS);
				setState(3714);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3713);
					errorCapturingNot();
					}
				}

				setState(3716);
				((PredicateContext)_localctx).kind = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((PredicateContext)_localctx).kind = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3717);
				match(IS);
				setState(3719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3718);
					errorCapturingNot();
					}
				}

				setState(3721);
				((PredicateContext)_localctx).kind = match(DISTINCT);
				setState(3722);
				match(FROM);
				setState(3723);
				((PredicateContext)_localctx).right = valueExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ErrorCapturingNotContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode BANG() { return getToken(SqlBaseParser.BANG, 0); }
		public ErrorCapturingNotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingNot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterErrorCapturingNot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitErrorCapturingNot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitErrorCapturingNot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ErrorCapturingNotContext errorCapturingNot() throws RecognitionException {
		ErrorCapturingNotContext _localctx = new ErrorCapturingNotContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_errorCapturingNot);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3726);
			_la = _input.LA(1);
			if ( !(_la==BANG || _la==NOT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueExpression; }
	 
		public ValueExpressionContext() { }
		public void copyFrom(ValueExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ValueExpressionDefaultContext extends ValueExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public ValueExpressionDefaultContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterValueExpressionDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitValueExpressionDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitValueExpressionDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ComparisonContext extends ValueExpressionContext {
		public ValueExpressionContext left;
		public ValueExpressionContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public ComparisonContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitComparison(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitComparison(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShiftExpressionContext extends ValueExpressionContext {
		public ValueExpressionContext left;
		public ValueExpressionContext right;
		public ShiftOperatorContext shiftOperator() {
			return getRuleContext(ShiftOperatorContext.class,0);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public ShiftExpressionContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShiftExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShiftExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShiftExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ArithmeticBinaryContext extends ValueExpressionContext {
		public ValueExpressionContext left;
		public Token operator;
		public ValueExpressionContext right;
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public TerminalNode SLASH() { return getToken(SqlBaseParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(SqlBaseParser.PERCENT, 0); }
		public TerminalNode DIV() { return getToken(SqlBaseParser.DIV, 0); }
		public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TerminalNode CONCAT_PIPE() { return getToken(SqlBaseParser.CONCAT_PIPE, 0); }
		public TerminalNode AMPERSAND() { return getToken(SqlBaseParser.AMPERSAND, 0); }
		public TerminalNode HAT() { return getToken(SqlBaseParser.HAT, 0); }
		public TerminalNode PIPE() { return getToken(SqlBaseParser.PIPE, 0); }
		public ArithmeticBinaryContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterArithmeticBinary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitArithmeticBinary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitArithmeticBinary(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ArithmeticUnaryContext extends ValueExpressionContext {
		public Token operator;
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }
		public TerminalNode TILDE() { return getToken(SqlBaseParser.TILDE, 0); }
		public ArithmeticUnaryContext(ValueExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterArithmeticUnary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitArithmeticUnary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitArithmeticUnary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueExpressionContext valueExpression() throws RecognitionException {
		return valueExpression(0);
	}

	private ValueExpressionContext valueExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValueExpressionContext _localctx = new ValueExpressionContext(_ctx, _parentState);
		ValueExpressionContext _prevctx = _localctx;
		int _startState = 340;
		enterRecursionRule(_localctx, 340, RULE_valueExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				_localctx = new ValueExpressionDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3729);
				primaryExpression(0);
				}
				break;
			case 2:
				{
				_localctx = new ArithmeticUnaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3730);
				((ArithmeticUnaryContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (PLUS - 413)) | (1L << (MINUS - 413)) | (1L << (TILDE - 413)))) != 0)) ) {
					((ArithmeticUnaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3731);
				valueExpression(8);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3759);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3757);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
					case 1:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3734);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(3735);
						((ArithmeticBinaryContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DIV || ((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & ((1L << (ASTERISK - 415)) | (1L << (SLASH - 415)) | (1L << (PERCENT - 415)))) != 0)) ) {
							((ArithmeticBinaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3736);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(8);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3737);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(3738);
						((ArithmeticBinaryContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (PLUS - 413)) | (1L << (MINUS - 413)) | (1L << (CONCAT_PIPE - 413)))) != 0)) ) {
							((ArithmeticBinaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3739);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(7);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(new ValueExpressionContext(_parentctx, _parentState));
						((ShiftExpressionContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3740);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3741);
						shiftOperator();
						setState(3742);
						((ShiftExpressionContext)_localctx).right = valueExpression(6);
						}
						break;
					case 4:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3744);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3745);
						((ArithmeticBinaryContext)_localctx).operator = match(AMPERSAND);
						setState(3746);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(5);
						}
						break;
					case 5:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3747);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3748);
						((ArithmeticBinaryContext)_localctx).operator = match(HAT);
						setState(3749);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(4);
						}
						break;
					case 6:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3750);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3751);
						((ArithmeticBinaryContext)_localctx).operator = match(PIPE);
						setState(3752);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(3);
						}
						break;
					case 7:
						{
						_localctx = new ComparisonContext(new ValueExpressionContext(_parentctx, _parentState));
						((ComparisonContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3753);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3754);
						comparisonOperator();
						setState(3755);
						((ComparisonContext)_localctx).right = valueExpression(2);
						}
						break;
					}
					} 
				}
				setState(3761);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ShiftOperatorContext extends ParserRuleContext {
		public TerminalNode SHIFT_LEFT() { return getToken(SqlBaseParser.SHIFT_LEFT, 0); }
		public TerminalNode SHIFT_RIGHT() { return getToken(SqlBaseParser.SHIFT_RIGHT, 0); }
		public TerminalNode SHIFT_RIGHT_UNSIGNED() { return getToken(SqlBaseParser.SHIFT_RIGHT_UNSIGNED, 0); }
		public ShiftOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shiftOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterShiftOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitShiftOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitShiftOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShiftOperatorContext shiftOperator() throws RecognitionException {
		ShiftOperatorContext _localctx = new ShiftOperatorContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_shiftOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3762);
			_la = _input.LA(1);
			if ( !(((((_la - 410)) & ~0x3f) == 0 && ((1L << (_la - 410)) & ((1L << (SHIFT_LEFT - 410)) | (1L << (SHIFT_RIGHT - 410)) | (1L << (SHIFT_RIGHT_UNSIGNED - 410)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatetimeUnitContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public TerminalNode QUARTER() { return getToken(SqlBaseParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode WEEK() { return getToken(SqlBaseParser.WEEK, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(SqlBaseParser.DAYOFYEAR, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode MILLISECOND() { return getToken(SqlBaseParser.MILLISECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(SqlBaseParser.MICROSECOND, 0); }
		public DatetimeUnitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeUnit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDatetimeUnit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDatetimeUnit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDatetimeUnit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatetimeUnitContext datetimeUnit() throws RecognitionException {
		DatetimeUnitContext _localctx = new DatetimeUnitContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_datetimeUnit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3764);
			_la = _input.LA(1);
			if ( !(_la==DAY || _la==DAYOFYEAR || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (HOUR - 155)) | (1L << (MICROSECOND - 155)) | (1L << (MILLISECOND - 155)) | (1L << (MINUTE - 155)))) != 0) || _la==MONTH || _la==QUARTER || _la==SECOND || _la==WEEK || _la==YEAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimaryExpressionContext extends ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryExpression; }
	 
		public PrimaryExpressionContext() { }
		public void copyFrom(PrimaryExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StructContext extends PrimaryExpressionContext {
		public NamedExpressionContext namedExpression;
		public List<NamedExpressionContext> argument = new ArrayList<NamedExpressionContext>();
		public TerminalNode STRUCT() { return getToken(SqlBaseParser.STRUCT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<NamedExpressionContext> namedExpression() {
			return getRuleContexts(NamedExpressionContext.class);
		}
		public NamedExpressionContext namedExpression(int i) {
			return getRuleContext(NamedExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public StructContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStruct(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DereferenceContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext base;
		public IdentifierContext fieldName;
		public TerminalNode DOT() { return getToken(SqlBaseParser.DOT, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DereferenceContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDereference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDereference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDereference(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CastByColonContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public TerminalNode DOUBLE_COLON() { return getToken(SqlBaseParser.DOUBLE_COLON, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CastByColonContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCastByColon(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCastByColon(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCastByColon(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TimestampaddContext extends PrimaryExpressionContext {
		public Token name;
		public DatetimeUnitContext unit;
		public StringLitContext invalidUnit;
		public ValueExpressionContext unitsAmount;
		public ValueExpressionContext timestamp;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode TIMESTAMPADD() { return getToken(SqlBaseParser.TIMESTAMPADD, 0); }
		public TerminalNode DATEADD() { return getToken(SqlBaseParser.DATEADD, 0); }
		public TerminalNode DATE_ADD() { return getToken(SqlBaseParser.DATE_ADD, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TimestampaddContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTimestampadd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTimestampadd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTimestampadd(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstringContext extends PrimaryExpressionContext {
		public ValueExpressionContext str;
		public ValueExpressionContext pos;
		public ValueExpressionContext len;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode SUBSTR() { return getToken(SqlBaseParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SqlBaseParser.SUBSTRING, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public SubstringContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSubstring(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSubstring(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSubstring(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CastContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode CAST() { return getToken(SqlBaseParser.CAST, 0); }
		public TerminalNode TRY_CAST() { return getToken(SqlBaseParser.TRY_CAST, 0); }
		public CastContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCast(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LambdaContext extends PrimaryExpressionContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ARROW() { return getToken(SqlBaseParser.ARROW, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public LambdaContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLambda(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLambda(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLambda(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesizedExpressionContext extends PrimaryExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public ParenthesizedExpressionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterParenthesizedExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitParenthesizedExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitParenthesizedExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Any_valueContext extends PrimaryExpressionContext {
		public TerminalNode ANY_VALUE() { return getToken(SqlBaseParser.ANY_VALUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public Any_valueContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAny_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAny_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAny_value(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimContext extends PrimaryExpressionContext {
		public Token trimOption;
		public ValueExpressionContext trimStr;
		public ValueExpressionContext srcStr;
		public TerminalNode TRIM() { return getToken(SqlBaseParser.TRIM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode BOTH() { return getToken(SqlBaseParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(SqlBaseParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(SqlBaseParser.TRAILING, 0); }
		public TrimContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTrim(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTrim(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTrim(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SemiStructuredExtractContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext col;
		public SemiStructuredExtractionPathContext path;
		public TerminalNode COLON() { return getToken(SqlBaseParser.COLON, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public SemiStructuredExtractionPathContext semiStructuredExtractionPath() {
			return getRuleContext(SemiStructuredExtractionPathContext.class,0);
		}
		public SemiStructuredExtractContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSemiStructuredExtract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSemiStructuredExtract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSemiStructuredExtract(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleCaseContext extends PrimaryExpressionContext {
		public ExpressionContext value;
		public ExpressionContext elseExpression;
		public TerminalNode CASE() { return getToken(SqlBaseParser.CASE, 0); }
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public SimpleCaseContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSimpleCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSimpleCase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSimpleCase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentLikeContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode CURRENT_DATE() { return getToken(SqlBaseParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SqlBaseParser.CURRENT_USER, 0); }
		public TerminalNode USER() { return getToken(SqlBaseParser.USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(SqlBaseParser.SESSION_USER, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SqlBaseParser.CURRENT_TIME, 0); }
		public CurrentLikeContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCurrentLike(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCurrentLike(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCurrentLike(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColumnReferenceContext extends PrimaryExpressionContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnReferenceContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColumnReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColumnReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColumnReference(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RowConstructorContext extends PrimaryExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<NamedExpressionContext> namedExpression() {
			return getRuleContexts(NamedExpressionContext.class);
		}
		public NamedExpressionContext namedExpression(int i) {
			return getRuleContext(NamedExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public RowConstructorContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRowConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRowConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRowConstructor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LastContext extends PrimaryExpressionContext {
		public TerminalNode LAST() { return getToken(SqlBaseParser.LAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public LastContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLast(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StarContext extends PrimaryExpressionContext {
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public ExceptClauseContext exceptClause() {
			return getRuleContext(ExceptClauseContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SqlBaseParser.DOT, 0); }
		public StarContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStar(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OverlayContext extends PrimaryExpressionContext {
		public ValueExpressionContext input;
		public ValueExpressionContext replace;
		public ValueExpressionContext position;
		public ValueExpressionContext length;
		public TerminalNode OVERLAY() { return getToken(SqlBaseParser.OVERLAY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode PLACING() { return getToken(SqlBaseParser.PLACING, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public OverlayContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterOverlay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitOverlay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitOverlay(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubscriptContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext value;
		public ValueExpressionContext index;
		public TerminalNode LEFT_BRACKET() { return getToken(SqlBaseParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(SqlBaseParser.RIGHT_BRACKET, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public SubscriptContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSubscript(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSubscript(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSubscript(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TimestampdiffContext extends PrimaryExpressionContext {
		public Token name;
		public DatetimeUnitContext unit;
		public StringLitContext invalidUnit;
		public ValueExpressionContext startTimestamp;
		public ValueExpressionContext endTimestamp;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode TIMESTAMPDIFF() { return getToken(SqlBaseParser.TIMESTAMPDIFF, 0); }
		public TerminalNode DATEDIFF() { return getToken(SqlBaseParser.DATEDIFF, 0); }
		public TerminalNode DATE_DIFF() { return getToken(SqlBaseParser.DATE_DIFF, 0); }
		public TerminalNode TIMEDIFF() { return getToken(SqlBaseParser.TIMEDIFF, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TimestampdiffContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTimestampdiff(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTimestampdiff(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTimestampdiff(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpressionContext extends PrimaryExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public SubqueryExpressionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSubqueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSubqueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSubqueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public CollateContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstantDefaultContext extends PrimaryExpressionContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantDefaultContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterConstantDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitConstantDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitConstantDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractContext extends PrimaryExpressionContext {
		public IdentifierContext field;
		public ValueExpressionContext source;
		public TerminalNode EXTRACT() { return getToken(SqlBaseParser.EXTRACT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ExtractContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExtract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExtract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExtract(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallContext extends PrimaryExpressionContext {
		public FunctionArgumentContext functionArgument;
		public List<FunctionArgumentContext> argument = new ArrayList<FunctionArgumentContext>();
		public BooleanExpressionContext where;
		public Token nullsOption;
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode WITHIN() { return getToken(SqlBaseParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(SqlBaseParser.GROUP, 0); }
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public TerminalNode FILTER() { return getToken(SqlBaseParser.FILTER, 0); }
		public TerminalNode WHERE() { return getToken(SqlBaseParser.WHERE, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode OVER() { return getToken(SqlBaseParser.OVER, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public List<FunctionArgumentContext> functionArgument() {
			return getRuleContexts(FunctionArgumentContext.class);
		}
		public FunctionArgumentContext functionArgument(int i) {
			return getRuleContext(FunctionArgumentContext.class,i);
		}
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode RESPECT() { return getToken(SqlBaseParser.RESPECT, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public FunctionCallContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SearchedCaseContext extends PrimaryExpressionContext {
		public ExpressionContext elseExpression;
		public TerminalNode CASE() { return getToken(SqlBaseParser.CASE, 0); }
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SearchedCaseContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSearchedCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSearchedCase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSearchedCase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PositionContext extends PrimaryExpressionContext {
		public ValueExpressionContext substr;
		public ValueExpressionContext str;
		public TerminalNode POSITION() { return getToken(SqlBaseParser.POSITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public PositionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPosition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPosition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPosition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FirstContext extends PrimaryExpressionContext {
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public FirstContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFirst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFirst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFirst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryExpressionContext primaryExpression() throws RecognitionException {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 346;
		enterRecursionRule(_localctx, 346, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				_localctx = new CurrentLikeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3767);
				((CurrentLikeContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (CURRENT_DATE - 75)) | (1L << (CURRENT_TIME - 75)) | (1L << (CURRENT_TIMESTAMP - 75)) | (1L << (CURRENT_USER - 75)))) != 0) || _la==SESSION_USER || _la==USER) ) {
					((CurrentLikeContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				{
				_localctx = new TimestampaddContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3768);
				((TimestampaddContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATEADD || _la==DATE_ADD || _la==TIMESTAMPADD) ) {
					((TimestampaddContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3769);
				match(LEFT_PAREN);
				setState(3772);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
				case 1:
					{
					setState(3770);
					((TimestampaddContext)_localctx).unit = datetimeUnit();
					}
					break;
				case 2:
					{
					setState(3771);
					((TimestampaddContext)_localctx).invalidUnit = stringLit();
					}
					break;
				}
				setState(3774);
				match(COMMA);
				setState(3775);
				((TimestampaddContext)_localctx).unitsAmount = valueExpression(0);
				setState(3776);
				match(COMMA);
				setState(3777);
				((TimestampaddContext)_localctx).timestamp = valueExpression(0);
				setState(3778);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new TimestampdiffContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3780);
				((TimestampdiffContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATEDIFF || _la==DATE_DIFF || _la==TIMEDIFF || _la==TIMESTAMPDIFF) ) {
					((TimestampdiffContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3781);
				match(LEFT_PAREN);
				setState(3784);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
				case 1:
					{
					setState(3782);
					((TimestampdiffContext)_localctx).unit = datetimeUnit();
					}
					break;
				case 2:
					{
					setState(3783);
					((TimestampdiffContext)_localctx).invalidUnit = stringLit();
					}
					break;
				}
				setState(3786);
				match(COMMA);
				setState(3787);
				((TimestampdiffContext)_localctx).startTimestamp = valueExpression(0);
				setState(3788);
				match(COMMA);
				setState(3789);
				((TimestampdiffContext)_localctx).endTimestamp = valueExpression(0);
				setState(3790);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new SearchedCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3792);
				match(CASE);
				setState(3794); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3793);
					whenClause();
					}
					}
					setState(3796); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(3800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(3798);
					match(ELSE);
					setState(3799);
					((SearchedCaseContext)_localctx).elseExpression = expression();
					}
				}

				setState(3802);
				match(END);
				}
				break;
			case 5:
				{
				_localctx = new SimpleCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3804);
				match(CASE);
				setState(3805);
				((SimpleCaseContext)_localctx).value = expression();
				setState(3807); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3806);
					whenClause();
					}
					}
					setState(3809); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(3813);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(3811);
					match(ELSE);
					setState(3812);
					((SimpleCaseContext)_localctx).elseExpression = expression();
					}
				}

				setState(3815);
				match(END);
				}
				break;
			case 6:
				{
				_localctx = new CastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3817);
				((CastContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==TRY_CAST) ) {
					((CastContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3818);
				match(LEFT_PAREN);
				setState(3819);
				expression();
				setState(3820);
				match(AS);
				setState(3821);
				dataType();
				setState(3822);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new StructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3824);
				match(STRUCT);
				setState(3825);
				match(LEFT_PAREN);
				setState(3834);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
				case 1:
					{
					setState(3826);
					((StructContext)_localctx).namedExpression = namedExpression();
					((StructContext)_localctx).argument.add(((StructContext)_localctx).namedExpression);
					setState(3831);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3827);
						match(COMMA);
						setState(3828);
						((StructContext)_localctx).namedExpression = namedExpression();
						((StructContext)_localctx).argument.add(((StructContext)_localctx).namedExpression);
						}
						}
						setState(3833);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(3836);
				match(RIGHT_PAREN);
				}
				break;
			case 8:
				{
				_localctx = new FirstContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3837);
				match(FIRST);
				setState(3838);
				match(LEFT_PAREN);
				setState(3839);
				expression();
				setState(3842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(3840);
					match(IGNORE);
					setState(3841);
					match(NULLS);
					}
				}

				setState(3844);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new Any_valueContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3846);
				match(ANY_VALUE);
				setState(3847);
				match(LEFT_PAREN);
				setState(3848);
				expression();
				setState(3851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(3849);
					match(IGNORE);
					setState(3850);
					match(NULLS);
					}
				}

				setState(3853);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new LastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3855);
				match(LAST);
				setState(3856);
				match(LEFT_PAREN);
				setState(3857);
				expression();
				setState(3860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(3858);
					match(IGNORE);
					setState(3859);
					match(NULLS);
					}
				}

				setState(3862);
				match(RIGHT_PAREN);
				}
				break;
			case 11:
				{
				_localctx = new PositionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3864);
				match(POSITION);
				setState(3865);
				match(LEFT_PAREN);
				setState(3866);
				((PositionContext)_localctx).substr = valueExpression(0);
				setState(3867);
				match(IN);
				setState(3868);
				((PositionContext)_localctx).str = valueExpression(0);
				setState(3869);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				{
				_localctx = new ConstantDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3871);
				constant();
				}
				break;
			case 13:
				{
				_localctx = new StarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3872);
				match(ASTERISK);
				setState(3874);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
				case 1:
					{
					setState(3873);
					exceptClause();
					}
					break;
				}
				}
				break;
			case 14:
				{
				_localctx = new StarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3876);
				qualifiedName();
				setState(3877);
				match(DOT);
				setState(3878);
				match(ASTERISK);
				setState(3880);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
				case 1:
					{
					setState(3879);
					exceptClause();
					}
					break;
				}
				}
				break;
			case 15:
				{
				_localctx = new RowConstructorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3882);
				match(LEFT_PAREN);
				setState(3883);
				namedExpression();
				setState(3886); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3884);
					match(COMMA);
					setState(3885);
					namedExpression();
					}
					}
					setState(3888); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3890);
				match(RIGHT_PAREN);
				}
				break;
			case 16:
				{
				_localctx = new SubqueryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3892);
				match(LEFT_PAREN);
				setState(3893);
				query();
				setState(3894);
				match(RIGHT_PAREN);
				}
				break;
			case 17:
				{
				_localctx = new FunctionCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3896);
				functionName();
				setState(3897);
				match(LEFT_PAREN);
				setState(3909);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
				case 1:
					{
					setState(3899);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
					case 1:
						{
						setState(3898);
						setQuantifier();
						}
						break;
					}
					setState(3901);
					((FunctionCallContext)_localctx).functionArgument = functionArgument();
					((FunctionCallContext)_localctx).argument.add(((FunctionCallContext)_localctx).functionArgument);
					setState(3906);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3902);
						match(COMMA);
						setState(3903);
						((FunctionCallContext)_localctx).functionArgument = functionArgument();
						((FunctionCallContext)_localctx).argument.add(((FunctionCallContext)_localctx).functionArgument);
						}
						}
						setState(3908);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(3911);
				match(RIGHT_PAREN);
				setState(3927);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
				case 1:
					{
					setState(3912);
					match(WITHIN);
					setState(3913);
					match(GROUP);
					setState(3914);
					match(LEFT_PAREN);
					setState(3915);
					match(ORDER);
					setState(3916);
					match(BY);
					setState(3917);
					sortItem();
					setState(3922);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3918);
						match(COMMA);
						setState(3919);
						sortItem();
						}
						}
						setState(3924);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3925);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3935);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
				case 1:
					{
					setState(3929);
					match(FILTER);
					setState(3930);
					match(LEFT_PAREN);
					setState(3931);
					match(WHERE);
					setState(3932);
					((FunctionCallContext)_localctx).where = booleanExpression(0);
					setState(3933);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3939);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
				case 1:
					{
					setState(3937);
					((FunctionCallContext)_localctx).nullsOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==RESPECT) ) {
						((FunctionCallContext)_localctx).nullsOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3938);
					match(NULLS);
					}
					break;
				}
				setState(3943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
				case 1:
					{
					setState(3941);
					match(OVER);
					setState(3942);
					windowSpec();
					}
					break;
				}
				}
				break;
			case 18:
				{
				_localctx = new LambdaContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3945);
				identifier();
				setState(3946);
				match(ARROW);
				setState(3947);
				expression();
				}
				break;
			case 19:
				{
				_localctx = new LambdaContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3949);
				match(LEFT_PAREN);
				setState(3950);
				identifier();
				setState(3953); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3951);
					match(COMMA);
					setState(3952);
					identifier();
					}
					}
					setState(3955); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3957);
				match(RIGHT_PAREN);
				setState(3958);
				match(ARROW);
				setState(3959);
				expression();
				}
				break;
			case 20:
				{
				_localctx = new ColumnReferenceContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3961);
				identifier();
				}
				break;
			case 21:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3962);
				match(LEFT_PAREN);
				setState(3963);
				expression();
				setState(3964);
				match(RIGHT_PAREN);
				}
				break;
			case 22:
				{
				_localctx = new ExtractContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3966);
				match(EXTRACT);
				setState(3967);
				match(LEFT_PAREN);
				setState(3968);
				((ExtractContext)_localctx).field = identifier();
				setState(3969);
				match(FROM);
				setState(3970);
				((ExtractContext)_localctx).source = valueExpression(0);
				setState(3971);
				match(RIGHT_PAREN);
				}
				break;
			case 23:
				{
				_localctx = new SubstringContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3973);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3974);
				match(LEFT_PAREN);
				setState(3975);
				((SubstringContext)_localctx).str = valueExpression(0);
				setState(3976);
				_la = _input.LA(1);
				if ( !(_la==COMMA || _la==FROM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3977);
				((SubstringContext)_localctx).pos = valueExpression(0);
				setState(3980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA || _la==FOR) {
					{
					setState(3978);
					_la = _input.LA(1);
					if ( !(_la==COMMA || _la==FOR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3979);
					((SubstringContext)_localctx).len = valueExpression(0);
					}
				}

				setState(3982);
				match(RIGHT_PAREN);
				}
				break;
			case 24:
				{
				_localctx = new TrimContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3984);
				match(TRIM);
				setState(3985);
				match(LEFT_PAREN);
				setState(3987);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
				case 1:
					{
					setState(3986);
					((TrimContext)_localctx).trimOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						((TrimContext)_localctx).trimOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3990);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
				case 1:
					{
					setState(3989);
					((TrimContext)_localctx).trimStr = valueExpression(0);
					}
					break;
				}
				setState(3992);
				match(FROM);
				setState(3993);
				((TrimContext)_localctx).srcStr = valueExpression(0);
				setState(3994);
				match(RIGHT_PAREN);
				}
				break;
			case 25:
				{
				_localctx = new OverlayContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3996);
				match(OVERLAY);
				setState(3997);
				match(LEFT_PAREN);
				setState(3998);
				((OverlayContext)_localctx).input = valueExpression(0);
				setState(3999);
				match(PLACING);
				setState(4000);
				((OverlayContext)_localctx).replace = valueExpression(0);
				setState(4001);
				match(FROM);
				setState(4002);
				((OverlayContext)_localctx).position = valueExpression(0);
				setState(4005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4003);
					match(FOR);
					setState(4004);
					((OverlayContext)_localctx).length = valueExpression(0);
					}
				}

				setState(4007);
				match(RIGHT_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4029);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,500,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4027);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
					case 1:
						{
						_localctx = new CollateContext(new PrimaryExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(4011);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(4012);
						collateClause();
						}
						break;
					case 2:
						{
						_localctx = new CastByColonContext(new PrimaryExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(4013);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(4014);
						match(DOUBLE_COLON);
						setState(4015);
						dataType();
						}
						break;
					case 3:
						{
						_localctx = new SemiStructuredExtractContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((SemiStructuredExtractContext)_localctx).col = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(4016);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(4017);
						match(COLON);
						setState(4018);
						((SemiStructuredExtractContext)_localctx).path = semiStructuredExtractionPath();
						}
						break;
					case 4:
						{
						_localctx = new SubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((SubscriptContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(4019);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(4020);
						match(LEFT_BRACKET);
						setState(4021);
						((SubscriptContext)_localctx).index = valueExpression(0);
						setState(4022);
						match(RIGHT_BRACKET);
						}
						break;
					case 5:
						{
						_localctx = new DereferenceContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((DereferenceContext)_localctx).base = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(4024);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(4025);
						match(DOT);
						setState(4026);
						((DereferenceContext)_localctx).fieldName = identifier();
						}
						break;
					}
					} 
				}
				setState(4031);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,500,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SemiStructuredExtractionPathContext extends ParserRuleContext {
		public JsonPathFirstPartContext jsonPathFirstPart() {
			return getRuleContext(JsonPathFirstPartContext.class,0);
		}
		public List<JsonPathPartsContext> jsonPathParts() {
			return getRuleContexts(JsonPathPartsContext.class);
		}
		public JsonPathPartsContext jsonPathParts(int i) {
			return getRuleContext(JsonPathPartsContext.class,i);
		}
		public SemiStructuredExtractionPathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_semiStructuredExtractionPath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSemiStructuredExtractionPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSemiStructuredExtractionPath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSemiStructuredExtractionPath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SemiStructuredExtractionPathContext semiStructuredExtractionPath() throws RecognitionException {
		SemiStructuredExtractionPathContext _localctx = new SemiStructuredExtractionPathContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_semiStructuredExtractionPath);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4032);
			jsonPathFirstPart();
			setState(4036);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4033);
					jsonPathParts();
					}
					} 
				}
				setState(4038);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonPathIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode BACKQUOTED_IDENTIFIER() { return getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0); }
		public JsonPathIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonPathIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterJsonPathIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitJsonPathIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitJsonPathIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonPathIdentifierContext jsonPathIdentifier() throws RecognitionException {
		JsonPathIdentifierContext _localctx = new JsonPathIdentifierContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_jsonPathIdentifier);
		try {
			setState(4041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4039);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4040);
				match(BACKQUOTED_IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonPathBracketedIdentifierContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACKET() { return getToken(SqlBaseParser.LEFT_BRACKET, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(SqlBaseParser.RIGHT_BRACKET, 0); }
		public JsonPathBracketedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonPathBracketedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterJsonPathBracketedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitJsonPathBracketedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitJsonPathBracketedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonPathBracketedIdentifierContext jsonPathBracketedIdentifier() throws RecognitionException {
		JsonPathBracketedIdentifierContext _localctx = new JsonPathBracketedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_jsonPathBracketedIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4043);
			match(LEFT_BRACKET);
			setState(4044);
			stringLit();
			setState(4045);
			match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonPathFirstPartContext extends ParserRuleContext {
		public JsonPathIdentifierContext jsonPathIdentifier() {
			return getRuleContext(JsonPathIdentifierContext.class,0);
		}
		public JsonPathBracketedIdentifierContext jsonPathBracketedIdentifier() {
			return getRuleContext(JsonPathBracketedIdentifierContext.class,0);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(SqlBaseParser.LEFT_BRACKET, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(SqlBaseParser.RIGHT_BRACKET, 0); }
		public JsonPathFirstPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonPathFirstPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterJsonPathFirstPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitJsonPathFirstPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitJsonPathFirstPart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonPathFirstPartContext jsonPathFirstPart() throws RecognitionException {
		JsonPathFirstPartContext _localctx = new JsonPathFirstPartContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_jsonPathFirstPart);
		try {
			setState(4052);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4047);
				jsonPathIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4048);
				jsonPathBracketedIdentifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4049);
				match(LEFT_BRACKET);
				setState(4050);
				match(INTEGER_VALUE);
				setState(4051);
				match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonPathPartsContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(SqlBaseParser.DOT, 0); }
		public JsonPathIdentifierContext jsonPathIdentifier() {
			return getRuleContext(JsonPathIdentifierContext.class,0);
		}
		public JsonPathBracketedIdentifierContext jsonPathBracketedIdentifier() {
			return getRuleContext(JsonPathBracketedIdentifierContext.class,0);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(SqlBaseParser.LEFT_BRACKET, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(SqlBaseParser.RIGHT_BRACKET, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public JsonPathPartsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonPathParts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterJsonPathParts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitJsonPathParts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitJsonPathParts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonPathPartsContext jsonPathParts() throws RecognitionException {
		JsonPathPartsContext _localctx = new JsonPathPartsContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_jsonPathParts);
		try {
			setState(4064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4054);
				match(DOT);
				setState(4055);
				jsonPathIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4056);
				jsonPathBracketedIdentifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4057);
				match(LEFT_BRACKET);
				setState(4058);
				match(INTEGER_VALUE);
				setState(4059);
				match(RIGHT_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4060);
				match(LEFT_BRACKET);
				setState(4061);
				identifier();
				setState(4062);
				match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralTypeContext extends ParserRuleContext {
		public IdentifierContext unsupportedType;
		public TerminalNode DATE() { return getToken(SqlBaseParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(SqlBaseParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlBaseParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ() { return getToken(SqlBaseParser.TIMESTAMP_LTZ, 0); }
		public TerminalNode TIMESTAMP_NTZ() { return getToken(SqlBaseParser.TIMESTAMP_NTZ, 0); }
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode BINARY_HEX() { return getToken(SqlBaseParser.BINARY_HEX, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LiteralTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLiteralType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLiteralType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLiteralType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralTypeContext literalType() throws RecognitionException {
		LiteralTypeContext _localctx = new LiteralTypeContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_literalType);
		try {
			setState(4074);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4066);
				match(DATE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4067);
				match(TIME);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4068);
				match(TIMESTAMP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4069);
				match(TIMESTAMP_LTZ);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4070);
				match(TIMESTAMP_NTZ);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4071);
				match(INTERVAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4072);
				match(BINARY_HEX);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4073);
				((LiteralTypeContext)_localctx).unsupportedType = identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
	 
		public ConstantContext() { }
		public void copyFrom(ConstantContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class NullLiteralContext extends ConstantContext {
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public NullLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNullLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNullLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNullLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringLiteralContext extends ConstantContext {
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public StringLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TypeConstructorContext extends ConstantContext {
		public LiteralTypeContext literalType() {
			return getRuleContext(LiteralTypeContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TypeConstructorContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTypeConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTypeConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTypeConstructor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PosParameterLiteralContext extends ConstantContext {
		public TerminalNode QUESTION() { return getToken(SqlBaseParser.QUESTION, 0); }
		public PosParameterLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPosParameterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPosParameterLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPosParameterLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NamedParameterLiteralContext extends ConstantContext {
		public TerminalNode COLON() { return getToken(SqlBaseParser.COLON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NamedParameterLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNamedParameterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNamedParameterLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNamedParameterLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalLiteralContext extends ConstantContext {
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public IntervalLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIntervalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIntervalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIntervalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumericLiteralContext extends ConstantContext {
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public NumericLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNumericLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNumericLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNumericLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BooleanLiteralContext extends ConstantContext {
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public BooleanLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_constant);
		try {
			int _alt;
			setState(4091);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				_localctx = new NullLiteralContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4076);
				match(NULL);
				}
				break;
			case 2:
				_localctx = new PosParameterLiteralContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4077);
				match(QUESTION);
				}
				break;
			case 3:
				_localctx = new NamedParameterLiteralContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4078);
				match(COLON);
				setState(4079);
				identifier();
				}
				break;
			case 4:
				_localctx = new IntervalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4080);
				interval();
				}
				break;
			case 5:
				_localctx = new TypeConstructorContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4081);
				literalType();
				setState(4082);
				stringLit();
				}
				break;
			case 6:
				_localctx = new NumericLiteralContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4084);
				number();
				}
				break;
			case 7:
				_localctx = new BooleanLiteralContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4085);
				booleanValue();
				}
				break;
			case 8:
				_localctx = new StringLiteralContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4087); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4086);
						stringLit();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4089); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,506,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public TerminalNode NEQ() { return getToken(SqlBaseParser.NEQ, 0); }
		public TerminalNode NEQJ() { return getToken(SqlBaseParser.NEQJ, 0); }
		public TerminalNode LT() { return getToken(SqlBaseParser.LT, 0); }
		public TerminalNode LTE() { return getToken(SqlBaseParser.LTE, 0); }
		public TerminalNode GT() { return getToken(SqlBaseParser.GT, 0); }
		public TerminalNode GTE() { return getToken(SqlBaseParser.GTE, 0); }
		public TerminalNode NSEQ() { return getToken(SqlBaseParser.NSEQ, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4093);
			_la = _input.LA(1);
			if ( !(((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & ((1L << (EQ - 402)) | (1L << (NSEQ - 402)) | (1L << (NEQ - 402)) | (1L << (NEQJ - 402)) | (1L << (LT - 402)) | (1L << (LTE - 402)) | (1L << (GT - 402)) | (1L << (GTE - 402)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArithmeticOperatorContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public TerminalNode SLASH() { return getToken(SqlBaseParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(SqlBaseParser.PERCENT, 0); }
		public TerminalNode DIV() { return getToken(SqlBaseParser.DIV, 0); }
		public TerminalNode TILDE() { return getToken(SqlBaseParser.TILDE, 0); }
		public TerminalNode AMPERSAND() { return getToken(SqlBaseParser.AMPERSAND, 0); }
		public TerminalNode PIPE() { return getToken(SqlBaseParser.PIPE, 0); }
		public TerminalNode CONCAT_PIPE() { return getToken(SqlBaseParser.CONCAT_PIPE, 0); }
		public TerminalNode HAT() { return getToken(SqlBaseParser.HAT, 0); }
		public ArithmeticOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arithmeticOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterArithmeticOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitArithmeticOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitArithmeticOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArithmeticOperatorContext arithmeticOperator() throws RecognitionException {
		ArithmeticOperatorContext _localctx = new ArithmeticOperatorContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_arithmeticOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4095);
			_la = _input.LA(1);
			if ( !(_la==DIV || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & ((1L << (PLUS - 413)) | (1L << (MINUS - 413)) | (1L << (ASTERISK - 413)) | (1L << (SLASH - 413)) | (1L << (PERCENT - 413)) | (1L << (TILDE - 413)) | (1L << (AMPERSAND - 413)) | (1L << (PIPE - 413)) | (1L << (CONCAT_PIPE - 413)) | (1L << (HAT - 413)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateOperatorContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public PredicateOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicateOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPredicateOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPredicateOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPredicateOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateOperatorContext predicateOperator() throws RecognitionException {
		PredicateOperatorContext _localctx = new PredicateOperatorContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_predicateOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4097);
			_la = _input.LA(1);
			if ( !(_la==AND || _la==IN || _la==NOT || _la==OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanValueContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(SqlBaseParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SqlBaseParser.FALSE, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBooleanValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBooleanValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBooleanValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanValueContext booleanValue() throws RecognitionException {
		BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_booleanValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4099);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public ErrorCapturingMultiUnitsIntervalContext errorCapturingMultiUnitsInterval() {
			return getRuleContext(ErrorCapturingMultiUnitsIntervalContext.class,0);
		}
		public ErrorCapturingUnitToUnitIntervalContext errorCapturingUnitToUnitInterval() {
			return getRuleContext(ErrorCapturingUnitToUnitIntervalContext.class,0);
		}
		public IntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalContext interval() throws RecognitionException {
		IntervalContext _localctx = new IntervalContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_interval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4101);
			match(INTERVAL);
			setState(4104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				{
				setState(4102);
				errorCapturingMultiUnitsInterval();
				}
				break;
			case 2:
				{
				setState(4103);
				errorCapturingUnitToUnitInterval();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ErrorCapturingMultiUnitsIntervalContext extends ParserRuleContext {
		public MultiUnitsIntervalContext body;
		public MultiUnitsIntervalContext multiUnitsInterval() {
			return getRuleContext(MultiUnitsIntervalContext.class,0);
		}
		public UnitToUnitIntervalContext unitToUnitInterval() {
			return getRuleContext(UnitToUnitIntervalContext.class,0);
		}
		public ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingMultiUnitsInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterErrorCapturingMultiUnitsInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitErrorCapturingMultiUnitsInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitErrorCapturingMultiUnitsInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ErrorCapturingMultiUnitsIntervalContext errorCapturingMultiUnitsInterval() throws RecognitionException {
		ErrorCapturingMultiUnitsIntervalContext _localctx = new ErrorCapturingMultiUnitsIntervalContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_errorCapturingMultiUnitsInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4106);
			((ErrorCapturingMultiUnitsIntervalContext)_localctx).body = multiUnitsInterval();
			setState(4108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
			case 1:
				{
				setState(4107);
				unitToUnitInterval();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultiUnitsIntervalContext extends ParserRuleContext {
		public UnitInMultiUnitsContext unitInMultiUnits;
		public List<UnitInMultiUnitsContext> unit = new ArrayList<UnitInMultiUnitsContext>();
		public List<IntervalValueContext> intervalValue() {
			return getRuleContexts(IntervalValueContext.class);
		}
		public IntervalValueContext intervalValue(int i) {
			return getRuleContext(IntervalValueContext.class,i);
		}
		public List<UnitInMultiUnitsContext> unitInMultiUnits() {
			return getRuleContexts(UnitInMultiUnitsContext.class);
		}
		public UnitInMultiUnitsContext unitInMultiUnits(int i) {
			return getRuleContext(UnitInMultiUnitsContext.class,i);
		}
		public MultiUnitsIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiUnitsInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterMultiUnitsInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitMultiUnitsInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitMultiUnitsInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultiUnitsIntervalContext multiUnitsInterval() throws RecognitionException {
		MultiUnitsIntervalContext _localctx = new MultiUnitsIntervalContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_multiUnitsInterval);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4113); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4110);
					intervalValue();
					setState(4111);
					((MultiUnitsIntervalContext)_localctx).unitInMultiUnits = unitInMultiUnits();
					((MultiUnitsIntervalContext)_localctx).unit.add(((MultiUnitsIntervalContext)_localctx).unitInMultiUnits);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4115); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,510,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ErrorCapturingUnitToUnitIntervalContext extends ParserRuleContext {
		public UnitToUnitIntervalContext body;
		public MultiUnitsIntervalContext error1;
		public UnitToUnitIntervalContext error2;
		public List<UnitToUnitIntervalContext> unitToUnitInterval() {
			return getRuleContexts(UnitToUnitIntervalContext.class);
		}
		public UnitToUnitIntervalContext unitToUnitInterval(int i) {
			return getRuleContext(UnitToUnitIntervalContext.class,i);
		}
		public MultiUnitsIntervalContext multiUnitsInterval() {
			return getRuleContext(MultiUnitsIntervalContext.class,0);
		}
		public ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingUnitToUnitInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterErrorCapturingUnitToUnitInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitErrorCapturingUnitToUnitInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitErrorCapturingUnitToUnitInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ErrorCapturingUnitToUnitIntervalContext errorCapturingUnitToUnitInterval() throws RecognitionException {
		ErrorCapturingUnitToUnitIntervalContext _localctx = new ErrorCapturingUnitToUnitIntervalContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_errorCapturingUnitToUnitInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4117);
			((ErrorCapturingUnitToUnitIntervalContext)_localctx).body = unitToUnitInterval();
			setState(4120);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				setState(4118);
				((ErrorCapturingUnitToUnitIntervalContext)_localctx).error1 = multiUnitsInterval();
				}
				break;
			case 2:
				{
				setState(4119);
				((ErrorCapturingUnitToUnitIntervalContext)_localctx).error2 = unitToUnitInterval();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnitToUnitIntervalContext extends ParserRuleContext {
		public IntervalValueContext value;
		public UnitInUnitToUnitContext from;
		public UnitInUnitToUnitContext to;
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public IntervalValueContext intervalValue() {
			return getRuleContext(IntervalValueContext.class,0);
		}
		public List<UnitInUnitToUnitContext> unitInUnitToUnit() {
			return getRuleContexts(UnitInUnitToUnitContext.class);
		}
		public UnitInUnitToUnitContext unitInUnitToUnit(int i) {
			return getRuleContext(UnitInUnitToUnitContext.class,i);
		}
		public UnitToUnitIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unitToUnitInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnitToUnitInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnitToUnitInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnitToUnitInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnitToUnitIntervalContext unitToUnitInterval() throws RecognitionException {
		UnitToUnitIntervalContext _localctx = new UnitToUnitIntervalContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_unitToUnitInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4122);
			((UnitToUnitIntervalContext)_localctx).value = intervalValue();
			setState(4123);
			((UnitToUnitIntervalContext)_localctx).from = unitInUnitToUnit();
			setState(4124);
			match(TO);
			setState(4125);
			((UnitToUnitIntervalContext)_localctx).to = unitInUnitToUnit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalValueContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public IntervalValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIntervalValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIntervalValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIntervalValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalValueContext intervalValue() throws RecognitionException {
		IntervalValueContext _localctx = new IntervalValueContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_intervalValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				{
				setState(4127);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4133);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				{
				setState(4130);
				match(INTEGER_VALUE);
				}
				break;
			case 2:
				{
				setState(4131);
				match(DECIMAL_VALUE);
				}
				break;
			case 3:
				{
				setState(4132);
				stringLit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnitInMultiUnitsContext extends ParserRuleContext {
		public TerminalNode NANOSECOND() { return getToken(SqlBaseParser.NANOSECOND, 0); }
		public TerminalNode NANOSECONDS() { return getToken(SqlBaseParser.NANOSECONDS, 0); }
		public TerminalNode MICROSECOND() { return getToken(SqlBaseParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(SqlBaseParser.MICROSECONDS, 0); }
		public TerminalNode MILLISECOND() { return getToken(SqlBaseParser.MILLISECOND, 0); }
		public TerminalNode MILLISECONDS() { return getToken(SqlBaseParser.MILLISECONDS, 0); }
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(SqlBaseParser.SECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(SqlBaseParser.MINUTES, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(SqlBaseParser.HOURS, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(SqlBaseParser.DAYS, 0); }
		public TerminalNode WEEK() { return getToken(SqlBaseParser.WEEK, 0); }
		public TerminalNode WEEKS() { return getToken(SqlBaseParser.WEEKS, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(SqlBaseParser.MONTHS, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(SqlBaseParser.YEARS, 0); }
		public UnitInMultiUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unitInMultiUnits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnitInMultiUnits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnitInMultiUnits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnitInMultiUnits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnitInMultiUnitsContext unitInMultiUnits() throws RecognitionException {
		UnitInMultiUnitsContext _localctx = new UnitInMultiUnitsContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_unitInMultiUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4135);
			_la = _input.LA(1);
			if ( !(_la==DAY || _la==DAYS || ((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (HOUR - 155)) | (1L << (HOURS - 155)) | (1L << (MICROSECOND - 155)) | (1L << (MICROSECONDS - 155)) | (1L << (MILLISECOND - 155)) | (1L << (MILLISECONDS - 155)) | (1L << (MINUTE - 155)) | (1L << (MINUTES - 155)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (MONTH - 220)) | (1L << (MONTHS - 220)) | (1L << (NANOSECOND - 220)) | (1L << (NANOSECONDS - 220)))) != 0) || _la==SECOND || _la==SECONDS || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (WEEK - 390)) | (1L << (WEEKS - 390)) | (1L << (YEAR - 390)) | (1L << (YEARS - 390)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnitInUnitToUnitContext extends ParserRuleContext {
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public UnitInUnitToUnitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unitInUnitToUnit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnitInUnitToUnit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnitInUnitToUnit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnitInUnitToUnit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnitInUnitToUnitContext unitInUnitToUnit() throws RecognitionException {
		UnitInUnitToUnitContext _localctx = new UnitInUnitToUnitContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_unitInUnitToUnit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4137);
			_la = _input.LA(1);
			if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==YEAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColPositionContext extends ParserRuleContext {
		public Token position;
		public ErrorCapturingIdentifierContext afterCol;
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(SqlBaseParser.AFTER, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public ColPositionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colPosition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColPosition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColPosition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColPosition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColPositionContext colPosition() throws RecognitionException {
		ColPositionContext _localctx = new ColPositionContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_colPosition);
		try {
			setState(4142);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4139);
				((ColPositionContext)_localctx).position = match(FIRST);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4140);
				((ColPositionContext)_localctx).position = match(AFTER);
				setState(4141);
				((ColPositionContext)_localctx).afterCol = errorCapturingIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationSpecContext extends ParserRuleContext {
		public IdentifierContext collationName;
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public TerminalNode COLLATION() { return getToken(SqlBaseParser.COLLATION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CollationSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCollationSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCollationSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCollationSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationSpecContext collationSpec() throws RecognitionException {
		CollationSpecContext _localctx = new CollationSpecContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_collationSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4144);
			match(DEFAULT);
			setState(4145);
			match(COLLATION);
			setState(4146);
			((CollationSpecContext)_localctx).collationName = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateClauseContext extends ParserRuleContext {
		public MultipartIdentifierContext collationName;
		public TerminalNode COLLATE() { return getToken(SqlBaseParser.COLLATE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public CollateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCollateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCollateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCollateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateClauseContext collateClause() throws RecognitionException {
		CollateClauseContext _localctx = new CollateClauseContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_collateClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4148);
			match(COLLATE);
			setState(4149);
			((CollateClauseContext)_localctx).collationName = multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonTrivialPrimitiveTypeContext extends ParserRuleContext {
		public Token length;
		public Token precision;
		public Token scale;
		public Token fromYearMonth;
		public Token to;
		public Token fromDayTime;
		public TerminalNode STRING() { return getToken(SqlBaseParser.STRING, 0); }
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(SqlBaseParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(SqlBaseParser.CHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(SqlBaseParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(SqlBaseParser.INTEGER_VALUE, i);
		}
		public TerminalNode VARCHAR() { return getToken(SqlBaseParser.VARCHAR, 0); }
		public TerminalNode DECIMAL() { return getToken(SqlBaseParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(SqlBaseParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(SqlBaseParser.NUMERIC, 0); }
		public TerminalNode COMMA() { return getToken(SqlBaseParser.COMMA, 0); }
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public List<TerminalNode> MONTH() { return getTokens(SqlBaseParser.MONTH); }
		public TerminalNode MONTH(int i) {
			return getToken(SqlBaseParser.MONTH, i);
		}
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public List<TerminalNode> HOUR() { return getTokens(SqlBaseParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(SqlBaseParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(SqlBaseParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(SqlBaseParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(SqlBaseParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(SqlBaseParser.SECOND, i);
		}
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlBaseParser.TIMESTAMP, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlBaseParser.WITHOUT, 0); }
		public List<TerminalNode> TIME() { return getTokens(SqlBaseParser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(SqlBaseParser.TIME, i);
		}
		public TerminalNode ZONE() { return getToken(SqlBaseParser.ZONE, 0); }
		public NonTrivialPrimitiveTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonTrivialPrimitiveType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNonTrivialPrimitiveType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNonTrivialPrimitiveType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNonTrivialPrimitiveType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonTrivialPrimitiveTypeContext nonTrivialPrimitiveType() throws RecognitionException {
		NonTrivialPrimitiveTypeContext _localctx = new NonTrivialPrimitiveTypeContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_nonTrivialPrimitiveType);
		int _la;
		try {
			setState(4207);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4151);
				match(STRING);
				setState(4153);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
				case 1:
					{
					setState(4152);
					collateClause();
					}
					break;
				}
				}
				break;
			case CHAR:
			case CHARACTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4155);
				_la = _input.LA(1);
				if ( !(_la==CHAR || _la==CHARACTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4159);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
				case 1:
					{
					setState(4156);
					match(LEFT_PAREN);
					setState(4157);
					((NonTrivialPrimitiveTypeContext)_localctx).length = match(INTEGER_VALUE);
					setState(4158);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4161);
				match(VARCHAR);
				setState(4165);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
				case 1:
					{
					setState(4162);
					match(LEFT_PAREN);
					setState(4163);
					((NonTrivialPrimitiveTypeContext)_localctx).length = match(INTEGER_VALUE);
					setState(4164);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case DEC:
			case DECIMAL:
			case NUMERIC:
				enterOuterAlt(_localctx, 4);
				{
				setState(4167);
				_la = _input.LA(1);
				if ( !(_la==DEC || _la==DECIMAL || _la==NUMERIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4175);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
				case 1:
					{
					setState(4168);
					match(LEFT_PAREN);
					setState(4169);
					((NonTrivialPrimitiveTypeContext)_localctx).precision = match(INTEGER_VALUE);
					setState(4172);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4170);
						match(COMMA);
						setState(4171);
						((NonTrivialPrimitiveTypeContext)_localctx).scale = match(INTEGER_VALUE);
						}
					}

					setState(4174);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4177);
				match(INTERVAL);
				setState(4188);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
				case 1:
					{
					setState(4178);
					((NonTrivialPrimitiveTypeContext)_localctx).fromYearMonth = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==MONTH || _la==YEAR) ) {
						((NonTrivialPrimitiveTypeContext)_localctx).fromYearMonth = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4181);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
					case 1:
						{
						setState(4179);
						match(TO);
						setState(4180);
						((NonTrivialPrimitiveTypeContext)_localctx).to = match(MONTH);
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(4183);
					((NonTrivialPrimitiveTypeContext)_localctx).fromDayTime = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
						((NonTrivialPrimitiveTypeContext)_localctx).fromDayTime = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4186);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
					case 1:
						{
						setState(4184);
						match(TO);
						setState(4185);
						((NonTrivialPrimitiveTypeContext)_localctx).to = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==HOUR || _la==MINUTE || _la==SECOND) ) {
							((NonTrivialPrimitiveTypeContext)_localctx).to = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(4190);
				match(TIMESTAMP);
				setState(4194);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
				case 1:
					{
					setState(4191);
					match(WITHOUT);
					setState(4192);
					match(TIME);
					setState(4193);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(4196);
				match(TIME);
				setState(4200);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
				case 1:
					{
					setState(4197);
					match(LEFT_PAREN);
					setState(4198);
					((NonTrivialPrimitiveTypeContext)_localctx).precision = match(INTEGER_VALUE);
					setState(4199);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(4205);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
				case 1:
					{
					setState(4202);
					match(WITHOUT);
					setState(4203);
					match(TIME);
					setState(4204);
					match(ZONE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrivialPrimitiveTypeContext extends ParserRuleContext {
		public TerminalNode BOOLEAN() { return getToken(SqlBaseParser.BOOLEAN, 0); }
		public TerminalNode TINYINT() { return getToken(SqlBaseParser.TINYINT, 0); }
		public TerminalNode BYTE() { return getToken(SqlBaseParser.BYTE, 0); }
		public TerminalNode SMALLINT() { return getToken(SqlBaseParser.SMALLINT, 0); }
		public TerminalNode SHORT() { return getToken(SqlBaseParser.SHORT, 0); }
		public TerminalNode INT() { return getToken(SqlBaseParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(SqlBaseParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(SqlBaseParser.BIGINT, 0); }
		public TerminalNode LONG() { return getToken(SqlBaseParser.LONG, 0); }
		public TerminalNode FLOAT() { return getToken(SqlBaseParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(SqlBaseParser.REAL, 0); }
		public TerminalNode DOUBLE() { return getToken(SqlBaseParser.DOUBLE, 0); }
		public TerminalNode DATE() { return getToken(SqlBaseParser.DATE, 0); }
		public TerminalNode TIMESTAMP_LTZ() { return getToken(SqlBaseParser.TIMESTAMP_LTZ, 0); }
		public TerminalNode TIMESTAMP_NTZ() { return getToken(SqlBaseParser.TIMESTAMP_NTZ, 0); }
		public TerminalNode BINARY() { return getToken(SqlBaseParser.BINARY, 0); }
		public TerminalNode VOID() { return getToken(SqlBaseParser.VOID, 0); }
		public TerminalNode VARIANT() { return getToken(SqlBaseParser.VARIANT, 0); }
		public TrivialPrimitiveTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trivialPrimitiveType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTrivialPrimitiveType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTrivialPrimitiveType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTrivialPrimitiveType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrivialPrimitiveTypeContext trivialPrimitiveType() throws RecognitionException {
		TrivialPrimitiveTypeContext _localctx = new TrivialPrimitiveTypeContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_trivialPrimitiveType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4209);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIGINT) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYTE))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (DATE - 83)) | (1L << (DOUBLE - 83)) | (1L << (FLOAT - 83)))) != 0) || ((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & ((1L << (INT - 175)) | (1L << (INTEGER - 175)) | (1L << (LONG - 175)))) != 0) || ((((_la - 269)) & ~0x3f) == 0 && ((1L << (_la - 269)) & ((1L << (REAL - 269)) | (1L << (SHORT - 269)) | (1L << (SMALLINT - 269)))) != 0) || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (TIMESTAMP_LTZ - 349)) | (1L << (TIMESTAMP_NTZ - 349)) | (1L << (TINYINT - 349)) | (1L << (VARIANT - 349)) | (1L << (VOID - 349)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimitiveTypeContext extends ParserRuleContext {
		public IdentifierContext unsupportedType;
		public NonTrivialPrimitiveTypeContext nonTrivialPrimitiveType() {
			return getRuleContext(NonTrivialPrimitiveTypeContext.class,0);
		}
		public TrivialPrimitiveTypeContext trivialPrimitiveType() {
			return getRuleContext(TrivialPrimitiveTypeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(SqlBaseParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(SqlBaseParser.INTEGER_VALUE, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitiveType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPrimitiveType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPrimitiveType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPrimitiveType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimitiveTypeContext primitiveType() throws RecognitionException {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_primitiveType);
		int _la;
		try {
			setState(4226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4211);
				nonTrivialPrimitiveType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4212);
				trivialPrimitiveType();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4213);
				((PrimitiveTypeContext)_localctx).unsupportedType = identifier();
				setState(4224);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
				case 1:
					{
					setState(4214);
					match(LEFT_PAREN);
					setState(4215);
					match(INTEGER_VALUE);
					setState(4220);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4216);
						match(COMMA);
						setState(4217);
						match(INTEGER_VALUE);
						}
						}
						setState(4222);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4223);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ComplexDataTypeContext extends DataTypeContext {
		public Token complex;
		public TerminalNode ARRAY() { return getToken(SqlBaseParser.ARRAY, 0); }
		public TerminalNode LT() { return getToken(SqlBaseParser.LT, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode GT() { return getToken(SqlBaseParser.GT, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode COMMA() { return getToken(SqlBaseParser.COMMA, 0); }
		public TerminalNode STRUCT() { return getToken(SqlBaseParser.STRUCT, 0); }
		public TerminalNode NEQ() { return getToken(SqlBaseParser.NEQ, 0); }
		public ComplexColTypeListContext complexColTypeList() {
			return getRuleContext(ComplexColTypeListContext.class,0);
		}
		public ComplexDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterComplexDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitComplexDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitComplexDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimitiveDataTypeContext extends DataTypeContext {
		public PrimitiveTypeContext primitiveType() {
			return getRuleContext(PrimitiveTypeContext.class,0);
		}
		public PrimitiveDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterPrimitiveDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitPrimitiveDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitPrimitiveDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_dataType);
		try {
			setState(4254);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				_localctx = new ComplexDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4228);
				((ComplexDataTypeContext)_localctx).complex = match(ARRAY);
				setState(4233);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
				case 1:
					{
					setState(4229);
					match(LT);
					setState(4230);
					dataType();
					setState(4231);
					match(GT);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ComplexDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4235);
				((ComplexDataTypeContext)_localctx).complex = match(MAP);
				setState(4242);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
				case 1:
					{
					setState(4236);
					match(LT);
					setState(4237);
					dataType();
					setState(4238);
					match(COMMA);
					setState(4239);
					dataType();
					setState(4240);
					match(GT);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new ComplexDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4244);
				((ComplexDataTypeContext)_localctx).complex = match(STRUCT);
				setState(4251);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
				case 1:
					{
					{
					setState(4245);
					match(LT);
					setState(4247);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
					case 1:
						{
						setState(4246);
						complexColTypeList();
						}
						break;
					}
					setState(4249);
					match(GT);
					}
					}
					break;
				case 2:
					{
					setState(4250);
					match(NEQ);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new PrimitiveDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4253);
				primitiveType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedColTypeWithPositionListContext extends ParserRuleContext {
		public List<QualifiedColTypeWithPositionContext> qualifiedColTypeWithPosition() {
			return getRuleContexts(QualifiedColTypeWithPositionContext.class);
		}
		public QualifiedColTypeWithPositionContext qualifiedColTypeWithPosition(int i) {
			return getRuleContext(QualifiedColTypeWithPositionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public QualifiedColTypeWithPositionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedColTypeWithPositionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQualifiedColTypeWithPositionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQualifiedColTypeWithPositionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQualifiedColTypeWithPositionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() throws RecognitionException {
		QualifiedColTypeWithPositionListContext _localctx = new QualifiedColTypeWithPositionListContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_qualifiedColTypeWithPositionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4256);
			qualifiedColTypeWithPosition();
			setState(4261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4257);
				match(COMMA);
				setState(4258);
				qualifiedColTypeWithPosition();
				}
				}
				setState(4263);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedColTypeWithPositionContext extends ParserRuleContext {
		public MultipartIdentifierContext name;
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public List<ColDefinitionDescriptorWithPositionContext> colDefinitionDescriptorWithPosition() {
			return getRuleContexts(ColDefinitionDescriptorWithPositionContext.class);
		}
		public ColDefinitionDescriptorWithPositionContext colDefinitionDescriptorWithPosition(int i) {
			return getRuleContext(ColDefinitionDescriptorWithPositionContext.class,i);
		}
		public QualifiedColTypeWithPositionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedColTypeWithPosition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQualifiedColTypeWithPosition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQualifiedColTypeWithPosition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQualifiedColTypeWithPosition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedColTypeWithPositionContext qualifiedColTypeWithPosition() throws RecognitionException {
		QualifiedColTypeWithPositionContext _localctx = new QualifiedColTypeWithPositionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_qualifiedColTypeWithPosition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4264);
			((QualifiedColTypeWithPositionContext)_localctx).name = multipartIdentifier();
			setState(4265);
			dataType();
			setState(4269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BANG) | (1L << AFTER) | (1L << COMMENT))) != 0) || _la==DEFAULT || _la==FIRST || _la==NOT) {
				{
				{
				setState(4266);
				colDefinitionDescriptorWithPosition();
				}
				}
				setState(4271);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColDefinitionDescriptorWithPositionContext extends ParserRuleContext {
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public DefaultExpressionContext defaultExpression() {
			return getRuleContext(DefaultExpressionContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ColPositionContext colPosition() {
			return getRuleContext(ColPositionContext.class,0);
		}
		public ColDefinitionDescriptorWithPositionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colDefinitionDescriptorWithPosition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColDefinitionDescriptorWithPosition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColDefinitionDescriptorWithPosition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColDefinitionDescriptorWithPosition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColDefinitionDescriptorWithPositionContext colDefinitionDescriptorWithPosition() throws RecognitionException {
		ColDefinitionDescriptorWithPositionContext _localctx = new ColDefinitionDescriptorWithPositionContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_colDefinitionDescriptorWithPosition);
		try {
			setState(4278);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BANG:
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4272);
				errorCapturingNot();
				setState(4273);
				match(NULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4275);
				defaultExpression();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4276);
				commentSpec();
				}
				break;
			case AFTER:
			case FIRST:
				enterOuterAlt(_localctx, 4);
				{
				setState(4277);
				colPosition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultExpressionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DefaultExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDefaultExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDefaultExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDefaultExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultExpressionContext defaultExpression() throws RecognitionException {
		DefaultExpressionContext _localctx = new DefaultExpressionContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_defaultExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4280);
			match(DEFAULT);
			setState(4281);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableDefaultExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public VariableDefaultExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableDefaultExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterVariableDefaultExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitVariableDefaultExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitVariableDefaultExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableDefaultExpressionContext variableDefaultExpression() throws RecognitionException {
		VariableDefaultExpressionContext _localctx = new VariableDefaultExpressionContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_variableDefaultExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4283);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==EQ) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4284);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColTypeListContext extends ParserRuleContext {
		public List<ColTypeContext> colType() {
			return getRuleContexts(ColTypeContext.class);
		}
		public ColTypeContext colType(int i) {
			return getRuleContext(ColTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ColTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColTypeListContext colTypeList() throws RecognitionException {
		ColTypeListContext _localctx = new ColTypeListContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_colTypeList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4286);
			colType();
			setState(4291);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,538,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4287);
					match(COMMA);
					setState(4288);
					colType();
					}
					} 
				}
				setState(4293);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,538,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColTypeContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext colName;
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ColTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColTypeContext colType() throws RecognitionException {
		ColTypeContext _localctx = new ColTypeContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_colType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4294);
			((ColTypeContext)_localctx).colName = errorCapturingIdentifier();
			setState(4295);
			dataType();
			setState(4299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
			case 1:
				{
				setState(4296);
				errorCapturingNot();
				setState(4297);
				match(NULL);
				}
				break;
			}
			setState(4302);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				{
				setState(4301);
				commentSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementListContext extends ParserRuleContext {
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		TableElementListContext _localctx = new TableElementListContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_tableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4304);
			tableElement();
			setState(4309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4305);
				match(COMMA);
				setState(4306);
				tableElement();
				}
				}
				setState(4311);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public TableConstraintDefinitionContext tableConstraintDefinition() {
			return getRuleContext(TableConstraintDefinitionContext.class,0);
		}
		public ColDefinitionContext colDefinition() {
			return getRuleContext(ColDefinitionContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_tableElement);
		try {
			setState(4314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4312);
				tableConstraintDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4313);
				colDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColDefinitionListContext extends ParserRuleContext {
		public List<ColDefinitionContext> colDefinition() {
			return getRuleContexts(ColDefinitionContext.class);
		}
		public ColDefinitionContext colDefinition(int i) {
			return getRuleContext(ColDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ColDefinitionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colDefinitionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColDefinitionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColDefinitionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColDefinitionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColDefinitionListContext colDefinitionList() throws RecognitionException {
		ColDefinitionListContext _localctx = new ColDefinitionListContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_colDefinitionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4316);
			colDefinition();
			setState(4321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4317);
				match(COMMA);
				setState(4318);
				colDefinition();
				}
				}
				setState(4323);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColDefinitionContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext colName;
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public List<ColDefinitionOptionContext> colDefinitionOption() {
			return getRuleContexts(ColDefinitionOptionContext.class);
		}
		public ColDefinitionOptionContext colDefinitionOption(int i) {
			return getRuleContext(ColDefinitionOptionContext.class,i);
		}
		public ColDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColDefinitionContext colDefinition() throws RecognitionException {
		ColDefinitionContext _localctx = new ColDefinitionContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_colDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4324);
			((ColDefinitionContext)_localctx).colName = errorCapturingIdentifier();
			setState(4325);
			dataType();
			setState(4329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (BANG - 8)) | (1L << (CHECK - 8)) | (1L << (COMMENT - 8)) | (1L << (CONSTRAINT - 8)))) != 0) || _la==DEFAULT || _la==GENERATED || ((((_la - 231)) & ~0x3f) == 0 && ((1L << (_la - 231)) & ((1L << (NOT - 231)) | (1L << (PRIMARY - 231)) | (1L << (REFERENCES - 231)))) != 0) || _la==UNIQUE) {
				{
				{
				setState(4326);
				colDefinitionOption();
				}
				}
				setState(4331);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColDefinitionOptionContext extends ParserRuleContext {
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public DefaultExpressionContext defaultExpression() {
			return getRuleContext(DefaultExpressionContext.class,0);
		}
		public GenerationExpressionContext generationExpression() {
			return getRuleContext(GenerationExpressionContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ColumnConstraintDefinitionContext columnConstraintDefinition() {
			return getRuleContext(ColumnConstraintDefinitionContext.class,0);
		}
		public ColDefinitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colDefinitionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColDefinitionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColDefinitionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColDefinitionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColDefinitionOptionContext colDefinitionOption() throws RecognitionException {
		ColDefinitionOptionContext _localctx = new ColDefinitionOptionContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_colDefinitionOption);
		try {
			setState(4339);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BANG:
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4332);
				errorCapturingNot();
				setState(4333);
				match(NULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4335);
				defaultExpression();
				}
				break;
			case GENERATED:
				enterOuterAlt(_localctx, 3);
				{
				setState(4336);
				generationExpression();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(4337);
				commentSpec();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case PRIMARY:
			case REFERENCES:
			case UNIQUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4338);
				columnConstraintDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenerationExpressionContext extends ParserRuleContext {
		public GenerationExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generationExpression; }
	 
		public GenerationExpressionContext() { }
		public void copyFrom(GenerationExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GeneratedColumnContext extends GenerationExpressionContext {
		public TerminalNode GENERATED() { return getToken(SqlBaseParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlBaseParser.ALWAYS, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public GeneratedColumnContext(GenerationExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterGeneratedColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitGeneratedColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitGeneratedColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IdentityColumnContext extends GenerationExpressionContext {
		public TerminalNode GENERATED() { return getToken(SqlBaseParser.GENERATED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(SqlBaseParser.IDENTITY, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlBaseParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public IdentityColSpecContext identityColSpec() {
			return getRuleContext(IdentityColSpecContext.class,0);
		}
		public IdentityColumnContext(GenerationExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentityColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentityColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentityColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenerationExpressionContext generationExpression() throws RecognitionException {
		GenerationExpressionContext _localctx = new GenerationExpressionContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_generationExpression);
		int _la;
		try {
			setState(4359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				_localctx = new GeneratedColumnContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4341);
				match(GENERATED);
				setState(4342);
				match(ALWAYS);
				setState(4343);
				match(AS);
				setState(4344);
				match(LEFT_PAREN);
				setState(4345);
				expression();
				setState(4346);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				_localctx = new IdentityColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4348);
				match(GENERATED);
				setState(4352);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(4349);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					setState(4350);
					match(BY);
					setState(4351);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4354);
				match(AS);
				setState(4355);
				match(IDENTITY);
				setState(4357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4356);
					identityColSpec();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentityColSpecContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<SequenceGeneratorOptionContext> sequenceGeneratorOption() {
			return getRuleContexts(SequenceGeneratorOptionContext.class);
		}
		public SequenceGeneratorOptionContext sequenceGeneratorOption(int i) {
			return getRuleContext(SequenceGeneratorOptionContext.class,i);
		}
		public IdentityColSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identityColSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentityColSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentityColSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentityColSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentityColSpecContext identityColSpec() throws RecognitionException {
		IdentityColSpecContext _localctx = new IdentityColSpecContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_identityColSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4361);
			match(LEFT_PAREN);
			setState(4365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INCREMENT || _la==START) {
				{
				{
				setState(4362);
				sequenceGeneratorOption();
				}
				}
				setState(4367);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4368);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceGeneratorOptionContext extends ParserRuleContext {
		public SequenceGeneratorStartOrStepContext start;
		public SequenceGeneratorStartOrStepContext step;
		public TerminalNode START() { return getToken(SqlBaseParser.START, 0); }
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public SequenceGeneratorStartOrStepContext sequenceGeneratorStartOrStep() {
			return getRuleContext(SequenceGeneratorStartOrStepContext.class,0);
		}
		public TerminalNode INCREMENT() { return getToken(SqlBaseParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public SequenceGeneratorOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceGeneratorOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSequenceGeneratorOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSequenceGeneratorOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSequenceGeneratorOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceGeneratorOptionContext sequenceGeneratorOption() throws RecognitionException {
		SequenceGeneratorOptionContext _localctx = new SequenceGeneratorOptionContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_sequenceGeneratorOption);
		try {
			setState(4376);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START:
				enterOuterAlt(_localctx, 1);
				{
				setState(4370);
				match(START);
				setState(4371);
				match(WITH);
				setState(4372);
				((SequenceGeneratorOptionContext)_localctx).start = sequenceGeneratorStartOrStep();
				}
				break;
			case INCREMENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4373);
				match(INCREMENT);
				setState(4374);
				match(BY);
				setState(4375);
				((SequenceGeneratorOptionContext)_localctx).step = sequenceGeneratorStartOrStep();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceGeneratorStartOrStepContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TerminalNode BIGINT_LITERAL() { return getToken(SqlBaseParser.BIGINT_LITERAL, 0); }
		public SequenceGeneratorStartOrStepContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceGeneratorStartOrStep; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSequenceGeneratorStartOrStep(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSequenceGeneratorStartOrStep(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSequenceGeneratorStartOrStep(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceGeneratorStartOrStepContext sequenceGeneratorStartOrStep() throws RecognitionException {
		SequenceGeneratorStartOrStepContext _localctx = new SequenceGeneratorStartOrStepContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_sequenceGeneratorStartOrStep);
		int _la;
		try {
			setState(4386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4379);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4378);
					match(MINUS);
					}
				}

				setState(4381);
				match(INTEGER_VALUE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4382);
					match(MINUS);
					}
				}

				setState(4385);
				match(BIGINT_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComplexColTypeListContext extends ParserRuleContext {
		public List<ComplexColTypeContext> complexColType() {
			return getRuleContexts(ComplexColTypeContext.class);
		}
		public ComplexColTypeContext complexColType(int i) {
			return getRuleContext(ComplexColTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ComplexColTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_complexColTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterComplexColTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitComplexColTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitComplexColTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComplexColTypeListContext complexColTypeList() throws RecognitionException {
		ComplexColTypeListContext _localctx = new ComplexColTypeListContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_complexColTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4388);
			complexColType();
			setState(4393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4389);
				match(COMMA);
				setState(4390);
				complexColType();
				}
				}
				setState(4395);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComplexColTypeContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode COLON() { return getToken(SqlBaseParser.COLON, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ComplexColTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_complexColType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterComplexColType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitComplexColType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitComplexColType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComplexColTypeContext complexColType() throws RecognitionException {
		ComplexColTypeContext _localctx = new ComplexColTypeContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_complexColType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4396);
			errorCapturingIdentifier();
			setState(4398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				{
				setState(4397);
				match(COLON);
				}
				break;
			}
			setState(4400);
			dataType();
			setState(4404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BANG || _la==NOT) {
				{
				setState(4401);
				errorCapturingNot();
				setState(4402);
				match(NULL);
				}
			}

			setState(4407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(4406);
				commentSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineCharacteristicsContext extends ParserRuleContext {
		public List<RoutineLanguageContext> routineLanguage() {
			return getRuleContexts(RoutineLanguageContext.class);
		}
		public RoutineLanguageContext routineLanguage(int i) {
			return getRuleContext(RoutineLanguageContext.class,i);
		}
		public List<SpecificNameContext> specificName() {
			return getRuleContexts(SpecificNameContext.class);
		}
		public SpecificNameContext specificName(int i) {
			return getRuleContext(SpecificNameContext.class,i);
		}
		public List<DeterministicContext> deterministic() {
			return getRuleContexts(DeterministicContext.class);
		}
		public DeterministicContext deterministic(int i) {
			return getRuleContext(DeterministicContext.class,i);
		}
		public List<SqlDataAccessContext> sqlDataAccess() {
			return getRuleContexts(SqlDataAccessContext.class);
		}
		public SqlDataAccessContext sqlDataAccess(int i) {
			return getRuleContext(SqlDataAccessContext.class,i);
		}
		public List<NullCallContext> nullCall() {
			return getRuleContexts(NullCallContext.class);
		}
		public NullCallContext nullCall(int i) {
			return getRuleContext(NullCallContext.class,i);
		}
		public List<CommentSpecContext> commentSpec() {
			return getRuleContexts(CommentSpecContext.class);
		}
		public CommentSpecContext commentSpec(int i) {
			return getRuleContext(CommentSpecContext.class,i);
		}
		public List<RightsClauseContext> rightsClause() {
			return getRuleContexts(RightsClauseContext.class);
		}
		public RightsClauseContext rightsClause(int i) {
			return getRuleContext(RightsClauseContext.class,i);
		}
		public RoutineCharacteristicsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineCharacteristics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRoutineCharacteristics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRoutineCharacteristics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRoutineCharacteristics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineCharacteristicsContext routineCharacteristics() throws RecognitionException {
		RoutineCharacteristicsContext _localctx = new RoutineCharacteristicsContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_routineCharacteristics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BANG) | (1L << CALLED) | (1L << COMMENT))) != 0) || _la==CONTAINS || _la==DETERMINISTIC || ((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (LANGUAGE - 186)) | (1L << (MODIFIES - 186)) | (1L << (NO - 186)) | (1L << (NOT - 186)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (READS - 268)) | (1L << (RETURNS - 268)) | (1L << (SPECIFIC - 268)) | (1L << (SQL - 268)))) != 0)) {
				{
				setState(4416);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LANGUAGE:
					{
					setState(4409);
					routineLanguage();
					}
					break;
				case SPECIFIC:
					{
					setState(4410);
					specificName();
					}
					break;
				case BANG:
				case DETERMINISTIC:
				case NOT:
					{
					setState(4411);
					deterministic();
					}
					break;
				case CONTAINS:
				case MODIFIES:
				case NO:
				case READS:
					{
					setState(4412);
					sqlDataAccess();
					}
					break;
				case CALLED:
				case RETURNS:
					{
					setState(4413);
					nullCall();
					}
					break;
				case COMMENT:
					{
					setState(4414);
					commentSpec();
					}
					break;
				case SQL:
					{
					setState(4415);
					rightsClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4420);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineLanguageContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(SqlBaseParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(SqlBaseParser.SQL, 0); }
		public TerminalNode IDENTIFIER() { return getToken(SqlBaseParser.IDENTIFIER, 0); }
		public RoutineLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineLanguage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRoutineLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRoutineLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRoutineLanguage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineLanguageContext routineLanguage() throws RecognitionException {
		RoutineLanguageContext _localctx = new RoutineLanguageContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_routineLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4421);
			match(LANGUAGE);
			setState(4422);
			_la = _input.LA(1);
			if ( !(_la==SQL || _la==IDENTIFIER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificNameContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext specific;
		public TerminalNode SPECIFIC() { return getToken(SqlBaseParser.SPECIFIC, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public SpecificNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSpecificName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSpecificName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSpecificName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificNameContext specificName() throws RecognitionException {
		SpecificNameContext _localctx = new SpecificNameContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_specificName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4424);
			match(SPECIFIC);
			setState(4425);
			((SpecificNameContext)_localctx).specific = errorCapturingIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeterministicContext extends ParserRuleContext {
		public TerminalNode DETERMINISTIC() { return getToken(SqlBaseParser.DETERMINISTIC, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public DeterministicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deterministic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDeterministic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDeterministic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDeterministic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeterministicContext deterministic() throws RecognitionException {
		DeterministicContext _localctx = new DeterministicContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_deterministic);
		try {
			setState(4431);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DETERMINISTIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(4427);
				match(DETERMINISTIC);
				}
				break;
			case BANG:
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4428);
				errorCapturingNot();
				setState(4429);
				match(DETERMINISTIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlDataAccessContext extends ParserRuleContext {
		public Token access;
		public TerminalNode SQL() { return getToken(SqlBaseParser.SQL, 0); }
		public TerminalNode NO() { return getToken(SqlBaseParser.NO, 0); }
		public TerminalNode CONTAINS() { return getToken(SqlBaseParser.CONTAINS, 0); }
		public TerminalNode DATA() { return getToken(SqlBaseParser.DATA, 0); }
		public TerminalNode READS() { return getToken(SqlBaseParser.READS, 0); }
		public TerminalNode MODIFIES() { return getToken(SqlBaseParser.MODIFIES, 0); }
		public SqlDataAccessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlDataAccess; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSqlDataAccess(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSqlDataAccess(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSqlDataAccess(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlDataAccessContext sqlDataAccess() throws RecognitionException {
		SqlDataAccessContext _localctx = new SqlDataAccessContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_sqlDataAccess);
		try {
			setState(4443);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4433);
				((SqlDataAccessContext)_localctx).access = match(NO);
				setState(4434);
				match(SQL);
				}
				break;
			case CONTAINS:
				enterOuterAlt(_localctx, 2);
				{
				setState(4435);
				((SqlDataAccessContext)_localctx).access = match(CONTAINS);
				setState(4436);
				match(SQL);
				}
				break;
			case READS:
				enterOuterAlt(_localctx, 3);
				{
				setState(4437);
				((SqlDataAccessContext)_localctx).access = match(READS);
				setState(4438);
				match(SQL);
				setState(4439);
				match(DATA);
				}
				break;
			case MODIFIES:
				enterOuterAlt(_localctx, 4);
				{
				setState(4440);
				((SqlDataAccessContext)_localctx).access = match(MODIFIES);
				setState(4441);
				match(SQL);
				setState(4442);
				match(DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullCallContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(SqlBaseParser.RETURNS, 0); }
		public List<TerminalNode> NULL() { return getTokens(SqlBaseParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(SqlBaseParser.NULL, i);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public TerminalNode INPUT() { return getToken(SqlBaseParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(SqlBaseParser.CALLED, 0); }
		public NullCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNullCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNullCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNullCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullCallContext nullCall() throws RecognitionException {
		NullCallContext _localctx = new NullCallContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_nullCall);
		try {
			setState(4454);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURNS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4445);
				match(RETURNS);
				setState(4446);
				match(NULL);
				setState(4447);
				match(ON);
				setState(4448);
				match(NULL);
				setState(4449);
				match(INPUT);
				}
				break;
			case CALLED:
				enterOuterAlt(_localctx, 2);
				{
				setState(4450);
				match(CALLED);
				setState(4451);
				match(ON);
				setState(4452);
				match(NULL);
				setState(4453);
				match(INPUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RightsClauseContext extends ParserRuleContext {
		public TerminalNode SQL() { return getToken(SqlBaseParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(SqlBaseParser.SECURITY, 0); }
		public TerminalNode INVOKER() { return getToken(SqlBaseParser.INVOKER, 0); }
		public TerminalNode DEFINER() { return getToken(SqlBaseParser.DEFINER, 0); }
		public RightsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rightsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRightsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRightsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRightsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RightsClauseContext rightsClause() throws RecognitionException {
		RightsClauseContext _localctx = new RightsClauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_rightsClause);
		try {
			setState(4462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4456);
				match(SQL);
				setState(4457);
				match(SECURITY);
				setState(4458);
				match(INVOKER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4459);
				match(SQL);
				setState(4460);
				match(SECURITY);
				setState(4461);
				match(DEFINER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenClauseContext extends ParserRuleContext {
		public ExpressionContext condition;
		public ExpressionContext result;
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public WhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseContext whenClause() throws RecognitionException {
		WhenClauseContext _localctx = new WhenClauseContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_whenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4464);
			match(WHEN);
			setState(4465);
			((WhenClauseContext)_localctx).condition = expression();
			setState(4466);
			match(THEN);
			setState(4467);
			((WhenClauseContext)_localctx).result = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(SqlBaseParser.WINDOW, 0); }
		public List<NamedWindowContext> namedWindow() {
			return getRuleContexts(NamedWindowContext.class);
		}
		public NamedWindowContext namedWindow(int i) {
			return getRuleContext(NamedWindowContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_windowClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4469);
			match(WINDOW);
			setState(4470);
			namedWindow();
			setState(4475);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,564,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4471);
					match(COMMA);
					setState(4472);
					namedWindow();
					}
					} 
				}
				setState(4477);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,564,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamedWindowContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext name;
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public NamedWindowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedWindow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNamedWindow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNamedWindow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNamedWindow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamedWindowContext namedWindow() throws RecognitionException {
		NamedWindowContext _localctx = new NamedWindowContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_namedWindow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4478);
			((NamedWindowContext)_localctx).name = errorCapturingIdentifier();
			setState(4479);
			match(AS);
			setState(4480);
			windowSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
	 
		public WindowSpecContext() { }
		public void copyFrom(WindowSpecContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WindowRefContext extends WindowSpecContext {
		public ErrorCapturingIdentifierContext name;
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public WindowRefContext(WindowSpecContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterWindowRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitWindowRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitWindowRef(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WindowDefContext extends WindowSpecContext {
		public ExpressionContext expression;
		public List<ExpressionContext> partition = new ArrayList<ExpressionContext>();
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public WindowFrameContext windowFrame() {
			return getRuleContext(WindowFrameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public WindowDefContext(WindowSpecContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterWindowDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitWindowDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitWindowDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_windowSpec);
		int _la;
		try {
			setState(4528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
			case 1:
				_localctx = new WindowRefContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4482);
				((WindowRefContext)_localctx).name = errorCapturingIdentifier();
				}
				break;
			case 2:
				_localctx = new WindowRefContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4483);
				match(LEFT_PAREN);
				setState(4484);
				((WindowRefContext)_localctx).name = errorCapturingIdentifier();
				setState(4485);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				_localctx = new WindowDefContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4487);
				match(LEFT_PAREN);
				setState(4522);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CLUSTER:
					{
					setState(4488);
					match(CLUSTER);
					setState(4489);
					match(BY);
					setState(4490);
					((WindowDefContext)_localctx).expression = expression();
					((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
					setState(4495);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4491);
						match(COMMA);
						setState(4492);
						((WindowDefContext)_localctx).expression = expression();
						((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
						}
						}
						setState(4497);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case RIGHT_PAREN:
				case DISTRIBUTE:
				case ORDER:
				case PARTITION:
				case RANGE:
				case ROWS:
				case SORT:
					{
					setState(4508);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DISTRIBUTE || _la==PARTITION) {
						{
						setState(4498);
						_la = _input.LA(1);
						if ( !(_la==DISTRIBUTE || _la==PARTITION) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4499);
						match(BY);
						setState(4500);
						((WindowDefContext)_localctx).expression = expression();
						((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
						setState(4505);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(4501);
							match(COMMA);
							setState(4502);
							((WindowDefContext)_localctx).expression = expression();
							((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
							}
							}
							setState(4507);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(4520);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ORDER || _la==SORT) {
						{
						setState(4510);
						_la = _input.LA(1);
						if ( !(_la==ORDER || _la==SORT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4511);
						match(BY);
						setState(4512);
						sortItem();
						setState(4517);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(4513);
							match(COMMA);
							setState(4514);
							sortItem();
							}
							}
							setState(4519);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(4524);
					windowFrame();
					}
				}

				setState(4527);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameContext extends ParserRuleContext {
		public Token frameType;
		public FrameBoundContext start;
		public FrameBoundContext end;
		public TerminalNode RANGE() { return getToken(SqlBaseParser.RANGE, 0); }
		public List<FrameBoundContext> frameBound() {
			return getRuleContexts(FrameBoundContext.class);
		}
		public FrameBoundContext frameBound(int i) {
			return getRuleContext(FrameBoundContext.class,i);
		}
		public TerminalNode ROWS() { return getToken(SqlBaseParser.ROWS, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlBaseParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public WindowFrameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrame; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterWindowFrame(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitWindowFrame(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitWindowFrame(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameContext windowFrame() throws RecognitionException {
		WindowFrameContext _localctx = new WindowFrameContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_windowFrame);
		try {
			setState(4546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4530);
				((WindowFrameContext)_localctx).frameType = match(RANGE);
				setState(4531);
				((WindowFrameContext)_localctx).start = frameBound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4532);
				((WindowFrameContext)_localctx).frameType = match(ROWS);
				setState(4533);
				((WindowFrameContext)_localctx).start = frameBound();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4534);
				((WindowFrameContext)_localctx).frameType = match(RANGE);
				setState(4535);
				match(BETWEEN);
				setState(4536);
				((WindowFrameContext)_localctx).start = frameBound();
				setState(4537);
				match(AND);
				setState(4538);
				((WindowFrameContext)_localctx).end = frameBound();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4540);
				((WindowFrameContext)_localctx).frameType = match(ROWS);
				setState(4541);
				match(BETWEEN);
				setState(4542);
				((WindowFrameContext)_localctx).start = frameBound();
				setState(4543);
				match(AND);
				setState(4544);
				((WindowFrameContext)_localctx).end = frameBound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBoundContext extends ParserRuleContext {
		public Token boundType;
		public TerminalNode UNBOUNDED() { return getToken(SqlBaseParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(SqlBaseParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(SqlBaseParser.FOLLOWING, 0); }
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFrameBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFrameBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFrameBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBoundContext frameBound() throws RecognitionException {
		FrameBoundContext _localctx = new FrameBoundContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_frameBound);
		int _la;
		try {
			setState(4555);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4548);
				match(UNBOUNDED);
				setState(4549);
				((FrameBoundContext)_localctx).boundType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
					((FrameBoundContext)_localctx).boundType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4550);
				((FrameBoundContext)_localctx).boundType = match(CURRENT);
				setState(4551);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4552);
				expression();
				setState(4553);
				((FrameBoundContext)_localctx).boundType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
					((FrameBoundContext)_localctx).boundType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedNameListContext extends ParserRuleContext {
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQualifiedNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQualifiedNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQualifiedNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameListContext qualifiedNameList() throws RecognitionException {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_qualifiedNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4557);
			qualifiedName();
			setState(4562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4558);
				match(COMMA);
				setState(4559);
				qualifiedName();
				}
				}
				setState(4564);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameContext extends ParserRuleContext {
		public Token identFunc;
		public TerminalNode IDENTIFIER_KW() { return getToken(SqlBaseParser.IDENTIFIER_KW, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode FILTER() { return getToken(SqlBaseParser.FILTER, 0); }
		public TerminalNode LEFT() { return getToken(SqlBaseParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SqlBaseParser.RIGHT, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_functionName);
		try {
			setState(4575);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4565);
				match(IDENTIFIER_KW);
				setState(4566);
				match(LEFT_PAREN);
				setState(4567);
				expression();
				setState(4568);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4570);
				((FunctionNameContext)_localctx).identFunc = match(IDENTIFIER_KW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4571);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4572);
				match(FILTER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4573);
				match(LEFT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4574);
				match(RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQualifiedName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQualifiedName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQualifiedName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameContext qualifiedName() throws RecognitionException {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_qualifiedName);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4577);
			identifier();
			setState(4582);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,577,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4578);
					match(DOT);
					setState(4579);
					identifier();
					}
					} 
				}
				setState(4584);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,577,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ErrorCapturingIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() {
			return getRuleContext(ErrorCapturingIdentifierExtraContext.class,0);
		}
		public ErrorCapturingIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterErrorCapturingIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitErrorCapturingIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitErrorCapturingIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ErrorCapturingIdentifierContext errorCapturingIdentifier() throws RecognitionException {
		ErrorCapturingIdentifierContext _localctx = new ErrorCapturingIdentifierContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_errorCapturingIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4585);
			identifier();
			setState(4586);
			errorCapturingIdentifierExtra();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ErrorCapturingIdentifierExtraContext extends ParserRuleContext {
		public ErrorCapturingIdentifierExtraContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingIdentifierExtra; }
	 
		public ErrorCapturingIdentifierExtraContext() { }
		public void copyFrom(ErrorCapturingIdentifierExtraContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ErrorIdentContext extends ErrorCapturingIdentifierExtraContext {
		public List<TerminalNode> MINUS() { return getTokens(SqlBaseParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(SqlBaseParser.MINUS, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public ErrorIdentContext(ErrorCapturingIdentifierExtraContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterErrorIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitErrorIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitErrorIdent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RealIdentContext extends ErrorCapturingIdentifierExtraContext {
		public RealIdentContext(ErrorCapturingIdentifierExtraContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRealIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRealIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRealIdent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() throws RecognitionException {
		ErrorCapturingIdentifierExtraContext _localctx = new ErrorCapturingIdentifierExtraContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_errorCapturingIdentifierExtra);
		try {
			int _alt;
			setState(4595);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				_localctx = new ErrorIdentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4590); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4588);
						match(MINUS);
						setState(4589);
						identifier();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4592); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,578,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				_localctx = new RealIdentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public StrictIdentifierContext strictIdentifier() {
			return getRuleContext(StrictIdentifierContext.class,0);
		}
		public StrictNonReservedContext strictNonReserved() {
			return getRuleContext(StrictNonReservedContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_identifier);
		try {
			setState(4600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4597);
				strictIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4598);
				if (!(!SQL_standard_keyword_behavior)) throw new FailedPredicateException(this, "!SQL_standard_keyword_behavior");
				setState(4599);
				strictNonReserved();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StrictIdentifierContext extends ParserRuleContext {
		public StrictIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_strictIdentifier; }
	 
		public StrictIdentifierContext() { }
		public void copyFrom(StrictIdentifierContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class QuotedIdentifierAlternativeContext extends StrictIdentifierContext {
		public QuotedIdentifierContext quotedIdentifier() {
			return getRuleContext(QuotedIdentifierContext.class,0);
		}
		public QuotedIdentifierAlternativeContext(StrictIdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQuotedIdentifierAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQuotedIdentifierAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQuotedIdentifierAlternative(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnquotedIdentifierContext extends StrictIdentifierContext {
		public TerminalNode IDENTIFIER() { return getToken(SqlBaseParser.IDENTIFIER, 0); }
		public AnsiNonReservedContext ansiNonReserved() {
			return getRuleContext(AnsiNonReservedContext.class,0);
		}
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public UnquotedIdentifierContext(StrictIdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUnquotedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUnquotedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUnquotedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StrictIdentifierContext strictIdentifier() throws RecognitionException {
		StrictIdentifierContext _localctx = new StrictIdentifierContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_strictIdentifier);
		try {
			setState(4608);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
			case 1:
				_localctx = new UnquotedIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4602);
				match(IDENTIFIER);
				}
				break;
			case 2:
				_localctx = new QuotedIdentifierAlternativeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4603);
				quotedIdentifier();
				}
				break;
			case 3:
				_localctx = new UnquotedIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4604);
				if (!(SQL_standard_keyword_behavior)) throw new FailedPredicateException(this, "SQL_standard_keyword_behavior");
				setState(4605);
				ansiNonReserved();
				}
				break;
			case 4:
				_localctx = new UnquotedIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4606);
				if (!(!SQL_standard_keyword_behavior)) throw new FailedPredicateException(this, "!SQL_standard_keyword_behavior");
				setState(4607);
				nonReserved();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuotedIdentifierContext extends ParserRuleContext {
		public TerminalNode BACKQUOTED_IDENTIFIER() { return getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0); }
		public TerminalNode DOUBLEQUOTED_STRING() { return getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0); }
		public QuotedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quotedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterQuotedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitQuotedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitQuotedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuotedIdentifierContext quotedIdentifier() throws RecognitionException {
		QuotedIdentifierContext _localctx = new QuotedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_quotedIdentifier);
		try {
			setState(4613);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4610);
				match(BACKQUOTED_IDENTIFIER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4611);
				if (!(double_quoted_identifiers)) throw new FailedPredicateException(this, "double_quoted_identifiers");
				setState(4612);
				match(DOUBLEQUOTED_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BackQuotedIdentifierContext extends ParserRuleContext {
		public TerminalNode BACKQUOTED_IDENTIFIER() { return getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0); }
		public BackQuotedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backQuotedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBackQuotedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBackQuotedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBackQuotedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BackQuotedIdentifierContext backQuotedIdentifier() throws RecognitionException {
		BackQuotedIdentifierContext _localctx = new BackQuotedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_backQuotedIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4615);
			match(BACKQUOTED_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberContext extends ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number; }
	 
		public NumberContext() { }
		public void copyFrom(NumberContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DecimalLiteralContext extends NumberContext {
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public DecimalLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BigIntLiteralContext extends NumberContext {
		public TerminalNode BIGINT_LITERAL() { return getToken(SqlBaseParser.BIGINT_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public BigIntLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBigIntLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBigIntLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBigIntLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TinyIntLiteralContext extends NumberContext {
		public TerminalNode TINYINT_LITERAL() { return getToken(SqlBaseParser.TINYINT_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TinyIntLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTinyIntLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTinyIntLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTinyIntLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LegacyDecimalLiteralContext extends NumberContext {
		public TerminalNode EXPONENT_VALUE() { return getToken(SqlBaseParser.EXPONENT_VALUE, 0); }
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public LegacyDecimalLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterLegacyDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitLegacyDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitLegacyDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BigDecimalLiteralContext extends NumberContext {
		public TerminalNode BIGDECIMAL_LITERAL() { return getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public BigDecimalLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterBigDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitBigDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitBigDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExponentLiteralContext extends NumberContext {
		public TerminalNode EXPONENT_VALUE() { return getToken(SqlBaseParser.EXPONENT_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public ExponentLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterExponentLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitExponentLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitExponentLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoubleLiteralContext extends NumberContext {
		public TerminalNode DOUBLE_LITERAL() { return getToken(SqlBaseParser.DOUBLE_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public DoubleLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterDoubleLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitDoubleLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitDoubleLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntegerLiteralContext extends NumberContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public IntegerLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterIntegerLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitIntegerLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitIntegerLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FloatLiteralContext extends NumberContext {
		public TerminalNode FLOAT_LITERAL() { return getToken(SqlBaseParser.FLOAT_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public FloatLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterFloatLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitFloatLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitFloatLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SmallIntLiteralContext extends NumberContext {
		public TerminalNode SMALLINT_LITERAL() { return getToken(SqlBaseParser.SMALLINT_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public SmallIntLiteralContext(NumberContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterSmallIntLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitSmallIntLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitSmallIntLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberContext number() throws RecognitionException {
		NumberContext _localctx = new NumberContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_number);
		int _la;
		try {
			setState(4660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				_localctx = new ExponentLiteralContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4617);
				if (!(!legacy_exponent_literal_as_decimal_enabled)) throw new FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
				setState(4619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4618);
					match(MINUS);
					}
				}

				setState(4621);
				match(EXPONENT_VALUE);
				}
				break;
			case 2:
				_localctx = new DecimalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4622);
				if (!(!legacy_exponent_literal_as_decimal_enabled)) throw new FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
				setState(4624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4623);
					match(MINUS);
					}
				}

				setState(4626);
				match(DECIMAL_VALUE);
				}
				break;
			case 3:
				_localctx = new LegacyDecimalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4627);
				if (!(legacy_exponent_literal_as_decimal_enabled)) throw new FailedPredicateException(this, "legacy_exponent_literal_as_decimal_enabled");
				setState(4629);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4628);
					match(MINUS);
					}
				}

				setState(4631);
				_la = _input.LA(1);
				if ( !(_la==EXPONENT_VALUE || _la==DECIMAL_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				_localctx = new IntegerLiteralContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4632);
					match(MINUS);
					}
				}

				setState(4635);
				match(INTEGER_VALUE);
				}
				break;
			case 5:
				_localctx = new BigIntLiteralContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4636);
					match(MINUS);
					}
				}

				setState(4639);
				match(BIGINT_LITERAL);
				}
				break;
			case 6:
				_localctx = new SmallIntLiteralContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4640);
					match(MINUS);
					}
				}

				setState(4643);
				match(SMALLINT_LITERAL);
				}
				break;
			case 7:
				_localctx = new TinyIntLiteralContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4644);
					match(MINUS);
					}
				}

				setState(4647);
				match(TINYINT_LITERAL);
				}
				break;
			case 8:
				_localctx = new DoubleLiteralContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4648);
					match(MINUS);
					}
				}

				setState(4651);
				match(DOUBLE_LITERAL);
				}
				break;
			case 9:
				_localctx = new FloatLiteralContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(4653);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4652);
					match(MINUS);
					}
				}

				setState(4655);
				match(FLOAT_LITERAL);
				}
				break;
			case 10:
				_localctx = new BigDecimalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(4657);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4656);
					match(MINUS);
					}
				}

				setState(4659);
				match(BIGDECIMAL_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintDefinitionContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext name;
		public ColumnConstraintContext columnConstraint() {
			return getRuleContext(ColumnConstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SqlBaseParser.CONSTRAINT, 0); }
		public List<ConstraintCharacteristicContext> constraintCharacteristic() {
			return getRuleContexts(ConstraintCharacteristicContext.class);
		}
		public ConstraintCharacteristicContext constraintCharacteristic(int i) {
			return getRuleContext(ConstraintCharacteristicContext.class,i);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public ColumnConstraintDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraintDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColumnConstraintDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColumnConstraintDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColumnConstraintDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintDefinitionContext columnConstraintDefinition() throws RecognitionException {
		ColumnConstraintDefinitionContext _localctx = new ColumnConstraintDefinitionContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_columnConstraintDefinition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4664);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(4662);
				match(CONSTRAINT);
				setState(4663);
				((ColumnConstraintDefinitionContext)_localctx).name = errorCapturingIdentifier();
				}
			}

			setState(4666);
			columnConstraint();
			setState(4670);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,595,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4667);
					constraintCharacteristic();
					}
					} 
				}
				setState(4672);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,595,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public UniqueSpecContext uniqueSpec() {
			return getRuleContext(UniqueSpecContext.class,0);
		}
		public ReferenceSpecContext referenceSpec() {
			return getRuleContext(ReferenceSpecContext.class,0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_columnConstraint);
		try {
			setState(4676);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(4673);
				checkConstraint();
				}
				break;
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4674);
				uniqueSpec();
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 3);
				{
				setState(4675);
				referenceSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintDefinitionContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext name;
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SqlBaseParser.CONSTRAINT, 0); }
		public List<ConstraintCharacteristicContext> constraintCharacteristic() {
			return getRuleContexts(ConstraintCharacteristicContext.class);
		}
		public ConstraintCharacteristicContext constraintCharacteristic(int i) {
			return getRuleContext(ConstraintCharacteristicContext.class,i);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TableConstraintDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableConstraintDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableConstraintDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableConstraintDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintDefinitionContext tableConstraintDefinition() throws RecognitionException {
		TableConstraintDefinitionContext _localctx = new TableConstraintDefinitionContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_tableConstraintDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(4678);
				match(CONSTRAINT);
				setState(4679);
				((TableConstraintDefinitionContext)_localctx).name = errorCapturingIdentifier();
				}
			}

			setState(4682);
			tableConstraint();
			setState(4686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ENFORCED || ((((_la - 231)) & ~0x3f) == 0 && ((1L << (_la - 231)) & ((1L << (NOT - 231)) | (1L << (NORELY - 231)) | (1L << (RELY - 231)))) != 0)) {
				{
				{
				setState(4683);
				constraintCharacteristic();
				}
				}
				setState(4688);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public UniqueConstraintContext uniqueConstraint() {
			return getRuleContext(UniqueConstraintContext.class,0);
		}
		public ForeignKeyConstraintContext foreignKeyConstraint() {
			return getRuleContext(ForeignKeyConstraintContext.class,0);
		}
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_tableConstraint);
		try {
			setState(4692);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(4689);
				checkConstraint();
				}
				break;
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4690);
				uniqueConstraint();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 3);
				{
				setState(4691);
				foreignKeyConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConstraintContext extends ParserRuleContext {
		public BooleanExpressionContext expr;
		public TerminalNode CHECK() { return getToken(SqlBaseParser.CHECK, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterCheckConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitCheckConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitCheckConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConstraintContext checkConstraint() throws RecognitionException {
		CheckConstraintContext _localctx = new CheckConstraintContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_checkConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4694);
			match(CHECK);
			setState(4695);
			match(LEFT_PAREN);
			{
			setState(4696);
			((CheckConstraintContext)_localctx).expr = booleanExpression(0);
			}
			setState(4697);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UniqueSpecContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(SqlBaseParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(SqlBaseParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(SqlBaseParser.KEY, 0); }
		public UniqueSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUniqueSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUniqueSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUniqueSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UniqueSpecContext uniqueSpec() throws RecognitionException {
		UniqueSpecContext _localctx = new UniqueSpecContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_uniqueSpec);
		try {
			setState(4702);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4699);
				match(UNIQUE);
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 2);
				{
				setState(4700);
				match(PRIMARY);
				setState(4701);
				match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UniqueConstraintContext extends ParserRuleContext {
		public UniqueSpecContext uniqueSpec() {
			return getRuleContext(UniqueSpecContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public UniqueConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uniqueConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterUniqueConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitUniqueConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitUniqueConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UniqueConstraintContext uniqueConstraint() throws RecognitionException {
		UniqueConstraintContext _localctx = new UniqueConstraintContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_uniqueConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4704);
			uniqueSpec();
			setState(4705);
			identifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceSpecContext extends ParserRuleContext {
		public IdentifierListContext parentColumns;
		public TerminalNode REFERENCES() { return getToken(SqlBaseParser.REFERENCES, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public ReferenceSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterReferenceSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitReferenceSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitReferenceSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceSpecContext referenceSpec() throws RecognitionException {
		ReferenceSpecContext _localctx = new ReferenceSpecContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_referenceSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4707);
			match(REFERENCES);
			setState(4708);
			multipartIdentifier();
			setState(4710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4709);
				((ReferenceSpecContext)_localctx).parentColumns = identifierList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForeignKeyConstraintContext extends ParserRuleContext {
		public TerminalNode FOREIGN() { return getToken(SqlBaseParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(SqlBaseParser.KEY, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public ReferenceSpecContext referenceSpec() {
			return getRuleContext(ReferenceSpecContext.class,0);
		}
		public ForeignKeyConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignKeyConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterForeignKeyConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitForeignKeyConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitForeignKeyConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignKeyConstraintContext foreignKeyConstraint() throws RecognitionException {
		ForeignKeyConstraintContext _localctx = new ForeignKeyConstraintContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_foreignKeyConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4712);
			match(FOREIGN);
			setState(4713);
			match(KEY);
			setState(4714);
			identifierList();
			setState(4715);
			referenceSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintCharacteristicContext extends ParserRuleContext {
		public EnforcedCharacteristicContext enforcedCharacteristic() {
			return getRuleContext(EnforcedCharacteristicContext.class,0);
		}
		public RelyCharacteristicContext relyCharacteristic() {
			return getRuleContext(RelyCharacteristicContext.class,0);
		}
		public ConstraintCharacteristicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintCharacteristic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterConstraintCharacteristic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitConstraintCharacteristic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitConstraintCharacteristic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintCharacteristicContext constraintCharacteristic() throws RecognitionException {
		ConstraintCharacteristicContext _localctx = new ConstraintCharacteristicContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_constraintCharacteristic);
		try {
			setState(4719);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENFORCED:
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4717);
				enforcedCharacteristic();
				}
				break;
			case NORELY:
			case RELY:
				enterOuterAlt(_localctx, 2);
				{
				setState(4718);
				relyCharacteristic();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnforcedCharacteristicContext extends ParserRuleContext {
		public TerminalNode ENFORCED() { return getToken(SqlBaseParser.ENFORCED, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public EnforcedCharacteristicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enforcedCharacteristic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterEnforcedCharacteristic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitEnforcedCharacteristic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitEnforcedCharacteristic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnforcedCharacteristicContext enforcedCharacteristic() throws RecognitionException {
		EnforcedCharacteristicContext _localctx = new EnforcedCharacteristicContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_enforcedCharacteristic);
		try {
			setState(4724);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENFORCED:
				enterOuterAlt(_localctx, 1);
				{
				setState(4721);
				match(ENFORCED);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4722);
				match(NOT);
				setState(4723);
				match(ENFORCED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelyCharacteristicContext extends ParserRuleContext {
		public TerminalNode RELY() { return getToken(SqlBaseParser.RELY, 0); }
		public TerminalNode NORELY() { return getToken(SqlBaseParser.NORELY, 0); }
		public RelyCharacteristicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relyCharacteristic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterRelyCharacteristic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitRelyCharacteristic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitRelyCharacteristic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelyCharacteristicContext relyCharacteristic() throws RecognitionException {
		RelyCharacteristicContext _localctx = new RelyCharacteristicContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_relyCharacteristic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4726);
			_la = _input.LA(1);
			if ( !(_la==NORELY || _la==RELY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterColumnSpecListContext extends ParserRuleContext {
		public List<AlterColumnSpecContext> alterColumnSpec() {
			return getRuleContexts(AlterColumnSpecContext.class);
		}
		public AlterColumnSpecContext alterColumnSpec(int i) {
			return getRuleContext(AlterColumnSpecContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public AlterColumnSpecListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnSpecList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAlterColumnSpecList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAlterColumnSpecList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAlterColumnSpecList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnSpecListContext alterColumnSpecList() throws RecognitionException {
		AlterColumnSpecListContext _localctx = new AlterColumnSpecListContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_alterColumnSpecList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4728);
			alterColumnSpec();
			setState(4733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4729);
				match(COMMA);
				setState(4730);
				alterColumnSpec();
				}
				}
				setState(4735);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterColumnSpecContext extends ParserRuleContext {
		public MultipartIdentifierContext column;
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public AlterColumnActionContext alterColumnAction() {
			return getRuleContext(AlterColumnActionContext.class,0);
		}
		public AlterColumnSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAlterColumnSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAlterColumnSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAlterColumnSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnSpecContext alterColumnSpec() throws RecognitionException {
		AlterColumnSpecContext _localctx = new AlterColumnSpecContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_alterColumnSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4736);
			((AlterColumnSpecContext)_localctx).column = multipartIdentifier();
			setState(4738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AFTER || _la==COMMENT || _la==DROP || _la==FIRST || _la==SET || _la==TYPE) {
				{
				setState(4737);
				alterColumnAction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterColumnActionContext extends ParserRuleContext {
		public Token setOrDrop;
		public Token dropDefault;
		public TerminalNode TYPE() { return getToken(SqlBaseParser.TYPE, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ColPositionContext colPosition() {
			return getRuleContext(ColPositionContext.class,0);
		}
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public DefaultExpressionContext defaultExpression() {
			return getRuleContext(DefaultExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public AlterColumnActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAlterColumnAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAlterColumnAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAlterColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnActionContext alterColumnAction() throws RecognitionException {
		AlterColumnActionContext _localctx = new AlterColumnActionContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_alterColumnAction);
		int _la;
		try {
			setState(4752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4740);
				match(TYPE);
				setState(4741);
				dataType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4742);
				commentSpec();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4743);
				colPosition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4744);
				((AlterColumnActionContext)_localctx).setOrDrop = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
					((AlterColumnActionContext)_localctx).setOrDrop = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4745);
				errorCapturingNot();
				setState(4746);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4748);
				match(SET);
				setState(4749);
				defaultExpression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4750);
				((AlterColumnActionContext)_localctx).dropDefault = match(DROP);
				setState(4751);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLitContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(SqlBaseParser.STRING_LITERAL, 0); }
		public TerminalNode DOUBLEQUOTED_STRING() { return getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0); }
		public StringLitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStringLit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStringLit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStringLit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLitContext stringLit() throws RecognitionException {
		StringLitContext _localctx = new StringLitContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_stringLit);
		try {
			setState(4757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4754);
				match(STRING_LITERAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4755);
				if (!(!double_quoted_identifiers)) throw new FailedPredicateException(this, "!double_quoted_identifiers");
				setState(4756);
				match(DOUBLEQUOTED_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentContext extends ParserRuleContext {
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentContext comment() throws RecognitionException {
		CommentContext _localctx = new CommentContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_comment);
		try {
			setState(4761);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4759);
				stringLit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4760);
				match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VersionContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public VersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterVersion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitVersion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitVersion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VersionContext version() throws RecognitionException {
		VersionContext _localctx = new VersionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_version);
		try {
			setState(4765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4763);
				match(INTEGER_VALUE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4764);
				stringLit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorPipeRightSideContext extends ParserRuleContext {
		public NamedExpressionSeqContext extendList;
		public Token operator;
		public QueryPrimaryContext right;
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public TerminalNode EXTEND() { return getToken(SqlBaseParser.EXTEND, 0); }
		public NamedExpressionSeqContext namedExpressionSeq() {
			return getRuleContext(NamedExpressionSeqContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public OperatorPipeSetAssignmentSeqContext operatorPipeSetAssignmentSeq() {
			return getRuleContext(OperatorPipeSetAssignmentSeqContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public IdentifierSeqContext identifierSeq() {
			return getRuleContext(IdentifierSeqContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public PivotClauseContext pivotClause() {
			return getRuleContext(PivotClauseContext.class,0);
		}
		public UnpivotClauseContext unpivotClause() {
			return getRuleContext(UnpivotClauseContext.class,0);
		}
		public SampleContext sample() {
			return getRuleContext(SampleContext.class,0);
		}
		public JoinRelationContext joinRelation() {
			return getRuleContext(JoinRelationContext.class,0);
		}
		public QueryPrimaryContext queryPrimary() {
			return getRuleContext(QueryPrimaryContext.class,0);
		}
		public TerminalNode UNION() { return getToken(SqlBaseParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(SqlBaseParser.EXCEPT, 0); }
		public TerminalNode SETMINUS() { return getToken(SqlBaseParser.SETMINUS, 0); }
		public TerminalNode INTERSECT() { return getToken(SqlBaseParser.INTERSECT, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public QueryOrganizationContext queryOrganization() {
			return getRuleContext(QueryOrganizationContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(SqlBaseParser.AGGREGATE, 0); }
		public AggregationClauseContext aggregationClause() {
			return getRuleContext(AggregationClauseContext.class,0);
		}
		public OperatorPipeRightSideContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorPipeRightSide; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterOperatorPipeRightSide(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitOperatorPipeRightSide(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitOperatorPipeRightSide(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorPipeRightSideContext operatorPipeRightSide() throws RecognitionException {
		OperatorPipeRightSideContext _localctx = new OperatorPipeRightSideContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_operatorPipeRightSide);
		int _la;
		try {
			setState(4806);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4767);
				selectClause();
				setState(4769);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
				case 1:
					{
					setState(4768);
					windowClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4771);
				match(EXTEND);
				setState(4772);
				((OperatorPipeRightSideContext)_localctx).extendList = namedExpressionSeq();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4773);
				match(SET);
				setState(4774);
				operatorPipeSetAssignmentSeq();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4775);
				match(DROP);
				setState(4776);
				identifierSeq();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4777);
				match(AS);
				setState(4778);
				errorCapturingIdentifier();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4779);
				whereClause();
				setState(4781);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
				case 1:
					{
					setState(4780);
					windowClause();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4783);
				pivotClause();
				setState(4785);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
				case 1:
					{
					setState(4784);
					unpivotClause();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4787);
				unpivotClause();
				setState(4789);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
				case 1:
					{
					setState(4788);
					pivotClause();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4791);
				sample();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4792);
				joinRelation();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4793);
				((OperatorPipeRightSideContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXCEPT || _la==INTERSECT || _la==SETMINUS || _la==UNION) ) {
					((OperatorPipeRightSideContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(4794);
					setQuantifier();
					}
				}

				setState(4797);
				((OperatorPipeRightSideContext)_localctx).right = queryPrimary();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4798);
				queryOrganization();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4799);
				match(AGGREGATE);
				setState(4801);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(4800);
					namedExpressionSeq();
					}
					break;
				}
				setState(4804);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
				case 1:
					{
					setState(4803);
					aggregationClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorPipeSetAssignmentSeqContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> ident = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<TerminalNode> EQ() { return getTokens(SqlBaseParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SqlBaseParser.EQ, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public OperatorPipeSetAssignmentSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorPipeSetAssignmentSeq; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterOperatorPipeSetAssignmentSeq(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitOperatorPipeSetAssignmentSeq(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitOperatorPipeSetAssignmentSeq(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorPipeSetAssignmentSeqContext operatorPipeSetAssignmentSeq() throws RecognitionException {
		OperatorPipeSetAssignmentSeqContext _localctx = new OperatorPipeSetAssignmentSeqContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_operatorPipeSetAssignmentSeq);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4808);
			((OperatorPipeSetAssignmentSeqContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
			((OperatorPipeSetAssignmentSeqContext)_localctx).ident.add(((OperatorPipeSetAssignmentSeqContext)_localctx).errorCapturingIdentifier);
			setState(4813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT) {
				{
				{
				setState(4809);
				match(DOT);
				setState(4810);
				errorCapturingIdentifier();
				}
				}
				setState(4815);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4816);
			match(EQ);
			setState(4817);
			expression();
			setState(4832);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,620,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4818);
					match(COMMA);
					setState(4819);
					((OperatorPipeSetAssignmentSeqContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
					((OperatorPipeSetAssignmentSeqContext)_localctx).ident.add(((OperatorPipeSetAssignmentSeqContext)_localctx).errorCapturingIdentifier);
					setState(4824);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==DOT) {
						{
						{
						setState(4820);
						match(DOT);
						setState(4821);
						errorCapturingIdentifier();
						}
						}
						setState(4826);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4827);
					match(EQ);
					setState(4828);
					expression();
					}
					} 
				}
				setState(4834);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,620,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnsiNonReservedContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(SqlBaseParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlBaseParser.AGGREGATE, 0); }
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlBaseParser.ALWAYS, 0); }
		public TerminalNode ANALYZE() { return getToken(SqlBaseParser.ANALYZE, 0); }
		public TerminalNode ANTI() { return getToken(SqlBaseParser.ANTI, 0); }
		public TerminalNode ANY_VALUE() { return getToken(SqlBaseParser.ANY_VALUE, 0); }
		public TerminalNode ARCHIVE() { return getToken(SqlBaseParser.ARCHIVE, 0); }
		public TerminalNode ARRAY() { return getToken(SqlBaseParser.ARRAY, 0); }
		public TerminalNode ASC() { return getToken(SqlBaseParser.ASC, 0); }
		public TerminalNode AT() { return getToken(SqlBaseParser.AT, 0); }
		public TerminalNode ATOMIC() { return getToken(SqlBaseParser.ATOMIC, 0); }
		public TerminalNode BEGIN() { return getToken(SqlBaseParser.BEGIN, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlBaseParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(SqlBaseParser.BIGINT, 0); }
		public TerminalNode BINARY() { return getToken(SqlBaseParser.BINARY, 0); }
		public TerminalNode BINARY_HEX() { return getToken(SqlBaseParser.BINARY_HEX, 0); }
		public TerminalNode BINDING() { return getToken(SqlBaseParser.BINDING, 0); }
		public TerminalNode BOOLEAN() { return getToken(SqlBaseParser.BOOLEAN, 0); }
		public TerminalNode BUCKET() { return getToken(SqlBaseParser.BUCKET, 0); }
		public TerminalNode BUCKETS() { return getToken(SqlBaseParser.BUCKETS, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode BYTE() { return getToken(SqlBaseParser.BYTE, 0); }
		public TerminalNode CACHE() { return getToken(SqlBaseParser.CACHE, 0); }
		public TerminalNode CALLED() { return getToken(SqlBaseParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(SqlBaseParser.CASCADE, 0); }
		public TerminalNode CATALOG() { return getToken(SqlBaseParser.CATALOG, 0); }
		public TerminalNode CATALOGS() { return getToken(SqlBaseParser.CATALOGS, 0); }
		public TerminalNode CHANGE() { return getToken(SqlBaseParser.CHANGE, 0); }
		public TerminalNode CHAR() { return getToken(SqlBaseParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(SqlBaseParser.CHARACTER, 0); }
		public TerminalNode CLEAR() { return getToken(SqlBaseParser.CLEAR, 0); }
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public TerminalNode CLUSTERED() { return getToken(SqlBaseParser.CLUSTERED, 0); }
		public TerminalNode CODEGEN() { return getToken(SqlBaseParser.CODEGEN, 0); }
		public TerminalNode COLLECTION() { return getToken(SqlBaseParser.COLLECTION, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(SqlBaseParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(SqlBaseParser.COMPACT, 0); }
		public TerminalNode COMPACTIONS() { return getToken(SqlBaseParser.COMPACTIONS, 0); }
		public TerminalNode COMPENSATION() { return getToken(SqlBaseParser.COMPENSATION, 0); }
		public TerminalNode COMPUTE() { return getToken(SqlBaseParser.COMPUTE, 0); }
		public TerminalNode CONCATENATE() { return getToken(SqlBaseParser.CONCATENATE, 0); }
		public TerminalNode CONDITION() { return getToken(SqlBaseParser.CONDITION, 0); }
		public TerminalNode CONTAINS() { return getToken(SqlBaseParser.CONTAINS, 0); }
		public TerminalNode CONTINUE() { return getToken(SqlBaseParser.CONTINUE, 0); }
		public TerminalNode COST() { return getToken(SqlBaseParser.COST, 0); }
		public TerminalNode CUBE() { return getToken(SqlBaseParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public TerminalNode DATA() { return getToken(SqlBaseParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(SqlBaseParser.DATABASE, 0); }
		public TerminalNode DATABASES() { return getToken(SqlBaseParser.DATABASES, 0); }
		public TerminalNode DATE() { return getToken(SqlBaseParser.DATE, 0); }
		public TerminalNode DATEADD() { return getToken(SqlBaseParser.DATEADD, 0); }
		public TerminalNode DATE_ADD() { return getToken(SqlBaseParser.DATE_ADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(SqlBaseParser.DATEDIFF, 0); }
		public TerminalNode DATE_DIFF() { return getToken(SqlBaseParser.DATE_DIFF, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(SqlBaseParser.DAYS, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(SqlBaseParser.DAYOFYEAR, 0); }
		public TerminalNode DBPROPERTIES() { return getToken(SqlBaseParser.DBPROPERTIES, 0); }
		public TerminalNode DEC() { return getToken(SqlBaseParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(SqlBaseParser.DECIMAL, 0); }
		public TerminalNode DECLARE() { return getToken(SqlBaseParser.DECLARE, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public TerminalNode DEFINED() { return getToken(SqlBaseParser.DEFINED, 0); }
		public TerminalNode DEFINER() { return getToken(SqlBaseParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode DELIMITED() { return getToken(SqlBaseParser.DELIMITED, 0); }
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(SqlBaseParser.DETERMINISTIC, 0); }
		public TerminalNode DFS() { return getToken(SqlBaseParser.DFS, 0); }
		public TerminalNode DIRECTORIES() { return getToken(SqlBaseParser.DIRECTORIES, 0); }
		public TerminalNode DIRECTORY() { return getToken(SqlBaseParser.DIRECTORY, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public TerminalNode DIV() { return getToken(SqlBaseParser.DIV, 0); }
		public TerminalNode DO() { return getToken(SqlBaseParser.DO, 0); }
		public TerminalNode DOUBLE() { return getToken(SqlBaseParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode ELSEIF() { return getToken(SqlBaseParser.ELSEIF, 0); }
		public TerminalNode ENFORCED() { return getToken(SqlBaseParser.ENFORCED, 0); }
		public TerminalNode ESCAPED() { return getToken(SqlBaseParser.ESCAPED, 0); }
		public TerminalNode EVOLUTION() { return getToken(SqlBaseParser.EVOLUTION, 0); }
		public TerminalNode EXCHANGE() { return getToken(SqlBaseParser.EXCHANGE, 0); }
		public TerminalNode EXCLUDE() { return getToken(SqlBaseParser.EXCLUDE, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode EXIT() { return getToken(SqlBaseParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(SqlBaseParser.EXPLAIN, 0); }
		public TerminalNode EXPORT() { return getToken(SqlBaseParser.EXPORT, 0); }
		public TerminalNode EXTEND() { return getToken(SqlBaseParser.EXTEND, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode EXTERNAL() { return getToken(SqlBaseParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(SqlBaseParser.EXTRACT, 0); }
		public TerminalNode FIELDS() { return getToken(SqlBaseParser.FIELDS, 0); }
		public TerminalNode FILEFORMAT() { return getToken(SqlBaseParser.FILEFORMAT, 0); }
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public TerminalNode FLOAT() { return getToken(SqlBaseParser.FLOAT, 0); }
		public TerminalNode FLOW() { return getToken(SqlBaseParser.FLOW, 0); }
		public TerminalNode FOLLOWING() { return getToken(SqlBaseParser.FOLLOWING, 0); }
		public TerminalNode FORMAT() { return getToken(SqlBaseParser.FORMAT, 0); }
		public TerminalNode FORMATTED() { return getToken(SqlBaseParser.FORMATTED, 0); }
		public TerminalNode FOUND() { return getToken(SqlBaseParser.FOUND, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlBaseParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(SqlBaseParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlBaseParser.GLOBAL, 0); }
		public TerminalNode GROUPING() { return getToken(SqlBaseParser.GROUPING, 0); }
		public TerminalNode HANDLER() { return getToken(SqlBaseParser.HANDLER, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(SqlBaseParser.HOURS, 0); }
		public TerminalNode IDENTIFIER_KW() { return getToken(SqlBaseParser.IDENTIFIER_KW, 0); }
		public TerminalNode IDENTITY() { return getToken(SqlBaseParser.IDENTITY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlBaseParser.IMMEDIATE, 0); }
		public TerminalNode IMPORT() { return getToken(SqlBaseParser.IMPORT, 0); }
		public TerminalNode INCLUDE() { return getToken(SqlBaseParser.INCLUDE, 0); }
		public TerminalNode INCREMENT() { return getToken(SqlBaseParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(SqlBaseParser.INDEXES, 0); }
		public TerminalNode INPATH() { return getToken(SqlBaseParser.INPATH, 0); }
		public TerminalNode INPUT() { return getToken(SqlBaseParser.INPUT, 0); }
		public TerminalNode INPUTFORMAT() { return getToken(SqlBaseParser.INPUTFORMAT, 0); }
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode INT() { return getToken(SqlBaseParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(SqlBaseParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode INVOKER() { return getToken(SqlBaseParser.INVOKER, 0); }
		public TerminalNode ITEMS() { return getToken(SqlBaseParser.ITEMS, 0); }
		public TerminalNode ITERATE() { return getToken(SqlBaseParser.ITERATE, 0); }
		public TerminalNode JSON() { return getToken(SqlBaseParser.JSON, 0); }
		public TerminalNode KEY() { return getToken(SqlBaseParser.KEY, 0); }
		public TerminalNode KEYS() { return getToken(SqlBaseParser.KEYS, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlBaseParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(SqlBaseParser.LAST, 0); }
		public TerminalNode LAZY() { return getToken(SqlBaseParser.LAZY, 0); }
		public TerminalNode LEAVE() { return getToken(SqlBaseParser.LEAVE, 0); }
		public TerminalNode LEVEL() { return getToken(SqlBaseParser.LEVEL, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(SqlBaseParser.ILIKE, 0); }
		public TerminalNode LIMIT() { return getToken(SqlBaseParser.LIMIT, 0); }
		public TerminalNode LINES() { return getToken(SqlBaseParser.LINES, 0); }
		public TerminalNode LIST() { return getToken(SqlBaseParser.LIST, 0); }
		public TerminalNode LOAD() { return getToken(SqlBaseParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(SqlBaseParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(SqlBaseParser.LOCK, 0); }
		public TerminalNode LOCKS() { return getToken(SqlBaseParser.LOCKS, 0); }
		public TerminalNode LOGICAL() { return getToken(SqlBaseParser.LOGICAL, 0); }
		public TerminalNode LONG() { return getToken(SqlBaseParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(SqlBaseParser.LOOP, 0); }
		public TerminalNode MACRO() { return getToken(SqlBaseParser.MACRO, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SqlBaseParser.MATERIALIZED, 0); }
		public TerminalNode MAX() { return getToken(SqlBaseParser.MAX, 0); }
		public TerminalNode MERGE() { return getToken(SqlBaseParser.MERGE, 0); }
		public TerminalNode MICROSECOND() { return getToken(SqlBaseParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(SqlBaseParser.MICROSECONDS, 0); }
		public TerminalNode MILLISECOND() { return getToken(SqlBaseParser.MILLISECOND, 0); }
		public TerminalNode MILLISECONDS() { return getToken(SqlBaseParser.MILLISECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(SqlBaseParser.MINUTES, 0); }
		public TerminalNode MODIFIES() { return getToken(SqlBaseParser.MODIFIES, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(SqlBaseParser.MONTHS, 0); }
		public TerminalNode MSCK() { return getToken(SqlBaseParser.MSCK, 0); }
		public TerminalNode NAME() { return getToken(SqlBaseParser.NAME, 0); }
		public TerminalNode NAMESPACE() { return getToken(SqlBaseParser.NAMESPACE, 0); }
		public TerminalNode NAMESPACES() { return getToken(SqlBaseParser.NAMESPACES, 0); }
		public TerminalNode NANOSECOND() { return getToken(SqlBaseParser.NANOSECOND, 0); }
		public TerminalNode NANOSECONDS() { return getToken(SqlBaseParser.NANOSECONDS, 0); }
		public TerminalNode NO() { return getToken(SqlBaseParser.NO, 0); }
		public TerminalNode NONE() { return getToken(SqlBaseParser.NONE, 0); }
		public TerminalNode NORELY() { return getToken(SqlBaseParser.NORELY, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode NUMERIC() { return getToken(SqlBaseParser.NUMERIC, 0); }
		public TerminalNode OF() { return getToken(SqlBaseParser.OF, 0); }
		public TerminalNode OPTION() { return getToken(SqlBaseParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public TerminalNode OUT() { return getToken(SqlBaseParser.OUT, 0); }
		public TerminalNode OUTPUTFORMAT() { return getToken(SqlBaseParser.OUTPUTFORMAT, 0); }
		public TerminalNode OVER() { return getToken(SqlBaseParser.OVER, 0); }
		public TerminalNode OVERLAY() { return getToken(SqlBaseParser.OVERLAY, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode PARTITIONED() { return getToken(SqlBaseParser.PARTITIONED, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public TerminalNode PERCENTLIT() { return getToken(SqlBaseParser.PERCENTLIT, 0); }
		public TerminalNode PIVOT() { return getToken(SqlBaseParser.PIVOT, 0); }
		public TerminalNode PLACING() { return getToken(SqlBaseParser.PLACING, 0); }
		public TerminalNode POSITION() { return getToken(SqlBaseParser.POSITION, 0); }
		public TerminalNode PRECEDING() { return getToken(SqlBaseParser.PRECEDING, 0); }
		public TerminalNode PRINCIPALS() { return getToken(SqlBaseParser.PRINCIPALS, 0); }
		public TerminalNode PROCEDURE() { return getToken(SqlBaseParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(SqlBaseParser.PROCEDURES, 0); }
		public TerminalNode PROPERTIES() { return getToken(SqlBaseParser.PROPERTIES, 0); }
		public TerminalNode PURGE() { return getToken(SqlBaseParser.PURGE, 0); }
		public TerminalNode QUARTER() { return getToken(SqlBaseParser.QUARTER, 0); }
		public TerminalNode QUERY() { return getToken(SqlBaseParser.QUERY, 0); }
		public TerminalNode RANGE() { return getToken(SqlBaseParser.RANGE, 0); }
		public TerminalNode READS() { return getToken(SqlBaseParser.READS, 0); }
		public TerminalNode REAL() { return getToken(SqlBaseParser.REAL, 0); }
		public TerminalNode RECORDREADER() { return getToken(SqlBaseParser.RECORDREADER, 0); }
		public TerminalNode RECORDWRITER() { return getToken(SqlBaseParser.RECORDWRITER, 0); }
		public TerminalNode RECOVER() { return getToken(SqlBaseParser.RECOVER, 0); }
		public TerminalNode RECURSION() { return getToken(SqlBaseParser.RECURSION, 0); }
		public TerminalNode REDUCE() { return getToken(SqlBaseParser.REDUCE, 0); }
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public TerminalNode RELY() { return getToken(SqlBaseParser.RELY, 0); }
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode REPAIR() { return getToken(SqlBaseParser.REPAIR, 0); }
		public TerminalNode REPEAT() { return getToken(SqlBaseParser.REPEAT, 0); }
		public TerminalNode REPEATABLE() { return getToken(SqlBaseParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode RESET() { return getToken(SqlBaseParser.RESET, 0); }
		public TerminalNode RESPECT() { return getToken(SqlBaseParser.RESPECT, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlBaseParser.RESTRICT, 0); }
		public TerminalNode RETURN() { return getToken(SqlBaseParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(SqlBaseParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(SqlBaseParser.REVOKE, 0); }
		public TerminalNode RLIKE() { return getToken(SqlBaseParser.RLIKE, 0); }
		public TerminalNode ROLE() { return getToken(SqlBaseParser.ROLE, 0); }
		public TerminalNode ROLES() { return getToken(SqlBaseParser.ROLES, 0); }
		public TerminalNode ROLLBACK() { return getToken(SqlBaseParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(SqlBaseParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(SqlBaseParser.ROWS, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlBaseParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(SqlBaseParser.SCHEMAS, 0); }
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(SqlBaseParser.SECONDS, 0); }
		public TerminalNode SECURITY() { return getToken(SqlBaseParser.SECURITY, 0); }
		public TerminalNode SEMI() { return getToken(SqlBaseParser.SEMI, 0); }
		public TerminalNode SEPARATED() { return getToken(SqlBaseParser.SEPARATED, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode SETMINUS() { return getToken(SqlBaseParser.SETMINUS, 0); }
		public TerminalNode SETS() { return getToken(SqlBaseParser.SETS, 0); }
		public TerminalNode SHORT() { return getToken(SqlBaseParser.SHORT, 0); }
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode SINGLE() { return getToken(SqlBaseParser.SINGLE, 0); }
		public TerminalNode SKEWED() { return getToken(SqlBaseParser.SKEWED, 0); }
		public TerminalNode SMALLINT() { return getToken(SqlBaseParser.SMALLINT, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public TerminalNode SORTED() { return getToken(SqlBaseParser.SORTED, 0); }
		public TerminalNode SOURCE() { return getToken(SqlBaseParser.SOURCE, 0); }
		public TerminalNode SPECIFIC() { return getToken(SqlBaseParser.SPECIFIC, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(SqlBaseParser.SQLEXCEPTION, 0); }
		public TerminalNode SQLSTATE() { return getToken(SqlBaseParser.SQLSTATE, 0); }
		public TerminalNode START() { return getToken(SqlBaseParser.START, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlBaseParser.STATISTICS, 0); }
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode STRATIFY() { return getToken(SqlBaseParser.STRATIFY, 0); }
		public TerminalNode STRING() { return getToken(SqlBaseParser.STRING, 0); }
		public TerminalNode STRUCT() { return getToken(SqlBaseParser.STRUCT, 0); }
		public TerminalNode STREAM() { return getToken(SqlBaseParser.STREAM, 0); }
		public TerminalNode STREAMING() { return getToken(SqlBaseParser.STREAMING, 0); }
		public TerminalNode SUBSTR() { return getToken(SqlBaseParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SqlBaseParser.SUBSTRING, 0); }
		public TerminalNode SYNC() { return getToken(SqlBaseParser.SYNC, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(SqlBaseParser.SYSTEM_TIME, 0); }
		public TerminalNode SYSTEM_VERSION() { return getToken(SqlBaseParser.SYSTEM_VERSION, 0); }
		public TerminalNode TABLES() { return getToken(SqlBaseParser.TABLES, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(SqlBaseParser.TABLESAMPLE, 0); }
		public TerminalNode TARGET() { return getToken(SqlBaseParser.TARGET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode TERMINATED() { return getToken(SqlBaseParser.TERMINATED, 0); }
		public TerminalNode TIMEDIFF() { return getToken(SqlBaseParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlBaseParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ() { return getToken(SqlBaseParser.TIMESTAMP_LTZ, 0); }
		public TerminalNode TIMESTAMP_NTZ() { return getToken(SqlBaseParser.TIMESTAMP_NTZ, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(SqlBaseParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(SqlBaseParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TINYINT() { return getToken(SqlBaseParser.TINYINT, 0); }
		public TerminalNode TOUCH() { return getToken(SqlBaseParser.TOUCH, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlBaseParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONS() { return getToken(SqlBaseParser.TRANSACTIONS, 0); }
		public TerminalNode TRANSFORM() { return getToken(SqlBaseParser.TRANSFORM, 0); }
		public TerminalNode TRIM() { return getToken(SqlBaseParser.TRIM, 0); }
		public TerminalNode TRUE() { return getToken(SqlBaseParser.TRUE, 0); }
		public TerminalNode TRUNCATE() { return getToken(SqlBaseParser.TRUNCATE, 0); }
		public TerminalNode TRY_CAST() { return getToken(SqlBaseParser.TRY_CAST, 0); }
		public TerminalNode TYPE() { return getToken(SqlBaseParser.TYPE, 0); }
		public TerminalNode UNARCHIVE() { return getToken(SqlBaseParser.UNARCHIVE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SqlBaseParser.UNBOUNDED, 0); }
		public TerminalNode UNCACHE() { return getToken(SqlBaseParser.UNCACHE, 0); }
		public TerminalNode UNLOCK() { return getToken(SqlBaseParser.UNLOCK, 0); }
		public TerminalNode UNPIVOT() { return getToken(SqlBaseParser.UNPIVOT, 0); }
		public TerminalNode UNSET() { return getToken(SqlBaseParser.UNSET, 0); }
		public TerminalNode UNTIL() { return getToken(SqlBaseParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public TerminalNode USE() { return getToken(SqlBaseParser.USE, 0); }
		public TerminalNode VALUE() { return getToken(SqlBaseParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(SqlBaseParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(SqlBaseParser.VARCHAR, 0); }
		public TerminalNode VAR() { return getToken(SqlBaseParser.VAR, 0); }
		public TerminalNode VARIABLE() { return getToken(SqlBaseParser.VARIABLE, 0); }
		public TerminalNode VARIANT() { return getToken(SqlBaseParser.VARIANT, 0); }
		public TerminalNode VERSION() { return getToken(SqlBaseParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(SqlBaseParser.VIEWS, 0); }
		public TerminalNode VOID() { return getToken(SqlBaseParser.VOID, 0); }
		public TerminalNode WEEK() { return getToken(SqlBaseParser.WEEK, 0); }
		public TerminalNode WEEKS() { return getToken(SqlBaseParser.WEEKS, 0); }
		public TerminalNode WHILE() { return getToken(SqlBaseParser.WHILE, 0); }
		public TerminalNode WINDOW() { return getToken(SqlBaseParser.WINDOW, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlBaseParser.WITHOUT, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(SqlBaseParser.YEARS, 0); }
		public TerminalNode ZONE() { return getToken(SqlBaseParser.ZONE, 0); }
		public AnsiNonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ansiNonReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterAnsiNonReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitAnsiNonReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitAnsiNonReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnsiNonReservedContext ansiNonReserved() throws RecognitionException {
		AnsiNonReservedContext _localctx = new AnsiNonReservedContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_ansiNonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4835);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALTER) | (1L << ALWAYS) | (1L << ANALYZE) | (1L << ANTI) | (1L << ANY_VALUE) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << ATOMIC) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BIGINT) | (1L << BINARY) | (1L << BINDING) | (1L << BOOLEAN) | (1L << BUCKET) | (1L << BUCKETS) | (1L << BY) | (1L << BYTE) | (1L << CACHE) | (1L << CALLED) | (1L << CASCADE) | (1L << CATALOG) | (1L << CATALOGS) | (1L << CHANGE) | (1L << CHAR) | (1L << CHARACTER) | (1L << CLEAR) | (1L << CLUSTER) | (1L << CLUSTERED) | (1L << CODEGEN) | (1L << COLLECTION) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMPACT) | (1L << COMPACTIONS) | (1L << COMPENSATION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPUTE - 64)) | (1L << (CONCATENATE - 64)) | (1L << (CONDITION - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTINUE - 64)) | (1L << (COST - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (DAY - 64)) | (1L << (DAYS - 64)) | (1L << (DAYOFYEAR - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATABASES - 64)) | (1L << (DATEADD - 64)) | (1L << (DATE_ADD - 64)) | (1L << (DATEDIFF - 64)) | (1L << (DATE_DIFF - 64)) | (1L << (DBPROPERTIES - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DELIMITED - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIBE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DFS - 64)) | (1L << (DIRECTORIES - 64)) | (1L << (DIRECTORY - 64)) | (1L << (DISTRIBUTE - 64)) | (1L << (DIV - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (ELSEIF - 64)) | (1L << (ENFORCED - 64)) | (1L << (ESCAPED - 64)) | (1L << (EVOLUTION - 64)) | (1L << (EXCHANGE - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXIT - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXPORT - 64)) | (1L << (EXTEND - 64)) | (1L << (EXTENDED - 64)) | (1L << (EXTERNAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXTRACT - 128)) | (1L << (FIELDS - 128)) | (1L << (FILEFORMAT - 128)) | (1L << (FIRST - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOW - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FORMAT - 128)) | (1L << (FORMATTED - 128)) | (1L << (FOUND - 128)) | (1L << (FUNCTION - 128)) | (1L << (FUNCTIONS - 128)) | (1L << (GENERATED - 128)) | (1L << (GLOBAL - 128)) | (1L << (GROUPING - 128)) | (1L << (HANDLER - 128)) | (1L << (BINARY_HEX - 128)) | (1L << (HOUR - 128)) | (1L << (HOURS - 128)) | (1L << (IDENTIFIER_KW - 128)) | (1L << (IDENTITY - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IMPORT - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXES - 128)) | (1L << (INPATH - 128)) | (1L << (INPUT - 128)) | (1L << (INPUTFORMAT - 128)) | (1L << (INSERT - 128)) | (1L << (INTERVAL - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INVOKER - 128)) | (1L << (ITEMS - 128)) | (1L << (ITERATE - 128)) | (1L << (JSON - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LANGUAGE - 128)) | (1L << (LAST - 128)) | (1L << (LAZY - 128)) | (1L << (LEAVE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LEVEL - 193)) | (1L << (LIKE - 193)) | (1L << (ILIKE - 193)) | (1L << (LIMIT - 193)) | (1L << (LINES - 193)) | (1L << (LIST - 193)) | (1L << (LOAD - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCATION - 193)) | (1L << (LOCK - 193)) | (1L << (LOCKS - 193)) | (1L << (LOGICAL - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MACRO - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MATERIALIZED - 193)) | (1L << (MAX - 193)) | (1L << (MERGE - 193)) | (1L << (MICROSECOND - 193)) | (1L << (MICROSECONDS - 193)) | (1L << (MILLISECOND - 193)) | (1L << (MILLISECONDS - 193)) | (1L << (MINUTE - 193)) | (1L << (MINUTES - 193)) | (1L << (MODIFIES - 193)) | (1L << (MONTH - 193)) | (1L << (MONTHS - 193)) | (1L << (MSCK - 193)) | (1L << (NAME - 193)) | (1L << (NAMESPACE - 193)) | (1L << (NAMESPACES - 193)) | (1L << (NANOSECOND - 193)) | (1L << (NANOSECONDS - 193)) | (1L << (NO - 193)) | (1L << (NONE - 193)) | (1L << (NULLS - 193)) | (1L << (NUMERIC - 193)) | (1L << (NORELY - 193)) | (1L << (OF - 193)) | (1L << (OPTION - 193)) | (1L << (OPTIONS - 193)) | (1L << (OUT - 193)) | (1L << (OUTPUTFORMAT - 193)) | (1L << (OVER - 193)) | (1L << (OVERLAY - 193)) | (1L << (OVERWRITE - 193)) | (1L << (PARTITION - 193)) | (1L << (PARTITIONED - 193)) | (1L << (PARTITIONS - 193)) | (1L << (PERCENTLIT - 193)) | (1L << (PIVOT - 193)) | (1L << (PLACING - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (POSITION - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRINCIPALS - 257)) | (1L << (PROCEDURE - 257)) | (1L << (PROCEDURES - 257)) | (1L << (PROPERTIES - 257)) | (1L << (PURGE - 257)) | (1L << (QUARTER - 257)) | (1L << (QUERY - 257)) | (1L << (RANGE - 257)) | (1L << (READS - 257)) | (1L << (REAL - 257)) | (1L << (RECORDREADER - 257)) | (1L << (RECORDWRITER - 257)) | (1L << (RECOVER - 257)) | (1L << (RECURSION - 257)) | (1L << (REDUCE - 257)) | (1L << (REFRESH - 257)) | (1L << (RELY - 257)) | (1L << (RENAME - 257)) | (1L << (REPAIR - 257)) | (1L << (REPEAT - 257)) | (1L << (REPEATABLE - 257)) | (1L << (REPLACE - 257)) | (1L << (RESET - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT - 257)) | (1L << (RETURN - 257)) | (1L << (RETURNS - 257)) | (1L << (REVOKE - 257)) | (1L << (RLIKE - 257)) | (1L << (ROLE - 257)) | (1L << (ROLES - 257)) | (1L << (ROLLBACK - 257)) | (1L << (ROLLUP - 257)) | (1L << (ROW - 257)) | (1L << (ROWS - 257)) | (1L << (SECOND - 257)) | (1L << (SECONDS - 257)) | (1L << (SCHEMA - 257)) | (1L << (SCHEMAS - 257)) | (1L << (SECURITY - 257)) | (1L << (SEMI - 257)) | (1L << (SEPARATED - 257)) | (1L << (SERDE - 257)) | (1L << (SERDEPROPERTIES - 257)) | (1L << (SET - 257)) | (1L << (SETMINUS - 257)) | (1L << (SETS - 257)) | (1L << (SHORT - 257)) | (1L << (SHOW - 257)) | (1L << (SINGLE - 257)) | (1L << (SKEWED - 257)) | (1L << (SMALLINT - 257)) | (1L << (SORT - 257)) | (1L << (SORTED - 257)) | (1L << (SOURCE - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (SPECIFIC - 321)) | (1L << (SQLEXCEPTION - 321)) | (1L << (SQLSTATE - 321)) | (1L << (START - 321)) | (1L << (STATISTICS - 321)) | (1L << (STORED - 321)) | (1L << (STRATIFY - 321)) | (1L << (STREAM - 321)) | (1L << (STREAMING - 321)) | (1L << (STRING - 321)) | (1L << (STRUCT - 321)) | (1L << (SUBSTR - 321)) | (1L << (SUBSTRING - 321)) | (1L << (SYNC - 321)) | (1L << (SYSTEM_TIME - 321)) | (1L << (SYSTEM_VERSION - 321)) | (1L << (TABLES - 321)) | (1L << (TABLESAMPLE - 321)) | (1L << (TARGET - 321)) | (1L << (TBLPROPERTIES - 321)) | (1L << (TEMPORARY - 321)) | (1L << (TERMINATED - 321)) | (1L << (TIMEDIFF - 321)) | (1L << (TIMESTAMP - 321)) | (1L << (TIMESTAMP_LTZ - 321)) | (1L << (TIMESTAMP_NTZ - 321)) | (1L << (TIMESTAMPADD - 321)) | (1L << (TIMESTAMPDIFF - 321)) | (1L << (TINYINT - 321)) | (1L << (TOUCH - 321)) | (1L << (TRANSACTION - 321)) | (1L << (TRANSACTIONS - 321)) | (1L << (TRANSFORM - 321)) | (1L << (TRIM - 321)) | (1L << (TRUE - 321)) | (1L << (TRUNCATE - 321)) | (1L << (TRY_CAST - 321)) | (1L << (TYPE - 321)) | (1L << (UNARCHIVE - 321)) | (1L << (UNBOUNDED - 321)) | (1L << (UNCACHE - 321)) | (1L << (UNLOCK - 321)) | (1L << (UNPIVOT - 321)) | (1L << (UNSET - 321)) | (1L << (UNTIL - 321)) | (1L << (UPDATE - 321)) | (1L << (USE - 321)) | (1L << (VALUE - 321)) | (1L << (VALUES - 321)) | (1L << (VARCHAR - 321)) | (1L << (VAR - 321)) | (1L << (VARIABLE - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (VARIANT - 385)) | (1L << (VERSION - 385)) | (1L << (VIEW - 385)) | (1L << (VIEWS - 385)) | (1L << (VOID - 385)) | (1L << (WEEK - 385)) | (1L << (WEEKS - 385)) | (1L << (WHILE - 385)) | (1L << (WINDOW - 385)) | (1L << (WITHOUT - 385)) | (1L << (YEAR - 385)) | (1L << (YEARS - 385)) | (1L << (ZONE - 385)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StrictNonReservedContext extends ParserRuleContext {
		public TerminalNode ANTI() { return getToken(SqlBaseParser.ANTI, 0); }
		public TerminalNode CROSS() { return getToken(SqlBaseParser.CROSS, 0); }
		public TerminalNode EXCEPT() { return getToken(SqlBaseParser.EXCEPT, 0); }
		public TerminalNode FULL() { return getToken(SqlBaseParser.FULL, 0); }
		public TerminalNode INNER() { return getToken(SqlBaseParser.INNER, 0); }
		public TerminalNode INTERSECT() { return getToken(SqlBaseParser.INTERSECT, 0); }
		public TerminalNode JOIN() { return getToken(SqlBaseParser.JOIN, 0); }
		public TerminalNode LATERAL() { return getToken(SqlBaseParser.LATERAL, 0); }
		public TerminalNode LEFT() { return getToken(SqlBaseParser.LEFT, 0); }
		public TerminalNode NATURAL() { return getToken(SqlBaseParser.NATURAL, 0); }
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public TerminalNode RIGHT() { return getToken(SqlBaseParser.RIGHT, 0); }
		public TerminalNode SEMI() { return getToken(SqlBaseParser.SEMI, 0); }
		public TerminalNode SETMINUS() { return getToken(SqlBaseParser.SETMINUS, 0); }
		public TerminalNode UNION() { return getToken(SqlBaseParser.UNION, 0); }
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public StrictNonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_strictNonReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterStrictNonReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitStrictNonReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitStrictNonReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StrictNonReservedContext strictNonReserved() throws RecognitionException {
		StrictNonReservedContext _localctx = new StrictNonReservedContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_strictNonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4837);
			_la = _input.LA(1);
			if ( !(_la==ANTI || _la==CROSS || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (EXCEPT - 118)) | (1L << (FULL - 118)) | (1L << (INNER - 118)) | (1L << (INTERSECT - 118)))) != 0) || ((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (JOIN - 182)) | (1L << (LATERAL - 182)) | (1L << (LEFT - 182)) | (1L << (NATURAL - 182)) | (1L << (ON - 182)))) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & ((1L << (RIGHT - 290)) | (1L << (SEMI - 290)) | (1L << (SETMINUS - 290)))) != 0) || _la==UNION || _la==USING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonReservedContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(SqlBaseParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlBaseParser.AGGREGATE, 0); }
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlBaseParser.ALWAYS, 0); }
		public TerminalNode ANALYZE() { return getToken(SqlBaseParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public TerminalNode ANY() { return getToken(SqlBaseParser.ANY, 0); }
		public TerminalNode ANY_VALUE() { return getToken(SqlBaseParser.ANY_VALUE, 0); }
		public TerminalNode ARCHIVE() { return getToken(SqlBaseParser.ARCHIVE, 0); }
		public TerminalNode ARRAY() { return getToken(SqlBaseParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode ASC() { return getToken(SqlBaseParser.ASC, 0); }
		public TerminalNode AT() { return getToken(SqlBaseParser.AT, 0); }
		public TerminalNode ATOMIC() { return getToken(SqlBaseParser.ATOMIC, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SqlBaseParser.AUTHORIZATION, 0); }
		public TerminalNode BEGIN() { return getToken(SqlBaseParser.BEGIN, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlBaseParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(SqlBaseParser.BIGINT, 0); }
		public TerminalNode BINARY() { return getToken(SqlBaseParser.BINARY, 0); }
		public TerminalNode BINARY_HEX() { return getToken(SqlBaseParser.BINARY_HEX, 0); }
		public TerminalNode BINDING() { return getToken(SqlBaseParser.BINDING, 0); }
		public TerminalNode BOOLEAN() { return getToken(SqlBaseParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(SqlBaseParser.BOTH, 0); }
		public TerminalNode BUCKET() { return getToken(SqlBaseParser.BUCKET, 0); }
		public TerminalNode BUCKETS() { return getToken(SqlBaseParser.BUCKETS, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode BYTE() { return getToken(SqlBaseParser.BYTE, 0); }
		public TerminalNode CACHE() { return getToken(SqlBaseParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(SqlBaseParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(SqlBaseParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(SqlBaseParser.CASCADE, 0); }
		public TerminalNode CASE() { return getToken(SqlBaseParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(SqlBaseParser.CAST, 0); }
		public TerminalNode CATALOG() { return getToken(SqlBaseParser.CATALOG, 0); }
		public TerminalNode CATALOGS() { return getToken(SqlBaseParser.CATALOGS, 0); }
		public TerminalNode CHANGE() { return getToken(SqlBaseParser.CHANGE, 0); }
		public TerminalNode CHAR() { return getToken(SqlBaseParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(SqlBaseParser.CHARACTER, 0); }
		public TerminalNode CHECK() { return getToken(SqlBaseParser.CHECK, 0); }
		public TerminalNode CLEAR() { return getToken(SqlBaseParser.CLEAR, 0); }
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public TerminalNode CLUSTERED() { return getToken(SqlBaseParser.CLUSTERED, 0); }
		public TerminalNode CODEGEN() { return getToken(SqlBaseParser.CODEGEN, 0); }
		public TerminalNode COLLATE() { return getToken(SqlBaseParser.COLLATE, 0); }
		public TerminalNode COLLATION() { return getToken(SqlBaseParser.COLLATION, 0); }
		public TerminalNode COLLECTION() { return getToken(SqlBaseParser.COLLECTION, 0); }
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(SqlBaseParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(SqlBaseParser.COMPACT, 0); }
		public TerminalNode COMPACTIONS() { return getToken(SqlBaseParser.COMPACTIONS, 0); }
		public TerminalNode COMPENSATION() { return getToken(SqlBaseParser.COMPENSATION, 0); }
		public TerminalNode COMPUTE() { return getToken(SqlBaseParser.COMPUTE, 0); }
		public TerminalNode CONCATENATE() { return getToken(SqlBaseParser.CONCATENATE, 0); }
		public TerminalNode CONDITION() { return getToken(SqlBaseParser.CONDITION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlBaseParser.CONSTRAINT, 0); }
		public TerminalNode CONTAINS() { return getToken(SqlBaseParser.CONTAINS, 0); }
		public TerminalNode CONTINUE() { return getToken(SqlBaseParser.CONTINUE, 0); }
		public TerminalNode COST() { return getToken(SqlBaseParser.COST, 0); }
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode CUBE() { return getToken(SqlBaseParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(SqlBaseParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SqlBaseParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SqlBaseParser.CURRENT_USER, 0); }
		public TerminalNode DATA() { return getToken(SqlBaseParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(SqlBaseParser.DATABASE, 0); }
		public TerminalNode DATABASES() { return getToken(SqlBaseParser.DATABASES, 0); }
		public TerminalNode DATE() { return getToken(SqlBaseParser.DATE, 0); }
		public TerminalNode DATEADD() { return getToken(SqlBaseParser.DATEADD, 0); }
		public TerminalNode DATE_ADD() { return getToken(SqlBaseParser.DATE_ADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(SqlBaseParser.DATEDIFF, 0); }
		public TerminalNode DATE_DIFF() { return getToken(SqlBaseParser.DATE_DIFF, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(SqlBaseParser.DAYS, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(SqlBaseParser.DAYOFYEAR, 0); }
		public TerminalNode DBPROPERTIES() { return getToken(SqlBaseParser.DBPROPERTIES, 0); }
		public TerminalNode DEC() { return getToken(SqlBaseParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(SqlBaseParser.DECIMAL, 0); }
		public TerminalNode DECLARE() { return getToken(SqlBaseParser.DECLARE, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public TerminalNode DEFINED() { return getToken(SqlBaseParser.DEFINED, 0); }
		public TerminalNode DEFINER() { return getToken(SqlBaseParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode DELIMITED() { return getToken(SqlBaseParser.DELIMITED, 0); }
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(SqlBaseParser.DETERMINISTIC, 0); }
		public TerminalNode DFS() { return getToken(SqlBaseParser.DFS, 0); }
		public TerminalNode DIRECTORIES() { return getToken(SqlBaseParser.DIRECTORIES, 0); }
		public TerminalNode DIRECTORY() { return getToken(SqlBaseParser.DIRECTORY, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlBaseParser.DISTINCT, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public TerminalNode DIV() { return getToken(SqlBaseParser.DIV, 0); }
		public TerminalNode DO() { return getToken(SqlBaseParser.DO, 0); }
		public TerminalNode DOUBLE() { return getToken(SqlBaseParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public TerminalNode ELSEIF() { return getToken(SqlBaseParser.ELSEIF, 0); }
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public TerminalNode ENFORCED() { return getToken(SqlBaseParser.ENFORCED, 0); }
		public TerminalNode ESCAPE() { return getToken(SqlBaseParser.ESCAPE, 0); }
		public TerminalNode ESCAPED() { return getToken(SqlBaseParser.ESCAPED, 0); }
		public TerminalNode EVOLUTION() { return getToken(SqlBaseParser.EVOLUTION, 0); }
		public TerminalNode EXCHANGE() { return getToken(SqlBaseParser.EXCHANGE, 0); }
		public TerminalNode EXCLUDE() { return getToken(SqlBaseParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(SqlBaseParser.EXECUTE, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode EXIT() { return getToken(SqlBaseParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(SqlBaseParser.EXPLAIN, 0); }
		public TerminalNode EXPORT() { return getToken(SqlBaseParser.EXPORT, 0); }
		public TerminalNode EXTEND() { return getToken(SqlBaseParser.EXTEND, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode EXTERNAL() { return getToken(SqlBaseParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(SqlBaseParser.EXTRACT, 0); }
		public TerminalNode FALSE() { return getToken(SqlBaseParser.FALSE, 0); }
		public TerminalNode FETCH() { return getToken(SqlBaseParser.FETCH, 0); }
		public TerminalNode FILTER() { return getToken(SqlBaseParser.FILTER, 0); }
		public TerminalNode FIELDS() { return getToken(SqlBaseParser.FIELDS, 0); }
		public TerminalNode FILEFORMAT() { return getToken(SqlBaseParser.FILEFORMAT, 0); }
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public TerminalNode FLOAT() { return getToken(SqlBaseParser.FLOAT, 0); }
		public TerminalNode FLOW() { return getToken(SqlBaseParser.FLOW, 0); }
		public TerminalNode FOLLOWING() { return getToken(SqlBaseParser.FOLLOWING, 0); }
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlBaseParser.FOREIGN, 0); }
		public TerminalNode FORMAT() { return getToken(SqlBaseParser.FORMAT, 0); }
		public TerminalNode FORMATTED() { return getToken(SqlBaseParser.FORMATTED, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode FOUND() { return getToken(SqlBaseParser.FOUND, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlBaseParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(SqlBaseParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlBaseParser.GLOBAL, 0); }
		public TerminalNode GRANT() { return getToken(SqlBaseParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(SqlBaseParser.GROUP, 0); }
		public TerminalNode GROUPING() { return getToken(SqlBaseParser.GROUPING, 0); }
		public TerminalNode HANDLER() { return getToken(SqlBaseParser.HANDLER, 0); }
		public TerminalNode HAVING() { return getToken(SqlBaseParser.HAVING, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(SqlBaseParser.HOURS, 0); }
		public TerminalNode IDENTIFIER_KW() { return getToken(SqlBaseParser.IDENTIFIER_KW, 0); }
		public TerminalNode IDENTITY() { return getToken(SqlBaseParser.IDENTITY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlBaseParser.IMMEDIATE, 0); }
		public TerminalNode IMPORT() { return getToken(SqlBaseParser.IMPORT, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public TerminalNode INCLUDE() { return getToken(SqlBaseParser.INCLUDE, 0); }
		public TerminalNode INCREMENT() { return getToken(SqlBaseParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(SqlBaseParser.INDEXES, 0); }
		public TerminalNode INPATH() { return getToken(SqlBaseParser.INPATH, 0); }
		public TerminalNode INPUT() { return getToken(SqlBaseParser.INPUT, 0); }
		public TerminalNode INPUTFORMAT() { return getToken(SqlBaseParser.INPUTFORMAT, 0); }
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode INT() { return getToken(SqlBaseParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(SqlBaseParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public TerminalNode INVOKER() { return getToken(SqlBaseParser.INVOKER, 0); }
		public TerminalNode IS() { return getToken(SqlBaseParser.IS, 0); }
		public TerminalNode ITEMS() { return getToken(SqlBaseParser.ITEMS, 0); }
		public TerminalNode ITERATE() { return getToken(SqlBaseParser.ITERATE, 0); }
		public TerminalNode JSON() { return getToken(SqlBaseParser.JSON, 0); }
		public TerminalNode KEY() { return getToken(SqlBaseParser.KEY, 0); }
		public TerminalNode KEYS() { return getToken(SqlBaseParser.KEYS, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlBaseParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(SqlBaseParser.LAST, 0); }
		public TerminalNode LAZY() { return getToken(SqlBaseParser.LAZY, 0); }
		public TerminalNode LEADING() { return getToken(SqlBaseParser.LEADING, 0); }
		public TerminalNode LEAVE() { return getToken(SqlBaseParser.LEAVE, 0); }
		public TerminalNode LEVEL() { return getToken(SqlBaseParser.LEVEL, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public TerminalNode LONG() { return getToken(SqlBaseParser.LONG, 0); }
		public TerminalNode ILIKE() { return getToken(SqlBaseParser.ILIKE, 0); }
		public TerminalNode LIMIT() { return getToken(SqlBaseParser.LIMIT, 0); }
		public TerminalNode LINES() { return getToken(SqlBaseParser.LINES, 0); }
		public TerminalNode LIST() { return getToken(SqlBaseParser.LIST, 0); }
		public TerminalNode LOAD() { return getToken(SqlBaseParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(SqlBaseParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(SqlBaseParser.LOCK, 0); }
		public TerminalNode LOCKS() { return getToken(SqlBaseParser.LOCKS, 0); }
		public TerminalNode LOGICAL() { return getToken(SqlBaseParser.LOGICAL, 0); }
		public TerminalNode LOOP() { return getToken(SqlBaseParser.LOOP, 0); }
		public TerminalNode MACRO() { return getToken(SqlBaseParser.MACRO, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SqlBaseParser.MATERIALIZED, 0); }
		public TerminalNode MAX() { return getToken(SqlBaseParser.MAX, 0); }
		public TerminalNode MERGE() { return getToken(SqlBaseParser.MERGE, 0); }
		public TerminalNode MICROSECOND() { return getToken(SqlBaseParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(SqlBaseParser.MICROSECONDS, 0); }
		public TerminalNode MILLISECOND() { return getToken(SqlBaseParser.MILLISECOND, 0); }
		public TerminalNode MILLISECONDS() { return getToken(SqlBaseParser.MILLISECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(SqlBaseParser.MINUTES, 0); }
		public TerminalNode MODIFIES() { return getToken(SqlBaseParser.MODIFIES, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(SqlBaseParser.MONTHS, 0); }
		public TerminalNode MSCK() { return getToken(SqlBaseParser.MSCK, 0); }
		public TerminalNode NAME() { return getToken(SqlBaseParser.NAME, 0); }
		public TerminalNode NAMESPACE() { return getToken(SqlBaseParser.NAMESPACE, 0); }
		public TerminalNode NAMESPACES() { return getToken(SqlBaseParser.NAMESPACES, 0); }
		public TerminalNode NANOSECOND() { return getToken(SqlBaseParser.NANOSECOND, 0); }
		public TerminalNode NANOSECONDS() { return getToken(SqlBaseParser.NANOSECONDS, 0); }
		public TerminalNode NO() { return getToken(SqlBaseParser.NO, 0); }
		public TerminalNode NONE() { return getToken(SqlBaseParser.NONE, 0); }
		public TerminalNode NORELY() { return getToken(SqlBaseParser.NORELY, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode NUMERIC() { return getToken(SqlBaseParser.NUMERIC, 0); }
		public TerminalNode OF() { return getToken(SqlBaseParser.OF, 0); }
		public TerminalNode OFFSET() { return getToken(SqlBaseParser.OFFSET, 0); }
		public TerminalNode ONLY() { return getToken(SqlBaseParser.ONLY, 0); }
		public TerminalNode OPTION() { return getToken(SqlBaseParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public TerminalNode OUT() { return getToken(SqlBaseParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(SqlBaseParser.OUTER, 0); }
		public TerminalNode OUTPUTFORMAT() { return getToken(SqlBaseParser.OUTPUTFORMAT, 0); }
		public TerminalNode OVER() { return getToken(SqlBaseParser.OVER, 0); }
		public TerminalNode OVERLAPS() { return getToken(SqlBaseParser.OVERLAPS, 0); }
		public TerminalNode OVERLAY() { return getToken(SqlBaseParser.OVERLAY, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode PARTITIONED() { return getToken(SqlBaseParser.PARTITIONED, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public TerminalNode PERCENTLIT() { return getToken(SqlBaseParser.PERCENTLIT, 0); }
		public TerminalNode PIVOT() { return getToken(SqlBaseParser.PIVOT, 0); }
		public TerminalNode PLACING() { return getToken(SqlBaseParser.PLACING, 0); }
		public TerminalNode POSITION() { return getToken(SqlBaseParser.POSITION, 0); }
		public TerminalNode PRECEDING() { return getToken(SqlBaseParser.PRECEDING, 0); }
		public TerminalNode PRIMARY() { return getToken(SqlBaseParser.PRIMARY, 0); }
		public TerminalNode PRINCIPALS() { return getToken(SqlBaseParser.PRINCIPALS, 0); }
		public TerminalNode PROCEDURE() { return getToken(SqlBaseParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(SqlBaseParser.PROCEDURES, 0); }
		public TerminalNode PROPERTIES() { return getToken(SqlBaseParser.PROPERTIES, 0); }
		public TerminalNode PURGE() { return getToken(SqlBaseParser.PURGE, 0); }
		public TerminalNode QUARTER() { return getToken(SqlBaseParser.QUARTER, 0); }
		public TerminalNode QUERY() { return getToken(SqlBaseParser.QUERY, 0); }
		public TerminalNode RANGE() { return getToken(SqlBaseParser.RANGE, 0); }
		public TerminalNode READS() { return getToken(SqlBaseParser.READS, 0); }
		public TerminalNode REAL() { return getToken(SqlBaseParser.REAL, 0); }
		public TerminalNode RECORDREADER() { return getToken(SqlBaseParser.RECORDREADER, 0); }
		public TerminalNode RECORDWRITER() { return getToken(SqlBaseParser.RECORDWRITER, 0); }
		public TerminalNode RECOVER() { return getToken(SqlBaseParser.RECOVER, 0); }
		public TerminalNode RECURSION() { return getToken(SqlBaseParser.RECURSION, 0); }
		public TerminalNode RECURSIVE() { return getToken(SqlBaseParser.RECURSIVE, 0); }
		public TerminalNode REDUCE() { return getToken(SqlBaseParser.REDUCE, 0); }
		public TerminalNode REFERENCES() { return getToken(SqlBaseParser.REFERENCES, 0); }
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public TerminalNode RELY() { return getToken(SqlBaseParser.RELY, 0); }
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode REPAIR() { return getToken(SqlBaseParser.REPAIR, 0); }
		public TerminalNode REPEAT() { return getToken(SqlBaseParser.REPEAT, 0); }
		public TerminalNode REPEATABLE() { return getToken(SqlBaseParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode RESET() { return getToken(SqlBaseParser.RESET, 0); }
		public TerminalNode RESPECT() { return getToken(SqlBaseParser.RESPECT, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlBaseParser.RESTRICT, 0); }
		public TerminalNode RETURN() { return getToken(SqlBaseParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(SqlBaseParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(SqlBaseParser.REVOKE, 0); }
		public TerminalNode RLIKE() { return getToken(SqlBaseParser.RLIKE, 0); }
		public TerminalNode ROLE() { return getToken(SqlBaseParser.ROLE, 0); }
		public TerminalNode ROLES() { return getToken(SqlBaseParser.ROLES, 0); }
		public TerminalNode ROLLBACK() { return getToken(SqlBaseParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(SqlBaseParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(SqlBaseParser.ROWS, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlBaseParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(SqlBaseParser.SCHEMAS, 0); }
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(SqlBaseParser.SECONDS, 0); }
		public TerminalNode SECURITY() { return getToken(SqlBaseParser.SECURITY, 0); }
		public TerminalNode SELECT() { return getToken(SqlBaseParser.SELECT, 0); }
		public TerminalNode SEPARATED() { return getToken(SqlBaseParser.SEPARATED, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public TerminalNode SESSION_USER() { return getToken(SqlBaseParser.SESSION_USER, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode SETS() { return getToken(SqlBaseParser.SETS, 0); }
		public TerminalNode SHORT() { return getToken(SqlBaseParser.SHORT, 0); }
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode SINGLE() { return getToken(SqlBaseParser.SINGLE, 0); }
		public TerminalNode SKEWED() { return getToken(SqlBaseParser.SKEWED, 0); }
		public TerminalNode SMALLINT() { return getToken(SqlBaseParser.SMALLINT, 0); }
		public TerminalNode SOME() { return getToken(SqlBaseParser.SOME, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public TerminalNode SORTED() { return getToken(SqlBaseParser.SORTED, 0); }
		public TerminalNode SOURCE() { return getToken(SqlBaseParser.SOURCE, 0); }
		public TerminalNode SPECIFIC() { return getToken(SqlBaseParser.SPECIFIC, 0); }
		public TerminalNode SQL() { return getToken(SqlBaseParser.SQL, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(SqlBaseParser.SQLEXCEPTION, 0); }
		public TerminalNode SQLSTATE() { return getToken(SqlBaseParser.SQLSTATE, 0); }
		public TerminalNode START() { return getToken(SqlBaseParser.START, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlBaseParser.STATISTICS, 0); }
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode STRATIFY() { return getToken(SqlBaseParser.STRATIFY, 0); }
		public TerminalNode STREAM() { return getToken(SqlBaseParser.STREAM, 0); }
		public TerminalNode STREAMING() { return getToken(SqlBaseParser.STREAMING, 0); }
		public TerminalNode STRING() { return getToken(SqlBaseParser.STRING, 0); }
		public TerminalNode STRUCT() { return getToken(SqlBaseParser.STRUCT, 0); }
		public TerminalNode SUBSTR() { return getToken(SqlBaseParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SqlBaseParser.SUBSTRING, 0); }
		public TerminalNode SYNC() { return getToken(SqlBaseParser.SYNC, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(SqlBaseParser.SYSTEM_TIME, 0); }
		public TerminalNode SYSTEM_VERSION() { return getToken(SqlBaseParser.SYSTEM_VERSION, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(SqlBaseParser.TABLES, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(SqlBaseParser.TABLESAMPLE, 0); }
		public TerminalNode TARGET() { return getToken(SqlBaseParser.TARGET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode TERMINATED() { return getToken(SqlBaseParser.TERMINATED, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public TerminalNode TIME() { return getToken(SqlBaseParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(SqlBaseParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlBaseParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ() { return getToken(SqlBaseParser.TIMESTAMP_LTZ, 0); }
		public TerminalNode TIMESTAMP_NTZ() { return getToken(SqlBaseParser.TIMESTAMP_NTZ, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(SqlBaseParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(SqlBaseParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TINYINT() { return getToken(SqlBaseParser.TINYINT, 0); }
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public TerminalNode TOUCH() { return getToken(SqlBaseParser.TOUCH, 0); }
		public TerminalNode TRAILING() { return getToken(SqlBaseParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlBaseParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONS() { return getToken(SqlBaseParser.TRANSACTIONS, 0); }
		public TerminalNode TRANSFORM() { return getToken(SqlBaseParser.TRANSFORM, 0); }
		public TerminalNode TRIM() { return getToken(SqlBaseParser.TRIM, 0); }
		public TerminalNode TRUE() { return getToken(SqlBaseParser.TRUE, 0); }
		public TerminalNode TRUNCATE() { return getToken(SqlBaseParser.TRUNCATE, 0); }
		public TerminalNode TRY_CAST() { return getToken(SqlBaseParser.TRY_CAST, 0); }
		public TerminalNode TYPE() { return getToken(SqlBaseParser.TYPE, 0); }
		public TerminalNode UNARCHIVE() { return getToken(SqlBaseParser.UNARCHIVE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SqlBaseParser.UNBOUNDED, 0); }
		public TerminalNode UNCACHE() { return getToken(SqlBaseParser.UNCACHE, 0); }
		public TerminalNode UNIQUE() { return getToken(SqlBaseParser.UNIQUE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SqlBaseParser.UNKNOWN, 0); }
		public TerminalNode UNLOCK() { return getToken(SqlBaseParser.UNLOCK, 0); }
		public TerminalNode UNPIVOT() { return getToken(SqlBaseParser.UNPIVOT, 0); }
		public TerminalNode UNSET() { return getToken(SqlBaseParser.UNSET, 0); }
		public TerminalNode UNTIL() { return getToken(SqlBaseParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public TerminalNode USE() { return getToken(SqlBaseParser.USE, 0); }
		public TerminalNode USER() { return getToken(SqlBaseParser.USER, 0); }
		public TerminalNode VALUE() { return getToken(SqlBaseParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(SqlBaseParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(SqlBaseParser.VARCHAR, 0); }
		public TerminalNode VAR() { return getToken(SqlBaseParser.VAR, 0); }
		public TerminalNode VARIABLE() { return getToken(SqlBaseParser.VARIABLE, 0); }
		public TerminalNode VARIANT() { return getToken(SqlBaseParser.VARIANT, 0); }
		public TerminalNode VERSION() { return getToken(SqlBaseParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(SqlBaseParser.VIEWS, 0); }
		public TerminalNode VOID() { return getToken(SqlBaseParser.VOID, 0); }
		public TerminalNode WEEK() { return getToken(SqlBaseParser.WEEK, 0); }
		public TerminalNode WEEKS() { return getToken(SqlBaseParser.WEEKS, 0); }
		public TerminalNode WHILE() { return getToken(SqlBaseParser.WHILE, 0); }
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(SqlBaseParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(SqlBaseParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode WITHIN() { return getToken(SqlBaseParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(SqlBaseParser.WITHOUT, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(SqlBaseParser.YEARS, 0); }
		public TerminalNode ZONE() { return getToken(SqlBaseParser.ZONE, 0); }
		public NonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).enterNonReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SqlBaseParserListener ) ((SqlBaseParserListener)listener).exitNonReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SqlBaseParserVisitor ) return ((SqlBaseParserVisitor<? extends T>)visitor).visitNonReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedContext nonReserved() throws RecognitionException {
		NonReservedContext _localctx = new NonReservedContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_nonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4839);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ALWAYS) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ANY_VALUE) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << AT) | (1L << ATOMIC) | (1L << AUTHORIZATION) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BIGINT) | (1L << BINARY) | (1L << BINDING) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUCKET) | (1L << BUCKETS) | (1L << BY) | (1L << BYTE) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOG) | (1L << CATALOGS) | (1L << CHANGE) | (1L << CHAR) | (1L << CHARACTER) | (1L << CHECK) | (1L << CLEAR) | (1L << CLUSTER) | (1L << CLUSTERED) | (1L << CODEGEN) | (1L << COLLATE) | (1L << COLLATION) | (1L << COLLECTION) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMPACT) | (1L << COMPACTIONS) | (1L << COMPENSATION))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMPUTE - 64)) | (1L << (CONCATENATE - 64)) | (1L << (CONDITION - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTINUE - 64)) | (1L << (COST - 64)) | (1L << (CREATE - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_DATE - 64)) | (1L << (CURRENT_TIME - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (DAY - 64)) | (1L << (DAYS - 64)) | (1L << (DAYOFYEAR - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATABASES - 64)) | (1L << (DATEADD - 64)) | (1L << (DATE_ADD - 64)) | (1L << (DATEDIFF - 64)) | (1L << (DATE_DIFF - 64)) | (1L << (DBPROPERTIES - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DELIMITED - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIBE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DFS - 64)) | (1L << (DIRECTORIES - 64)) | (1L << (DIRECTORY - 64)) | (1L << (DISTINCT - 64)) | (1L << (DISTRIBUTE - 64)) | (1L << (DIV - 64)) | (1L << (DO - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (ELSE - 64)) | (1L << (ELSEIF - 64)) | (1L << (END - 64)) | (1L << (ENFORCED - 64)) | (1L << (ESCAPE - 64)) | (1L << (ESCAPED - 64)) | (1L << (EVOLUTION - 64)) | (1L << (EXCHANGE - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXIT - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXPORT - 64)) | (1L << (EXTEND - 64)) | (1L << (EXTENDED - 64)) | (1L << (EXTERNAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXTRACT - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FIELDS - 128)) | (1L << (FILTER - 128)) | (1L << (FILEFORMAT - 128)) | (1L << (FIRST - 128)) | (1L << (FLOAT - 128)) | (1L << (FLOW - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOR - 128)) | (1L << (FOREIGN - 128)) | (1L << (FORMAT - 128)) | (1L << (FORMATTED - 128)) | (1L << (FOUND - 128)) | (1L << (FROM - 128)) | (1L << (FUNCTION - 128)) | (1L << (FUNCTIONS - 128)) | (1L << (GENERATED - 128)) | (1L << (GLOBAL - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HANDLER - 128)) | (1L << (HAVING - 128)) | (1L << (BINARY_HEX - 128)) | (1L << (HOUR - 128)) | (1L << (HOURS - 128)) | (1L << (IDENTIFIER_KW - 128)) | (1L << (IDENTITY - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IMPORT - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXES - 128)) | (1L << (INPATH - 128)) | (1L << (INPUT - 128)) | (1L << (INPUTFORMAT - 128)) | (1L << (INSERT - 128)) | (1L << (INTERVAL - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTO - 128)) | (1L << (INVOKER - 128)) | (1L << (IS - 128)) | (1L << (ITEMS - 128)) | (1L << (ITERATE - 128)) | (1L << (JSON - 128)) | (1L << (KEY - 128)) | (1L << (KEYS - 128)) | (1L << (LANGUAGE - 128)) | (1L << (LAST - 128)) | (1L << (LAZY - 128)) | (1L << (LEADING - 128)) | (1L << (LEAVE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (LEVEL - 193)) | (1L << (LIKE - 193)) | (1L << (ILIKE - 193)) | (1L << (LIMIT - 193)) | (1L << (LINES - 193)) | (1L << (LIST - 193)) | (1L << (LOAD - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCATION - 193)) | (1L << (LOCK - 193)) | (1L << (LOCKS - 193)) | (1L << (LOGICAL - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MACRO - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MATERIALIZED - 193)) | (1L << (MAX - 193)) | (1L << (MERGE - 193)) | (1L << (MICROSECOND - 193)) | (1L << (MICROSECONDS - 193)) | (1L << (MILLISECOND - 193)) | (1L << (MILLISECONDS - 193)) | (1L << (MINUTE - 193)) | (1L << (MINUTES - 193)) | (1L << (MODIFIES - 193)) | (1L << (MONTH - 193)) | (1L << (MONTHS - 193)) | (1L << (MSCK - 193)) | (1L << (NAME - 193)) | (1L << (NAMESPACE - 193)) | (1L << (NAMESPACES - 193)) | (1L << (NANOSECOND - 193)) | (1L << (NANOSECONDS - 193)) | (1L << (NO - 193)) | (1L << (NONE - 193)) | (1L << (NOT - 193)) | (1L << (NULL - 193)) | (1L << (NULLS - 193)) | (1L << (NUMERIC - 193)) | (1L << (NORELY - 193)) | (1L << (OF - 193)) | (1L << (OFFSET - 193)) | (1L << (ONLY - 193)) | (1L << (OPTION - 193)) | (1L << (OPTIONS - 193)) | (1L << (OR - 193)) | (1L << (ORDER - 193)) | (1L << (OUT - 193)) | (1L << (OUTER - 193)) | (1L << (OUTPUTFORMAT - 193)) | (1L << (OVER - 193)) | (1L << (OVERLAPS - 193)) | (1L << (OVERLAY - 193)) | (1L << (OVERWRITE - 193)) | (1L << (PARTITION - 193)) | (1L << (PARTITIONED - 193)) | (1L << (PARTITIONS - 193)) | (1L << (PERCENTLIT - 193)) | (1L << (PIVOT - 193)) | (1L << (PLACING - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (POSITION - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRIMARY - 257)) | (1L << (PRINCIPALS - 257)) | (1L << (PROCEDURE - 257)) | (1L << (PROCEDURES - 257)) | (1L << (PROPERTIES - 257)) | (1L << (PURGE - 257)) | (1L << (QUARTER - 257)) | (1L << (QUERY - 257)) | (1L << (RANGE - 257)) | (1L << (READS - 257)) | (1L << (REAL - 257)) | (1L << (RECORDREADER - 257)) | (1L << (RECORDWRITER - 257)) | (1L << (RECOVER - 257)) | (1L << (RECURSION - 257)) | (1L << (RECURSIVE - 257)) | (1L << (REDUCE - 257)) | (1L << (REFERENCES - 257)) | (1L << (REFRESH - 257)) | (1L << (RELY - 257)) | (1L << (RENAME - 257)) | (1L << (REPAIR - 257)) | (1L << (REPEAT - 257)) | (1L << (REPEATABLE - 257)) | (1L << (REPLACE - 257)) | (1L << (RESET - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT - 257)) | (1L << (RETURN - 257)) | (1L << (RETURNS - 257)) | (1L << (REVOKE - 257)) | (1L << (RLIKE - 257)) | (1L << (ROLE - 257)) | (1L << (ROLES - 257)) | (1L << (ROLLBACK - 257)) | (1L << (ROLLUP - 257)) | (1L << (ROW - 257)) | (1L << (ROWS - 257)) | (1L << (SECOND - 257)) | (1L << (SECONDS - 257)) | (1L << (SCHEMA - 257)) | (1L << (SCHEMAS - 257)) | (1L << (SECURITY - 257)) | (1L << (SELECT - 257)) | (1L << (SEPARATED - 257)) | (1L << (SERDE - 257)) | (1L << (SERDEPROPERTIES - 257)) | (1L << (SESSION_USER - 257)) | (1L << (SET - 257)) | (1L << (SETS - 257)) | (1L << (SHORT - 257)) | (1L << (SHOW - 257)) | (1L << (SINGLE - 257)) | (1L << (SKEWED - 257)) | (1L << (SMALLINT - 257)) | (1L << (SOME - 257)) | (1L << (SORT - 257)) | (1L << (SORTED - 257)) | (1L << (SOURCE - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (SPECIFIC - 321)) | (1L << (SQL - 321)) | (1L << (SQLEXCEPTION - 321)) | (1L << (SQLSTATE - 321)) | (1L << (START - 321)) | (1L << (STATISTICS - 321)) | (1L << (STORED - 321)) | (1L << (STRATIFY - 321)) | (1L << (STREAM - 321)) | (1L << (STREAMING - 321)) | (1L << (STRING - 321)) | (1L << (STRUCT - 321)) | (1L << (SUBSTR - 321)) | (1L << (SUBSTRING - 321)) | (1L << (SYNC - 321)) | (1L << (SYSTEM_TIME - 321)) | (1L << (SYSTEM_VERSION - 321)) | (1L << (TABLE - 321)) | (1L << (TABLES - 321)) | (1L << (TABLESAMPLE - 321)) | (1L << (TARGET - 321)) | (1L << (TBLPROPERTIES - 321)) | (1L << (TEMPORARY - 321)) | (1L << (TERMINATED - 321)) | (1L << (THEN - 321)) | (1L << (TIME - 321)) | (1L << (TIMEDIFF - 321)) | (1L << (TIMESTAMP - 321)) | (1L << (TIMESTAMP_LTZ - 321)) | (1L << (TIMESTAMP_NTZ - 321)) | (1L << (TIMESTAMPADD - 321)) | (1L << (TIMESTAMPDIFF - 321)) | (1L << (TINYINT - 321)) | (1L << (TO - 321)) | (1L << (EXECUTE - 321)) | (1L << (TOUCH - 321)) | (1L << (TRAILING - 321)) | (1L << (TRANSACTION - 321)) | (1L << (TRANSACTIONS - 321)) | (1L << (TRANSFORM - 321)) | (1L << (TRIM - 321)) | (1L << (TRUE - 321)) | (1L << (TRUNCATE - 321)) | (1L << (TRY_CAST - 321)) | (1L << (TYPE - 321)) | (1L << (UNARCHIVE - 321)) | (1L << (UNBOUNDED - 321)) | (1L << (UNCACHE - 321)) | (1L << (UNIQUE - 321)) | (1L << (UNKNOWN - 321)) | (1L << (UNLOCK - 321)) | (1L << (UNPIVOT - 321)) | (1L << (UNSET - 321)) | (1L << (UNTIL - 321)) | (1L << (UPDATE - 321)) | (1L << (USE - 321)) | (1L << (USER - 321)) | (1L << (VALUE - 321)) | (1L << (VALUES - 321)) | (1L << (VARCHAR - 321)) | (1L << (VAR - 321)) | (1L << (VARIABLE - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (VARIANT - 385)) | (1L << (VERSION - 385)) | (1L << (VIEW - 385)) | (1L << (VIEWS - 385)) | (1L << (VOID - 385)) | (1L << (WEEK - 385)) | (1L << (WEEKS - 385)) | (1L << (WHEN - 385)) | (1L << (WHERE - 385)) | (1L << (WHILE - 385)) | (1L << (WINDOW - 385)) | (1L << (WITH - 385)) | (1L << (WITHIN - 385)) | (1L << (WITHOUT - 385)) | (1L << (YEAR - 385)) | (1L << (YEARS - 385)) | (1L << (ZONE - 385)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 82:
			return queryTerm_sempred((QueryTermContext)_localctx, predIndex);
		case 167:
			return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
		case 170:
			return valueExpression_sempred((ValueExpressionContext)_localctx, predIndex);
		case 173:
			return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		case 236:
			return identifier_sempred((IdentifierContext)_localctx, predIndex);
		case 237:
			return strictIdentifier_sempred((StrictIdentifierContext)_localctx, predIndex);
		case 238:
			return quotedIdentifier_sempred((QuotedIdentifierContext)_localctx, predIndex);
		case 240:
			return number_sempred((NumberContext)_localctx, predIndex);
		case 256:
			return stringLit_sempred((StringLitContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean queryTerm_sempred(QueryTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 4);
		case 1:
			return legacy_setops_precedence_enabled;
		case 2:
			return precpred(_ctx, 3);
		case 3:
			return !legacy_setops_precedence_enabled;
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return !legacy_setops_precedence_enabled;
		case 6:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 2);
		case 8:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean valueExpression_sempred(ValueExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 7);
		case 10:
			return precpred(_ctx, 6);
		case 11:
			return precpred(_ctx, 5);
		case 12:
			return precpred(_ctx, 4);
		case 13:
			return precpred(_ctx, 3);
		case 14:
			return precpred(_ctx, 2);
		case 15:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return precpred(_ctx, 24);
		case 17:
			return precpred(_ctx, 23);
		case 18:
			return precpred(_ctx, 14);
		case 19:
			return precpred(_ctx, 8);
		case 20:
			return precpred(_ctx, 6);
		}
		return true;
	}
	private boolean identifier_sempred(IdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return !SQL_standard_keyword_behavior;
		}
		return true;
	}
	private boolean strictIdentifier_sempred(StrictIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22:
			return SQL_standard_keyword_behavior;
		case 23:
			return !SQL_standard_keyword_behavior;
		}
		return true;
	}
	private boolean quotedIdentifier_sempred(QuotedIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24:
			return double_quoted_identifiers;
		}
		return true;
	}
	private boolean number_sempred(NumberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25:
			return !legacy_exponent_literal_as_decimal_enabled;
		case 26:
			return !legacy_exponent_literal_as_decimal_enabled;
		case 27:
			return legacy_exponent_literal_as_decimal_enabled;
		}
		return true;
	}
	private boolean stringLit_sempred(StringLitContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28:
			return !double_quoted_identifiers;
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u01c1\u12ec\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\3\2\3\2\5\2\u0215\n\2\3\3\3\3\3\3\5\3"+
		"\u021a\n\3\3\3\5\3\u021d\n\3\3\3\3\3\5\3\u0221\n\3\3\3\3\3\3\4\5\4\u0226"+
		"\n\4\3\4\3\4\3\4\5\4\u022b\n\4\3\4\5\4\u022e\n\4\3\4\3\4\5\4\u0232\n\4"+
		"\3\5\3\5\3\5\6\5\u0237\n\5\r\5\16\5\u0238\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0248\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\5\7\u0255\n\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u025f\n"+
		"\t\3\t\5\t\u0262\n\t\3\n\3\n\5\n\u0266\n\n\3\n\3\n\3\n\3\n\3\n\5\n\u026d"+
		"\n\n\3\13\3\13\3\13\7\13\u0272\n\13\f\13\16\13\u0275\13\13\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\5\f\u027f\n\f\3\r\5\r\u0282\n\r\3\r\3\r\3\r\3\r\3"+
		"\r\3\r\3\r\5\r\u028b\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16"+
		"\7\16\u0296\n\16\f\16\16\16\u0299\13\16\3\16\3\16\5\16\u029d\n\16\3\16"+
		"\3\16\3\16\3\17\5\17\u02a3\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17"+
		"\u02ac\n\17\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22"+
		"\6\22\u02ba\n\22\r\22\16\22\u02bb\3\22\3\22\5\22\u02c0\n\22\3\22\3\22"+
		"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\6\22\u02cc\n\22\r\22\16\22\u02cd"+
		"\3\22\3\22\5\22\u02d2\n\22\3\22\3\22\3\22\5\22\u02d7\n\22\3\23\5\23\u02da"+
		"\n\23\3\23\3\23\3\23\3\23\3\23\5\23\u02e1\n\23\3\24\5\24\u02e4\n\24\3"+
		"\24\3\24\3\24\3\24\5\24\u02ea\n\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24"+
		"\u02f2\n\24\3\25\3\25\5\25\u02f6\n\25\3\25\7\25\u02f9\n\25\f\25\16\25"+
		"\u02fc\13\25\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\31\3"+
		"\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\35\3"+
		"\36\3\36\3\36\3\37\3\37\3\37\5\37\u031d\n\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u032f\n\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u0338\n\37\f\37\16\37\u033b\13"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3"+
		"\37\3\37\5\37\u035a\n\37\3\37\3\37\5\37\u035e\n\37\3\37\3\37\3\37\3\37"+
		"\5\37\u0364\n\37\3\37\5\37\u0367\n\37\3\37\5\37\u036a\n\37\3\37\3\37\3"+
		"\37\3\37\3\37\5\37\u0371\n\37\3\37\5\37\u0374\n\37\3\37\3\37\5\37\u0378"+
		"\n\37\3\37\5\37\u037b\n\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0383\n"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u038e\n\37\f\37"+
		"\16\37\u0391\13\37\3\37\3\37\3\37\3\37\3\37\5\37\u0398\n\37\3\37\5\37"+
		"\u039b\n\37\3\37\3\37\5\37\u039f\n\37\3\37\5\37\u03a2\n\37\3\37\3\37\3"+
		"\37\3\37\5\37\u03a8\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\5\37\u03b3\n\37\3\37\3\37\3\37\3\37\5\37\u03b9\n\37\3\37\3\37\3\37\5"+
		"\37\u03be\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u03e0\n\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u03ed\n\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\5\37\u0406\n\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\5\37\u040f\n\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0417\n\37\3"+
		"\37\3\37\5\37\u041b\n\37\3\37\3\37\3\37\5\37\u0420\n\37\3\37\3\37\3\37"+
		"\3\37\5\37\u0426\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\5\37\u0432\n\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u043a\n\37\3\37\3"+
		"\37\3\37\3\37\5\37\u0440\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\5\37\u044e\n\37\3\37\6\37\u0451\n\37\r\37\16\37\u0452"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\5\37\u0463\n\37\3\37\3\37\3\37\7\37\u0468\n\37\f\37\16\37\u046b\13\37"+
		"\3\37\5\37\u046e\n\37\3\37\3\37\3\37\3\37\5\37\u0474\n\37\3\37\3\37\3"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5"+
		"\37\u0486\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u049a\n\37\3\37\3\37\5\37\u049e"+
		"\n\37\3\37\3\37\3\37\3\37\5\37\u04a4\n\37\3\37\3\37\5\37\u04a8\n\37\3"+
		"\37\3\37\3\37\3\37\5\37\u04ae\n\37\3\37\3\37\3\37\3\37\5\37\u04b4\n\37"+
		"\3\37\5\37\u04b7\n\37\3\37\5\37\u04ba\n\37\3\37\3\37\3\37\3\37\3\37\5"+
		"\37\u04c1\n\37\3\37\3\37\5\37\u04c5\n\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\7\37\u04cf\n\37\f\37\16\37\u04d2\13\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\5\37\u04da\n\37\3\37\5\37\u04dd\n\37\3\37\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\5\37\u04e6\n\37\3\37\3\37\3\37\5\37\u04eb\n\37\3\37\3\37"+
		"\3\37\3\37\5\37\u04f1\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\5\37\u04fd\n\37\3\37\5\37\u0500\n\37\3\37\3\37\3\37\3\37\3\37\5"+
		"\37\u0507\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u0510\n\37\f\37"+
		"\16\37\u0513\13\37\5\37\u0515\n\37\3\37\3\37\3\37\5\37\u051a\n\37\3\37"+
		"\5\37\u051d\n\37\3\37\3\37\3\37\3\37\3\37\5\37\u0524\n\37\3\37\3\37\3"+
		"\37\5\37\u0529\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0533"+
		"\n\37\5\37\u0535\n\37\3\37\3\37\3\37\3\37\5\37\u053b\n\37\3\37\3\37\5"+
		"\37\u053f\n\37\3\37\3\37\3\37\5\37\u0544\n\37\3\37\3\37\3\37\3\37\5\37"+
		"\u054a\n\37\3\37\5\37\u054d\n\37\3\37\3\37\3\37\7\37\u0552\n\37\f\37\16"+
		"\37\u0555\13\37\3\37\5\37\u0558\n\37\3\37\5\37\u055b\n\37\3\37\3\37\3"+
		"\37\3\37\3\37\5\37\u0562\n\37\3\37\3\37\3\37\3\37\5\37\u0568\n\37\3\37"+
		"\3\37\5\37\u056c\n\37\3\37\3\37\3\37\3\37\5\37\u0572\n\37\3\37\5\37\u0575"+
		"\n\37\3\37\5\37\u0578\n\37\3\37\3\37\3\37\3\37\3\37\5\37\u057f\n\37\3"+
		"\37\3\37\3\37\5\37\u0584\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37"+
		"\u058d\n\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0595\n\37\3\37\3\37\3"+
		"\37\3\37\5\37\u059b\n\37\3\37\5\37\u059e\n\37\3\37\5\37\u05a1\n\37\3\37"+
		"\3\37\3\37\3\37\5\37\u05a7\n\37\3\37\3\37\5\37\u05ab\n\37\3\37\3\37\3"+
		"\37\5\37\u05b0\n\37\3\37\5\37\u05b3\n\37\3\37\3\37\5\37\u05b7\n\37\5\37"+
		"\u05b9\n\37\3\37\3\37\3\37\3\37\5\37\u05bf\n\37\3\37\3\37\3\37\3\37\3"+
		"\37\3\37\5\37\u05c7\n\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u05cf\n\37"+
		"\3\37\5\37\u05d2\n\37\3\37\3\37\3\37\5\37\u05d7\n\37\3\37\3\37\3\37\3"+
		"\37\3\37\3\37\3\37\5\37\u05e0\n\37\3\37\3\37\3\37\3\37\5\37\u05e6\n\37"+
		"\3\37\5\37\u05e9\n\37\3\37\3\37\5\37\u05ed\n\37\3\37\5\37\u05f0\n\37\3"+
		"\37\3\37\5\37\u05f4\n\37\3\37\3\37\5\37\u05f8\n\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u0612\n\37\f\37\16\37\u0615\13\37"+
		"\5\37\u0617\n\37\3\37\3\37\5\37\u061b\n\37\3\37\3\37\3\37\3\37\5\37\u0621"+
		"\n\37\3\37\5\37\u0624\n\37\3\37\5\37\u0627\n\37\3\37\3\37\3\37\3\37\5"+
		"\37\u062d\n\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0635\n\37\3\37\3\37"+
		"\3\37\5\37\u063a\n\37\3\37\3\37\3\37\3\37\5\37\u0640\n\37\3\37\3\37\3"+
		"\37\3\37\5\37\u0646\n\37\3\37\5\37\u0649\n\37\3\37\3\37\3\37\3\37\3\37"+
		"\5\37\u0650\n\37\3\37\3\37\3\37\7\37\u0655\n\37\f\37\16\37\u0658\13\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0660\n\37\3\37\3\37\3\37\5\37\u0665"+
		"\n\37\3\37\3\37\3\37\5\37\u066a\n\37\3\37\3\37\3\37\3\37\3\37\5\37\u0671"+
		"\n\37\3\37\3\37\3\37\3\37\5\37\u0677\n\37\3\37\3\37\3\37\5\37\u067c\n"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u0686\n\37\f\37\16\37"+
		"\u0689\13\37\5\37\u068b\n\37\3\37\3\37\3\37\3\37\7\37\u0691\n\37\f\37"+
		"\16\37\u0694\13\37\3\37\3\37\3\37\5\37\u0699\n\37\3\37\5\37\u069c\n\37"+
		"\3\37\5\37\u069f\n\37\3\37\3\37\3\37\5\37\u06a4\n\37\3\37\3\37\3\37\3"+
		"\37\5\37\u06aa\n\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3\"\5\"\u06b5\n\"\3\"\3"+
		"\"\3\"\3\"\5\"\u06bb\n\"\3\"\3\"\3#\3#\3#\5#\u06c2\n#\3#\3#\3#\3#\3#\3"+
		"#\3#\5#\u06cb\n#\3#\3#\5#\u06cf\n#\3$\3$\3$\7$\u06d4\n$\f$\16$\u06d7\13"+
		"$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\7$\u06e5\n$\f$\16$\u06e8\13$\3$"+
		"\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\7$"+
		"\u0701\n$\f$\16$\u0704\13$\5$\u0706\n$\3$\3$\7$\u070a\n$\f$\16$\u070d"+
		"\13$\3$\3$\3$\3$\7$\u0713\n$\f$\16$\u0716\13$\3$\3$\3$\3$\7$\u071c\n$"+
		"\f$\16$\u071f\13$\5$\u0721\n$\3%\3%\3%\3%\3%\5%\u0728\n%\3%\5%\u072b\n"+
		"%\3&\3&\3&\3&\3&\3&\3&\5&\u0734\n&\3\'\3\'\5\'\u0738\n\'\3(\3(\3)\3)\3"+
		"*\3*\3*\3*\3*\3*\5*\u0744\n*\3*\3*\5*\u0748\n*\3*\3*\3*\3*\3*\5*\u074f"+
		"\n*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*"+
		"\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*"+
		"\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*"+
		"\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*"+
		"\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*"+
		"\5*\u07c3\n*\3*\3*\3*\3*\3*\3*\5*\u07cb\n*\3*\3*\3*\3*\3*\3*\5*\u07d3"+
		"\n*\3*\3*\3*\3*\3*\3*\3*\5*\u07dc\n*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u07e6"+
		"\n*\3+\3+\5+\u07ea\n+\3+\5+\u07ed\n+\3+\3+\3+\3+\3+\5+\u07f4\n+\3+\3+"+
		"\3,\3,\5,\u07fa\n,\3,\3,\3,\3,\3-\3-\3-\3-\3-\3-\3.\3.\3.\3.\3.\3.\5."+
		"\u080c\n.\3.\3.\3.\3.\3/\3/\3/\3/\3/\3/\5/\u0818\n/\3/\3/\3/\5/\u081d"+
		"\n/\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u0829\n\61"+
		"\3\62\3\62\3\62\3\63\3\63\3\63\3\64\5\64\u0832\n\64\3\64\3\64\3\64\3\65"+
		"\3\65\3\65\5\65\u083a\n\65\3\65\3\65\5\65\u083e\n\65\3\65\3\65\3\65\3"+
		"\65\3\65\5\65\u0845\n\65\5\65\u0847\n\65\3\65\3\65\3\65\5\65\u084c\n\65"+
		"\3\65\3\65\3\65\5\65\u0851\n\65\3\65\3\65\5\65\u0855\n\65\3\65\5\65\u0858"+
		"\n\65\3\65\3\65\3\65\3\65\5\65\u085e\n\65\3\65\3\65\3\65\5\65\u0863\n"+
		"\65\3\65\3\65\3\65\5\65\u0868\n\65\3\65\3\65\5\65\u086c\n\65\3\65\3\65"+
		"\3\65\3\65\3\65\3\65\5\65\u0874\n\65\3\65\3\65\3\65\5\65\u0879\n\65\3"+
		"\65\5\65\u087c\n\65\3\65\3\65\3\65\5\65\u0881\n\65\3\65\3\65\5\65\u0885"+
		"\n\65\3\65\3\65\3\65\5\65\u088a\n\65\5\65\u088c\n\65\3\66\3\66\5\66\u0890"+
		"\n\66\3\67\3\67\3\67\3\67\3\67\7\67\u0897\n\67\f\67\16\67\u089a\13\67"+
		"\3\67\3\67\38\38\38\58\u08a1\n8\38\38\38\38\58\u08a7\n8\39\39\39\39\5"+
		"9\u08ad\n9\39\39\3:\3:\3;\3;\3<\3<\3=\3=\3=\3=\3=\3=\3=\5=\u08be\n=\3"+
		">\3>\3>\7>\u08c3\n>\f>\16>\u08c6\13>\3?\3?\5?\u08ca\n?\3?\3?\3?\7?\u08cf"+
		"\n?\f?\16?\u08d2\13?\3@\3@\5@\u08d6\n@\3@\3@\3@\3@\5@\u08dc\n@\3@\5@\u08df"+
		"\n@\3@\3@\3@\3@\3A\3A\3A\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B"+
		"\7B\u08f7\nB\fB\16B\u08fa\13B\3C\3C\3C\3C\7C\u0900\nC\fC\16C\u0903\13"+
		"C\3C\3C\3D\3D\5D\u0909\nD\3D\5D\u090c\nD\3E\3E\3E\7E\u0911\nE\fE\16E\u0914"+
		"\13E\3E\5E\u0917\nE\3F\3F\3F\3F\5F\u091d\nF\3G\3G\3G\3G\7G\u0923\nG\f"+
		"G\16G\u0926\13G\3G\3G\3H\3H\5H\u092c\nH\3H\5H\u092f\nH\3I\3I\3I\3I\7I"+
		"\u0935\nI\fI\16I\u0938\13I\3I\3I\3J\3J\3J\3J\7J\u0940\nJ\fJ\16J\u0943"+
		"\13J\3J\3J\3K\3K\3K\3K\3K\3K\5K\u094d\nK\3L\3L\3L\3L\3L\3L\5L\u0955\n"+
		"L\3M\3M\3M\3M\5M\u095b\nM\3N\3N\3N\3O\3O\3O\3O\3O\6O\u0965\nO\rO\16O\u0966"+
		"\3O\3O\3O\3O\3O\5O\u096e\nO\3O\3O\3O\3O\3O\5O\u0975\nO\3O\3O\3O\3O\5O"+
		"\u097b\nO\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u0986\nO\3O\3O\3O\3O\7O\u098c"+
		"\nO\fO\16O\u098f\13O\3O\7O\u0992\nO\fO\16O\u0995\13O\3O\7O\u0998\nO\f"+
		"O\16O\u099b\13O\5O\u099d\nO\3P\3P\3P\3P\3P\3P\5P\u09a5\nP\3Q\3Q\3Q\3Q"+
		"\3Q\3Q\3Q\5Q\u09ae\nQ\3R\3R\3R\3R\3R\7R\u09b5\nR\fR\16R\u09b8\13R\5R\u09ba"+
		"\nR\3R\3R\3R\3R\3R\7R\u09c1\nR\fR\16R\u09c4\13R\5R\u09c6\nR\3R\3R\3R\3"+
		"R\3R\7R\u09cd\nR\fR\16R\u09d0\13R\5R\u09d2\nR\3R\3R\3R\3R\3R\7R\u09d9"+
		"\nR\fR\16R\u09dc\13R\5R\u09de\nR\3R\5R\u09e1\nR\3R\3R\3R\5R\u09e6\nR\5"+
		"R\u09e8\nR\3R\3R\5R\u09ec\nR\3S\3S\3S\3T\3T\3T\3T\3T\3T\3T\5T\u09f8\n"+
		"T\3T\3T\3T\3T\3T\5T\u09ff\nT\3T\3T\3T\3T\3T\5T\u0a06\nT\3T\3T\3T\3T\7"+
		"T\u0a0c\nT\fT\16T\u0a0f\13T\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0a1a\nU\3V"+
		"\3V\5V\u0a1e\nV\3V\3V\5V\u0a22\nV\3W\3W\7W\u0a26\nW\fW\16W\u0a29\13W\3"+
		"X\3X\5X\u0a2d\nX\3X\3X\3X\3X\7X\u0a33\nX\fX\16X\u0a36\13X\3X\5X\u0a39"+
		"\nX\3X\5X\u0a3c\nX\3X\5X\u0a3f\nX\3X\5X\u0a42\nX\3X\3X\5X\u0a46\nX\3Y"+
		"\3Y\5Y\u0a4a\nY\3Y\7Y\u0a4d\nY\fY\16Y\u0a50\13Y\3Y\5Y\u0a53\nY\3Y\5Y\u0a56"+
		"\nY\3Y\5Y\u0a59\nY\3Y\5Y\u0a5c\nY\3Y\3Y\5Y\u0a60\nY\3Y\7Y\u0a63\nY\fY"+
		"\16Y\u0a66\13Y\3Y\5Y\u0a69\nY\3Y\5Y\u0a6c\nY\3Y\5Y\u0a6f\nY\3Y\5Y\u0a72"+
		"\nY\5Y\u0a74\nY\3Z\3Z\3Z\3Z\5Z\u0a7a\nZ\3Z\3Z\3Z\3Z\3Z\5Z\u0a81\nZ\3Z"+
		"\3Z\3Z\5Z\u0a86\nZ\3Z\5Z\u0a89\nZ\3Z\5Z\u0a8c\nZ\3Z\3Z\5Z\u0a90\nZ\3Z"+
		"\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0a9a\nZ\3Z\3Z\5Z\u0a9e\nZ\5Z\u0aa0\nZ\3Z\5Z"+
		"\u0aa3\nZ\3Z\3Z\5Z\u0aa7\nZ\3[\3[\7[\u0aab\n[\f[\16[\u0aae\13[\3[\5[\u0ab1"+
		"\n[\3[\3[\3\\\3\\\3\\\3]\3]\3]\3]\5]\u0abc\n]\3]\3]\3]\3^\3^\3^\3^\3^"+
		"\5^\u0ac6\n^\3^\3^\5^\u0aca\n^\3^\3^\3^\3_\3_\3_\3_\3_\3_\3_\5_\u0ad6"+
		"\n_\3_\3_\3_\3`\3`\3`\3`\3`\3`\3`\5`\u0ae2\n`\3a\3a\3a\3a\3a\3a\3a\3a"+
		"\3a\3a\3a\7a\u0aef\na\fa\16a\u0af2\13a\3a\3a\5a\u0af6\na\3b\3b\3b\3b\5"+
		"b\u0afc\nb\3c\3c\3c\3c\3c\3d\3d\3d\7d\u0b06\nd\fd\16d\u0b09\13d\3e\3e"+
		"\3e\3e\3f\3f\3f\3g\3g\3g\3h\3h\3h\5h\u0b18\nh\3h\7h\u0b1b\nh\fh\16h\u0b1e"+
		"\13h\3h\3h\3i\3i\3i\3i\3i\3i\7i\u0b28\ni\fi\16i\u0b2b\13i\3i\3i\5i\u0b2f"+
		"\ni\3j\3j\3j\3j\7j\u0b35\nj\fj\16j\u0b38\13j\3j\7j\u0b3b\nj\fj\16j\u0b3e"+
		"\13j\3j\5j\u0b41\nj\3j\5j\u0b44\nj\3k\5k\u0b47\nk\3k\3k\3k\3k\3k\5k\u0b4e"+
		"\nk\3k\3k\3k\3k\5k\u0b54\nk\3l\3l\3l\3l\3l\7l\u0b5b\nl\fl\16l\u0b5e\13"+
		"l\3l\3l\3l\3l\3l\7l\u0b65\nl\fl\16l\u0b68\13l\3l\3l\3l\3l\3l\3l\3l\3l"+
		"\3l\3l\7l\u0b74\nl\fl\16l\u0b77\13l\3l\3l\5l\u0b7b\nl\5l\u0b7d\nl\3m\3"+
		"m\5m\u0b81\nm\3n\3n\3n\3n\3n\7n\u0b88\nn\fn\16n\u0b8b\13n\3n\3n\3n\3n"+
		"\3n\3n\3n\3n\7n\u0b95\nn\fn\16n\u0b98\13n\3n\3n\5n\u0b9c\nn\3o\3o\5o\u0ba0"+
		"\no\3p\3p\3p\3p\7p\u0ba6\np\fp\16p\u0ba9\13p\5p\u0bab\np\3p\3p\5p\u0baf"+
		"\np\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\7q\u0bbb\nq\fq\16q\u0bbe\13q\3q\3q\3"+
		"q\3r\3r\3r\3r\3r\7r\u0bc8\nr\fr\16r\u0bcb\13r\3r\3r\5r\u0bcf\nr\3s\3s"+
		"\5s\u0bd3\ns\3s\5s\u0bd6\ns\3t\3t\5t\u0bda\nt\3t\3t\3t\3t\5t\u0be0\nt"+
		"\3t\5t\u0be3\nt\3u\3u\3u\3v\3v\5v\u0bea\nv\3w\3w\3w\3w\3w\3w\3w\3w\7w"+
		"\u0bf4\nw\fw\16w\u0bf7\13w\3w\3w\3x\3x\3x\3x\7x\u0bff\nx\fx\16x\u0c02"+
		"\13x\3x\3x\3x\3x\3x\3x\3x\3x\7x\u0c0c\nx\fx\16x\u0c0f\13x\3x\3x\3y\3y"+
		"\3y\3y\7y\u0c17\ny\fy\16y\u0c1a\13y\3y\3y\5y\u0c1e\ny\3z\3z\3{\3{\3|\3"+
		"|\5|\u0c26\n|\3}\3}\3~\5~\u0c2b\n~\3~\3~\3\177\3\177\3\177\5\177\u0c32"+
		"\n\177\3\177\3\177\3\177\3\177\3\177\7\177\u0c39\n\177\f\177\16\177\u0c3c"+
		"\13\177\5\177\u0c3e\n\177\3\177\3\177\3\177\5\177\u0c43\n\177\3\177\3"+
		"\177\3\177\7\177\u0c48\n\177\f\177\16\177\u0c4b\13\177\5\177\u0c4d\n\177"+
		"\3\u0080\3\u0080\3\u0081\5\u0081\u0c52\n\u0081\3\u0081\3\u0081\7\u0081"+
		"\u0c56\n\u0081\f\u0081\16\u0081\u0c59\13\u0081\3\u0082\3\u0082\3\u0082"+
		"\5\u0082\u0c5e\n\u0082\3\u0083\3\u0083\3\u0083\5\u0083\u0c63\n\u0083\3"+
		"\u0083\3\u0083\5\u0083\u0c67\n\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5"+
		"\u0083\u0c6d\n\u0083\3\u0083\3\u0083\5\u0083\u0c71\n\u0083\3\u0084\5\u0084"+
		"\u0c74\n\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0c79\n\u0084\3\u0084\5"+
		"\u0084\u0c7c\n\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0c81\n\u0084\3\u0084"+
		"\3\u0084\5\u0084\u0c85\n\u0084\3\u0084\5\u0084\u0c88\n\u0084\3\u0084\5"+
		"\u0084\u0c8b\n\u0084\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0c91\n\u0085"+
		"\3\u0086\3\u0086\3\u0086\5\u0086\u0c96\n\u0086\3\u0086\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\5\u0086\u0c9d\n\u0086\3\u0087\5\u0087\u0ca0\n\u0087\3"+
		"\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0cb2"+
		"\n\u0087\5\u0087\u0cb4\n\u0087\3\u0087\5\u0087\u0cb7\n\u0087\3\u0088\3"+
		"\u0088\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\7\u0089\u0cc0\n\u0089\f"+
		"\u0089\16\u0089\u0cc3\13\u0089\3\u008a\3\u008a\3\u008a\3\u008a\7\u008a"+
		"\u0cc9\n\u008a\f\u008a\16\u008a\u0ccc\13\u008a\3\u008a\3\u008a\3\u008b"+
		"\3\u008b\5\u008b\u0cd2\n\u008b\3\u008c\3\u008c\3\u008c\3\u008c\7\u008c"+
		"\u0cd8\n\u008c\f\u008c\16\u008c\u0cdb\13\u008c\3\u008c\3\u008c\3\u008d"+
		"\3\u008d\5\u008d\u0ce1\n\u008d\3\u008e\3\u008e\3\u008e\5\u008e\u0ce6\n"+
		"\u008e\3\u008e\5\u008e\u0ce9\n\u008e\3\u008e\5\u008e\u0cec\n\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0cf4\n\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0cfc\n\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\5\u008e\u0d02\n\u008e\3\u008f\3\u008f\3\u008f"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\7\u0090\u0d0b\n\u0090\f\u0090\16\u0090"+
		"\u0d0e\13\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\5\u0091\u0d15"+
		"\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0d1c\n\u0091"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0d23\n\u0091\5\u0091"+
		"\u0d25\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\7\u0092\u0d30\n\u0092\f\u0092\16\u0092\u0d33\13\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\6\u0092\u0d3a\n\u0092\r\u0092"+
		"\16\u0092\u0d3b\3\u0092\5\u0092\u0d3f\n\u0092\5\u0092\u0d41\n\u0092\3"+
		"\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092\u0d49\n\u0092\f"+
		"\u0092\16\u0092\u0d4c\13\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\6\u0092\u0d53\n\u0092\r\u0092\16\u0092\u0d54\3\u0092\5\u0092\u0d58\n"+
		"\u0092\5\u0092\u0d5a\n\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0094\3"+
		"\u0094\5\u0094\u0d62\n\u0094\3\u0095\3\u0095\5\u0095\u0d66\n\u0095\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\3\u0096\7\u0096\u0d6d\n\u0096\f\u0096\16\u0096"+
		"\u0d70\13\u0096\5\u0096\u0d72\n\u0096\3\u0096\3\u0096\3\u0096\3\u0097"+
		"\5\u0097\u0d78\n\u0097\3\u0097\3\u0097\5\u0097\u0d7c\n\u0097\5\u0097\u0d7e"+
		"\n\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098"+
		"\u0d87\n\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\5\u0098\u0d93\n\u0098\5\u0098\u0d95\n\u0098\3"+
		"\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d9c\n\u0098\3\u0098\3"+
		"\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0da3\n\u0098\3\u0098\3\u0098\3"+
		"\u0098\3\u0098\5\u0098\u0da9\n\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5"+
		"\u0098\u0daf\n\u0098\5\u0098\u0db1\n\u0098\3\u0099\3\u0099\3\u0099\7\u0099"+
		"\u0db6\n\u0099\f\u0099\16\u0099\u0db9\13\u0099\3\u009a\3\u009a\3\u009a"+
		"\7\u009a\u0dbe\n\u009a\f\u009a\16\u009a\u0dc1\13\u009a\3\u009b\3\u009b"+
		"\3\u009b\7\u009b\u0dc6\n\u009b\f\u009b\16\u009b\u0dc9\13\u009b\3\u009c"+
		"\3\u009c\3\u009c\5\u009c\u0dce\n\u009c\3\u009d\3\u009d\3\u009d\5\u009d"+
		"\u0dd3\n\u009d\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\5\u009e\u0dda\n"+
		"\u009e\3\u009e\3\u009e\3\u009f\3\u009f\5\u009f\u0de0\n\u009f\3\u009f\3"+
		"\u009f\5\u009f\u0de4\n\u009f\5\u009f\u0de6\n\u009f\3\u00a0\3\u00a0\3\u00a0"+
		"\7\u00a0\u0deb\n\u00a0\f\u00a0\16\u00a0\u0dee\13\u00a0\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\7\u00a1\u0df4\n\u00a1\f\u00a1\16\u00a1\u0df7\13\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a2\3\u00a2\5\u00a2\u0dfd\n\u00a2\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\7\u00a3\u0e05\n\u00a3\f\u00a3\16\u00a3"+
		"\u0e08\13\u00a3\3\u00a3\3\u00a3\5\u00a3\u0e0c\n\u00a3\3\u00a4\3\u00a4"+
		"\5\u00a4\u0e10\n\u00a4\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a7\3\u00a7\5\u00a7\u0e1a\n\u00a7\3\u00a8\3\u00a8\3\u00a8\7\u00a8"+
		"\u0e1f\n\u00a8\f\u00a8\16\u00a8\u0e22\13\u00a8\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0e2e"+
		"\n\u00a9\5\u00a9\u0e30\n\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\7\u00a9\u0e38\n\u00a9\f\u00a9\16\u00a9\u0e3b\13\u00a9\3\u00aa"+
		"\5\u00aa\u0e3e\n\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\5\u00aa\u0e46\n\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\7\u00aa"+
		"\u0e4d\n\u00aa\f\u00aa\16\u00aa\u0e50\13\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\5\u00aa\u0e55\n\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\5\u00aa\u0e5d\n\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0e62\n\u00aa\3"+
		"\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\7\u00aa"+
		"\u0e6c\n\u00aa\f\u00aa\16\u00aa\u0e6f\13\u00aa\3\u00aa\3\u00aa\5\u00aa"+
		"\u0e73\n\u00aa\3\u00aa\5\u00aa\u0e76\n\u00aa\3\u00aa\3\u00aa\3\u00aa\3"+
		"\u00aa\5\u00aa\u0e7c\n\u00aa\3\u00aa\3\u00aa\5\u00aa\u0e80\n\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\5\u00aa\u0e85\n\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa"+
		"\u0e8a\n\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0e8f\n\u00aa\3\u00ab\3"+
		"\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0e97\n\u00ac\3\u00ac\3"+
		"\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\7\u00ac\u0eb0\n\u00ac\f\u00ac\16\u00ac"+
		"\u0eb3\13\u00ac\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\5\u00af\u0ebf\n\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0ecb"+
		"\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\6\u00af\u0ed5\n\u00af\r\u00af\16\u00af\u0ed6\3\u00af\3\u00af\5\u00af"+
		"\u0edb\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\6\u00af\u0ee2\n"+
		"\u00af\r\u00af\16\u00af\u0ee3\3\u00af\3\u00af\5\u00af\u0ee8\n\u00af\3"+
		"\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\7\u00af\u0ef8\n\u00af\f\u00af"+
		"\16\u00af\u0efb\13\u00af\5\u00af\u0efd\n\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\5\u00af\u0f05\n\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0f0e\n\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0f17\n\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\5\u00af\u0f25\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\5\u00af\u0f2b\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\6\u00af\u0f31\n"+
		"\u00af\r\u00af\16\u00af\u0f32\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0f3e\n\u00af\3\u00af\3\u00af"+
		"\3\u00af\7\u00af\u0f43\n\u00af\f\u00af\16\u00af\u0f46\13\u00af\5\u00af"+
		"\u0f48\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\7\u00af\u0f53\n\u00af\f\u00af\16\u00af\u0f56\13\u00af"+
		"\3\u00af\3\u00af\5\u00af\u0f5a\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\5\u00af\u0f62\n\u00af\3\u00af\3\u00af\5\u00af\u0f66\n"+
		"\u00af\3\u00af\3\u00af\5\u00af\u0f6a\n\u00af\3\u00af\3\u00af\3\u00af\3"+
		"\u00af\3\u00af\3\u00af\3\u00af\3\u00af\6\u00af\u0f74\n\u00af\r\u00af\16"+
		"\u00af\u0f75\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3"+
		"\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0f8f"+
		"\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0f96\n\u00af"+
		"\3\u00af\5\u00af\u0f99\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af"+
		"\u0fa8\n\u00af\3\u00af\3\u00af\5\u00af\u0fac\n\u00af\3\u00af\3\u00af\3"+
		"\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\7\u00af\u0fbe\n\u00af\f\u00af"+
		"\16\u00af\u0fc1\13\u00af\3\u00b0\3\u00b0\7\u00b0\u0fc5\n\u00b0\f\u00b0"+
		"\16\u00b0\u0fc8\13\u00b0\3\u00b1\3\u00b1\5\u00b1\u0fcc\n\u00b1\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3"+
		"\u0fd7\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0fe3\n\u00b4\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0fed\n\u00b5\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\6\u00b6\u0ffa\n\u00b6\r\u00b6\16\u00b6\u0ffb\5\u00b6\u0ffe\n"+
		"\u00b6\3\u00b7\3\u00b7\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00ba\3\u00ba"+
		"\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u100b\n\u00bb\3\u00bc\3\u00bc\5\u00bc"+
		"\u100f\n\u00bc\3\u00bd\3\u00bd\3\u00bd\6\u00bd\u1014\n\u00bd\r\u00bd\16"+
		"\u00bd\u1015\3\u00be\3\u00be\3\u00be\5\u00be\u101b\n\u00be\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00c0\5\u00c0\u1023\n\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\5\u00c0\u1028\n\u00c0\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c3"+
		"\3\u00c3\3\u00c3\5\u00c3\u1031\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6\5\u00c6\u103c\n\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u1042\n\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\5\u00c6\u1048\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\5\u00c6\u104f\n\u00c6\3\u00c6\5\u00c6\u1052\n\u00c6\3\u00c6\3\u00c6\3"+
		"\u00c6\3\u00c6\5\u00c6\u1058\n\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u105d"+
		"\n\u00c6\5\u00c6\u105f\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6"+
		"\u1065\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u106b\n\u00c6\3"+
		"\u00c6\3\u00c6\3\u00c6\5\u00c6\u1070\n\u00c6\5\u00c6\u1072\n\u00c6\3\u00c7"+
		"\3\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8"+
		"\u107d\n\u00c8\f\u00c8\16\u00c8\u1080\13\u00c8\3\u00c8\5\u00c8\u1083\n"+
		"\u00c8\5\u00c8\u1085\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5"+
		"\u00c9\u108c\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3"+
		"\u00c9\5\u00c9\u1095\n\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u109a\n\u00c9"+
		"\3\u00c9\3\u00c9\5\u00c9\u109e\n\u00c9\3\u00c9\5\u00c9\u10a1\n\u00c9\3"+
		"\u00ca\3\u00ca\3\u00ca\7\u00ca\u10a6\n\u00ca\f\u00ca\16\u00ca\u10a9\13"+
		"\u00ca\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u10ae\n\u00cb\f\u00cb\16\u00cb"+
		"\u10b1\13\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc"+
		"\u10b9\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00cf"+
		"\3\u00cf\3\u00cf\7\u00cf\u10c4\n\u00cf\f\u00cf\16\u00cf\u10c7\13\u00cf"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u10ce\n\u00d0\3\u00d0"+
		"\5\u00d0\u10d1\n\u00d0\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u10d6\n\u00d1\f"+
		"\u00d1\16\u00d1\u10d9\13\u00d1\3\u00d2\3\u00d2\5\u00d2\u10dd\n\u00d2\3"+
		"\u00d3\3\u00d3\3\u00d3\7\u00d3\u10e2\n\u00d3\f\u00d3\16\u00d3\u10e5\13"+
		"\u00d3\3\u00d4\3\u00d4\3\u00d4\7\u00d4\u10ea\n\u00d4\f\u00d4\16\u00d4"+
		"\u10ed\13\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\5\u00d5\u10f6\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u1103\n\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\5\u00d6\u1108\n\u00d6\5\u00d6\u110a\n\u00d6\3\u00d7\3"+
		"\u00d7\7\u00d7\u110e\n\u00d7\f\u00d7\16\u00d7\u1111\13\u00d7\3\u00d7\3"+
		"\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u111b\n"+
		"\u00d8\3\u00d9\5\u00d9\u111e\n\u00d9\3\u00d9\3\u00d9\5\u00d9\u1122\n\u00d9"+
		"\3\u00d9\5\u00d9\u1125\n\u00d9\3\u00da\3\u00da\3\u00da\7\u00da\u112a\n"+
		"\u00da\f\u00da\16\u00da\u112d\13\u00da\3\u00db\3\u00db\5\u00db\u1131\n"+
		"\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u1137\n\u00db\3\u00db\5"+
		"\u00db\u113a\n\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3"+
		"\u00dc\7\u00dc\u1143\n\u00dc\f\u00dc\16\u00dc\u1146\13\u00dc\3\u00dd\3"+
		"\u00dd\3\u00dd\3\u00de\3\u00de\3\u00de\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\5\u00df\u1152\n\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u115e\n\u00e0\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u1169"+
		"\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u1171"+
		"\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\7\u00e4\u117c\n\u00e4\f\u00e4\16\u00e4\u117f\13\u00e4\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u1190\n\u00e6\f\u00e6"+
		"\16\u00e6\u1193\13\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6"+
		"\u119a\n\u00e6\f\u00e6\16\u00e6\u119d\13\u00e6\5\u00e6\u119f\n\u00e6\3"+
		"\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u11a6\n\u00e6\f\u00e6\16"+
		"\u00e6\u11a9\13\u00e6\5\u00e6\u11ab\n\u00e6\5\u00e6\u11ad\n\u00e6\3\u00e6"+
		"\5\u00e6\u11b0\n\u00e6\3\u00e6\5\u00e6\u11b3\n\u00e6\3\u00e7\3\u00e7\3"+
		"\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u11c5\n\u00e7\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u11ce\n\u00e8"+
		"\3\u00e9\3\u00e9\3\u00e9\7\u00e9\u11d3\n\u00e9\f\u00e9\16\u00e9\u11d6"+
		"\13\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\5\u00ea\u11e2\n\u00ea\3\u00eb\3\u00eb\3\u00eb\7\u00eb"+
		"\u11e7\n\u00eb\f\u00eb\16\u00eb\u11ea\13\u00eb\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ed\3\u00ed\6\u00ed\u11f1\n\u00ed\r\u00ed\16\u00ed\u11f2\3\u00ed"+
		"\5\u00ed\u11f6\n\u00ed\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u11fb\n\u00ee\3"+
		"\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u1203\n\u00ef\3"+
		"\u00f0\3\u00f0\3\u00f0\5\u00f0\u1208\n\u00f0\3\u00f1\3\u00f1\3\u00f2\3"+
		"\u00f2\5\u00f2\u120e\n\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u1213\n\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u1218\n\u00f2\3\u00f2\3\u00f2\5\u00f2"+
		"\u121c\n\u00f2\3\u00f2\3\u00f2\5\u00f2\u1220\n\u00f2\3\u00f2\3\u00f2\5"+
		"\u00f2\u1224\n\u00f2\3\u00f2\3\u00f2\5\u00f2\u1228\n\u00f2\3\u00f2\3\u00f2"+
		"\5\u00f2\u122c\n\u00f2\3\u00f2\3\u00f2\5\u00f2\u1230\n\u00f2\3\u00f2\3"+
		"\u00f2\5\u00f2\u1234\n\u00f2\3\u00f2\5\u00f2\u1237\n\u00f2\3\u00f3\3\u00f3"+
		"\5\u00f3\u123b\n\u00f3\3\u00f3\3\u00f3\7\u00f3\u123f\n\u00f3\f\u00f3\16"+
		"\u00f3\u1242\13\u00f3\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u1247\n\u00f4\3"+
		"\u00f5\3\u00f5\5\u00f5\u124b\n\u00f5\3\u00f5\3\u00f5\7\u00f5\u124f\n\u00f5"+
		"\f\u00f5\16\u00f5\u1252\13\u00f5\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u1257"+
		"\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f8"+
		"\5\u00f8\u1261\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa"+
		"\5\u00fa\u1269\n\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fc"+
		"\3\u00fc\5\u00fc\u1272\n\u00fc\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u1277\n"+
		"\u00fd\3\u00fe\3\u00fe\3\u00ff\3\u00ff\3\u00ff\7\u00ff\u127e\n\u00ff\f"+
		"\u00ff\16\u00ff\u1281\13\u00ff\3\u0100\3\u0100\5\u0100\u1285\n\u0100\3"+
		"\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\3\u0101\3\u0101\3\u0101\5\u0101\u1293\n\u0101\3\u0102\3\u0102\3\u0102"+
		"\5\u0102\u1298\n\u0102\3\u0103\3\u0103\5\u0103\u129c\n\u0103\3\u0104\3"+
		"\u0104\5\u0104\u12a0\n\u0104\3\u0105\3\u0105\5\u0105\u12a4\n\u0105\3\u0105"+
		"\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105"+
		"\5\u0105\u12b0\n\u0105\3\u0105\3\u0105\5\u0105\u12b4\n\u0105\3\u0105\3"+
		"\u0105\5\u0105\u12b8\n\u0105\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u12be"+
		"\n\u0105\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u12c4\n\u0105\3\u0105"+
		"\5\u0105\u12c7\n\u0105\5\u0105\u12c9\n\u0105\3\u0106\3\u0106\3\u0106\7"+
		"\u0106\u12ce\n\u0106\f\u0106\16\u0106\u12d1\13\u0106\3\u0106\3\u0106\3"+
		"\u0106\3\u0106\3\u0106\3\u0106\7\u0106\u12d9\n\u0106\f\u0106\16\u0106"+
		"\u12dc\13\u0106\3\u0106\3\u0106\3\u0106\7\u0106\u12e1\n\u0106\f\u0106"+
		"\16\u0106\u12e4\13\u0106\3\u0107\3\u0107\3\u0108\3\u0108\3\u0109\3\u0109"+
		"\3\u0109\13\u0613\u0656\u0692\u06d5\u06e6\u0702\u070b\u0714\u071d\6\u00a6"+
		"\u0150\u0156\u015c\u010a\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&("+
		"*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
		"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
		"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
		"\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114"+
		"\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c"+
		"\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144"+
		"\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c"+
		"\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174"+
		"\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c"+
		"\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4"+
		"\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc"+
		"\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4"+
		"\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec"+
		"\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204"+
		"\u0206\u0208\u020a\u020c\u020e\u0210\2E\4\2GG||\4\2\\\\\u0109\u0109\4"+
		"\2++\u0120\u0120\4\2\u0091\u0091\u00a5\u00a5\3\2;<\4\2\u0154\u0154\u0185"+
		"\u0185\4\2\17\17\60\60\7\2\67\67HH\u0080\u0080\u008f\u008f\u00ce\u00ce"+
		"\3\2ef\4\2\u0080\u0080\u008f\u008f\5\2\13\13pp\u0151\u0151\4\2\13\13\u00c8"+
		"\u00c8\5\2VV\u00e2\u00e2\u012e\u012e\5\2WW\u00e3\u00e3\u012f\u012f\3\2"+
		"\u0181\u0182\6\2xx\u00af\u00af\u0138\u0138\u0173\u0173\5\2xx\u0138\u0138"+
		"\u0173\u0173\4\2\31\31ee\4\2\u0088\u0088\u00bd\u00bd\4\2\u0153\u0153\u0184"+
		"\u0184\4\2\u0152\u0152\u015e\u015e\4\2KK\u0129\u0129\4\2zz\u00a6\u00a6"+
		"\4\2\16\16kk\4\2\u01b6\u01b6\u01b8\u01b8\4\2ll\u00fd\u00fd\4\2\u00f5\u00f5"+
		"\u0140\u0140\4\2\n\n\u00e9\u00e9\3\2\u00c4\u00c5\5\2\16\16\24\24\u013f"+
		"\u013f\5\2\u0083\u0083\u016c\u016c\u0175\u0175\4\2\u019f\u01a0\u01a4\u01a4"+
		"\4\2mm\u01a1\u01a3\4\2\u019f\u01a0\u01a7\u01a7\3\2\u019c\u019e\r\2QQS"+
		"S\u009d\u009d\u00d7\u00d7\u00d9\u00d9\u00db\u00db\u00de\u00de\u010b\u010b"+
		"\u012c\u012c\u0188\u0188\u0191\u0191\5\2MP\u0136\u0136\u017c\u017c\4\2"+
		"XY\u0161\u0161\5\2Z[\u015d\u015d\u0162\u0162\4\2--\u016e\u016e\4\2\u00a2"+
		"\u00a2\u011f\u011f\3\2\u014f\u0150\4\2\6\6\u0091\u0091\4\2\6\6\u008c\u008c"+
		"\5\2##\u00c0\u00c0\u0167\u0167\3\2\u0194\u019b\5\2mm\u019f\u01a7\u01a9"+
		"\u01a9\6\2\22\22\u00a5\u00a5\u00e9\u00e9\u00f4\u00f4\4\2\u0083\u0083\u016c"+
		"\u016c\3\2\u019f\u01a0\n\2QR\u009d\u009e\u00d7\u00dc\u00de\u00df\u00e4"+
		"\u00e5\u012c\u012d\u0188\u0189\u0191\u0192\b\2QQ\u009d\u009d\u00db\u00db"+
		"\u00de\u00de\u012c\u012c\u0191\u0191\3\2\61\62\4\2]^\u00ec\u00ec\4\2\u00de"+
		"\u00de\u0191\u0191\6\2QQ\u009d\u009d\u00db\u00db\u012c\u012c\5\2\u009d"+
		"\u009d\u00db\u00db\u012c\u012c\21\2\37 \"\"\'\'UUoo\u0089\u0089\u00b1"+
		"\u00b2\u00cf\u00cf\u010f\u010f\u013a\u013a\u013e\u013e\u015f\u0160\u0163"+
		"\u0163\u0183\u0183\u0187\u0187\4\2``\u0194\u0194\4\2\u0144\u0144\u01bc"+
		"\u01bc\4\2\u008b\u008b\u0104\u0104\3\2\u01b7\u01b8\4\2\u00ed\u00ed\u0118"+
		"\u0118\4\2pp\u0137\u0137;\2\13\r\17\21\23\23\25\27\31\33\35\"$(*+.\62"+
		"\64\67::<DFHKLQjlprrttvwy\u0082\u0085\u0085\u0087\u008b\u008e\u0090\u0093"+
		"\u0096\u0099\u009a\u009c\u00a4\u00a6\u00a9\u00ab\u00ae\u00b0\u00b2\u00b4"+
		"\u00b4\u00b6\u00b7\u00b9\u00bd\u00bf\u00bf\u00c1\u00c1\u00c3\u00e5\u00e7"+
		"\u00e8\u00eb\u00ee\u00f2\u00f3\u00f6\u00f6\u00f8\u00f9\u00fb\u0104\u0106"+
		"\u0113\u0115\u0115\u0117\u0123\u0125\u0130\u0132\u0135\u0137\u013e\u0140"+
		"\u0143\u0145\u0153\u0155\u015a\u015d\u0163\u0166\u0166\u0168\u0172\u0176"+
		"\u017b\u017e\u0189\u018c\u018d\u0190\u0193\22\2\23\23JJxx\u0092\u0092"+
		"\u00aa\u00aa\u00af\u00af\u00b8\u00b8\u00be\u00be\u00c2\u00c2\u00e6\u00e6"+
		"\u00f0\u00f0\u0124\u0124\u0132\u0132\u0138\u0138\u0173\u0173\u017d\u017d"+
		"\23\2\13\22\24IKwy\u0091\u0093\u00a9\u00ab\u00ae\u00b0\u00b7\u00b9\u00bd"+
		"\u00bf\u00c1\u00c3\u00e5\u00e7\u00ef\u00f1\u0123\u0125\u0131\u0133\u0137"+
		"\u0139\u0172\u0174\u017c\u017e\u0193\2\u1595\2\u0214\3\2\2\2\4\u0216\3"+
		"\2\2\2\6\u0225\3\2\2\2\b\u0236\3\2\2\2\n\u0247\3\2\2\2\f\u0254\3\2\2\2"+
		"\16\u0256\3\2\2\2\20\u0258\3\2\2\2\22\u026c\3\2\2\2\24\u026e\3\2\2\2\26"+
		"\u0276\3\2\2\2\30\u0281\3\2\2\2\32\u028c\3\2\2\2\34\u02a2\3\2\2\2\36\u02ad"+
		"\3\2\2\2 \u02b0\3\2\2\2\"\u02d6\3\2\2\2$\u02d9\3\2\2\2&\u02e3\3\2\2\2"+
		"(\u02f5\3\2\2\2*\u02ff\3\2\2\2,\u0302\3\2\2\2.\u0304\3\2\2\2\60\u0307"+
		"\3\2\2\2\62\u030a\3\2\2\2\64\u030d\3\2\2\2\66\u0310\3\2\2\28\u0313\3\2"+
		"\2\2:\u0316\3\2\2\2<\u06a9\3\2\2\2>\u06ab\3\2\2\2@\u06ae\3\2\2\2B\u06b1"+
		"\3\2\2\2D\u06ce\3\2\2\2F\u0720\3\2\2\2H\u0722\3\2\2\2J\u0733\3\2\2\2L"+
		"\u0737\3\2\2\2N\u0739\3\2\2\2P\u073b\3\2\2\2R\u07e5\3\2\2\2T\u07e7\3\2"+
		"\2\2V\u07f9\3\2\2\2X\u07ff\3\2\2\2Z\u0805\3\2\2\2\\\u0811\3\2\2\2^\u081e"+
		"\3\2\2\2`\u0821\3\2\2\2b\u082a\3\2\2\2d\u082d\3\2\2\2f\u0831\3\2\2\2h"+
		"\u088b\3\2\2\2j\u088d\3\2\2\2l\u0891\3\2\2\2n\u08a6\3\2\2\2p\u08a8\3\2"+
		"\2\2r\u08b0\3\2\2\2t\u08b2\3\2\2\2v\u08b4\3\2\2\2x\u08bd\3\2\2\2z\u08bf"+
		"\3\2\2\2|\u08c7\3\2\2\2~\u08d3\3\2\2\2\u0080\u08e4\3\2\2\2\u0082\u08f8"+
		"\3\2\2\2\u0084\u08fb\3\2\2\2\u0086\u0906\3\2\2\2\u0088\u0916\3\2\2\2\u008a"+
		"\u091c\3\2\2\2\u008c\u091e\3\2\2\2\u008e\u0929\3\2\2\2\u0090\u0930\3\2"+
		"\2\2\u0092\u093b\3\2\2\2\u0094\u094c\3\2\2\2\u0096\u0954\3\2\2\2\u0098"+
		"\u0956\3\2\2\2\u009a\u095c\3\2\2\2\u009c\u099c\3\2\2\2\u009e\u09a4\3\2"+
		"\2\2\u00a0\u09ad\3\2\2\2\u00a2\u09b9\3\2\2\2\u00a4\u09ed\3\2\2\2\u00a6"+
		"\u09f0\3\2\2\2\u00a8\u0a19\3\2\2\2\u00aa\u0a1b\3\2\2\2\u00ac\u0a23\3\2"+
		"\2\2\u00ae\u0a45\3\2\2\2\u00b0\u0a73\3\2\2\2\u00b2\u0a88\3\2\2\2\u00b4"+
		"\u0aa8\3\2\2\2\u00b6\u0ab4\3\2\2\2\u00b8\u0ab7\3\2\2\2\u00ba\u0ac0\3\2"+
		"\2\2\u00bc\u0ace\3\2\2\2\u00be\u0ae1\3\2\2\2\u00c0\u0af5\3\2\2\2\u00c2"+
		"\u0afb\3\2\2\2\u00c4\u0afd\3\2\2\2\u00c6\u0b02\3\2\2\2\u00c8\u0b0a\3\2"+
		"\2\2\u00ca\u0b0e\3\2\2\2\u00cc\u0b11\3\2\2\2\u00ce\u0b14\3\2\2\2\u00d0"+
		"\u0b2e\3\2\2\2\u00d2\u0b30\3\2\2\2\u00d4\u0b53\3\2\2\2\u00d6\u0b7c\3\2"+
		"\2\2\u00d8\u0b80\3\2\2\2\u00da\u0b9b\3\2\2\2\u00dc\u0b9f\3\2\2\2\u00de"+
		"\u0bae\3\2\2\2\u00e0\u0bb0\3\2\2\2\u00e2\u0bce\3\2\2\2\u00e4\u0bd0\3\2"+
		"\2\2\u00e6\u0bd7\3\2\2\2\u00e8\u0be4\3\2\2\2\u00ea\u0be9\3\2\2\2\u00ec"+
		"\u0beb\3\2\2\2\u00ee\u0bfa\3\2\2\2\u00f0\u0c12\3\2\2\2\u00f2\u0c1f\3\2"+
		"\2\2\u00f4\u0c21\3\2\2\2\u00f6\u0c23\3\2\2\2\u00f8\u0c27\3\2\2\2\u00fa"+
		"\u0c2a\3\2\2\2\u00fc\u0c2e\3\2\2\2\u00fe\u0c4e\3\2\2\2\u0100\u0c51\3\2"+
		"\2\2\u0102\u0c5d\3\2\2\2\u0104\u0c70\3\2\2\2\u0106\u0c8a\3\2\2\2\u0108"+
		"\u0c90\3\2\2\2\u010a\u0c92\3\2\2\2\u010c\u0cb6\3\2\2\2\u010e\u0cb8\3\2"+
		"\2\2\u0110\u0cbc\3\2\2\2\u0112\u0cc4\3\2\2\2\u0114\u0ccf\3\2\2\2\u0116"+
		"\u0cd3\3\2\2\2\u0118\u0cde\3\2\2\2\u011a\u0d01\3\2\2\2\u011c\u0d03\3\2"+
		"\2\2\u011e\u0d06\3\2\2\2\u0120\u0d24\3\2\2\2\u0122\u0d40\3\2\2\2\u0124"+
		"\u0d5b\3\2\2\2\u0126\u0d61\3\2\2\2\u0128\u0d65\3\2\2\2\u012a\u0d67\3\2"+
		"\2\2\u012c\u0d7d\3\2\2\2\u012e\u0db0\3\2\2\2\u0130\u0db2\3\2\2\2\u0132"+
		"\u0dba\3\2\2\2\u0134\u0dc2\3\2\2\2\u0136\u0dca\3\2\2\2\u0138\u0dd2\3\2"+
		"\2\2\u013a\u0dd9\3\2\2\2\u013c\u0ddd\3\2\2\2\u013e\u0de7\3\2\2\2\u0140"+
		"\u0def\3\2\2\2\u0142\u0dfc\3\2\2\2\u0144\u0e0b\3\2\2\2\u0146\u0e0f\3\2"+
		"\2\2\u0148\u0e11\3\2\2\2\u014a\u0e13\3\2\2\2\u014c\u0e19\3\2\2\2\u014e"+
		"\u0e1b\3\2\2\2\u0150\u0e2f\3\2\2\2\u0152\u0e8e\3\2\2\2\u0154\u0e90\3\2"+
		"\2\2\u0156\u0e96\3\2\2\2\u0158\u0eb4\3\2\2\2\u015a\u0eb6\3\2\2\2\u015c"+
		"\u0fab\3\2\2\2\u015e\u0fc2\3\2\2\2\u0160\u0fcb\3\2\2\2\u0162\u0fcd\3\2"+
		"\2\2\u0164\u0fd6\3\2\2\2\u0166\u0fe2\3\2\2\2\u0168\u0fec\3\2\2\2\u016a"+
		"\u0ffd\3\2\2\2\u016c\u0fff\3\2\2\2\u016e\u1001\3\2\2\2\u0170\u1003\3\2"+
		"\2\2\u0172\u1005\3\2\2\2\u0174\u1007\3\2\2\2\u0176\u100c\3\2\2\2\u0178"+
		"\u1013\3\2\2\2\u017a\u1017\3\2\2\2\u017c\u101c\3\2\2\2\u017e\u1022\3\2"+
		"\2\2\u0180\u1029\3\2\2\2\u0182\u102b\3\2\2\2\u0184\u1030\3\2\2\2\u0186"+
		"\u1032\3\2\2\2\u0188\u1036\3\2\2\2\u018a\u1071\3\2\2\2\u018c\u1073\3\2"+
		"\2\2\u018e\u1084\3\2\2\2\u0190\u10a0\3\2\2\2\u0192\u10a2\3\2\2\2\u0194"+
		"\u10aa\3\2\2\2\u0196\u10b8\3\2\2\2\u0198\u10ba\3\2\2\2\u019a\u10bd\3\2"+
		"\2\2\u019c\u10c0\3\2\2\2\u019e\u10c8\3\2\2\2\u01a0\u10d2\3\2\2\2\u01a2"+
		"\u10dc\3\2\2\2\u01a4\u10de\3\2\2\2\u01a6\u10e6\3\2\2\2\u01a8\u10f5\3\2"+
		"\2\2\u01aa\u1109\3\2\2\2\u01ac\u110b\3\2\2\2\u01ae\u111a\3\2\2\2\u01b0"+
		"\u1124\3\2\2\2\u01b2\u1126\3\2\2\2\u01b4\u112e\3\2\2\2\u01b6\u1144\3\2"+
		"\2\2\u01b8\u1147\3\2\2\2\u01ba\u114a\3\2\2\2\u01bc\u1151\3\2\2\2\u01be"+
		"\u115d\3\2\2\2\u01c0\u1168\3\2\2\2\u01c2\u1170\3\2\2\2\u01c4\u1172\3\2"+
		"\2\2\u01c6\u1177\3\2\2\2\u01c8\u1180\3\2\2\2\u01ca\u11b2\3\2\2\2\u01cc"+
		"\u11c4\3\2\2\2\u01ce\u11cd\3\2\2\2\u01d0\u11cf\3\2\2\2\u01d2\u11e1\3\2"+
		"\2\2\u01d4\u11e3\3\2\2\2\u01d6\u11eb\3\2\2\2\u01d8\u11f5\3\2\2\2\u01da"+
		"\u11fa\3\2\2\2\u01dc\u1202\3\2\2\2\u01de\u1207\3\2\2\2\u01e0\u1209\3\2"+
		"\2\2\u01e2\u1236\3\2\2\2\u01e4\u123a\3\2\2\2\u01e6\u1246\3\2\2\2\u01e8"+
		"\u124a\3\2\2\2\u01ea\u1256\3\2\2\2\u01ec\u1258\3\2\2\2\u01ee\u1260\3\2"+
		"\2\2\u01f0\u1262\3\2\2\2\u01f2\u1265\3\2\2\2\u01f4\u126a\3\2\2\2\u01f6"+
		"\u1271\3\2\2\2\u01f8\u1276\3\2\2\2\u01fa\u1278\3\2\2\2\u01fc\u127a\3\2"+
		"\2\2\u01fe\u1282\3\2\2\2\u0200\u1292\3\2\2\2\u0202\u1297\3\2\2\2\u0204"+
		"\u129b\3\2\2\2\u0206\u129f\3\2\2\2\u0208\u12c8\3\2\2\2\u020a\u12ca\3\2"+
		"\2\2\u020c\u12e5\3\2\2\2\u020e\u12e7\3\2\2\2\u0210\u12e9\3\2\2\2\u0212"+
		"\u0215\5(\25\2\u0213\u0215\5\4\3\2\u0214\u0212\3\2\2\2\u0214\u0213\3\2"+
		"\2\2\u0215\3\3\2\2\2\u0216\u0219\7\35\2\2\u0217\u0218\7\u00e9\2\2\u0218"+
		"\u021a\7\33\2\2\u0219\u0217\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021c\3"+
		"\2\2\2\u021b\u021d\5\b\5\2\u021c\u021b\3\2\2\2\u021c\u021d\3\2\2\2\u021d"+
		"\u021e\3\2\2\2\u021e\u0220\7s\2\2\u021f\u0221\7\3\2\2\u0220\u021f\3\2"+
		"\2\2\u0220\u0221\3\2\2\2\u0221\u0222\3\2\2\2\u0222\u0223\7\2\2\3\u0223"+
		"\5\3\2\2\2\u0224\u0226\5*\26\2\u0225\u0224\3\2\2\2\u0225\u0226\3\2\2\2"+
		"\u0226\u0227\3\2\2\2\u0227\u022a\7\35\2\2\u0228\u0229\7\u00e9\2\2\u0229"+
		"\u022b\7\33\2\2\u022a\u0228\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022d\3"+
		"\2\2\2\u022c\u022e\5\b\5\2\u022d\u022c\3\2\2\2\u022d\u022e\3\2\2\2\u022e"+
		"\u022f\3\2\2\2\u022f\u0231\7s\2\2\u0230\u0232\5,\27\2\u0231\u0230\3\2"+
		"\2\2\u0231\u0232\3\2\2\2\u0232\7\3\2\2\2\u0233\u0234\5\n\6\2\u0234\u0235"+
		"\7\3\2\2\u0235\u0237\3\2\2\2\u0236\u0233\3\2\2\2\u0237\u0238\3\2\2\2\u0238"+
		"\u0236\3\2\2\2\u0238\u0239\3\2\2\2\u0239\t\3\2\2\2\u023a\u0248\5\20\t"+
		"\2\u023b\u0248\5<\37\2\u023c\u0248\5\f\7\2\u023d\u0248\5\6\4\2\u023e\u0248"+
		"\5\26\f\2\u023f\u0248\5\32\16\2\u0240\u0248\5\"\22\2\u0241\u0248\5\30"+
		"\r\2\u0242\u0248\5\34\17\2\u0243\u0248\5\36\20\2\u0244\u0248\5 \21\2\u0245"+
		"\u0248\5$\23\2\u0246\u0248\5&\24\2\u0247\u023a\3\2\2\2\u0247\u023b\3\2"+
		"\2\2\u0247\u023c\3\2\2\2\u0247\u023d\3\2\2\2\u0247\u023e\3\2\2\2\u0247"+
		"\u023f\3\2\2\2\u0247\u0240\3\2\2\2\u0247\u0241\3\2\2\2\u0247\u0242\3\2"+
		"\2\2\u0247\u0243\3\2\2\2\u0247\u0244\3\2\2\2\u0247\u0245\3\2\2\2\u0247"+
		"\u0246\3\2\2\2\u0248\13\3\2\2\2\u0249\u024a\7\u0137\2\2\u024a\u0255\5"+
		"\u00c6d\2\u024b\u024c\7\u0137\2\2\u024c\u024d\7\4\2\2\u024d\u024e\5\u0130"+
		"\u0099\2\u024e\u024f\7\5\2\2\u024f\u0250\7\u0194\2\2\u0250\u0251\7\4\2"+
		"\2\u0251\u0252\5f\64\2\u0252\u0253\7\5\2\2\u0253\u0255\3\2\2\2\u0254\u0249"+
		"\3\2\2\2\u0254\u024b\3\2\2\2\u0255\r\3\2\2\2\u0256\u0257\5\u0202\u0102"+
		"\2\u0257\17\3\2\2\2\u0258\u0259\7_\2\2\u0259\u025a\5\u0132\u009a\2\u025a"+
		"\u0261\7D\2\2\u025b\u025c\7\u008c\2\2\u025c\u025e\7\u0146\2\2\u025d\u025f"+
		"\7\u017e\2\2\u025e\u025d\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0260\3\2\2"+
		"\2\u0260\u0262\5\16\b\2\u0261\u025b\3\2\2\2\u0261\u0262\3\2\2\2\u0262"+
		"\21\3\2\2\2\u0263\u0265\7\u0146\2\2\u0264\u0266\7\u017e\2\2\u0265\u0264"+
		"\3\2\2\2\u0265\u0266\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u026d\5\16\b\2"+
		"\u0268\u026d\7\u0145\2\2\u0269\u026a\7\u00e9\2\2\u026a\u026d\7\u0090\2"+
		"\2\u026b\u026d\5\u0132\u009a\2\u026c\u0263\3\2\2\2\u026c\u0268\3\2\2\2"+
		"\u026c\u0269\3\2\2\2\u026c\u026b\3\2\2\2\u026d\23\3\2\2\2\u026e\u0273"+
		"\5\22\n\2\u026f\u0270\7\6\2\2\u0270\u0272\5\22\n\2\u0271\u026f\3\2\2\2"+
		"\u0272\u0275\3\2\2\2\u0273\u0271\3\2\2\2\u0273\u0274\3\2\2\2\u0274\25"+
		"\3\2\2\2\u0275\u0273\3\2\2\2\u0276\u0277\7_\2\2\u0277\u0278\t\2\2\2\u0278"+
		"\u0279\7\u009a\2\2\u0279\u027a\7\u008c\2\2\u027a\u027e\5\24\13\2\u027b"+
		"\u027f\5\6\4\2\u027c\u027f\5<\37\2\u027d\u027f\5\f\7\2\u027e\u027b\3\2"+
		"\2\2\u027e\u027c\3\2\2\2\u027e\u027d\3\2\2\2\u027f\27\3\2\2\2\u0280\u0282"+
		"\5*\26\2\u0281\u0280\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0283\3\2\2\2\u0283"+
		"\u0284\7\u018c\2\2\u0284\u0285\5\u0150\u00a9\2\u0285\u0286\7n\2\2\u0286"+
		"\u0287\5\b\5\2\u0287\u0288\7s\2\2\u0288\u028a\7\u018c\2\2\u0289\u028b"+
		"\5,\27\2\u028a\u0289\3\2\2\2\u028a\u028b\3\2\2\2\u028b\31\3\2\2\2\u028c"+
		"\u028d\7\u00a1\2\2\u028d\u028e\5\u0150\u00a9\2\u028e\u028f\7\u015b\2\2"+
		"\u028f\u0297\5\b\5\2\u0290\u0291\7r\2\2\u0291\u0292\5\u0150\u00a9\2\u0292"+
		"\u0293\7\u015b\2\2\u0293\u0294\5\b\5\2\u0294\u0296\3\2\2\2\u0295\u0290"+
		"\3\2\2\2\u0296\u0299\3\2\2\2\u0297\u0295\3\2\2\2\u0297\u0298\3\2\2\2\u0298"+
		"\u029c\3\2\2\2\u0299\u0297\3\2\2\2\u029a\u029b\7q\2\2\u029b\u029d\5\b"+
		"\5\2\u029c\u029a\3\2\2\2\u029c\u029d\3\2\2\2\u029d\u029e\3\2\2\2\u029e"+
		"\u029f\7s\2\2\u029f\u02a0\7\u00a1\2\2\u02a0\33\3\2\2\2\u02a1\u02a3\5*"+
		"\26\2\u02a2\u02a1\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4"+
		"\u02a5\7\u011b\2\2\u02a5\u02a6\5\b\5\2\u02a6\u02a7\7\u0179\2\2\u02a7\u02a8"+
		"\5\u0150\u00a9\2\u02a8\u02a9\7s\2\2\u02a9\u02ab\7\u011b\2\2\u02aa\u02ac"+
		"\5,\27\2\u02ab\u02aa\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\35\3\2\2\2\u02ad"+
		"\u02ae\7\u00c1\2\2\u02ae\u02af\5\u0132\u009a\2\u02af\37\3\2\2\2\u02b0"+
		"\u02b1\7\u00b7\2\2\u02b1\u02b2\5\u0132\u009a\2\u02b2!\3\2\2\2\u02b3\u02b9"+
		"\7,\2\2\u02b4\u02b5\7\u018a\2\2\u02b5\u02b6\5\u0150\u00a9\2\u02b6\u02b7"+
		"\7\u015b\2\2\u02b7\u02b8\5\b\5\2\u02b8\u02ba\3\2\2\2\u02b9\u02b4\3\2\2"+
		"\2\u02ba\u02bb\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02bf"+
		"\3\2\2\2\u02bd\u02be\7q\2\2\u02be\u02c0\5\b\5\2\u02bf\u02bd\3\2\2\2\u02bf"+
		"\u02c0\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02c2\7s\2\2\u02c2\u02c3\7,\2"+
		"\2\u02c3\u02d7\3\2\2\2\u02c4\u02c5\7,\2\2\u02c5\u02cb\5\u0148\u00a5\2"+
		"\u02c6\u02c7\7\u018a\2\2\u02c7\u02c8\5\u0148\u00a5\2\u02c8\u02c9\7\u015b"+
		"\2\2\u02c9\u02ca\5\b\5\2\u02ca\u02cc\3\2\2\2\u02cb\u02c6\3\2\2\2\u02cc"+
		"\u02cd\3\2\2\2\u02cd\u02cb\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02d1\3\2"+
		"\2\2\u02cf\u02d0\7q\2\2\u02d0\u02d2\5\b\5\2\u02d1\u02cf\3\2\2\2\u02d1"+
		"\u02d2\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d4\7s\2\2\u02d4\u02d5\7,\2"+
		"\2\u02d5\u02d7\3\2\2\2\u02d6\u02b3\3\2\2\2\u02d6\u02c4\3\2\2\2\u02d7#"+
		"\3\2\2\2\u02d8\u02da\5*\26\2\u02d9\u02d8\3\2\2\2\u02d9\u02da\3\2\2\2\u02da"+
		"\u02db\3\2\2\2\u02db\u02dc\7\u00d0\2\2\u02dc\u02dd\5\b\5\2\u02dd\u02de"+
		"\7s\2\2\u02de\u02e0\7\u00d0\2\2\u02df\u02e1\5,\27\2\u02e0\u02df\3\2\2"+
		"\2\u02e0\u02e1\3\2\2\2\u02e1%\3\2\2\2\u02e2\u02e4\5*\26\2\u02e3\u02e2"+
		"\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e9\7\u008c\2"+
		"\2\u02e6\u02e7\5\u0132\u009a\2\u02e7\u02e8\7\30\2\2\u02e8\u02ea\3\2\2"+
		"\2\u02e9\u02e6\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ec"+
		"\5f\64\2\u02ec\u02ed\7n\2\2\u02ed\u02ee\5\b\5\2\u02ee\u02ef\7s\2\2\u02ef"+
		"\u02f1\7\u008c\2\2\u02f0\u02f2\5,\27\2\u02f1\u02f0\3\2\2\2\u02f1\u02f2"+
		"\3\2\2\2\u02f2\'\3\2\2\2\u02f3\u02f6\5<\37\2\u02f4\u02f6\5F$\2\u02f5\u02f3"+
		"\3\2\2\2\u02f5\u02f4\3\2\2\2\u02f6\u02fa\3\2\2\2\u02f7\u02f9\7\3\2\2\u02f8"+
		"\u02f7\3\2\2\2\u02f9\u02fc\3\2\2\2\u02fa\u02f8\3\2\2\2\u02fa\u02fb\3\2"+
		"\2\2\u02fb\u02fd\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fd\u02fe\7\2\2\3\u02fe"+
		")\3\2\2\2\u02ff\u0300\5\u0132\u009a\2\u0300\u0301\7\u01aa\2\2\u0301+\3"+
		"\2\2\2\u0302\u0303\5\u0132\u009a\2\u0303-\3\2\2\2\u0304\u0305\5\u013c"+
		"\u009f\2\u0305\u0306\7\2\2\3\u0306/\3\2\2\2\u0307\u0308\5\u0138\u009d"+
		"\2\u0308\u0309\7\2\2\3\u0309\61\3\2\2\2\u030a\u030b\5\u0132\u009a\2\u030b"+
		"\u030c\7\2\2\3\u030c\63\3\2\2\2\u030d\u030e\5\u013a\u009e\2\u030e\u030f"+
		"\7\2\2\3\u030f\65\3\2\2\2\u0310\u0311\5\u0190\u00c9\2\u0311\u0312\7\2"+
		"\2\3\u0312\67\3\2\2\2\u0313\u0314\5\u019c\u00cf\2\u0314\u0315\7\2\2\3"+
		"\u03159\3\2\2\2\u0316\u0317\5\u01a4\u00d3\2\u0317\u0318\7\2\2\3\u0318"+
		";\3\2\2\2\u0319\u06aa\5f\64\2\u031a\u06aa\5H%\2\u031b\u031d\5|?\2\u031c"+
		"\u031b\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u06aa\5\u009c"+
		"O\2\u031f\u0320\7\u017b\2\2\u0320\u06aa\5\u009eP\2\u0321\u0322\7\u017b"+
		"\2\2\u0322\u0323\5r:\2\u0323\u0324\5\u009eP\2\u0324\u06aa\3\2\2\2\u0325"+
		"\u0326\7\u0137\2\2\u0326\u0327\7.\2\2\u0327\u06aa\5\u00a0Q\2\u0328\u0329"+
		"\7I\2\2\u0329\u032e\5r:\2\u032a\u032b\7\u00a1\2\2\u032b\u032c\5\u0154"+
		"\u00ab\2\u032c\u032d\7{\2\2\u032d\u032f\3\2\2\2\u032e\u032a\3\2\2\2\u032e"+
		"\u032f\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0339\5\u009eP\2\u0331\u0338"+
		"\5b\62\2\u0332\u0338\5^\60\2\u0333\u0338\5\u0186\u00c4\2\u0334\u0335\7"+
		"\u018e\2\2\u0335\u0336\t\3\2\2\u0336\u0338\5\u0084C\2\u0337\u0331\3\2"+
		"\2\2\u0337\u0332\3\2\2\2\u0337\u0333\3\2\2\2\u0337\u0334\3\2\2\2\u0338"+
		"\u033b\3\2\2\2\u0339\u0337\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u06aa\3\2"+
		"\2\2\u033b\u0339\3\2\2\2\u033c\u033d\7\17\2\2\u033d\u033e\5r:\2\u033e"+
		"\u033f\5\u009eP\2\u033f\u0340\7\u0137\2\2\u0340\u0341\t\3\2\2\u0341\u0342"+
		"\5\u0084C\2\u0342\u06aa\3\2\2\2\u0343\u0344\7\17\2\2\u0344\u0345\5r:\2"+
		"\u0345\u0346\5\u009eP\2\u0346\u0347\7\u0178\2\2\u0347\u0348\t\3\2\2\u0348"+
		"\u0349\5\u0084C\2\u0349\u06aa\3\2\2\2\u034a\u034b\7\17\2\2\u034b\u034c"+
		"\5r:\2\u034c\u034d\5\u009eP\2\u034d\u034e\5\u0186\u00c4\2\u034e\u06aa"+
		"\3\2\2\2\u034f\u0350\7\17\2\2\u0350\u0351\5r:\2\u0351\u0352\5\u009eP\2"+
		"\u0352\u0353\7\u0137\2\2\u0353\u0354\5^\60\2\u0354\u06aa\3\2\2\2\u0355"+
		"\u0356\7p\2\2\u0356\u0359\5r:\2\u0357\u0358\7\u00a1\2\2\u0358\u035a\7"+
		"{\2\2\u0359\u0357\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035b\3\2\2\2\u035b"+
		"\u035d\5\u009eP\2\u035c\u035e\t\4\2\2\u035d\u035c\3\2\2\2\u035d\u035e"+
		"\3\2\2\2\u035e\u06aa\3\2\2\2\u035f\u0360\7\u013b\2\2\u0360\u0363\5t;\2"+
		"\u0361\u0362\t\5\2\2\u0362\u0364\5\u0132\u009a\2\u0363\u0361\3\2\2\2\u0363"+
		"\u0364\3\2\2\2\u0364\u0369\3\2\2\2\u0365\u0367\7\u00c4\2\2\u0366\u0365"+
		"\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u036a\5\u0202\u0102"+
		"\2\u0369\u0366\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u06aa\3\2\2\2\u036b\u0370"+
		"\5T+\2\u036c\u036d\7\4\2\2\u036d\u036e\5\u01a0\u00d1\2\u036e\u036f\7\5"+
		"\2\2\u036f\u0371\3\2\2\2\u0370\u036c\3\2\2\2\u0370\u0371\3\2\2\2\u0371"+
		"\u0373\3\2\2\2\u0372\u0374\5\u0080A\2\u0373\u0372\3\2\2\2\u0373\u0374"+
		"\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u037a\5\u0082B\2\u0376\u0378\7\30\2"+
		"\2\u0377\u0376\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037b"+
		"\5f\64\2\u037a\u0377\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u06aa\3\2\2\2\u037c"+
		"\u037d\7I\2\2\u037d\u0382\7\u0154\2\2\u037e\u037f\7\u00a1\2\2\u037f\u0380"+
		"\5\u0154\u00ab\2\u0380\u0381\7{\2\2\u0381\u0383\3\2\2\2\u0382\u037e\3"+
		"\2\2\2\u0382\u0383\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u0385\5\u0138\u009d"+
		"\2\u0385\u0386\7\u00c4\2\2\u0386\u038f\5\u0138\u009d\2\u0387\u038e\5\u0080"+
		"A\2\u0388\u038e\5\u012e\u0098\2\u0389\u038e\5\u0094K\2\u038a\u038e\5^"+
		"\60\2\u038b\u038c\7\u0158\2\2\u038c\u038e\5\u0084C\2\u038d\u0387\3\2\2"+
		"\2\u038d\u0388\3\2\2\2\u038d\u0389\3\2\2\2\u038d\u038a\3\2\2\2\u038d\u038b"+
		"\3\2\2\2\u038e\u0391\3\2\2\2\u038f\u038d\3\2\2\2\u038f\u0390\3\2\2\2\u0390"+
		"\u06aa\3\2\2\2\u0391\u038f\3\2\2\2\u0392\u0397\5V,\2\u0393\u0394\7\4\2"+
		"\2\u0394\u0395\5\u01a0\u00d1\2\u0395\u0396\7\5\2\2\u0396\u0398\3\2\2\2"+
		"\u0397\u0393\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039a\3\2\2\2\u0399\u039b"+
		"\5\u0080A\2\u039a\u0399\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039c\3\2\2"+
		"\2\u039c\u03a1\5\u0082B\2\u039d\u039f\7\30\2\2\u039e\u039d\3\2\2\2\u039e"+
		"\u039f\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a2\5f\64\2\u03a1\u039e\3\2"+
		"\2\2\u03a1\u03a2\3\2\2\2\u03a2\u06aa\3\2\2\2\u03a3\u03a4\7\21\2\2\u03a4"+
		"\u03a5\7\u0154\2\2\u03a5\u03a7\5\u009eP\2\u03a6\u03a8\5l\67\2\u03a7\u03a6"+
		"\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03aa\7B\2\2\u03aa"+
		"\u03b2\7\u0148\2\2\u03ab\u03b3\5\u01da\u00ee\2\u03ac\u03ad\7\u008c\2\2"+
		"\u03ad\u03ae\7<\2\2\u03ae\u03b3\5\u0110\u0089\2\u03af\u03b0\7\u008c\2"+
		"\2\u03b0\u03b1\7\16\2\2\u03b1\u03b3\7<\2\2\u03b2\u03ab\3\2\2\2\u03b2\u03ac"+
		"\3\2\2\2\u03b2\u03af\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u06aa\3\2\2\2\u03b4"+
		"\u03b5\7\21\2\2\u03b5\u03b8\7\u0155\2\2\u03b6\u03b7\t\5\2\2\u03b7\u03b9"+
		"\5\u009eP\2\u03b8\u03b6\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03ba\3\2\2"+
		"\2\u03ba\u03bb\7B\2\2\u03bb\u03bd\7\u0148\2\2\u03bc\u03be\5\u01da\u00ee"+
		"\2\u03bd\u03bc\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u06aa\3\2\2\2\u03bf\u03c0"+
		"\7\17\2\2\u03c0\u03c1\7\u0154\2\2\u03c1\u03c2\5\u009eP\2\u03c2\u03c3\7"+
		"\13\2\2\u03c3\u03c4\t\6\2\2\u03c4\u03c5\5\u0192\u00ca\2\u03c5\u06aa\3"+
		"\2\2\2\u03c6\u03c7\7\17\2\2\u03c7\u03c8\7\u0154\2\2\u03c8\u03c9\5\u009e"+
		"P\2\u03c9\u03ca\7\13\2\2\u03ca\u03cb\t\6\2\2\u03cb\u03cc\7\4\2\2\u03cc"+
		"\u03cd\5\u0192\u00ca\2\u03cd\u03ce\7\5\2\2\u03ce\u06aa\3\2\2\2\u03cf\u03d0"+
		"\7\17\2\2\u03d0\u03d1\7\u0154\2\2\u03d1\u03d2\5\u009eP\2\u03d2\u03d3\7"+
		"\u0119\2\2\u03d3\u03d4\7;\2\2\u03d4\u03d5\5\u0132\u009a\2\u03d5\u03d6"+
		"\7\u0164\2\2\u03d6\u03d7\5\u01d6\u00ec\2\u03d7\u06aa\3\2\2\2\u03d8\u03d9"+
		"\7\17\2\2\u03d9\u03da\7\u0154\2\2\u03da\u03db\5\u009eP\2\u03db\u03dc\7"+
		"p\2\2\u03dc\u03df\t\6\2\2\u03dd\u03de\7\u00a1\2\2\u03de\u03e0\7{\2\2\u03df"+
		"\u03dd\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e2\7\4"+
		"\2\2\u03e2\u03e3\5\u0130\u0099\2\u03e3\u03e4\7\5\2\2\u03e4\u06aa\3\2\2"+
		"\2\u03e5\u03e6\7\17\2\2\u03e6\u03e7\7\u0154\2\2\u03e7\u03e8\5\u009eP\2"+
		"\u03e8\u03e9\7p\2\2\u03e9\u03ec\t\6\2\2\u03ea\u03eb\7\u00a1\2\2\u03eb"+
		"\u03ed\7{\2\2\u03ec\u03ea\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03ee\3\2"+
		"\2\2\u03ee\u03ef\5\u0130\u0099\2\u03ef\u06aa\3\2\2\2\u03f0\u03f1\7\17"+
		"\2\2\u03f1\u03f2\t\7\2\2\u03f2\u03f3\5\u009eP\2\u03f3\u03f4\7\u0119\2"+
		"\2\u03f4\u03f5\7\u0164\2\2\u03f5\u03f6\5\u0132\u009a\2\u03f6\u06aa\3\2"+
		"\2\2\u03f7\u03f8\7\17\2\2\u03f8\u03f9\t\7\2\2\u03f9\u03fa\5\u009eP\2\u03fa"+
		"\u03fb\7\u0137\2\2\u03fb\u03fc\7\u0158\2\2\u03fc\u03fd\5\u0084C\2\u03fd"+
		"\u06aa\3\2\2\2\u03fe\u03ff\7\17\2\2\u03ff\u0400\t\7\2\2\u0400\u0401\5"+
		"\u009eP\2\u0401\u0402\7\u0178\2\2\u0402\u0405\7\u0158\2\2\u0403\u0404"+
		"\7\u00a1\2\2\u0404\u0406\7{\2\2\u0405\u0403\3\2\2\2\u0405\u0406\3\2\2"+
		"\2\u0406\u0407\3\2\2\2\u0407\u0408\5\u0084C\2\u0408\u06aa\3\2\2\2\u0409"+
		"\u040a\7\17\2\2\u040a\u040b\7\u0154\2\2\u040b\u040c\5\u009eP\2\u040c\u040e"+
		"\t\b\2\2\u040d\u040f\7;\2\2\u040e\u040d\3\2\2\2\u040e\u040f\3\2\2\2\u040f"+
		"\u0410\3\2\2\2\u0410\u0411\5\u01fc\u00ff\2\u0411\u06aa\3\2\2\2\u0412\u0413"+
		"\7\17\2\2\u0413\u0414\7\u0154\2\2\u0414\u0416\5\u009eP\2\u0415\u0417\5"+
		"l\67\2\u0416\u0415\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0418\3\2\2\2\u0418"+
		"\u041a\7\60\2\2\u0419\u041b\7;\2\2\u041a\u0419\3\2\2\2\u041a\u041b\3\2"+
		"\2\2\u041b\u041c\3\2\2\2\u041c\u041d\5\u0132\u009a\2\u041d\u041f\5\u019e"+
		"\u00d0\2\u041e\u0420\5\u0184\u00c3\2\u041f\u041e\3\2\2\2\u041f\u0420\3"+
		"\2\2\2\u0420\u06aa\3\2\2\2\u0421\u0422\7\17\2\2\u0422\u0423\7\u0154\2"+
		"\2\u0423\u0425\5\u009eP\2\u0424\u0426\5l\67\2\u0425\u0424\3\2\2\2\u0425"+
		"\u0426\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0428\7\u011d\2\2\u0428\u0429"+
		"\7<\2\2\u0429\u042a\7\4\2\2\u042a\u042b\5\u0192\u00ca\2\u042b\u042c\7"+
		"\5\2\2\u042c\u06aa\3\2\2\2\u042d\u042e\7\17\2\2\u042e\u042f\7\u0154\2"+
		"\2\u042f\u0431\5\u009eP\2\u0430\u0432\5l\67\2\u0431\u0430\3\2\2\2\u0431"+
		"\u0432\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0434\7\u0137\2\2\u0434\u0435"+
		"\7\u0134\2\2\u0435\u0439\5\u0202\u0102\2\u0436\u0437\7\u018e\2\2\u0437"+
		"\u0438\7\u0135\2\2\u0438\u043a\5\u0084C\2\u0439\u0436\3\2\2\2\u0439\u043a"+
		"\3\2\2\2\u043a\u06aa\3\2\2\2\u043b\u043c\7\17\2\2\u043c\u043d\7\u0154"+
		"\2\2\u043d\u043f\5\u009eP\2\u043e\u0440\5l\67\2\u043f\u043e\3\2\2\2\u043f"+
		"\u0440\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0442\7\u0137\2\2\u0442\u0443"+
		"\7\u0135\2\2\u0443\u0444\5\u0084C\2\u0444\u06aa\3\2\2\2\u0445\u0446\7"+
		"\17\2\2\u0446\u0447\t\7\2\2\u0447\u0448\5\u009eP\2\u0448\u044d\7\13\2"+
		"\2\u0449\u044a\7\u00a1\2\2\u044a\u044b\5\u0154\u00ab\2\u044b\u044c\7{"+
		"\2\2\u044c\u044e\3\2\2\2\u044d\u0449\3\2\2\2\u044d\u044e\3\2\2\2\u044e"+
		"\u0450\3\2\2\2\u044f\u0451\5j\66\2\u0450\u044f\3\2\2\2\u0451\u0452\3\2"+
		"\2\2\u0452\u0450\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u06aa\3\2\2\2\u0454"+
		"\u0455\7\17\2\2\u0455\u0456\7\u0154\2\2\u0456\u0457\5\u009eP\2\u0457\u0458"+
		"\5l\67\2\u0458\u0459\7\u0119\2\2\u0459\u045a\7\u0164\2\2\u045a\u045b\5"+
		"l\67\2\u045b\u06aa\3\2\2\2\u045c\u045d\7\17\2\2\u045d\u045e\t\7\2\2\u045e"+
		"\u045f\5\u009eP\2\u045f\u0462\7p\2\2\u0460\u0461\7\u00a1\2\2\u0461\u0463"+
		"\7{\2\2\u0462\u0460\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u0464\3\2\2\2\u0464"+
		"\u0469\5l\67\2\u0465\u0466\7\6\2\2\u0466\u0468\5l\67\2\u0467\u0465\3\2"+
		"\2\2\u0468\u046b\3\2\2\2\u0469\u0467\3\2\2\2\u0469\u046a\3\2\2\2\u046a"+
		"\u046d\3\2\2\2\u046b\u0469\3\2\2\2\u046c\u046e\7\u010a\2\2\u046d\u046c"+
		"\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u06aa\3\2\2\2\u046f\u0470\7\17\2\2"+
		"\u0470\u0471\7\u0154\2\2\u0471\u0473\5\u009eP\2\u0472\u0474\5l\67\2\u0473"+
		"\u0472\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0475\3\2\2\2\u0475\u0476\7\u0137"+
		"\2\2\u0476\u0477\5^\60\2\u0477\u06aa\3\2\2\2\u0478\u0479\7\17\2\2\u0479"+
		"\u047a\7\u0154\2\2\u047a\u047b\5\u009eP\2\u047b\u047c\7\u0112\2\2\u047c"+
		"\u047d\7\u00ff\2\2\u047d\u06aa\3\2\2\2\u047e\u047f\7\17\2\2\u047f\u0480"+
		"\7\u0154\2\2\u0480\u0485\5\u009eP\2\u0481\u0486\5X-\2\u0482\u0483\7\65"+
		"\2\2\u0483\u0484\7&\2\2\u0484\u0486\7\u00e8\2\2\u0485\u0481\3\2\2\2\u0485"+
		"\u0482\3\2\2\2\u0486\u06aa\3\2\2\2\u0487\u0488\7\17\2\2\u0488\u0489\7"+
		"\u0154\2\2\u0489\u048a\5\u009eP\2\u048a\u048b\5\u0186\u00c4\2\u048b\u06aa"+
		"\3\2\2\2\u048c\u048d\7\17\2\2\u048d\u048e\7\u0154\2\2\u048e\u048f\5\u009e"+
		"P\2\u048f\u0490\7\13\2\2\u0490\u0491\5\u01e8\u00f5\2\u0491\u06aa\3\2\2"+
		"\2\u0492\u0493\7\17\2\2\u0493\u0494\7\u0154\2\2\u0494\u0495\5\u009eP\2"+
		"\u0495\u0496\7p\2\2\u0496\u0499\7E\2\2\u0497\u0498\7\u00a1\2\2\u0498\u049a"+
		"\7{\2\2\u0499\u0497\3\2\2\2\u0499\u049a\3\2\2\2\u049a\u049b\3\2\2\2\u049b"+
		"\u049d\5\u01da\u00ee\2\u049c\u049e\t\4\2\2\u049d\u049c\3\2\2\2\u049d\u049e"+
		"\3\2\2\2\u049e\u06aa\3\2\2\2\u049f\u04a0\7p\2\2\u04a0\u04a3\7\u0154\2"+
		"\2\u04a1\u04a2\7\u00a1\2\2\u04a2\u04a4\7{\2\2\u04a3\u04a1\3\2\2\2\u04a3"+
		"\u04a4\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a7\5\u009eP\2\u04a6\u04a8"+
		"\7\u010a\2\2\u04a7\u04a6\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u06aa\3\2\2"+
		"\2\u04a9\u04aa\7p\2\2\u04aa\u04ad\7\u0185\2\2\u04ab\u04ac\7\u00a1\2\2"+
		"\u04ac\u04ae\7{\2\2\u04ad\u04ab\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04af"+
		"\3\2\2\2\u04af\u06aa\5\u009eP\2\u04b0\u04b3\7I\2\2\u04b1\u04b2\7\u00f4"+
		"\2\2\u04b2\u04b4\7\u011d\2\2\u04b3\u04b1\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4"+
		"\u04b9\3\2\2\2\u04b5\u04b7\7\u0096\2\2\u04b6\u04b5\3\2\2\2\u04b6\u04b7"+
		"\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04ba\7\u0159\2\2\u04b9\u04b6\3\2\2"+
		"\2\u04b9\u04ba\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04c0\7\u0185\2\2\u04bc"+
		"\u04bd\7\u00a1\2\2\u04bd\u04be\5\u0154\u00ab\2\u04be\u04bf\7{\2\2\u04bf"+
		"\u04c1\3\2\2\2\u04c0\u04bc\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u04c2\3\2"+
		"\2\2\u04c2\u04c4\5\u009eP\2\u04c3\u04c5\5\u0116\u008c\2\u04c4\u04c3\3"+
		"\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04d0\3\2\2\2\u04c6\u04cf\5b\62\2\u04c7"+
		"\u04cf\5`\61\2\u04c8\u04cf\5\u0186\u00c4\2\u04c9\u04ca\7\u00fe\2\2\u04ca"+
		"\u04cb\7\u00f0\2\2\u04cb\u04cf\5\u010e\u0088\2\u04cc\u04cd\7\u0158\2\2"+
		"\u04cd\u04cf\5\u0084C\2\u04ce\u04c6\3\2\2\2\u04ce\u04c7\3\2\2\2\u04ce"+
		"\u04c8\3\2\2\2\u04ce\u04c9\3\2\2\2\u04ce\u04cc\3\2\2\2\u04cf\u04d2\3\2"+
		"\2\2\u04d0\u04ce\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1\u04d3\3\2\2\2\u04d2"+
		"\u04d0\3\2\2\2\u04d3\u04d4\7\30\2\2\u04d4\u04d5\5f\64\2\u04d5\u06aa\3"+
		"\2\2\2\u04d6\u04d9\7I\2\2\u04d7\u04d8\7\u00f4\2\2\u04d8\u04da\7\u011d"+
		"\2\2\u04d9\u04d7\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04dc\3\2\2\2\u04db"+
		"\u04dd\7\u0096\2\2\u04dc\u04db\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04de"+
		"\3\2\2\2\u04de\u04df\7\u0159\2\2\u04df\u04e0\7\u0185\2\2\u04e0\u04e5\5"+
		"\u0138\u009d\2\u04e1\u04e2\7\4\2\2\u04e2\u04e3\5\u019c\u00cf\2\u04e3\u04e4"+
		"\7\5\2\2\u04e4\u04e6\3\2\2\2\u04e5\u04e1\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6"+
		"\u04e7\3\2\2\2\u04e7\u04ea\5\u0080A\2\u04e8\u04e9\7\u00f3\2\2\u04e9\u04eb"+
		"\5\u0084C\2\u04ea\u04e8\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u06aa\3\2\2"+
		"\2\u04ec\u04ed\7\17\2\2\u04ed\u04ee\7\u0185\2\2\u04ee\u04f0\5\u009eP\2"+
		"\u04ef\u04f1\7\30\2\2\u04f0\u04ef\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f2"+
		"\3\2\2\2\u04f2\u04f3\5f\64\2\u04f3\u06aa\3\2\2\2\u04f4\u04f5\7\17\2\2"+
		"\u04f5\u04f6\7\u0185\2\2\u04f6\u04f7\5\u009eP\2\u04f7\u04f8\5`\61\2\u04f8"+
		"\u06aa\3\2\2\2\u04f9\u04fc\7I\2\2\u04fa\u04fb\7\u00f4\2\2\u04fb\u04fd"+
		"\7\u011d\2\2\u04fc\u04fa\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u04ff\3\2\2"+
		"\2\u04fe\u0500\7\u0159\2\2\u04ff\u04fe\3\2\2\2\u04ff\u0500\3\2\2\2\u0500"+
		"\u0501\3\2\2\2\u0501\u0506\7\u0093\2\2\u0502\u0503\7\u00a1\2\2\u0503\u0504"+
		"\5\u0154\u00ab\2\u0504\u0505\7{\2\2\u0505\u0507\3\2\2\2\u0506\u0502\3"+
		"\2\2\2\u0506\u0507\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u0509\5\u009eP\2"+
		"\u0509\u050a\7\30\2\2\u050a\u0514\5\u0202\u0102\2\u050b\u050c\7\u017d"+
		"\2\2\u050c\u0511\5\u009aN\2\u050d\u050e\7\6\2\2\u050e\u0510\5\u009aN\2"+
		"\u050f\u050d\3\2\2\2\u0510\u0513\3\2\2\2\u0511\u050f\3\2\2\2\u0511\u0512"+
		"\3\2\2\2\u0512\u0515\3\2\2\2\u0513\u0511\3\2\2\2\u0514\u050b\3\2\2\2\u0514"+
		"\u0515\3\2\2\2\u0515\u06aa\3\2\2\2\u0516\u0519\7I\2\2\u0517\u0518\7\u00f4"+
		"\2\2\u0518\u051a\7\u011d\2\2\u0519\u0517\3\2\2\2\u0519\u051a\3\2\2\2\u051a"+
		"\u051c\3\2\2\2\u051b\u051d\7\u0159\2\2\u051c\u051b\3\2\2\2\u051c\u051d"+
		"\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u0523\7\u0093\2\2\u051f\u0520\7\u00a1"+
		"\2\2\u0520\u0521\5\u0154\u00ab\2\u0521\u0522\7{\2\2\u0522\u0524\3\2\2"+
		"\2\u0523\u051f\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0526"+
		"\5\u009eP\2\u0526\u0528\7\4\2\2\u0527\u0529\5\u01a4\u00d3\2\u0528\u0527"+
		"\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u0534\7\5\2\2\u052b"+
		"\u0532\7\u0122\2\2\u052c\u0533\5\u0190\u00c9\2\u052d\u052e\7\u0154\2\2"+
		"\u052e\u052f\7\4\2\2\u052f\u0530\5\u019c\u00cf\2\u0530\u0531\7\5\2\2\u0531"+
		"\u0533\3\2\2\2\u0532\u052c\3\2\2\2\u0532\u052d\3\2\2\2\u0533\u0535\3\2"+
		"\2\2\u0534\u052b\3\2\2\2\u0534\u0535\3\2\2\2\u0535\u0536\3\2\2\2\u0536"+
		"\u0537\5\u01b6\u00dc\2\u0537\u053a\7\u0121\2\2\u0538\u053b\5f\64\2\u0539"+
		"\u053b\5\u0148\u00a5\2\u053a\u0538\3\2\2\2\u053a\u0539\3\2\2\2\u053b\u06aa"+
		"\3\2\2\2\u053c\u053e\7p\2\2\u053d\u053f\7\u0159\2\2\u053e\u053d\3\2\2"+
		"\2\u053e\u053f\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u0543\7\u0093\2\2\u0541"+
		"\u0542\7\u00a1\2\2\u0542\u0544\7{\2\2\u0543\u0541\3\2\2\2\u0543\u0544"+
		"\3\2\2\2\u0544\u0545\3\2\2\2\u0545\u06aa\5\u009eP\2\u0546\u0549\7_\2\2"+
		"\u0547\u0548\7\u00f4\2\2\u0548\u054a\7\u011d\2\2\u0549\u0547\3\2\2\2\u0549"+
		"\u054a\3\2\2\2\u054a\u054c\3\2\2\2\u054b\u054d\5v<\2\u054c\u054b\3\2\2"+
		"\2\u054c\u054d\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u0553\5\u009eP\2\u054f"+
		"\u0550\7\6\2\2\u0550\u0552\5\u009eP\2\u0551\u054f\3\2\2\2\u0552\u0555"+
		"\3\2\2\2\u0553\u0551\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0557\3\2\2\2\u0555"+
		"\u0553\3\2\2\2\u0556\u0558\5\u0190\u00c9\2\u0557\u0556\3\2\2\2\u0557\u0558"+
		"\3\2\2\2\u0558\u055a\3\2\2\2\u0559\u055b\5\u019a\u00ce\2\u055a\u0559\3"+
		"\2\2\2\u055a\u055b\3\2\2\2\u055b\u06aa\3\2\2\2\u055c\u055d\7p\2\2\u055d"+
		"\u055e\7\u0159\2\2\u055e\u0561\5v<\2\u055f\u0560\7\u00a1\2\2\u0560\u0562"+
		"\7{\2\2\u0561\u055f\3\2\2\2\u0561\u0562\3\2\2\2\u0562\u0563\3\2\2\2\u0563"+
		"\u0564\5\u009eP\2\u0564\u06aa\3\2\2\2\u0565\u0567\7}\2\2\u0566\u0568\t"+
		"\t\2\2\u0567\u0566\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u056b\3\2\2\2\u0569"+
		"\u056c\5<\37\2\u056a\u056c\5F$\2\u056b\u0569\3\2\2\2\u056b\u056a\3\2\2"+
		"\2\u056c\u06aa\3\2\2\2\u056d\u056e\7\u013b\2\2\u056e\u0571\7\u0155\2\2"+
		"\u056f\u0570\t\5\2\2\u0570\u0572\5\u009eP\2\u0571\u056f\3\2\2\2\u0571"+
		"\u0572\3\2\2\2\u0572\u0577\3\2\2\2\u0573\u0575\7\u00c4\2\2\u0574\u0573"+
		"\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u0578\5\u0202\u0102"+
		"\2\u0577\u0574\3\2\2\2\u0577\u0578\3\2\2\2\u0578\u06aa\3\2\2\2\u0579\u057a"+
		"\7\u013b\2\2\u057a\u057b\7\u0154\2\2\u057b\u057e\7\u0080\2\2\u057c\u057d"+
		"\t\5\2\2\u057d\u057f\5\u009eP\2\u057e\u057c\3\2\2\2\u057e\u057f\3\2\2"+
		"\2\u057f\u0580\3\2\2\2\u0580\u0581\7\u00c4\2\2\u0581\u0583\5\u0202\u0102"+
		"\2\u0582\u0584\5l\67\2\u0583\u0582\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u06aa"+
		"\3\2\2\2\u0585\u0586\7\u013b\2\2\u0586\u0587\7\u0158\2\2\u0587\u058c\5"+
		"\u009eP\2\u0588\u0589\7\4\2\2\u0589\u058a\5\u0088E\2\u058a\u058b\7\5\2"+
		"\2\u058b\u058d\3\2\2\2\u058c\u0588\3\2\2\2\u058c\u058d\3\2\2\2\u058d\u06aa"+
		"\3\2\2\2\u058e\u058f\7\u013b\2\2\u058f\u0590\7<\2\2\u0590\u0591\t\5\2"+
		"\2\u0591\u0594\5\u009eP\2\u0592\u0593\t\5\2\2\u0593\u0595\5\u0132\u009a"+
		"\2\u0594\u0592\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u06aa\3\2\2\2\u0596\u0597"+
		"\7\u013b\2\2\u0597\u059a\7\u0186\2\2\u0598\u0599\t\5\2\2\u0599\u059b\5"+
		"\u009eP\2\u059a\u0598\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u05a0\3\2\2\2"+
		"\u059c\u059e\7\u00c4\2\2\u059d\u059c\3\2\2\2\u059d\u059e\3\2\2\2\u059e"+
		"\u059f\3\2\2\2\u059f\u05a1\5\u0202\u0102\2\u05a0\u059d\3\2\2\2\u05a0\u05a1"+
		"\3\2\2\2\u05a1\u06aa\3\2\2\2\u05a2\u05a3\7\u013b\2\2\u05a3\u05a4\7\u00ff"+
		"\2\2\u05a4\u05a6\5\u009eP\2\u05a5\u05a7\5l\67\2\u05a6\u05a5\3\2\2\2\u05a6"+
		"\u05a7\3\2\2\2\u05a7\u06aa\3\2\2\2\u05a8\u05aa\7\u013b\2\2\u05a9\u05ab"+
		"\5\u01da\u00ee\2\u05aa\u05a9\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05ac\3"+
		"\2\2\2\u05ac\u05af\7\u0094\2\2\u05ad\u05ae\t\5\2\2\u05ae\u05b0\5\u009e"+
		"P\2\u05af\u05ad\3\2\2\2\u05af\u05b0\3\2\2\2\u05b0\u05b8\3\2\2\2\u05b1"+
		"\u05b3\7\u00c4\2\2\u05b2\u05b1\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05b6"+
		"\3\2\2\2\u05b4\u05b7\5\u0132\u009a\2\u05b5\u05b7\5\u0202\u0102\2\u05b6"+
		"\u05b4\3\2\2\2\u05b6\u05b5\3\2\2\2\u05b7\u05b9\3\2\2\2\u05b8\u05b2\3\2"+
		"\2\2\u05b8\u05b9\3\2\2\2\u05b9\u06aa\3\2\2\2\u05ba\u05bb\7\u013b\2\2\u05bb"+
		"\u05be\7\u0108\2\2\u05bc\u05bd\t\5\2\2\u05bd\u05bf\5\u009eP\2\u05be\u05bc"+
		"\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf\u06aa\3\2\2\2\u05c0\u05c1\7\u013b\2"+
		"\2\u05c1\u05c2\7I\2\2\u05c2\u05c3\7\u0154\2\2\u05c3\u05c6\5\u009eP\2\u05c4"+
		"\u05c5\7\30\2\2\u05c5\u05c7\7\u0134\2\2\u05c6\u05c4\3\2\2\2\u05c6\u05c7"+
		"\3\2\2\2\u05c7\u06aa\3\2\2\2\u05c8\u05c9\7\u013b\2\2\u05c9\u05ca\7L\2"+
		"\2\u05ca\u06aa\5r:\2\u05cb\u05cc\7\u013b\2\2\u05cc\u05d1\7/\2\2\u05cd"+
		"\u05cf\7\u00c4\2\2\u05ce\u05cd\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d0"+
		"\3\2\2\2\u05d0\u05d2\5\u0202\u0102\2\u05d1\u05ce\3\2\2\2\u05d1\u05d2\3"+
		"\2\2\2\u05d2\u06aa\3\2\2\2\u05d3\u05d4\t\n\2\2\u05d4\u05d6\7\u0093\2\2"+
		"\u05d5\u05d7\7\u0080\2\2\u05d6\u05d5\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7"+
		"\u05d8\3\2\2\2\u05d8\u06aa\5x=\2\u05d9\u05da\t\n\2\2\u05da\u05db\7\u0107"+
		"\2\2\u05db\u06aa\5\u009eP\2\u05dc\u05dd\t\n\2\2\u05dd\u05df\5r:\2\u05de"+
		"\u05e0\7\u0080\2\2\u05df\u05de\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e1"+
		"\3\2\2\2\u05e1\u05e2\5\u009eP\2\u05e2\u06aa\3\2\2\2\u05e3\u05e5\t\n\2"+
		"\2\u05e4\u05e6\7\u0154\2\2\u05e5\u05e4\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6"+
		"\u05e8\3\2\2\2\u05e7\u05e9\t\13\2\2\u05e8\u05e7\3\2\2\2\u05e8\u05e9\3"+
		"\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05ec\5\u009eP\2\u05eb\u05ed\5l\67\2"+
		"\u05ec\u05eb\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u05ef\3\2\2\2\u05ee\u05f0"+
		"\5z>\2\u05ef\u05ee\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f3\3\2\2\2\u05f1"+
		"\u05f2\7\30\2\2\u05f2\u05f4\7\u00b9\2\2\u05f3\u05f1\3\2\2\2\u05f3\u05f4"+
		"\3\2\2\2\u05f4\u06aa\3\2\2\2\u05f5\u05f7\t\n\2\2\u05f6\u05f8\7\u010c\2"+
		"\2\u05f7\u05f6\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u06aa"+
		"\5f\64\2\u05fa\u05fb\7=\2\2\u05fb\u05fc\7\u00f0\2\2\u05fc\u05fd\5r:\2"+
		"\u05fd\u05fe\5\u009eP\2\u05fe\u05ff\7\u00b5\2\2\u05ff\u0600\5\u0204\u0103"+
		"\2\u0600\u06aa\3\2\2\2\u0601\u0602\7=\2\2\u0602\u0603\7\u00f0\2\2\u0603"+
		"\u0604\7\u0154\2\2\u0604\u0605\5\u009eP\2\u0605\u0606\7\u00b5\2\2\u0606"+
		"\u0607\5\u0204\u0103\2\u0607\u06aa\3\2\2\2\u0608\u0609\7\u0117\2\2\u0609"+
		"\u060a\7\u0154\2\2\u060a\u06aa\5\u009eP\2\u060b\u060c\7\u0117\2\2\u060c"+
		"\u060d\7\u0093\2\2\u060d\u06aa\5\u009eP\2\u060e\u0616\7\u0117\2\2\u060f"+
		"\u0617\5\u0202\u0102\2\u0610\u0612\13\2\2\2\u0611\u0610\3\2\2\2\u0612"+
		"\u0615\3\2\2\2\u0613\u0614\3\2\2\2\u0613\u0611\3\2\2\2\u0614\u0617\3\2"+
		"\2\2\u0615\u0613\3\2\2\2\u0616\u060f\3\2\2\2\u0616\u0613\3\2\2\2\u0617"+
		"\u06aa\3\2\2\2\u0618\u061a\7(\2\2\u0619\u061b\7\u00bf\2\2\u061a\u0619"+
		"\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u061d\7\u0154\2"+
		"\2\u061d\u0620\5\u009eP\2\u061e\u061f\7\u00f3\2\2\u061f\u0621\5\u0084"+
		"C\2\u0620\u061e\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u0626\3\2\2\2\u0622"+
		"\u0624\7\30\2\2\u0623\u0622\3\2\2\2\u0623\u0624\3\2\2\2\u0624\u0625\3"+
		"\2\2\2\u0625\u0627\5f\64\2\u0626\u0623\3\2\2\2\u0626\u0627\3\2\2\2\u0627"+
		"\u06aa\3\2\2\2\u0628\u0629\7\u0172\2\2\u0629\u062c\7\u0154\2\2\u062a\u062b"+
		"\7\u00a1\2\2\u062b\u062d\7{\2\2\u062c\u062a\3\2\2\2\u062c\u062d\3\2\2"+
		"\2\u062d\u062e\3\2\2\2\u062e\u06aa\5\u009eP\2\u062f\u0630\7\64\2\2\u0630"+
		"\u06aa\7(\2\2\u0631\u0632\7\u00c9\2\2\u0632\u0634\7T\2\2\u0633\u0635\7"+
		"\u00ca\2\2\u0634\u0633\3\2\2\2\u0634\u0635\3\2\2\2\u0635\u0636\3\2\2\2"+
		"\u0636\u0637\7\u00ab\2\2\u0637\u0639\5\u0202\u0102\2\u0638\u063a\7\u00fc"+
		"\2\2\u0639\u0638\3\2\2\2\u0639\u063a\3\2\2\2\u063a\u063b\3\2\2\2\u063b"+
		"\u063c\7\u00b3\2\2\u063c\u063d\7\u0154\2\2\u063d\u063f\5\u009eP\2\u063e"+
		"\u0640\5l\67\2\u063f\u063e\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u06aa\3\2"+
		"\2\2\u0641\u0642\7\u016d\2\2\u0642\u0643\7\u0154\2\2\u0643\u0645\5\u009e"+
		"P\2\u0644\u0646\5l\67\2\u0645\u0644\3\2\2\2\u0645\u0646\3\2\2\2\u0646"+
		"\u06aa\3\2\2\2\u0647\u0649\7\u00e0\2\2\u0648\u0647\3\2\2\2\u0648\u0649"+
		"\3\2\2\2\u0649\u064a\3\2\2\2\u064a\u064b\7\u011a\2\2\u064b\u064c\7\u0154"+
		"\2\2\u064c\u064f\5\u009eP\2\u064d\u064e\t\f\2\2\u064e\u0650\7\u00ff\2"+
		"\2\u064f\u064d\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u06aa\3\2\2\2\u0651\u0652"+
		"\t\r\2\2\u0652\u0656\5\u01da\u00ee\2\u0653\u0655\13\2\2\2\u0654\u0653"+
		"\3\2\2\2\u0655\u0658\3\2\2\2\u0656\u0657\3\2\2\2\u0656\u0654\3\2\2\2\u0657"+
		"\u06aa\3\2\2\2\u0658\u0656\3\2\2\2\u0659\u065a\7I\2\2\u065a\u065f\7\u00a8"+
		"\2\2\u065b\u065c\7\u00a1\2\2\u065c\u065d\5\u0154\u00ab\2\u065d\u065e\7"+
		"{\2\2\u065e\u0660\3\2\2\2\u065f\u065b\3\2\2\2\u065f\u0660\3\2\2\2\u0660"+
		"\u0661\3\2\2\2\u0661\u0662\5\u01da\u00ee\2\u0662\u0664\7\u00f0\2\2\u0663"+
		"\u0665\7\u0154\2\2\u0664\u0663\3\2\2\2\u0664\u0665\3\2\2\2\u0665\u0666"+
		"\3\2\2\2\u0666\u0669\5\u009eP\2\u0667\u0668\7\u017d\2\2\u0668\u066a\5"+
		"\u01da\u00ee\2\u0669\u0667\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066b\3\2"+
		"\2\2\u066b\u066c\7\4\2\2\u066c\u066d\5\u0134\u009b\2\u066d\u0670\7\5\2"+
		"\2\u066e\u066f\7\u00f3\2\2\u066f\u0671\5\u0084C\2\u0670\u066e\3\2\2\2"+
		"\u0670\u0671\3\2\2\2\u0671\u06aa\3\2\2\2\u0672\u0673\7p\2\2\u0673\u0676"+
		"\7\u00a8\2\2\u0674\u0675\7\u00a1\2\2\u0675\u0677\7{\2\2\u0676\u0674\3"+
		"\2\2\2\u0676\u0677\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u0679\5\u01da\u00ee"+
		"\2\u0679\u067b\7\u00f0\2\2\u067a\u067c\7\u0154\2\2\u067b\u067a\3\2\2\2"+
		"\u067b\u067c\3\2\2\2\u067c\u067d\3\2\2\2\u067d\u067e\5\u009eP\2\u067e"+
		"\u06aa\3\2\2\2\u067f\u0680\7)\2\2\u0680\u0681\5\u009eP\2\u0681\u068a\7"+
		"\4\2\2\u0682\u0687\5\u014c\u00a7\2\u0683\u0684\7\6\2\2\u0684\u0686\5\u014c"+
		"\u00a7\2\u0685\u0683\3\2\2\2\u0686\u0689\3\2\2\2\u0687\u0685\3\2\2\2\u0687"+
		"\u0688\3\2\2\2\u0688\u068b\3\2\2\2\u0689\u0687\3\2\2\2\u068a\u0682\3\2"+
		"\2\2\u068a\u068b\3\2\2\2\u068b\u068c\3\2\2\2\u068c\u068d\7\5\2\2\u068d"+
		"\u06aa\3\2\2\2\u068e\u0692\5R*\2\u068f\u0691\13\2\2\2\u0690\u068f\3\2"+
		"\2\2\u0691\u0694\3\2\2\2\u0692\u0693\3\2\2\2\u0692\u0690\3\2\2\2\u0693"+
		"\u06aa\3\2\2\2\u0694\u0692\3\2\2\2\u0695\u069b\5B\"\2\u0696\u0698\7\4"+
		"\2\2\u0697\u0699\5\u01a0\u00d1\2\u0698\u0697\3\2\2\2\u0698\u0699\3\2\2"+
		"\2\u0699\u069a\3\2\2\2\u069a\u069c\7\5\2\2\u069b\u0696\3\2\2\2\u069b\u069c"+
		"\3\2\2\2\u069c\u069e\3\2\2\2\u069d\u069f\5\u0080A\2\u069e\u069d\3\2\2"+
		"\2\u069e\u069f\3\2\2\2\u069f\u06a0\3\2\2\2\u06a0\u06a3\5\u0082B\2\u06a1"+
		"\u06a2\7\30\2\2\u06a2\u06a4\5f\64\2\u06a3\u06a1\3\2\2\2\u06a3\u06a4\3"+
		"\2\2\2\u06a4\u06aa\3\2\2\2\u06a5\u06a6\5p9\2\u06a6\u06a7\5h\65\2\u06a7"+
		"\u06a8\5f\64\2\u06a8\u06aa\3\2\2\2\u06a9\u0319\3\2\2\2\u06a9\u031a\3\2"+
		"\2\2\u06a9\u031c\3\2\2\2\u06a9\u031f\3\2\2\2\u06a9\u0321\3\2\2\2\u06a9"+
		"\u0325\3\2\2\2\u06a9\u0328\3\2\2\2\u06a9\u033c\3\2\2\2\u06a9\u0343\3\2"+
		"\2\2\u06a9\u034a\3\2\2\2\u06a9\u034f\3\2\2\2\u06a9\u0355\3\2\2\2\u06a9"+
		"\u035f\3\2\2\2\u06a9\u036b\3\2\2\2\u06a9\u037c\3\2\2\2\u06a9\u0392\3\2"+
		"\2\2\u06a9\u03a3\3\2\2\2\u06a9\u03b4\3\2\2\2\u06a9\u03bf\3\2\2\2\u06a9"+
		"\u03c6\3\2\2\2\u06a9\u03cf\3\2\2\2\u06a9\u03d8\3\2\2\2\u06a9\u03e5\3\2"+
		"\2\2\u06a9\u03f0\3\2\2\2\u06a9\u03f7\3\2\2\2\u06a9\u03fe\3\2\2\2\u06a9"+
		"\u0409\3\2\2\2\u06a9\u0412\3\2\2\2\u06a9\u0421\3\2\2\2\u06a9\u042d\3\2"+
		"\2\2\u06a9\u043b\3\2\2\2\u06a9\u0445\3\2\2\2\u06a9\u0454\3\2\2\2\u06a9"+
		"\u045c\3\2\2\2\u06a9\u046f\3\2\2\2\u06a9\u0478\3\2\2\2\u06a9\u047e\3\2"+
		"\2\2\u06a9\u0487\3\2\2\2\u06a9\u048c\3\2\2\2\u06a9\u0492\3\2\2\2\u06a9"+
		"\u049f\3\2\2\2\u06a9\u04a9\3\2\2\2\u06a9\u04b0\3\2\2\2\u06a9\u04d6\3\2"+
		"\2\2\u06a9\u04ec\3\2\2\2\u06a9\u04f4\3\2\2\2\u06a9\u04f9\3\2\2\2\u06a9"+
		"\u0516\3\2\2\2\u06a9\u053c\3\2\2\2\u06a9\u0546\3\2\2\2\u06a9\u055c\3\2"+
		"\2\2\u06a9\u0565\3\2\2\2\u06a9\u056d\3\2\2\2\u06a9\u0579\3\2\2\2\u06a9"+
		"\u0585\3\2\2\2\u06a9\u058e\3\2\2\2\u06a9\u0596\3\2\2\2\u06a9\u05a2\3\2"+
		"\2\2\u06a9\u05a8\3\2\2\2\u06a9\u05ba\3\2\2\2\u06a9\u05c0\3\2\2\2\u06a9"+
		"\u05c8\3\2\2\2\u06a9\u05cb\3\2\2\2\u06a9\u05d3\3\2\2\2\u06a9\u05d9\3\2"+
		"\2\2\u06a9\u05dc\3\2\2\2\u06a9\u05e3\3\2\2\2\u06a9\u05f5\3\2\2\2\u06a9"+
		"\u05fa\3\2\2\2\u06a9\u0601\3\2\2\2\u06a9\u0608\3\2\2\2\u06a9\u060b\3\2"+
		"\2\2\u06a9\u060e\3\2\2\2\u06a9\u0618\3\2\2\2\u06a9\u0628\3\2\2\2\u06a9"+
		"\u062f\3\2\2\2\u06a9\u0631\3\2\2\2\u06a9\u0641\3\2\2\2\u06a9\u0648\3\2"+
		"\2\2\u06a9\u0651\3\2\2\2\u06a9\u0659\3\2\2\2\u06a9\u0672\3\2\2\2\u06a9"+
		"\u067f\3\2\2\2\u06a9\u068e\3\2\2\2\u06a9\u0695\3\2\2\2\u06a9\u06a5\3\2"+
		"\2\2\u06aa=\3\2\2\2\u06ab\u06ac\7\u00d4\2\2\u06ac\u06ad\7\u0185\2\2\u06ad"+
		"?\3\2\2\2\u06ae\u06af\7\u014c\2\2\u06af\u06b0\7\u0154\2\2\u06b0A\3\2\2"+
		"\2\u06b1\u06b4\7I\2\2\u06b2\u06b5\5> \2\u06b3\u06b5\5@!\2\u06b4\u06b2"+
		"\3\2\2\2\u06b4\u06b3\3\2\2\2\u06b5\u06ba\3\2\2\2\u06b6\u06b7\7\u00a1\2"+
		"\2\u06b7\u06b8\5\u0154\u00ab\2\u06b8\u06b9\7{\2\2\u06b9\u06bb\3\2\2\2"+
		"\u06ba\u06b6\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06bd"+
		"\5\u009eP\2\u06bdC\3\2\2\2\u06be\u06bf\7\u014b\2\2\u06bf\u06c1\5\u0132"+
		"\u009a\2\u06c0\u06c2\5\u011c\u008f\2\u06c1\u06c0\3\2\2\2\u06c1\u06c2";
	private static final String _serializedATNSegment1 =
		"\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c4\5\u012c\u0097\2\u06c4\u06cf\3"+
		"\2\2\2\u06c5\u06c6\7\u014b\2\2\u06c6\u06c7\7\4\2\2\u06c7\u06c8\5\u0132"+
		"\u009a\2\u06c8\u06ca\7\5\2\2\u06c9\u06cb\5\u011c\u008f\2\u06ca\u06c9\3"+
		"\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06cd\5\u012c\u0097"+
		"\2\u06cd\u06cf\3\2\2\2\u06ce\u06be\3\2\2\2\u06ce\u06c5\3\2\2\2\u06cfE"+
		"\3\2\2\2\u06d0\u06d1\7\u0137\2\2\u06d1\u06d5\7\u0126\2\2\u06d2\u06d4\13"+
		"\2\2\2\u06d3\u06d2\3\2\2\2\u06d4\u06d7\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d5"+
		"\u06d3\3\2\2\2\u06d6\u0721\3\2\2\2\u06d7\u06d5\3\2\2\2\u06d8\u06d9\7\u0137"+
		"\2\2\u06d9\u06da\7\u015c\2\2\u06da\u06db\7\u0193\2\2\u06db\u0721\5\u0174"+
		"\u00bb\2\u06dc\u06dd\7\u0137\2\2\u06dd\u06de\7\u015c\2\2\u06de\u06df\7"+
		"\u0193\2\2\u06df\u0721\5L\'\2\u06e0\u06e1\7\u0137\2\2\u06e1\u06e2\7\u015c"+
		"\2\2\u06e2\u06e6\7\u0193\2\2\u06e3\u06e5\13\2\2\2\u06e4\u06e3\3\2\2\2"+
		"\u06e5\u06e8\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e6\u06e4\3\2\2\2\u06e7\u0721"+
		"\3\2\2\2\u06e8\u06e6\3\2\2\2\u06e9\u06ea\7\u0137\2\2\u06ea\u06eb\5v<\2"+
		"\u06eb\u06ec\5\u00c6d\2\u06ec\u0721\3\2\2\2\u06ed\u06ee\7\u0137\2\2\u06ee"+
		"\u06ef\5v<\2\u06ef\u06f0\7\4\2\2\u06f0\u06f1\5\u0130\u0099\2\u06f1\u06f2"+
		"\7\5\2\2\u06f2\u06f3\7\u0194\2\2\u06f3\u06f4\7\4\2\2\u06f4\u06f5\5f\64"+
		"\2\u06f5\u06f6\7\5\2\2\u06f6\u0721\3\2\2\2\u06f7\u06f8\7\u0137\2\2\u06f8"+
		"\u06f9\5N(\2\u06f9\u06fa\7\u0194\2\2\u06fa\u06fb\5P)\2\u06fb\u0721\3\2"+
		"\2\2\u06fc\u06fd\7\u0137\2\2\u06fd\u0705\5N(\2\u06fe\u0702\7\u0194\2\2"+
		"\u06ff\u0701\13\2\2\2\u0700\u06ff\3\2\2\2\u0701\u0704\3\2\2\2\u0702\u0703"+
		"\3\2\2\2\u0702\u0700\3\2\2\2\u0703\u0706\3\2\2\2\u0704\u0702\3\2\2\2\u0705"+
		"\u06fe\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u0721\3\2\2\2\u0707\u070b\7\u0137"+
		"\2\2\u0708\u070a\13\2\2\2\u0709\u0708\3\2\2\2\u070a\u070d\3\2\2\2\u070b"+
		"\u070c\3\2\2\2\u070b\u0709\3\2\2\2\u070c\u070e\3\2\2\2\u070d\u070b\3\2"+
		"\2\2\u070e\u070f\7\u0194\2\2\u070f\u0721\5P)\2\u0710\u0714\7\u0137\2\2"+
		"\u0711\u0713\13\2\2\2\u0712\u0711\3\2\2\2\u0713\u0716\3\2\2\2\u0714\u0715"+
		"\3\2\2\2\u0714\u0712\3\2\2\2\u0715\u0721\3\2\2\2\u0716\u0714\3\2\2\2\u0717"+
		"\u0718\7\u011e\2\2\u0718\u0721\5N(\2\u0719\u071d\7\u011e\2\2\u071a\u071c"+
		"\13\2\2\2\u071b\u071a\3\2\2\2\u071c\u071f\3\2\2\2\u071d\u071e\3\2\2\2"+
		"\u071d\u071b\3\2\2\2\u071e\u0721\3\2\2\2\u071f\u071d\3\2\2\2\u0720\u06d0"+
		"\3\2\2\2\u0720\u06d8\3\2\2\2\u0720\u06dc\3\2\2\2\u0720\u06e0\3\2\2\2\u0720"+
		"\u06e9\3\2\2\2\u0720\u06ed\3\2\2\2\u0720\u06f7\3\2\2\2\u0720\u06fc\3\2"+
		"\2\2\u0720\u0707\3\2\2\2\u0720\u0710\3\2\2\2\u0720\u0717\3\2\2\2\u0720"+
		"\u0719\3\2\2\2\u0721G\3\2\2\2\u0722\u0723\7\u0165\2\2\u0723\u0724\7\u00a3"+
		"\2\2\u0724\u0727\5\u0148\u00a5\2\u0725\u0726\7\u00b3\2\2\u0726\u0728\5"+
		"\u0130\u0099\2\u0727\u0725\3\2\2\2\u0727\u0728\3\2\2\2\u0728\u072a\3\2"+
		"\2\2\u0729\u072b\5J&\2\u072a\u0729\3\2\2\2\u072a\u072b\3\2\2\2\u072bI"+
		"\3\2\2\2\u072c\u072d\7\u017d\2\2\u072d\u072e\7\4\2\2\u072e\u072f\5\u013e"+
		"\u00a0\2\u072f\u0730\7\5\2\2\u0730\u0734\3\2\2\2\u0731\u0732\7\u017d\2"+
		"\2\u0732\u0734\5\u013e\u00a0\2\u0733\u072c\3\2\2\2\u0733\u0731\3\2\2\2"+
		"\u0734K\3\2\2\2\u0735\u0738\5\u0202\u0102\2\u0736\u0738\7\u00ca\2\2\u0737"+
		"\u0735\3\2\2\2\u0737\u0736\3\2\2\2\u0738M\3\2\2\2\u0739\u073a\5\u01de"+
		"\u00f0\2\u073aO\3\2\2\2\u073b\u073c\5\u01e0\u00f1\2\u073cQ\3\2\2\2\u073d"+
		"\u073e\7I\2\2\u073e\u07e6\7\u0126\2\2\u073f\u0740\7p\2\2\u0740\u07e6\7"+
		"\u0126\2\2\u0741\u0743\7\u0097\2\2\u0742\u0744\7\u0126\2\2\u0743\u0742"+
		"\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u07e6\3\2\2\2\u0745\u0747\7\u0123\2"+
		"\2\u0746\u0748\7\u0126\2\2\u0747\u0746\3\2\2\2\u0747\u0748\3\2\2\2\u0748"+
		"\u07e6\3\2\2\2\u0749\u074a\7\u013b\2\2\u074a\u07e6\7\u0097\2\2\u074b\u074c"+
		"\7\u013b\2\2\u074c\u074e\7\u0126\2\2\u074d\u074f\7\u0097\2\2\u074e\u074d"+
		"\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u07e6\3\2\2\2\u0750\u0751\7\u013b\2"+
		"\2\u0751\u07e6\7\u0106\2\2\u0752\u0753\7\u013b\2\2\u0753\u07e6\7\u0127"+
		"\2\2\u0754\u0755\7\u013b\2\2\u0755\u0756\7L\2\2\u0756\u07e6\7\u0127\2"+
		"\2\u0757\u0758\7~\2\2\u0758\u07e6\7\u0154\2\2\u0759\u075a\7\u00a4\2\2"+
		"\u075a\u07e6\7\u0154\2\2\u075b\u075c\7\u013b\2\2\u075c\u07e6\7@\2\2\u075d"+
		"\u075e\7\u013b\2\2\u075e\u075f\7I\2\2\u075f\u07e6\7\u0154\2\2\u0760\u0761"+
		"\7\u013b\2\2\u0761\u07e6\7\u0169\2\2\u0762\u0763\7\u013b\2\2\u0763\u07e6"+
		"\7\u00a9\2\2\u0764\u0765\7\u013b\2\2\u0765\u07e6\7\u00cd\2\2\u0766\u0767"+
		"\7I\2\2\u0767\u07e6\7\u00a8\2\2\u0768\u0769\7p\2\2\u0769\u07e6\7\u00a8"+
		"\2\2\u076a\u076b\7\17\2\2\u076b\u07e6\7\u00a8\2\2\u076c\u076d\7\u00cc"+
		"\2\2\u076d\u07e6\7\u0154\2\2\u076e\u076f\7\u00cc\2\2\u076f\u07e6\7V\2"+
		"\2\u0770\u0771\7\u0176\2\2\u0771\u07e6\7\u0154\2\2\u0772\u0773\7\u0176"+
		"\2\2\u0773\u07e6\7V\2\2\u0774\u0775\7I\2\2\u0775\u0776\7\u0159\2\2\u0776"+
		"\u07e6\7\u00d1\2\2\u0777\u0778\7p\2\2\u0778\u0779\7\u0159\2\2\u0779\u07e6"+
		"\7\u00d1\2\2\u077a\u077b\7\17\2\2\u077b\u077c\7\u0154\2\2\u077c\u077d"+
		"\5\u0138\u009d\2\u077d\u077e\7\u00e9\2\2\u077e\u077f\7\66\2\2\u077f\u07e6"+
		"\3\2\2\2\u0780\u0781\7\17\2\2\u0781\u0782\7\u0154\2\2\u0782\u0783\5\u0138"+
		"\u009d\2\u0783\u0784\7\66\2\2\u0784\u0785\7&\2\2\u0785\u07e6\3\2\2\2\u0786"+
		"\u0787\7\17\2\2\u0787\u0788\7\u0154\2\2\u0788\u0789\5\u0138\u009d\2\u0789"+
		"\u078a\7\u00e9\2\2\u078a\u078b\7\u0141\2\2\u078b\u07e6\3\2\2\2\u078c\u078d"+
		"\7\17\2\2\u078d\u078e\7\u0154\2\2\u078e\u078f\5\u0138\u009d\2\u078f\u0790"+
		"\7\u013d\2\2\u0790\u0791\7&\2\2\u0791\u07e6\3\2\2\2\u0792\u0793\7\17\2"+
		"\2\u0793\u0794\7\u0154\2\2\u0794\u0795\5\u0138\u009d\2\u0795\u0796\7\u00e9"+
		"\2\2\u0796\u0797\7\u013d\2\2\u0797\u07e6\3\2\2\2\u0798\u0799\7\17\2\2"+
		"\u0799\u079a\7\u0154\2\2\u079a\u079b\5\u0138\u009d\2\u079b\u079c\7\u00e9"+
		"\2\2\u079c\u079d\7\u0149\2\2\u079d\u079e\7\30\2\2\u079e\u079f\7i\2\2\u079f"+
		"\u07e6\3\2\2\2\u07a0\u07a1\7\17\2\2\u07a1\u07a2\7\u0154\2\2\u07a2\u07a3"+
		"\5\u0138\u009d\2\u07a3\u07a4\7\u0137\2\2\u07a4\u07a5\7\u013d\2\2\u07a5"+
		"\u07a6\7\u00cb\2\2\u07a6\u07e6\3\2\2\2\u07a7\u07a8\7\17\2\2\u07a8\u07a9"+
		"\7\u0154\2\2\u07a9\u07aa\5\u0138\u009d\2\u07aa\u07ab\7y\2\2\u07ab\u07ac"+
		"\7\u00fd\2\2\u07ac\u07e6\3\2\2\2\u07ad\u07ae\7\17\2\2\u07ae\u07af\7\u0154"+
		"\2\2\u07af\u07b0\5\u0138\u009d\2\u07b0\u07b1\7\26\2\2\u07b1\u07b2\7\u00fd"+
		"\2\2\u07b2\u07e6\3\2\2\2\u07b3\u07b4\7\17\2\2\u07b4\u07b5\7\u0154\2\2"+
		"\u07b5\u07b6\5\u0138\u009d\2\u07b6\u07b7\7\u0170\2\2\u07b7\u07b8\7\u00fd"+
		"\2\2\u07b8\u07e6\3\2\2\2\u07b9\u07ba\7\17\2\2\u07ba\u07bb\7\u0154\2\2"+
		"\u07bb\u07bc\5\u0138\u009d\2\u07bc\u07bd\7\u0166\2\2\u07bd\u07e6\3\2\2"+
		"\2\u07be\u07bf\7\17\2\2\u07bf\u07c0\7\u0154\2\2\u07c0\u07c2\5\u0138\u009d"+
		"\2\u07c1\u07c3\5l\67\2\u07c2\u07c1\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07c4"+
		"\3\2\2\2\u07c4\u07c5\7?\2\2\u07c5\u07e6\3\2\2\2\u07c6\u07c7\7\17\2\2\u07c7"+
		"\u07c8\7\u0154\2\2\u07c8\u07ca\5\u0138\u009d\2\u07c9\u07cb\5l\67\2\u07ca"+
		"\u07c9\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07cc\3\2\2\2\u07cc\u07cd\7C"+
		"\2\2\u07cd\u07e6\3\2\2\2\u07ce\u07cf\7\17\2\2\u07cf\u07d0\7\u0154\2\2"+
		"\u07d0\u07d2\5\u0138\u009d\2\u07d1\u07d3\5l\67\2\u07d2\u07d1\3\2\2\2\u07d2"+
		"\u07d3\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d5\7\u0137\2\2\u07d5\u07d6"+
		"\7\u0087\2\2\u07d6\u07e6\3\2\2\2\u07d7\u07d8\7\17\2\2\u07d8\u07d9\7\u0154"+
		"\2\2\u07d9\u07db\5\u0138\u009d\2\u07da\u07dc\5l\67\2\u07db\u07da\3\2\2"+
		"\2\u07db\u07dc\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd\u07de\7\u011d\2\2\u07de"+
		"\u07df\7<\2\2\u07df\u07e6\3\2\2\2\u07e0\u07e1\7\u0147\2\2\u07e1\u07e6"+
		"\7\u0168\2\2\u07e2\u07e6\7>\2\2\u07e3\u07e6\7\u0128\2\2\u07e4\u07e6\7"+
		"h\2\2\u07e5\u073d\3\2\2\2\u07e5\u073f\3\2\2\2\u07e5\u0741\3\2\2\2\u07e5"+
		"\u0745\3\2\2\2\u07e5\u0749\3\2\2\2\u07e5\u074b\3\2\2\2\u07e5\u0750\3\2"+
		"\2\2\u07e5\u0752\3\2\2\2\u07e5\u0754\3\2\2\2\u07e5\u0757\3\2\2\2\u07e5"+
		"\u0759\3\2\2\2\u07e5\u075b\3\2\2\2\u07e5\u075d\3\2\2\2\u07e5\u0760\3\2"+
		"\2\2\u07e5\u0762\3\2\2\2\u07e5\u0764\3\2\2\2\u07e5\u0766\3\2\2\2\u07e5"+
		"\u0768\3\2\2\2\u07e5\u076a\3\2\2\2\u07e5\u076c\3\2\2\2\u07e5\u076e\3\2"+
		"\2\2\u07e5\u0770\3\2\2\2\u07e5\u0772\3\2\2\2\u07e5\u0774\3\2\2\2\u07e5"+
		"\u0777\3\2\2\2\u07e5\u077a\3\2\2\2\u07e5\u0780\3\2\2\2\u07e5\u0786\3\2"+
		"\2\2\u07e5\u078c\3\2\2\2\u07e5\u0792\3\2\2\2\u07e5\u0798\3\2\2\2\u07e5"+
		"\u07a0\3\2\2\2\u07e5\u07a7\3\2\2\2\u07e5\u07ad\3\2\2\2\u07e5\u07b3\3\2"+
		"\2\2\u07e5\u07b9\3\2\2\2\u07e5\u07be\3\2\2\2\u07e5\u07c6\3\2\2\2\u07e5"+
		"\u07ce\3\2\2\2\u07e5\u07d7\3\2\2\2\u07e5\u07e0\3\2\2\2\u07e5\u07e2\3\2"+
		"\2\2\u07e5\u07e3\3\2\2\2\u07e5\u07e4\3\2\2\2\u07e6S\3\2\2\2\u07e7\u07e9"+
		"\7I\2\2\u07e8\u07ea\7\u0159\2\2\u07e9\u07e8\3\2\2\2\u07e9\u07ea\3\2\2"+
		"\2\u07ea\u07ec\3\2\2\2\u07eb\u07ed\7\u0081\2\2\u07ec\u07eb\3\2\2\2\u07ec"+
		"\u07ed\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07f3\7\u0154\2\2\u07ef\u07f0"+
		"\7\u00a1\2\2\u07f0\u07f1\5\u0154\u00ab\2\u07f1\u07f2\7{\2\2\u07f2\u07f4"+
		"\3\2\2\2\u07f3\u07ef\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5"+
		"\u07f6\5\u009eP\2\u07f6U\3\2\2\2\u07f7\u07f8\7I\2\2\u07f8\u07fa\7\u00f4"+
		"\2\2\u07f9\u07f7\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u07fb\3\2\2\2\u07fb"+
		"\u07fc\7\u011d\2\2\u07fc\u07fd\7\u0154\2\2\u07fd\u07fe\5\u009eP\2\u07fe"+
		"W\3\2\2\2\u07ff\u0800\7\65\2\2\u0800\u0801\7&\2\2\u0801\u0802\7\4\2\2"+
		"\u0802\u0803\5\u0130\u0099\2\u0803\u0804\7\5\2\2\u0804Y\3\2\2\2\u0805"+
		"\u0806\7\66\2\2\u0806\u0807\7&\2\2\u0807\u080b\5\u010e\u0088\2\u0808\u0809"+
		"\7\u0141\2\2\u0809\u080a\7&\2\2\u080a\u080c\5\u0112\u008a\2\u080b\u0808"+
		"\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u080e\7\u00b3\2"+
		"\2\u080e\u080f\7\u01b6\2\2\u080f\u0810\7%\2\2\u0810[\3\2\2\2\u0811\u0812"+
		"\7\u013d\2\2\u0812\u0813\7&\2\2\u0813\u0814\5\u010e\u0088\2\u0814\u0817"+
		"\7\u00f0\2\2\u0815\u0818\5\u0090I\2\u0816\u0818\5\u0092J\2\u0817\u0815"+
		"\3\2\2\2\u0817\u0816\3\2\2\2\u0818\u081c\3\2\2\2\u0819\u081a\7\u0149\2"+
		"\2\u081a\u081b\7\30\2\2\u081b\u081d\7i\2\2\u081c\u0819\3\2\2\2\u081c\u081d"+
		"\3\2\2\2\u081d]\3\2\2\2\u081e\u081f\7\u00cb\2\2\u081f\u0820\5\u0202\u0102"+
		"\2\u0820_\3\2\2\2\u0821\u0822\7\u018e\2\2\u0822\u0828\7\u012e\2\2\u0823"+
		"\u0829\7!\2\2\u0824\u0829\7A\2\2\u0825\u0829\7w\2\2\u0826\u0827\7\u016f"+
		"\2\2\u0827\u0829\7w\2\2\u0828\u0823\3\2\2\2\u0828\u0824\3\2\2\2\u0828"+
		"\u0825\3\2\2\2\u0828\u0826\3\2\2\2\u0829a\3\2\2\2\u082a\u082b\7=\2\2\u082b"+
		"\u082c\5\u0202\u0102\2\u082cc\3\2\2\2\u082d\u082e\5f\64\2\u082e\u082f"+
		"\7\2\2\3\u082fe\3\2\2\2\u0830\u0832\5|?\2\u0831\u0830\3\2\2\2\u0831\u0832"+
		"\3\2\2\2\u0832\u0833\3\2\2\2\u0833\u0834\5\u00a6T\2\u0834\u0835\5\u00a2"+
		"R\2\u0835g\3\2\2\2\u0836\u0837\7\u00ae\2\2\u0837\u0839\7\u00fc\2\2\u0838"+
		"\u083a\7\u0154\2\2\u0839\u0838\3\2\2\2\u0839\u083a\3\2\2\2\u083a\u083b"+
		"\3\2\2\2\u083b\u083d\5\u009eP\2\u083c\u083e\5\u011c\u008f\2\u083d\u083c"+
		"\3\2\2\2\u083d\u083e\3\2\2\2\u083e\u0846\3\2\2\2\u083f\u0844\5l\67\2\u0840"+
		"\u0841\7\u00a1\2\2\u0841\u0842\5\u0154\u00ab\2\u0842\u0843\7{\2\2\u0843"+
		"\u0845\3\2\2\2\u0844\u0840\3\2\2\2\u0844\u0845\3\2\2\2\u0845\u0847\3\2"+
		"\2\2\u0846\u083f\3\2\2\2\u0846\u0847\3\2\2\2\u0847\u084b\3\2\2\2\u0848"+
		"\u0849\7&\2\2\u0849\u084c\7\u00e1\2\2\u084a\u084c\5\u010e\u0088\2\u084b"+
		"\u0848\3\2\2\2\u084b\u084a\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u088c\3\2"+
		"\2\2\u084d\u084e\7\u00ae\2\2\u084e\u0850\7\u00b3\2\2\u084f\u0851\7\u0154"+
		"\2\2\u0850\u084f\3\2\2\2\u0850\u0851\3\2\2\2\u0851\u0852\3\2\2\2\u0852"+
		"\u0854\5\u009eP\2\u0853\u0855\5\u011c\u008f\2\u0854\u0853\3\2\2\2\u0854"+
		"\u0855\3\2\2\2\u0855\u0857\3\2\2\2\u0856\u0858\5l\67\2\u0857\u0856\3\2"+
		"\2\2\u0857\u0858\3\2\2\2\u0858\u085d\3\2\2\2\u0859\u085a\7\u00a1\2\2\u085a"+
		"\u085b\5\u0154\u00ab\2\u085b\u085c\7{\2\2\u085c\u085e\3\2\2\2\u085d\u0859"+
		"\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u0862\3\2\2\2\u085f\u0860\7&\2\2\u0860"+
		"\u0863\7\u00e1\2\2\u0861\u0863\5\u010e\u0088\2\u0862\u085f\3\2\2\2\u0862"+
		"\u0861\3\2\2\2\u0862\u0863\3\2\2\2\u0863\u088c\3\2\2\2\u0864\u0865\7\u00ae"+
		"\2\2\u0865\u0867\7\u00b3\2\2\u0866\u0868\7\u0154\2\2\u0867\u0866\3\2\2"+
		"\2\u0867\u0868\3\2\2\2\u0868\u0869\3\2\2\2\u0869\u086b\5\u009eP\2\u086a"+
		"\u086c\5\u011c\u008f\2\u086b\u086a\3\2\2\2\u086b\u086c\3\2\2\2\u086c\u086d"+
		"\3\2\2\2\u086d\u086e\7\u011d\2\2\u086e\u086f\5\u00caf\2\u086f\u088c\3"+
		"\2\2\2\u0870\u0871\7\u00ae\2\2\u0871\u0873\7\u00fc\2\2\u0872\u0874\7\u00ca"+
		"\2\2\u0873\u0872\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u0875\3\2\2\2\u0875"+
		"\u0876\7j\2\2\u0876\u0878\5\u0202\u0102\2\u0877\u0879\5\u012e\u0098\2"+
		"\u0878\u0877\3\2\2\2\u0878\u0879\3\2\2\2\u0879\u087b\3\2\2\2\u087a\u087c"+
		"\5\u0094K\2\u087b\u087a\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u088c\3\2\2"+
		"\2\u087d\u087e\7\u00ae\2\2\u087e\u0880\7\u00fc\2\2\u087f\u0881\7\u00ca"+
		"\2\2\u0880\u087f\3\2\2\2\u0880\u0881\3\2\2\2\u0881\u0882\3\2\2\2\u0882"+
		"\u0884\7j\2\2\u0883\u0885\5\u0202\u0102\2\u0884\u0883\3\2\2\2\u0884\u0885"+
		"\3\2\2\2\u0885\u0886\3\2\2\2\u0886\u0889\5\u0080A\2\u0887\u0888\7\u00f3"+
		"\2\2\u0888\u088a\5\u0084C\2\u0889\u0887\3\2\2\2\u0889\u088a\3\2\2\2\u088a"+
		"\u088c\3\2\2\2\u088b\u0836\3\2\2\2\u088b\u084d\3\2\2\2\u088b\u0864\3\2"+
		"\2\2\u088b\u0870\3\2\2\2\u088b\u087d\3\2\2\2\u088ci\3\2\2\2\u088d\u088f"+
		"\5l\67\2\u088e\u0890\5^\60\2\u088f\u088e\3\2\2\2\u088f\u0890\3\2\2\2\u0890"+
		"k\3\2\2\2\u0891\u0892\7\u00fd\2\2\u0892\u0893\7\4\2\2\u0893\u0898\5n8"+
		"\2\u0894\u0895\7\6\2\2\u0895\u0897\5n8\2\u0896\u0894\3\2\2\2\u0897\u089a"+
		"\3\2\2\2\u0898\u0896\3\2\2\2\u0898\u0899\3\2\2\2\u0899\u089b\3\2\2\2\u089a"+
		"\u0898\3\2\2\2\u089b\u089c\7\5\2\2\u089cm\3\2\2\2\u089d\u08a0\5\u01da"+
		"\u00ee\2\u089e\u089f\7\u0194\2\2\u089f\u08a1\5\u016a\u00b6\2\u08a0\u089e"+
		"\3\2\2\2\u08a0\u08a1\3\2\2\2\u08a1\u08a7\3\2\2\2\u08a2\u08a3\5\u01da\u00ee"+
		"\2\u08a3\u08a4\7\u0194\2\2\u08a4\u08a5\7`\2\2\u08a5\u08a7\3\2\2\2\u08a6"+
		"\u089d\3\2\2\2\u08a6\u08a2\3\2\2\2\u08a7o\3\2\2\2\u08a8\u08a9\7I\2\2\u08a9"+
		"\u08aa\7\u008a\2\2\u08aa\u08ac\5\u009eP\2\u08ab\u08ad\5b\62\2\u08ac\u08ab"+
		"\3\2\2\2\u08ac\u08ad\3\2\2\2\u08ad\u08ae\3\2\2\2\u08ae\u08af\7\30\2\2"+
		"\u08afq\3\2\2\2\u08b0\u08b1\t\16\2\2\u08b1s\3\2\2\2\u08b2\u08b3\t\17\2"+
		"\2\u08b3u\3\2\2\2\u08b4\u08b5\t\20\2\2\u08b5w\3\2\2\2\u08b6\u08be\5\u009e"+
		"P\2\u08b7\u08be\5\u0202\u0102\2\u08b8\u08be\5\u016c\u00b7\2\u08b9\u08be"+
		"\5\u016e\u00b8\2\u08ba\u08be\5\u0170\u00b9\2\u08bb\u08be\5\u0158\u00ad"+
		"\2\u08bc\u08be\7\n\2\2\u08bd\u08b6\3\2\2\2\u08bd\u08b7\3\2\2\2\u08bd\u08b8"+
		"\3\2\2\2\u08bd\u08b9\3\2\2\2\u08bd\u08ba\3\2\2\2\u08bd\u08bb\3\2\2\2\u08bd"+
		"\u08bc\3\2\2\2\u08bey\3\2\2\2\u08bf\u08c4\5\u01d6\u00ec\2\u08c0\u08c1"+
		"\7\7\2\2\u08c1\u08c3\5\u01d6\u00ec\2\u08c2\u08c0\3\2\2\2\u08c3\u08c6\3"+
		"\2\2\2\u08c4\u08c2\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5{\3\2\2\2\u08c6\u08c4"+
		"\3\2\2\2\u08c7\u08c9\7\u018e\2\2\u08c8\u08ca\7\u0114\2\2\u08c9\u08c8\3"+
		"\2\2\2\u08c9\u08ca\3\2\2\2\u08ca\u08cb\3\2\2\2\u08cb\u08d0\5~@\2\u08cc"+
		"\u08cd\7\6\2\2\u08cd\u08cf\5~@\2\u08ce\u08cc\3\2\2\2\u08cf\u08d2\3\2\2"+
		"\2\u08d0\u08ce\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1}\3\2\2\2\u08d2\u08d0"+
		"\3\2\2\2\u08d3\u08d5\5\u01d6\u00ec\2\u08d4\u08d6\5\u010e\u0088\2\u08d5"+
		"\u08d4\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u08db\3\2\2\2\u08d7\u08d8\7\u00d5"+
		"\2\2\u08d8\u08d9\7\u0113\2\2\u08d9\u08da\7\u00c3\2\2\u08da\u08dc\7\u01b6"+
		"\2\2\u08db\u08d7\3\2\2\2\u08db\u08dc\3\2\2\2\u08dc\u08de\3\2\2\2\u08dd"+
		"\u08df\7\30\2\2\u08de\u08dd\3\2\2\2\u08de\u08df\3\2\2\2\u08df\u08e0\3"+
		"\2\2\2\u08e0\u08e1\7\4\2\2\u08e1\u08e2\5f\64\2\u08e2\u08e3\7\5\2\2\u08e3"+
		"\177\3\2\2\2\u08e4\u08e5\7\u017d\2\2\u08e5\u08e6\5\u0132\u009a\2\u08e6"+
		"\u0081\3\2\2\2\u08e7\u08e8\7\u00f3\2\2\u08e8\u08f7\5\u008cG\2\u08e9\u08ea"+
		"\7\u00fe\2\2\u08ea\u08eb\7&\2\2\u08eb\u08f7\5\u0140\u00a1\2\u08ec\u08f7"+
		"\5\\/\2\u08ed\u08f7\5X-\2\u08ee\u08f7\5Z.\2\u08ef\u08f7\5\u012e\u0098"+
		"\2\u08f0\u08f7\5\u0094K\2\u08f1\u08f7\5^\60\2\u08f2\u08f7\5b\62\2\u08f3"+
		"\u08f7\5\u0186\u00c4\2\u08f4\u08f5\7\u0158\2\2\u08f5\u08f7\5\u0084C\2"+
		"\u08f6\u08e7\3\2\2\2\u08f6\u08e9\3\2\2\2\u08f6\u08ec\3\2\2\2\u08f6\u08ed"+
		"\3\2\2\2\u08f6\u08ee\3\2\2\2\u08f6\u08ef\3\2\2\2\u08f6\u08f0\3\2\2\2\u08f6"+
		"\u08f1\3\2\2\2\u08f6\u08f2\3\2\2\2\u08f6\u08f3\3\2\2\2\u08f6\u08f4\3\2"+
		"\2\2\u08f7\u08fa\3\2\2\2\u08f8\u08f6\3\2\2\2\u08f8\u08f9\3\2\2\2\u08f9"+
		"\u0083\3\2\2\2\u08fa\u08f8\3\2\2\2\u08fb\u08fc\7\4\2\2\u08fc\u0901\5\u0086"+
		"D\2\u08fd\u08fe\7\6\2\2\u08fe\u0900\5\u0086D\2\u08ff\u08fd\3\2\2\2\u0900"+
		"\u0903\3\2\2\2\u0901\u08ff\3\2\2\2\u0901\u0902\3\2\2\2\u0902\u0904\3\2"+
		"\2\2\u0903\u0901\3\2\2\2\u0904\u0905\7\5\2\2\u0905\u0085\3\2\2\2\u0906"+
		"\u090b\5\u0088E\2\u0907\u0909\7\u0194\2\2\u0908\u0907\3\2\2\2\u0908\u0909"+
		"\3\2\2\2\u0909\u090a\3\2\2\2\u090a\u090c\5\u008aF\2\u090b\u0908\3\2\2"+
		"\2\u090b\u090c\3\2\2\2\u090c\u0087\3\2\2\2\u090d\u0912\5\u01d6\u00ec\2"+
		"\u090e\u090f\7\7\2\2\u090f\u0911\5\u01d6\u00ec\2\u0910\u090e\3\2\2\2\u0911"+
		"\u0914\3\2\2\2\u0912\u0910\3\2\2\2\u0912\u0913\3\2\2\2\u0913\u0917\3\2"+
		"\2\2\u0914\u0912\3\2\2\2\u0915\u0917\5\u0202\u0102\2\u0916\u090d\3\2\2"+
		"\2\u0916\u0915\3\2\2\2\u0917\u0089\3\2\2\2\u0918\u091d\7\u01b6\2\2\u0919"+
		"\u091d\7\u01b8\2\2\u091a\u091d\5\u0172\u00ba\2\u091b\u091d\5\u0202\u0102"+
		"\2\u091c\u0918\3\2\2\2\u091c\u0919\3\2\2\2\u091c\u091a\3\2\2\2\u091c\u091b"+
		"\3\2\2\2\u091d\u008b\3\2\2\2\u091e\u091f\7\4\2\2\u091f\u0924\5\u008eH"+
		"\2\u0920\u0921\7\6\2\2\u0921\u0923\5\u008eH\2\u0922\u0920\3\2\2\2\u0923"+
		"\u0926\3\2\2\2\u0924\u0922\3\2\2\2\u0924\u0925\3\2\2\2\u0925\u0927\3\2"+
		"\2\2\u0926\u0924\3\2\2\2\u0927\u0928\7\5\2\2\u0928\u008d\3\2\2\2\u0929"+
		"\u092e\5\u0088E\2\u092a\u092c\7\u0194\2\2\u092b\u092a\3\2\2\2\u092b\u092c"+
		"\3\2\2\2\u092c\u092d\3\2\2\2\u092d\u092f\5\u0148\u00a5\2\u092e\u092b\3"+
		"\2\2\2\u092e\u092f\3\2\2\2\u092f\u008f\3\2\2\2\u0930\u0931\7\4\2\2\u0931"+
		"\u0936\5\u016a\u00b6\2\u0932\u0933\7\6\2\2\u0933\u0935\5\u016a\u00b6\2"+
		"\u0934\u0932\3\2\2\2\u0935\u0938\3\2\2\2\u0936\u0934\3\2\2\2\u0936\u0937"+
		"\3\2\2\2\u0937\u0939\3\2\2\2\u0938\u0936\3\2\2\2\u0939\u093a\7\5\2\2\u093a"+
		"\u0091\3\2\2\2\u093b\u093c\7\4\2\2\u093c\u0941\5\u0090I\2\u093d\u093e"+
		"\7\6\2\2\u093e\u0940\5\u0090I\2\u093f\u093d\3\2\2\2\u0940\u0943\3\2\2"+
		"\2\u0941\u093f\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u0944\3\2\2\2\u0943\u0941"+
		"\3\2\2\2\u0944\u0945\7\5\2\2\u0945\u0093\3\2\2\2\u0946\u0947\7\u0149\2"+
		"\2\u0947\u0948\7\30\2\2\u0948\u094d\5\u0096L\2\u0949\u094a\7\u0149\2\2"+
		"\u094a\u094b\7&\2\2\u094b\u094d\5\u0098M\2\u094c\u0946\3\2\2\2\u094c\u0949"+
		"\3\2\2\2\u094d\u0095\3\2\2\2\u094e\u094f\7\u00ad\2\2\u094f\u0950\5\u0202"+
		"\u0102\2\u0950\u0951\7\u00f8\2\2\u0951\u0952\5\u0202\u0102\2\u0952\u0955"+
		"\3\2\2\2\u0953\u0955\5\u01da\u00ee\2\u0954\u094e\3\2\2\2\u0954\u0953\3"+
		"\2\2\2\u0955\u0097\3\2\2\2\u0956\u095a\5\u0202\u0102\2\u0957\u0958\7\u018e"+
		"\2\2\u0958\u0959\7\u0135\2\2\u0959\u095b\5\u0084C\2\u095a\u0957\3\2\2"+
		"\2\u095a\u095b\3\2\2\2\u095b\u0099\3\2\2\2\u095c\u095d\5\u01da\u00ee\2"+
		"\u095d\u095e\5\u0202\u0102\2\u095e\u009b\3\2\2\2\u095f\u0960\5h\65\2\u0960"+
		"\u0961\5f\64\2\u0961\u099d\3\2\2\2\u0962\u0964\5\u00d2j\2\u0963\u0965"+
		"\5\u00a4S\2\u0964\u0963\3\2\2\2\u0965\u0966\3\2\2\2\u0966\u0964\3\2\2"+
		"\2\u0966\u0967\3\2\2\2\u0967\u099d\3\2\2\2\u0968\u0969\7c\2\2\u0969\u096a"+
		"\7\u0091\2\2\u096a\u096b\5\u009eP\2\u096b\u096d\5\u012c\u0097\2\u096c"+
		"\u096e\5\u00caf\2\u096d\u096c\3\2\2\2\u096d\u096e\3\2\2\2\u096e\u099d"+
		"\3\2\2\2\u096f\u0970\7\u017a\2\2\u0970\u0971\5\u009eP\2\u0971\u0972\5"+
		"\u012c\u0097\2\u0972\u0974\5\u00b6\\\2\u0973\u0975\5\u00caf\2\u0974\u0973"+
		"\3\2\2\2\u0974\u0975\3\2\2\2\u0975\u099d\3\2\2\2\u0976\u097a\7\u00d6\2"+
		"\2\u0977\u0978\7\u018e\2\2\u0978\u0979\7\u012e\2\2\u0979\u097b\7w\2\2"+
		"\u097a\u0977\3\2\2\2\u097a\u097b\3\2\2\2\u097b\u097c\3\2\2\2\u097c\u097d"+
		"\7\u00b3\2\2\u097d\u097e\5\u009eP\2\u097e\u097f\5\u012c\u0097\2\u097f"+
		"\u0985\7\u017d\2\2\u0980\u0986\5\u009eP\2\u0981\u0982\7\4\2\2\u0982\u0983"+
		"\5f\64\2\u0983\u0984\7\5\2\2\u0984\u0986\3\2\2\2\u0985\u0980\3\2\2\2\u0985"+
		"\u0981\3\2\2\2\u0986\u0987\3\2\2\2\u0987\u0988\5\u012c\u0097\2\u0988\u0989"+
		"\7\u00f0\2\2\u0989\u098d\5\u0150\u00a9\2\u098a\u098c\5\u00b8]\2\u098b"+
		"\u098a\3\2\2\2\u098c\u098f\3\2\2\2\u098d\u098b\3\2\2\2\u098d\u098e\3\2"+
		"\2\2\u098e\u0993\3\2\2\2\u098f\u098d\3\2\2\2\u0990\u0992\5\u00ba^\2\u0991"+
		"\u0990\3\2\2\2\u0992\u0995\3\2\2\2\u0993\u0991\3\2\2\2\u0993\u0994\3\2"+
		"\2\2\u0994\u0999\3\2\2\2\u0995\u0993\3\2\2\2\u0996\u0998\5\u00bc_\2\u0997"+
		"\u0996\3\2\2\2\u0998\u099b\3\2\2\2\u0999\u0997\3\2\2\2\u0999\u099a\3\2"+
		"\2\2\u099a\u099d\3\2\2\2\u099b\u0999\3\2\2\2\u099c\u095f\3\2\2\2\u099c"+
		"\u0962\3\2\2\2\u099c\u0968\3\2\2\2\u099c\u096f\3\2\2\2\u099c\u0976\3\2"+
		"\2\2\u099d\u009d\3\2\2\2\u099e\u099f\7\u009f\2\2\u099f\u09a0\7\4\2\2\u09a0"+
		"\u09a1\5\u0148\u00a5\2\u09a1\u09a2\7\5\2\2\u09a2\u09a5\3\2\2\2\u09a3\u09a5"+
		"\5\u0132\u009a\2\u09a4\u099e\3\2\2\2\u09a4\u09a3\3\2\2\2\u09a5\u009f\3"+
		"\2\2\2\u09a6\u09a7\7\u009f\2\2\u09a7\u09a8\7\4\2\2\u09a8\u09a9\5\u0148"+
		"\u00a5\2\u09a9\u09aa\7\5\2\2\u09aa\u09ae\3\2\2\2\u09ab\u09ae\5\u01d6\u00ec"+
		"\2\u09ac\u09ae\5\u0202\u0102\2\u09ad\u09a6\3\2\2\2\u09ad\u09ab\3\2\2\2"+
		"\u09ad\u09ac\3\2\2\2\u09ae\u00a1\3\2\2\2\u09af\u09b0\7\u00f5\2\2\u09b0"+
		"\u09b1\7&\2\2\u09b1\u09b6\5\u00aaV\2\u09b2\u09b3\7\6\2\2\u09b3\u09b5\5"+
		"\u00aaV\2\u09b4\u09b2\3\2\2\2\u09b5\u09b8\3\2\2\2\u09b6\u09b4\3\2\2\2"+
		"\u09b6\u09b7\3\2\2\2\u09b7\u09ba\3\2\2\2\u09b8\u09b6\3\2\2\2\u09b9\u09af"+
		"\3\2\2\2\u09b9\u09ba\3\2\2\2\u09ba\u09c5\3\2\2\2\u09bb\u09bc\7\65\2\2"+
		"\u09bc\u09bd\7&\2\2\u09bd\u09c2\5\u0148\u00a5\2\u09be\u09bf\7\6\2\2\u09bf"+
		"\u09c1\5\u0148\u00a5\2\u09c0\u09be\3\2\2\2\u09c1\u09c4\3\2\2\2\u09c2\u09c0"+
		"\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u09c6\3\2\2\2\u09c4\u09c2\3\2\2\2\u09c5"+
		"\u09bb\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6\u09d1\3\2\2\2\u09c7\u09c8\7l"+
		"\2\2\u09c8\u09c9\7&\2\2\u09c9\u09ce\5\u0148\u00a5\2\u09ca\u09cb\7\6\2"+
		"\2\u09cb\u09cd\5\u0148\u00a5\2\u09cc\u09ca\3\2\2\2\u09cd\u09d0\3\2\2\2"+
		"\u09ce\u09cc\3\2\2\2\u09ce\u09cf\3\2\2\2\u09cf\u09d2\3\2\2\2\u09d0\u09ce"+
		"\3\2\2\2\u09d1\u09c7\3\2\2\2\u09d1\u09d2\3\2\2\2\u09d2\u09dd\3\2\2\2\u09d3"+
		"\u09d4\7\u0140\2\2\u09d4\u09d5\7&\2\2\u09d5\u09da\5\u00aaV\2\u09d6\u09d7"+
		"\7\6\2\2\u09d7\u09d9\5\u00aaV\2\u09d8\u09d6\3\2\2\2\u09d9\u09dc\3\2\2"+
		"\2\u09da\u09d8\3\2\2\2\u09da\u09db\3\2\2\2\u09db\u09de\3\2\2\2\u09dc\u09da"+
		"\3\2\2\2\u09dd\u09d3\3\2\2\2\u09dd\u09de\3\2\2\2\u09de\u09e0\3\2\2\2\u09df"+
		"\u09e1\5\u01c6\u00e4\2\u09e0\u09df\3\2\2\2\u09e0\u09e1\3\2\2\2\u09e1\u09e7"+
		"\3\2\2\2\u09e2\u09e5\7\u00c6\2\2\u09e3\u09e6\7\16\2\2\u09e4\u09e6\5\u0148"+
		"\u00a5\2\u09e5\u09e3\3\2\2\2\u09e5\u09e4\3\2\2\2\u09e6\u09e8\3\2\2\2\u09e7"+
		"\u09e2\3\2\2\2\u09e7\u09e8\3\2\2\2\u09e8\u09eb\3\2\2\2\u09e9\u09ea\7\u00ef"+
		"\2\2\u09ea\u09ec\5\u0148\u00a5\2\u09eb\u09e9\3\2\2\2\u09eb\u09ec\3\2\2"+
		"\2\u09ec\u00a3\3\2\2\2\u09ed\u09ee\5h\65\2\u09ee\u09ef\5\u00aeX\2\u09ef"+
		"\u00a5\3\2\2\2\u09f0\u09f1\bT\1\2\u09f1\u09f2\5\u00a8U\2\u09f2\u0a0d\3"+
		"\2\2\2\u09f3\u09f4\f\6\2\2\u09f4\u09f5\6T\3\2\u09f5\u09f7\t\21\2\2\u09f6"+
		"\u09f8\5\u00fe\u0080\2\u09f7\u09f6\3\2\2\2\u09f7\u09f8\3\2\2\2\u09f8\u09f9"+
		"\3\2\2\2\u09f9\u0a0c\5\u00a6T\7\u09fa\u09fb\f\5\2\2\u09fb\u09fc\6T\5\2"+
		"\u09fc\u09fe\7\u00af\2\2\u09fd\u09ff\5\u00fe\u0080\2\u09fe\u09fd\3\2\2"+
		"\2\u09fe\u09ff\3\2\2\2\u09ff\u0a00\3\2\2\2\u0a00\u0a0c\5\u00a6T\6\u0a01"+
		"\u0a02\f\4\2\2\u0a02\u0a03\6T\7\2\u0a03\u0a05\t\22\2\2\u0a04\u0a06\5\u00fe"+
		"\u0080\2\u0a05\u0a04\3\2\2\2\u0a05\u0a06\3\2\2\2\u0a06\u0a07\3\2\2\2\u0a07"+
		"\u0a0c\5\u00a6T\5\u0a08\u0a09\f\3\2\2\u0a09\u0a0a\7\u01a8\2\2\u0a0a\u0a0c"+
		"\5\u0208\u0105\2\u0a0b\u09f3\3\2\2\2\u0a0b\u09fa\3\2\2\2\u0a0b\u0a01\3"+
		"\2\2\2\u0a0b\u0a08\3\2\2\2\u0a0c\u0a0f\3\2\2\2\u0a0d\u0a0b\3\2\2\2\u0a0d"+
		"\u0a0e\3\2\2\2\u0a0e\u00a7\3\2\2\2\u0a0f\u0a0d\3\2\2\2\u0a10\u0a1a\5\u00b0"+
		"Y\2\u0a11\u0a1a\5\u00acW\2\u0a12\u0a13\7\u0154\2\2\u0a13\u0a1a\5\u009e"+
		"P\2\u0a14\u0a1a\5\u011e\u0090\2\u0a15\u0a16\7\4\2\2\u0a16\u0a17\5f\64"+
		"\2\u0a17\u0a18\7\5\2\2\u0a18\u0a1a\3\2\2\2\u0a19\u0a10\3\2\2\2\u0a19\u0a11"+
		"\3\2\2\2\u0a19\u0a12\3\2\2\2\u0a19\u0a14\3\2\2\2\u0a19\u0a15\3\2\2\2\u0a1a"+
		"\u00a9\3\2\2\2\u0a1b\u0a1d\5\u0148\u00a5\2\u0a1c\u0a1e\t\23\2\2\u0a1d"+
		"\u0a1c\3\2\2\2\u0a1d\u0a1e\3\2\2\2\u0a1e\u0a21\3\2\2\2\u0a1f\u0a20\7\u00eb"+
		"\2\2\u0a20\u0a22\t\24\2\2\u0a21\u0a1f\3\2\2\2\u0a21\u0a22\3\2\2\2\u0a22"+
		"\u00ab\3\2\2\2\u0a23\u0a27\5\u00d2j\2\u0a24\u0a26\5\u00aeX\2\u0a25\u0a24"+
		"\3\2\2\2\u0a26\u0a29\3\2\2\2\u0a27\u0a25\3\2\2\2\u0a27\u0a28\3\2\2\2\u0a28"+
		"\u00ad\3\2\2\2\u0a29\u0a27\3\2\2\2\u0a2a\u0a2c\5\u00b2Z\2\u0a2b\u0a2d"+
		"\5\u00caf\2\u0a2c\u0a2b\3\2\2\2\u0a2c\u0a2d\3\2\2\2\u0a2d\u0a2e\3\2\2"+
		"\2\u0a2e\u0a2f\5\u00a2R\2\u0a2f\u0a46\3\2\2\2\u0a30\u0a34\5\u00b4[\2\u0a31"+
		"\u0a33\5\u00fc\177\2\u0a32\u0a31\3\2\2\2\u0a33\u0a36\3\2\2\2\u0a34\u0a32"+
		"\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a38\3\2\2\2\u0a36\u0a34\3\2\2\2\u0a37"+
		"\u0a39\5\u00caf\2\u0a38\u0a37\3\2\2\2\u0a38\u0a39\3\2\2\2\u0a39\u0a3b"+
		"\3\2\2\2\u0a3a\u0a3c\5\u00d6l\2\u0a3b\u0a3a\3\2\2\2\u0a3b\u0a3c\3\2\2"+
		"\2\u0a3c\u0a3e\3\2\2\2\u0a3d\u0a3f\5\u00ccg\2\u0a3e\u0a3d\3\2\2\2\u0a3e"+
		"\u0a3f\3\2\2\2\u0a3f\u0a41\3\2\2\2\u0a40\u0a42\5\u01c6\u00e4\2\u0a41\u0a40"+
		"\3\2\2\2\u0a41\u0a42\3\2\2\2\u0a42\u0a43\3\2\2\2\u0a43\u0a44\5\u00a2R"+
		"\2\u0a44\u0a46\3\2\2\2\u0a45\u0a2a\3\2\2\2\u0a45\u0a30\3\2\2\2\u0a46\u00af"+
		"\3\2\2\2\u0a47\u0a49\5\u00b2Z\2\u0a48\u0a4a\5\u00d2j\2\u0a49\u0a48\3\2"+
		"\2\2\u0a49\u0a4a\3\2\2\2\u0a4a\u0a4e\3\2\2\2\u0a4b\u0a4d\5\u00fc\177\2"+
		"\u0a4c\u0a4b\3\2\2\2\u0a4d\u0a50\3\2\2\2\u0a4e\u0a4c\3\2\2\2\u0a4e\u0a4f"+
		"\3\2\2\2\u0a4f\u0a52\3\2\2\2\u0a50\u0a4e\3\2\2\2\u0a51\u0a53\5\u00caf"+
		"\2\u0a52\u0a51\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53\u0a55\3\2\2\2\u0a54\u0a56"+
		"\5\u00d6l\2\u0a55\u0a54\3\2\2\2\u0a55\u0a56\3\2\2\2\u0a56\u0a58\3\2\2"+
		"\2\u0a57\u0a59\5\u00ccg\2\u0a58\u0a57\3\2\2\2\u0a58\u0a59\3\2\2\2\u0a59"+
		"\u0a5b\3\2\2\2\u0a5a\u0a5c\5\u01c6\u00e4\2\u0a5b\u0a5a\3\2\2\2\u0a5b\u0a5c"+
		"\3\2\2\2\u0a5c\u0a74\3\2\2\2\u0a5d\u0a5f\5\u00b4[\2\u0a5e\u0a60\5\u00d2"+
		"j\2\u0a5f\u0a5e\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u0a64\3\2\2\2\u0a61"+
		"\u0a63\5\u00fc\177\2\u0a62\u0a61\3\2\2\2\u0a63\u0a66\3\2\2\2\u0a64\u0a62"+
		"\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a68\3\2\2\2\u0a66\u0a64\3\2\2\2\u0a67"+
		"\u0a69\5\u00caf\2\u0a68\u0a67\3\2\2\2\u0a68\u0a69\3\2\2\2\u0a69\u0a6b"+
		"\3\2\2\2\u0a6a\u0a6c\5\u00d6l\2\u0a6b\u0a6a\3\2\2\2\u0a6b\u0a6c\3\2\2"+
		"\2\u0a6c\u0a6e\3\2\2\2\u0a6d\u0a6f\5\u00ccg\2\u0a6e\u0a6d\3\2\2\2\u0a6e"+
		"\u0a6f\3\2\2\2\u0a6f\u0a71\3\2\2\2\u0a70\u0a72\5\u01c6\u00e4\2\u0a71\u0a70"+
		"\3\2\2\2\u0a71\u0a72\3\2\2\2\u0a72\u0a74\3\2\2\2\u0a73\u0a47\3\2\2\2\u0a73"+
		"\u0a5d\3\2\2\2\u0a74\u00b1\3\2\2\2\u0a75\u0a76\7\u0131\2\2\u0a76\u0a77"+
		"\7\u016a\2\2\u0a77\u0a79\7\4\2\2\u0a78\u0a7a\5\u00fe\u0080\2\u0a79\u0a78"+
		"\3\2\2\2\u0a79\u0a7a\3\2\2\2\u0a7a\u0a7b\3\2\2\2\u0a7b\u0a7c\5\u014e\u00a8"+
		"\2\u0a7c\u0a7d\7\5\2\2\u0a7d\u0a89\3\2\2\2\u0a7e\u0a80\7\u00d2\2\2\u0a7f"+
		"\u0a81\5\u00fe\u0080\2\u0a80\u0a7f\3\2\2\2\u0a80\u0a81\3\2\2\2\u0a81\u0a82"+
		"\3\2\2\2\u0a82\u0a89\5\u014e\u00a8\2\u0a83\u0a85\7\u0115\2\2\u0a84\u0a86"+
		"\5\u00fe\u0080\2\u0a85\u0a84\3\2\2\2\u0a85\u0a86\3\2\2\2\u0a86\u0a87\3"+
		"\2\2\2\u0a87\u0a89\5\u014e\u00a8\2\u0a88\u0a75\3\2\2\2\u0a88\u0a7e\3\2"+
		"\2\2\u0a88\u0a83\3\2\2\2\u0a89\u0a8b\3\2\2\2\u0a8a\u0a8c\5\u012e\u0098"+
		"\2\u0a8b\u0a8a\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a8f\3\2\2\2\u0a8d\u0a8e"+
		"\7\u0111\2\2\u0a8e\u0a90\5\u0202\u0102\2\u0a8f\u0a8d\3\2\2\2\u0a8f\u0a90"+
		"\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a92\7\u017d\2\2\u0a92\u0a9f\5\u0202"+
		"\u0102\2\u0a93\u0a9d\7\30\2\2\u0a94\u0a9e\5\u0110\u0089\2\u0a95\u0a9e"+
		"\5\u019c\u00cf\2\u0a96\u0a99\7\4\2\2\u0a97\u0a9a\5\u0110\u0089\2\u0a98"+
		"\u0a9a\5\u019c\u00cf\2\u0a99\u0a97\3\2\2\2\u0a99\u0a98\3\2\2\2\u0a9a\u0a9b"+
		"\3\2\2\2\u0a9b\u0a9c\7\5\2\2\u0a9c\u0a9e\3\2\2\2\u0a9d\u0a94\3\2\2\2\u0a9d"+
		"\u0a95\3\2\2\2\u0a9d\u0a96\3\2\2\2\u0a9e\u0aa0\3\2\2\2\u0a9f\u0a93\3\2"+
		"\2\2\u0a9f\u0aa0\3\2\2\2\u0aa0\u0aa2\3\2\2\2\u0aa1\u0aa3\5\u012e\u0098"+
		"\2\u0aa2\u0aa1\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aa6\3\2\2\2\u0aa4\u0aa5"+
		"\7\u0110\2\2\u0aa5\u0aa7\5\u0202\u0102\2\u0aa6\u0aa4\3\2\2\2\u0aa6\u0aa7"+
		"\3\2\2\2\u0aa7\u00b3\3\2\2\2\u0aa8\u0aac\7\u0131\2\2\u0aa9\u0aab\5\u00ce"+
		"h\2\u0aaa\u0aa9\3\2\2\2\u0aab\u0aae\3\2\2\2\u0aac\u0aaa\3\2\2\2\u0aac"+
		"\u0aad\3\2\2\2\u0aad\u0ab0\3\2\2\2\u0aae\u0aac\3\2\2\2\u0aaf\u0ab1\5\u00fe"+
		"\u0080\2\u0ab0\u0aaf\3\2\2\2\u0ab0\u0ab1\3\2\2\2\u0ab1\u0ab2\3\2\2\2\u0ab2"+
		"\u0ab3\5\u013e\u00a0\2\u0ab3\u00b5\3\2\2\2\u0ab4\u0ab5\7\u0137\2\2\u0ab5"+
		"\u0ab6\5\u00c6d\2\u0ab6\u00b7\3\2\2\2\u0ab7\u0ab8\7\u018a\2\2\u0ab8\u0abb"+
		"\7\u00d3\2\2\u0ab9\u0aba\7\22\2\2\u0aba\u0abc\5\u0150\u00a9\2\u0abb\u0ab9"+
		"\3\2\2\2\u0abb\u0abc\3\2\2\2\u0abc\u0abd\3\2\2\2\u0abd\u0abe\7\u015b\2"+
		"\2\u0abe\u0abf\5\u00be`\2\u0abf\u00b9\3\2\2\2\u0ac0\u0ac1\7\u018a\2\2"+
		"\u0ac1\u0ac2\5\u0154\u00ab\2\u0ac2\u0ac5\7\u00d3\2\2\u0ac3\u0ac4\7&\2"+
		"\2\u0ac4\u0ac6\7\u0157\2\2\u0ac5\u0ac3\3\2\2\2\u0ac5\u0ac6\3\2\2\2\u0ac6"+
		"\u0ac9\3\2\2\2\u0ac7\u0ac8\7\22\2\2\u0ac8\u0aca\5\u0150\u00a9\2\u0ac9"+
		"\u0ac7\3\2\2\2\u0ac9\u0aca\3\2\2\2\u0aca\u0acb\3\2\2\2\u0acb\u0acc\7\u015b"+
		"\2\2\u0acc\u0acd\5\u00c0a\2\u0acd\u00bb\3\2\2\2\u0ace\u0acf\7\u018a\2"+
		"\2\u0acf\u0ad0\5\u0154\u00ab\2\u0ad0\u0ad1\7\u00d3\2\2\u0ad1\u0ad2\7&"+
		"\2\2\u0ad2\u0ad5\7\u0142\2\2\u0ad3\u0ad4\7\22\2\2\u0ad4\u0ad6\5\u0150"+
		"\u00a9\2\u0ad5\u0ad3\3\2\2\2\u0ad5\u0ad6\3\2\2\2\u0ad6\u0ad7\3\2\2\2\u0ad7"+
		"\u0ad8\7\u015b\2\2\u0ad8\u0ad9\5\u00c2b\2\u0ad9\u00bd\3\2\2\2\u0ada\u0ae2"+
		"\7c\2\2\u0adb\u0adc\7\u017a\2\2\u0adc\u0add\7\u0137\2\2\u0add\u0ae2\7"+
		"\u01a1\2\2\u0ade\u0adf\7\u017a\2\2\u0adf\u0ae0\7\u0137\2\2\u0ae0\u0ae2"+
		"\5\u00c6d\2\u0ae1\u0ada\3\2\2\2\u0ae1\u0adb\3\2\2\2\u0ae1\u0ade\3\2\2"+
		"\2\u0ae2\u00bf\3\2\2\2\u0ae3\u0ae4\7\u00ae\2\2\u0ae4\u0af6\7\u01a1\2\2"+
		"\u0ae5\u0ae6\7\u00ae\2\2\u0ae6\u0ae7\7\4\2\2\u0ae7\u0ae8\5\u0130\u0099"+
		"\2\u0ae8\u0ae9\7\5\2\2\u0ae9\u0aea\7\u017f\2\2\u0aea\u0aeb\7\4\2\2\u0aeb"+
		"\u0af0\5\u0148\u00a5\2\u0aec\u0aed\7\6\2\2\u0aed\u0aef\5\u0148\u00a5\2"+
		"\u0aee\u0aec\3\2\2\2\u0aef\u0af2\3\2\2\2\u0af0\u0aee\3\2\2\2\u0af0\u0af1"+
		"\3\2\2\2\u0af1\u0af3\3\2\2\2\u0af2\u0af0\3\2\2\2\u0af3\u0af4\7\5\2\2\u0af4"+
		"\u0af6\3\2\2\2\u0af5\u0ae3\3\2\2\2\u0af5\u0ae5\3\2\2\2\u0af6\u00c1\3\2"+
		"\2\2\u0af7\u0afc\7c\2\2\u0af8\u0af9\7\u017a\2\2\u0af9\u0afa\7\u0137\2"+
		"\2\u0afa\u0afc\5\u00c6d\2\u0afb\u0af7\3\2\2\2\u0afb\u0af8\3\2\2\2\u0afc"+
		"\u00c3\3\2\2\2\u0afd\u0afe\7x\2\2\u0afe\u0aff\7\4\2\2\u0aff\u0b00\5\u0130"+
		"\u0099\2\u0b00\u0b01\7\5\2\2\u0b01\u00c5\3\2\2\2\u0b02\u0b07\5\u00c8e"+
		"\2\u0b03\u0b04\7\6\2\2\u0b04\u0b06\5\u00c8e\2\u0b05\u0b03\3\2\2\2\u0b06"+
		"\u0b09\3\2\2\2\u0b07\u0b05\3\2\2\2\u0b07\u0b08\3\2\2\2\u0b08\u00c7\3\2"+
		"\2\2\u0b09\u0b07\3\2\2\2\u0b0a\u0b0b\5\u0132\u009a\2\u0b0b\u0b0c\7\u0194"+
		"\2\2\u0b0c\u0b0d\5\u0148\u00a5\2\u0b0d\u00c9\3\2\2\2\u0b0e\u0b0f\7\u018b"+
		"\2\2\u0b0f\u0b10\5\u0150\u00a9\2\u0b10\u00cb\3\2\2\2\u0b11\u0b12\7\u009b"+
		"\2\2\u0b12\u0b13\5\u0150\u00a9\2\u0b13\u00cd\3\2\2\2\u0b14\u0b15\7\u01ae"+
		"\2\2\u0b15\u0b1c\5\u00d0i\2\u0b16\u0b18\7\6\2\2\u0b17\u0b16\3\2\2\2\u0b17"+
		"\u0b18\3\2\2\2\u0b18\u0b19\3\2\2\2\u0b19\u0b1b\5\u00d0i\2\u0b1a\u0b17"+
		"\3\2\2\2\u0b1b\u0b1e\3\2\2\2\u0b1c\u0b1a\3\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d"+
		"\u0b1f\3\2\2\2\u0b1e\u0b1c\3\2\2\2\u0b1f\u0b20\7\u01af\2\2\u0b20\u00cf"+
		"\3\2\2\2\u0b21\u0b2f\5\u01da\u00ee\2\u0b22\u0b23\5\u01da\u00ee\2\u0b23"+
		"\u0b24\7\4\2\2\u0b24\u0b29\5\u015c\u00af\2\u0b25\u0b26\7\6\2\2\u0b26\u0b28"+
		"\5\u015c\u00af\2\u0b27\u0b25\3\2\2\2\u0b28\u0b2b\3\2\2\2\u0b29\u0b27\3"+
		"\2\2\2\u0b29\u0b2a\3\2\2\2\u0b2a\u0b2c\3\2\2\2\u0b2b\u0b29\3\2\2\2\u0b2c"+
		"\u0b2d\7\5\2\2\u0b2d\u0b2f\3\2\2\2\u0b2e\u0b21\3\2\2\2\u0b2e\u0b22\3\2"+
		"\2\2\u0b2f\u00d1\3\2\2\2\u0b30\u0b31\7\u0091\2\2\u0b31\u0b36\5\u0100\u0081"+
		"\2\u0b32\u0b33\7\6\2\2\u0b33\u0b35\5\u0100\u0081\2\u0b34\u0b32\3\2\2\2"+
		"\u0b35\u0b38\3\2\2\2\u0b36\u0b34\3\2\2\2\u0b36\u0b37\3\2\2\2\u0b37\u0b3c"+
		"\3\2\2\2\u0b38\u0b36\3\2\2\2\u0b39\u0b3b\5\u00fc\177\2\u0b3a\u0b39\3\2"+
		"\2\2\u0b3b\u0b3e\3\2\2\2\u0b3c\u0b3a\3\2\2\2\u0b3c\u0b3d\3\2\2\2\u0b3d"+
		"\u0b40\3\2\2\2\u0b3e\u0b3c\3\2\2\2\u0b3f\u0b41\5\u00e0q\2\u0b40\u0b3f"+
		"\3\2\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0b43\3\2\2\2\u0b42\u0b44\5\u00e6t"+
		"\2\u0b43\u0b42\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u00d3\3\2\2\2\u0b45\u0b47"+
		"\7\u008c\2\2\u0b46\u0b45\3\2\2\2\u0b46\u0b47\3\2\2\2\u0b47\u0b48\3\2\2"+
		"\2\u0b48\u0b49\t\25\2\2\u0b49\u0b4a\7\30\2\2\u0b4a\u0b4b\7\u00ee\2\2\u0b4b"+
		"\u0b54\5\u0206\u0104\2\u0b4c\u0b4e\7\u008c\2\2\u0b4d\u0b4c\3\2\2\2\u0b4d"+
		"\u0b4e\3\2\2\2\u0b4e\u0b4f\3\2\2\2\u0b4f\u0b50\t\26\2\2\u0b50\u0b51\7"+
		"\30\2\2\u0b51\u0b52\7\u00ee\2\2\u0b52\u0b54\5\u0156\u00ac\2\u0b53\u0b46"+
		"\3\2\2\2\u0b53\u0b4d\3\2\2\2\u0b54\u00d5\3\2\2\2\u0b55\u0b56\7\u0098\2"+
		"\2\u0b56\u0b57\7&\2\2\u0b57\u0b5c\5\u00d8m\2\u0b58\u0b59\7\6\2\2\u0b59"+
		"\u0b5b\5\u00d8m\2\u0b5a\u0b58\3\2\2\2\u0b5b\u0b5e\3\2\2\2\u0b5c\u0b5a"+
		"\3\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0b7d\3\2\2\2\u0b5e\u0b5c\3\2\2\2\u0b5f"+
		"\u0b60\7\u0098\2\2\u0b60\u0b61\7&\2\2\u0b61\u0b66\5\u013c\u009f\2\u0b62"+
		"\u0b63\7\6\2\2\u0b63\u0b65\5\u013c\u009f\2\u0b64\u0b62\3\2\2\2\u0b65\u0b68"+
		"\3\2\2\2\u0b66\u0b64\3\2\2\2\u0b66\u0b67\3\2\2\2\u0b67\u0b7a\3\2\2\2\u0b68"+
		"\u0b66\3\2\2\2\u0b69\u0b6a\7\u018e\2\2\u0b6a\u0b7b\7\u0129\2\2\u0b6b\u0b6c"+
		"\7\u018e\2\2\u0b6c\u0b7b\7K\2\2\u0b6d\u0b6e\7\u0099\2\2\u0b6e\u0b6f\7"+
		"\u0139\2\2\u0b6f\u0b70\7\4\2\2\u0b70\u0b75\5\u00dep\2\u0b71\u0b72\7\6"+
		"\2\2\u0b72\u0b74\5\u00dep\2\u0b73\u0b71\3\2\2\2\u0b74\u0b77\3\2\2\2\u0b75"+
		"\u0b73\3\2\2\2\u0b75\u0b76\3\2\2\2\u0b76\u0b78\3\2\2\2\u0b77\u0b75\3\2"+
		"\2\2\u0b78\u0b79\7\5\2\2\u0b79\u0b7b\3\2\2\2\u0b7a\u0b69\3\2\2\2\u0b7a"+
		"\u0b6b\3\2\2\2\u0b7a\u0b6d\3\2\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b\u0b7d\3\2"+
		"\2\2\u0b7c\u0b55\3\2\2\2\u0b7c\u0b5f\3\2\2\2\u0b7d\u00d7\3\2\2\2\u0b7e"+
		"\u0b81\5\u00dan\2\u0b7f\u0b81\5\u0148\u00a5\2\u0b80\u0b7e\3\2\2\2\u0b80"+
		"\u0b7f\3\2\2\2\u0b81\u00d9\3\2\2\2\u0b82\u0b83\t\27\2\2\u0b83\u0b84\7"+
		"\4\2\2\u0b84\u0b89\5\u00dep\2\u0b85\u0b86\7\6\2\2\u0b86\u0b88\5\u00de"+
		"p\2\u0b87\u0b85\3\2\2\2\u0b88\u0b8b\3\2\2\2\u0b89\u0b87\3\2\2\2\u0b89"+
		"\u0b8a\3\2\2\2\u0b8a\u0b8c\3\2\2\2\u0b8b\u0b89\3\2\2\2\u0b8c\u0b8d\7\5"+
		"\2\2\u0b8d\u0b9c\3\2\2\2\u0b8e\u0b8f\7\u0099\2\2\u0b8f\u0b90\7\u0139\2"+
		"\2\u0b90\u0b91\7\4\2\2\u0b91\u0b96\5\u00dco\2\u0b92\u0b93\7\6\2\2\u0b93"+
		"\u0b95\5\u00dco\2\u0b94\u0b92\3\2\2\2\u0b95\u0b98\3\2\2\2\u0b96\u0b94"+
		"\3\2\2\2\u0b96\u0b97\3\2\2\2\u0b97\u0b99\3\2\2\2\u0b98\u0b96\3\2\2\2\u0b99"+
		"\u0b9a\7\5\2\2\u0b9a\u0b9c\3\2\2\2\u0b9b\u0b82\3\2\2\2\u0b9b\u0b8e\3\2"+
		"\2\2\u0b9c\u00db\3\2\2\2\u0b9d\u0ba0\5\u00dan\2\u0b9e\u0ba0\5\u00dep\2"+
		"\u0b9f\u0b9d\3\2\2\2\u0b9f\u0b9e\3\2\2\2\u0ba0\u00dd\3\2\2\2\u0ba1\u0baa"+
		"\7\4\2\2\u0ba2\u0ba7\5\u0148\u00a5\2\u0ba3\u0ba4\7\6\2\2\u0ba4\u0ba6\5"+
		"\u0148\u00a5\2\u0ba5\u0ba3\3\2\2\2\u0ba6\u0ba9\3\2\2\2\u0ba7\u0ba5\3\2"+
		"\2\2\u0ba7\u0ba8\3\2\2\2\u0ba8\u0bab\3\2\2\2\u0ba9\u0ba7\3\2\2\2\u0baa"+
		"\u0ba2\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bac\3\2\2\2\u0bac\u0baf\7\5"+
		"\2\2\u0bad\u0baf\5\u0148\u00a5\2\u0bae\u0ba1\3\2\2\2\u0bae\u0bad\3\2\2"+
		"\2\u0baf\u00df\3\2\2\2\u0bb0\u0bb1\7\u0101\2\2\u0bb1\u0bb2\7\4\2\2\u0bb2"+
		"\u0bb3\5\u013e\u00a0\2\u0bb3\u0bb4\7\u008c\2\2\u0bb4\u0bb5\5\u00e2r\2"+
		"\u0bb5\u0bb6\7\u00a5\2\2\u0bb6\u0bb7\7\4\2\2\u0bb7\u0bbc\5\u00e4s\2\u0bb8"+
		"\u0bb9\7\6\2\2\u0bb9\u0bbb\5\u00e4s\2\u0bba\u0bb8\3\2\2\2\u0bbb\u0bbe"+
		"\3\2\2\2\u0bbc\u0bba\3\2\2\2\u0bbc\u0bbd\3\2\2\2\u0bbd\u0bbf\3\2\2\2\u0bbe"+
		"\u0bbc\3\2\2\2\u0bbf\u0bc0\7\5\2\2\u0bc0\u0bc1\7\5\2\2\u0bc1\u00e1\3\2"+
		"\2\2\u0bc2\u0bcf\5\u01d6\u00ec\2\u0bc3\u0bc4\7\4\2\2\u0bc4\u0bc9\5\u01d6"+
		"\u00ec\2\u0bc5\u0bc6\7\6\2\2\u0bc6\u0bc8\5\u01d6\u00ec\2\u0bc7\u0bc5\3"+
		"\2\2\2\u0bc8\u0bcb\3\2\2\2\u0bc9\u0bc7\3\2\2\2\u0bc9\u0bca\3\2\2\2\u0bca"+
		"\u0bcc\3\2\2\2\u0bcb\u0bc9\3\2\2\2\u0bcc\u0bcd\7\5\2\2\u0bcd\u0bcf\3\2"+
		"\2\2\u0bce\u0bc2\3\2\2\2\u0bce\u0bc3\3\2\2\2\u0bcf\u00e3\3\2\2\2\u0bd0"+
		"\u0bd5\5\u0148\u00a5\2\u0bd1\u0bd3\7\30\2\2\u0bd2\u0bd1\3\2\2\2\u0bd2"+
		"\u0bd3\3\2\2\2\u0bd3\u0bd4\3\2\2\2\u0bd4\u0bd6\5\u01d6\u00ec\2\u0bd5\u0bd2"+
		"\3\2\2\2\u0bd5\u0bd6\3\2\2\2\u0bd6\u00e5\3\2\2\2\u0bd7\u0bd9\7\u0177\2"+
		"\2\u0bd8\u0bda\5\u00e8u\2\u0bd9\u0bd8\3\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda"+
		"\u0bdb\3\2\2\2\u0bdb\u0bdc\7\4\2\2\u0bdc\u0bdd\5\u00eav\2\u0bdd\u0be2"+
		"\7\5\2\2\u0bde\u0be0\7\30\2\2\u0bdf\u0bde\3\2\2\2\u0bdf\u0be0\3\2\2\2"+
		"\u0be0\u0be1\3\2\2\2\u0be1\u0be3\5\u01d6\u00ec\2\u0be2\u0bdf\3\2\2\2\u0be2"+
		"\u0be3\3\2\2\2\u0be3\u00e7\3\2\2\2\u0be4\u0be5\t\30\2\2\u0be5\u0be6\7"+
		"\u00eb\2\2\u0be6\u00e9\3\2\2\2\u0be7\u0bea\5\u00ecw\2\u0be8\u0bea\5\u00ee"+
		"x\2\u0be9\u0be7\3\2\2\2\u0be9\u0be8\3\2\2\2\u0bea\u00eb\3\2\2\2\u0beb"+
		"\u0bec\5\u00f2z\2\u0bec\u0bed\7\u008c\2\2\u0bed\u0bee\5\u00f4{\2\u0bee"+
		"\u0bef\7\u00a5\2\2\u0bef\u0bf0\7\4\2\2\u0bf0\u0bf5\5\u00f6|\2\u0bf1\u0bf2"+
		"\7\6\2\2\u0bf2\u0bf4\5\u00f6|\2\u0bf3\u0bf1\3\2\2\2\u0bf4\u0bf7\3\2\2"+
		"\2\u0bf5\u0bf3\3\2\2\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u0bf8\3\2\2\2\u0bf7\u0bf5"+
		"\3\2\2\2\u0bf8\u0bf9\7\5\2\2\u0bf9\u00ed\3\2\2\2\u0bfa\u0bfb\7\4\2\2\u0bfb"+
		"\u0c00\5\u00f2z\2\u0bfc\u0bfd\7\6\2\2\u0bfd\u0bff\5\u00f2z\2\u0bfe\u0bfc"+
		"\3\2\2\2\u0bff\u0c02\3\2\2\2\u0c00\u0bfe\3\2\2\2\u0c00\u0c01\3\2\2\2\u0c01"+
		"\u0c03\3\2\2\2\u0c02\u0c00\3\2\2\2\u0c03\u0c04\7\5\2\2\u0c04\u0c05\7\u008c"+
		"\2\2\u0c05\u0c06\5\u00f4{\2\u0c06\u0c07\7\u00a5\2\2\u0c07\u0c08\7\4\2"+
		"\2\u0c08\u0c0d\5\u00f0y\2\u0c09\u0c0a\7\6\2\2\u0c0a\u0c0c\5\u00f0y\2\u0c0b"+
		"\u0c09\3\2\2\2\u0c0c\u0c0f\3\2\2\2\u0c0d\u0c0b\3\2\2\2\u0c0d\u0c0e\3\2"+
		"\2\2\u0c0e\u0c10\3\2\2\2\u0c0f\u0c0d\3\2\2\2\u0c10\u0c11\7\5\2\2\u0c11"+
		"\u00ef\3\2\2\2\u0c12\u0c13\7\4\2\2\u0c13\u0c18\5\u00f8}\2\u0c14\u0c15"+
		"\7\6\2\2\u0c15\u0c17\5\u00f8}\2\u0c16\u0c14\3\2\2\2\u0c17\u0c1a\3\2\2"+
		"\2\u0c18\u0c16\3\2\2\2\u0c18\u0c19\3\2\2\2\u0c19\u0c1b\3\2\2\2\u0c1a\u0c18"+
		"\3\2\2\2\u0c1b\u0c1d\7\5\2\2\u0c1c\u0c1e\5\u00fa~\2\u0c1d\u0c1c\3\2\2"+
		"\2\u0c1d\u0c1e\3\2\2\2\u0c1e\u00f1\3\2\2\2\u0c1f\u0c20\5\u01da\u00ee\2"+
		"\u0c20\u00f3\3\2\2\2\u0c21\u0c22\5\u01da\u00ee\2\u0c22\u00f5\3\2\2\2\u0c23"+
		"\u0c25\5\u00f8}\2\u0c24\u0c26\5\u00fa~\2\u0c25\u0c24\3\2\2\2\u0c25\u0c26"+
		"\3\2\2\2\u0c26\u00f7\3\2\2\2\u0c27\u0c28\5\u0132\u009a\2\u0c28\u00f9\3"+
		"\2\2\2\u0c29\u0c2b\7\30\2\2\u0c2a\u0c29\3\2\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b"+
		"\u0c2c\3\2\2\2\u0c2c\u0c2d\5\u01d6\u00ec\2\u0c2d\u00fb\3\2\2\2\u0c2e\u0c2f"+
		"\7\u00be\2\2\u0c2f\u0c31\7\u0185\2\2\u0c30\u0c32\7\u00f7\2\2\u0c31\u0c30"+
		"\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32\u0c33\3\2\2\2\u0c33\u0c34\5\u01d4\u00eb"+
		"\2\u0c34\u0c3d\7\4\2\2\u0c35\u0c3a\5\u0148\u00a5\2\u0c36\u0c37\7\6\2\2"+
		"\u0c37\u0c39\5\u0148\u00a5\2\u0c38\u0c36\3\2\2\2\u0c39\u0c3c\3\2\2\2\u0c3a"+
		"\u0c38\3\2\2\2\u0c3a\u0c3b\3\2\2\2\u0c3b\u0c3e\3\2\2\2\u0c3c\u0c3a\3\2"+
		"\2\2\u0c3d\u0c35\3\2\2\2\u0c3d\u0c3e\3\2\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f"+
		"\u0c40\7\5\2\2\u0c40\u0c4c\5\u01da\u00ee\2\u0c41\u0c43\7\30\2\2\u0c42"+
		"\u0c41\3\2\2\2\u0c42\u0c43\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44\u0c49\5\u01da"+
		"\u00ee\2\u0c45\u0c46\7\6\2\2\u0c46\u0c48\5\u01da\u00ee\2\u0c47\u0c45\3"+
		"\2\2\2\u0c48\u0c4b\3\2\2\2\u0c49\u0c47\3\2\2\2\u0c49\u0c4a\3\2\2\2\u0c4a"+
		"\u0c4d\3\2\2\2\u0c4b\u0c49\3\2\2\2\u0c4c\u0c42\3\2\2\2\u0c4c\u0c4d\3\2"+
		"\2\2\u0c4d\u00fd\3\2\2\2\u0c4e\u0c4f\t\31\2\2\u0c4f\u00ff\3\2\2\2\u0c50"+
		"\u0c52\7\u00be\2\2\u0c51\u0c50\3\2\2\2\u0c51\u0c52\3\2\2\2\u0c52\u0c53"+
		"\3\2\2\2\u0c53\u0c57\5\u011a\u008e\2\u0c54\u0c56\5\u0102\u0082\2\u0c55"+
		"\u0c54\3\2\2\2\u0c56\u0c59\3\2\2\2\u0c57\u0c55\3\2\2\2\u0c57\u0c58\3\2"+
		"\2\2\u0c58\u0101\3\2\2\2\u0c59\u0c57\3\2\2\2\u0c5a\u0c5e\5\u0104\u0083"+
		"\2\u0c5b\u0c5e\5\u00e0q\2\u0c5c\u0c5e\5\u00e6t\2\u0c5d\u0c5a\3\2\2\2\u0c5d"+
		"\u0c5b\3\2\2\2\u0c5d\u0c5c\3\2\2\2\u0c5e\u0103\3\2\2\2\u0c5f\u0c60\5\u0106"+
		"\u0084\2\u0c60\u0c62\7\u00b8\2\2\u0c61\u0c63\7\u00be\2\2\u0c62\u0c61\3"+
		"\2\2\2\u0c62\u0c63\3\2\2\2\u0c63\u0c64\3\2\2\2\u0c64\u0c66\5\u011a\u008e"+
		"\2\u0c65\u0c67\5\u0108\u0085\2\u0c66\u0c65\3\2\2\2\u0c66\u0c67\3\2\2\2"+
		"\u0c67\u0c71\3\2\2\2\u0c68\u0c69\7\u00e6\2\2\u0c69\u0c6a\5\u0106\u0084"+
		"\2\u0c6a\u0c6c\7\u00b8\2\2\u0c6b\u0c6d\7\u00be\2\2\u0c6c\u0c6b\3\2\2\2"+
		"\u0c6c\u0c6d\3\2\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e\u0c6f\5\u011a\u008e\2\u0c6f"+
		"\u0c71\3\2\2\2\u0c70\u0c5f\3\2\2\2\u0c70\u0c68\3\2\2\2\u0c71\u0105\3\2"+
		"\2\2\u0c72\u0c74\7\u00aa\2\2\u0c73\u0c72\3\2\2\2\u0c73\u0c74\3\2\2\2\u0c74"+
		"\u0c8b\3\2\2\2\u0c75\u0c8b\7J\2\2\u0c76\u0c78\7\u00c2\2\2\u0c77\u0c79"+
		"\7\u00f7\2\2\u0c78\u0c77\3\2\2\2\u0c78\u0c79\3\2\2\2\u0c79\u0c8b\3\2\2"+
		"\2\u0c7a\u0c7c\7\u00c2\2\2\u0c7b\u0c7a\3\2\2\2\u0c7b\u0c7c\3\2\2\2\u0c7c"+
		"\u0c7d\3\2\2\2\u0c7d\u0c8b\7\u0132\2\2\u0c7e\u0c80\7\u0124\2\2\u0c7f\u0c81"+
		"\7\u00f7\2\2\u0c80\u0c7f\3\2\2\2\u0c80\u0c81\3\2\2\2\u0c81\u0c8b\3\2\2"+
		"\2\u0c82\u0c84\7\u0092\2\2\u0c83\u0c85\7\u00f7\2\2\u0c84\u0c83\3\2\2\2"+
		"\u0c84\u0c85\3\2\2\2\u0c85\u0c8b\3\2\2\2\u0c86\u0c88\7\u00c2\2\2\u0c87"+
		"\u0c86\3\2\2\2\u0c87\u0c88\3\2\2\2\u0c88\u0c89\3\2\2\2\u0c89\u0c8b\7\23"+
		"\2\2\u0c8a\u0c73\3\2\2\2\u0c8a\u0c75\3\2\2\2\u0c8a\u0c76\3\2\2\2\u0c8a"+
		"\u0c7b\3\2\2\2\u0c8a\u0c7e\3\2\2\2\u0c8a\u0c82\3\2\2\2\u0c8a\u0c87\3\2"+
		"\2\2\u0c8b\u0107\3\2\2\2\u0c8c\u0c8d\7\u00f0\2\2\u0c8d\u0c91\5\u0150\u00a9"+
		"\2\u0c8e\u0c8f\7\u017d\2\2\u0c8f\u0c91\5\u010e\u0088\2\u0c90\u0c8c\3\2"+
		"\2\2\u0c90\u0c8e\3\2\2\2\u0c91\u0109\3\2\2\2\u0c92\u0c93\7\u0156\2\2\u0c93"+
		"\u0c95\7\4\2\2\u0c94\u0c96\5\u010c\u0087\2\u0c95\u0c94\3\2\2\2\u0c95\u0c96"+
		"\3\2\2\2\u0c96\u0c97\3\2\2\2\u0c97\u0c9c\7\5\2\2\u0c98\u0c99\7\u011c\2"+
		"\2\u0c99\u0c9a\7\4\2\2\u0c9a\u0c9b\7\u01b6\2\2\u0c9b\u0c9d\7\5\2\2\u0c9c"+
		"\u0c98\3\2\2\2\u0c9c\u0c9d\3\2\2\2\u0c9d\u010b\3\2\2\2\u0c9e\u0ca0\7\u01a0"+
		"\2\2\u0c9f\u0c9e\3\2\2\2\u0c9f\u0ca0\3\2\2\2\u0ca0\u0ca1\3\2\2\2\u0ca1"+
		"\u0ca2\t\32\2\2\u0ca2\u0cb7\7\u0100\2\2\u0ca3\u0ca4\5\u0148\u00a5\2\u0ca4"+
		"\u0ca5\7\u012b\2\2\u0ca5\u0cb7\3\2\2\2\u0ca6\u0ca7\7$\2\2\u0ca7\u0ca8"+
		"\7\u01b6\2\2\u0ca8\u0ca9\7\u00f6\2\2\u0ca9\u0caa\7\u00ee\2\2\u0caa\u0cb3"+
		"\7\u01b6\2\2\u0cab\u0cb1\7\u00f0\2\2\u0cac\u0cb2\5\u01da\u00ee\2\u0cad"+
		"\u0cae\5\u01d4\u00eb\2\u0cae\u0caf\7\4\2\2\u0caf\u0cb0\7\5\2\2\u0cb0\u0cb2"+
		"\3\2\2\2\u0cb1\u0cac\3\2\2\2\u0cb1\u0cad\3\2\2\2\u0cb2\u0cb4\3\2\2\2\u0cb3"+
		"\u0cab\3\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0cb7\3\2\2\2\u0cb5\u0cb7\5\u0148"+
		"\u00a5\2\u0cb6\u0c9f\3\2\2\2\u0cb6\u0ca3\3\2\2\2\u0cb6\u0ca6\3\2\2\2\u0cb6"+
		"\u0cb5\3\2\2\2\u0cb7\u010d\3\2\2\2\u0cb8\u0cb9\7\4\2\2\u0cb9\u0cba\5\u0110"+
		"\u0089\2\u0cba\u0cbb\7\5\2\2\u0cbb\u010f\3\2\2\2\u0cbc\u0cc1\5\u01d6\u00ec"+
		"\2\u0cbd\u0cbe\7\6\2\2\u0cbe\u0cc0\5\u01d6\u00ec\2\u0cbf\u0cbd\3\2\2\2"+
		"\u0cc0\u0cc3\3\2\2\2\u0cc1\u0cbf\3\2\2\2\u0cc1\u0cc2\3\2\2\2\u0cc2\u0111"+
		"\3\2\2\2\u0cc3\u0cc1\3\2\2\2\u0cc4\u0cc5\7\4\2\2\u0cc5\u0cca\5\u0114\u008b"+
		"\2\u0cc6\u0cc7\7\6\2\2\u0cc7\u0cc9\5\u0114\u008b\2\u0cc8\u0cc6\3\2\2\2"+
		"\u0cc9\u0ccc\3\2\2\2\u0cca\u0cc8\3\2\2\2\u0cca\u0ccb\3\2\2\2\u0ccb\u0ccd"+
		"\3\2\2\2\u0ccc\u0cca\3\2\2\2\u0ccd\u0cce\7\5\2\2\u0cce\u0113\3\2\2\2\u0ccf"+
		"\u0cd1\5\u01d6\u00ec\2\u0cd0\u0cd2\t\23\2\2\u0cd1\u0cd0\3\2\2\2\u0cd1"+
		"\u0cd2\3\2\2\2\u0cd2\u0115\3\2\2\2\u0cd3\u0cd4\7\4\2\2\u0cd4\u0cd9\5\u0118"+
		"\u008d\2\u0cd5\u0cd6\7\6\2\2\u0cd6\u0cd8\5\u0118\u008d\2\u0cd7\u0cd5\3"+
		"\2\2\2\u0cd8\u0cdb\3\2\2\2\u0cd9\u0cd7\3\2\2\2\u0cd9\u0cda\3\2\2\2\u0cda"+
		"\u0cdc\3\2\2\2\u0cdb\u0cd9\3\2\2\2\u0cdc\u0cdd\7\5\2\2\u0cdd\u0117\3\2"+
		"\2\2\u0cde\u0ce0\5\u01da\u00ee\2\u0cdf\u0ce1\5b\62\2\u0ce0\u0cdf\3\2\2"+
		"\2\u0ce0\u0ce1\3\2\2\2\u0ce1\u0119\3\2\2\2\u0ce2\u0d02\5D#\2\u0ce3\u0ce5"+
		"\5\u009eP\2\u0ce4\u0ce6\5\u00d4k\2\u0ce5\u0ce4\3\2\2\2\u0ce5\u0ce6\3\2"+
		"\2\2\u0ce6\u0ce8\3\2\2\2\u0ce7\u0ce9\5\u011c\u008f\2\u0ce8\u0ce7\3\2\2"+
		"\2\u0ce8\u0ce9\3\2\2\2\u0ce9\u0ceb\3\2\2\2\u0cea\u0cec\5\u010a\u0086\2"+
		"\u0ceb\u0cea\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0ced\3\2\2\2\u0ced\u0cee"+
		"\5\u012c\u0097\2\u0cee\u0d02\3\2\2\2\u0cef\u0cf0\7\4\2\2\u0cf0\u0cf1\5"+
		"f\64\2\u0cf1\u0cf3\7\5\2\2\u0cf2\u0cf4\5\u010a\u0086\2\u0cf3\u0cf2\3\2"+
		"\2\2\u0cf3\u0cf4\3\2\2\2\u0cf4\u0cf5\3\2\2\2\u0cf5\u0cf6\5\u012c\u0097"+
		"\2\u0cf6\u0d02\3\2\2\2\u0cf7\u0cf8\7\4\2\2\u0cf8\u0cf9\5\u0100\u0081\2"+
		"\u0cf9\u0cfb\7\5\2\2\u0cfa\u0cfc\5\u010a\u0086\2\u0cfb\u0cfa\3\2\2\2\u0cfb"+
		"\u0cfc\3\2\2\2\u0cfc\u0cfd\3\2\2\2\u0cfd\u0cfe\5\u012c\u0097\2\u0cfe\u0d02"+
		"\3\2\2\2\u0cff\u0d02\5\u011e\u0090\2\u0d00\u0d02\5\u012a\u0096\2\u0d01"+
		"\u0ce2\3\2\2\2\u0d01\u0ce3\3\2\2\2\u0d01\u0cef\3\2\2\2\u0d01\u0cf7\3\2"+
		"\2\2\u0d01\u0cff\3\2\2\2\u0d01\u0d00\3\2\2\2\u0d02\u011b\3\2\2\2\u0d03"+
		"\u0d04\7\u018e\2\2\u0d04\u0d05\5\u0084C\2\u0d05\u011d\3\2\2\2\u0d06\u0d07"+
		"\7\u017f\2\2\u0d07\u0d0c\5\u0148\u00a5\2\u0d08\u0d09\7\6\2\2\u0d09\u0d0b"+
		"\5\u0148\u00a5\2\u0d0a\u0d08\3\2\2\2\u0d0b\u0d0e\3\2\2\2\u0d0c\u0d0a\3"+
		"\2\2\2\u0d0c\u0d0d\3\2\2\2\u0d0d\u0d0f\3\2\2\2\u0d0e\u0d0c\3\2\2\2\u0d0f"+
		"\u0d10\5\u012c\u0097\2\u0d10\u011f\3\2\2\2\u0d11\u0d12\7\u0154\2\2\u0d12"+
		"\u0d14\5\u009eP\2\u0d13\u0d15\5\u0122\u0092\2\u0d14\u0d13\3\2\2\2\u0d14"+
		"\u0d15\3\2\2\2\u0d15\u0d25\3\2\2\2\u0d16\u0d17\7\u0154\2\2\u0d17\u0d18"+
		"\7\4\2\2\u0d18\u0d19\5\u009eP\2\u0d19\u0d1b\7\5\2\2\u0d1a\u0d1c\5\u0122"+
		"\u0092\2\u0d1b\u0d1a\3\2\2\2\u0d1b\u0d1c\3\2\2\2\u0d1c\u0d25\3\2\2\2\u0d1d"+
		"\u0d1e\7\u0154\2\2\u0d1e\u0d1f\7\4\2\2\u0d1f\u0d20\5f\64\2\u0d20\u0d22"+
		"\7\5\2\2\u0d21\u0d23\5\u0122\u0092\2\u0d22\u0d21\3\2\2\2\u0d22\u0d23\3"+
		"\2\2\2\u0d23\u0d25\3\2\2\2\u0d24\u0d11\3\2\2\2\u0d24\u0d16\3\2\2\2\u0d24"+
		"\u0d1d\3\2\2\2\u0d25\u0121\3\2\2\2\u0d26\u0d27\7\u018e\2\2\u0d27\u0d28"+
		"\7\u013c\2\2\u0d28\u0d41\7\u00fd\2\2\u0d29\u0d2a\t\33\2\2\u0d2a\u0d3e"+
		"\7&\2\2\u0d2b\u0d2c\7\4\2\2\u0d2c\u0d31\5\u0148\u00a5\2\u0d2d\u0d2e\7"+
		"\6\2\2\u0d2e\u0d30\5\u0148\u00a5\2\u0d2f\u0d2d\3\2\2\2\u0d30\u0d33\3\2"+
		"\2\2\u0d31\u0d2f\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32\u0d34\3\2\2\2\u0d33"+
		"\u0d31\3\2\2\2\u0d34\u0d35\7\5\2\2\u0d35\u0d3f\3\2\2\2\u0d36\u0d39\5\u0148"+
		"\u00a5\2\u0d37\u0d38\7\6\2\2\u0d38\u0d3a\5\u0148\u00a5\2\u0d39\u0d37\3"+
		"\2\2\2\u0d3a\u0d3b\3\2\2\2\u0d3b\u0d39\3\2\2\2\u0d3b\u0d3c\3\2\2\2\u0d3c"+
		"\u0d3f\3\2\2\2\u0d3d\u0d3f\5\u0148\u00a5\2\u0d3e\u0d2b\3\2\2\2\u0d3e\u0d36"+
		"\3\2\2\2\u0d3e\u0d3d\3\2\2\2\u0d3f\u0d41\3\2\2\2\u0d40\u0d26\3\2\2\2\u0d40"+
		"\u0d29\3\2\2\2\u0d41\u0d59\3\2\2\2\u0d42\u0d43\t\34\2\2\u0d43\u0d57\7"+
		"&\2\2\u0d44\u0d45\7\4\2\2\u0d45\u0d4a\5\u00aaV\2\u0d46\u0d47\7\6\2\2\u0d47"+
		"\u0d49\5\u00aaV\2\u0d48\u0d46\3\2\2\2\u0d49\u0d4c\3\2\2\2\u0d4a\u0d48"+
		"\3\2\2\2\u0d4a\u0d4b\3\2\2\2\u0d4b\u0d4d\3\2\2\2\u0d4c\u0d4a\3\2\2\2\u0d4d"+
		"\u0d4e\7\5\2\2\u0d4e\u0d58\3\2\2\2\u0d4f\u0d52\5\u00aaV\2\u0d50\u0d51"+
		"\7\6\2\2\u0d51\u0d53\5\u00aaV\2\u0d52\u0d50\3\2\2\2\u0d53\u0d54\3\2\2"+
		"\2\u0d54\u0d52\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d58\3\2\2\2\u0d56\u0d58"+
		"\5\u00aaV\2\u0d57\u0d44\3\2\2\2\u0d57\u0d4f\3\2\2\2\u0d57\u0d56\3\2\2"+
		"\2\u0d58\u0d5a\3\2\2\2\u0d59\u0d42\3\2\2\2\u0d59\u0d5a\3\2\2\2\u0d5a\u0123"+
		"\3\2\2\2\u0d5b\u0d5c\5\u01da\u00ee\2\u0d5c\u0d5d\7\u01ad\2\2\u0d5d\u0d5e"+
		"\5\u0120\u0091\2\u0d5e\u0125\3\2\2\2\u0d5f\u0d62\5\u0120\u0091\2\u0d60"+
		"\u0d62\5\u0124\u0093\2\u0d61\u0d5f\3\2\2\2\u0d61\u0d60\3\2\2\2\u0d62\u0127"+
		"\3\2\2\2\u0d63\u0d66\5\u0126\u0094\2\u0d64\u0d66\5\u014c\u00a7\2\u0d65"+
		"\u0d63\3\2\2\2\u0d65\u0d64\3\2\2\2\u0d66\u0129\3\2\2\2\u0d67\u0d68\5\u01d2"+
		"\u00ea\2\u0d68\u0d71\7\4\2\2\u0d69\u0d6e\5\u0128\u0095\2\u0d6a\u0d6b\7"+
		"\6\2\2\u0d6b\u0d6d\5\u0128\u0095\2\u0d6c\u0d6a\3\2\2\2\u0d6d\u0d70\3\2"+
		"\2\2\u0d6e\u0d6c\3\2\2\2\u0d6e\u0d6f\3\2\2\2\u0d6f\u0d72\3\2\2\2\u0d70"+
		"\u0d6e\3\2\2\2\u0d71\u0d69\3\2\2\2\u0d71\u0d72\3\2\2\2\u0d72\u0d73\3\2"+
		"\2\2\u0d73\u0d74\7\5\2\2\u0d74\u0d75\5\u012c\u0097\2\u0d75\u012b\3\2\2"+
		"\2\u0d76\u0d78\7\30\2\2\u0d77\u0d76\3\2\2\2\u0d77\u0d78\3\2\2\2\u0d78"+
		"\u0d79\3\2\2\2\u0d79\u0d7b\5\u01dc\u00ef\2\u0d7a\u0d7c\5\u010e\u0088\2"+
		"\u0d7b\u0d7a\3\2\2\2\u0d7b\u0d7c\3\2\2\2\u0d7c\u0d7e\3\2\2\2\u0d7d\u0d77"+
		"\3\2\2\2\u0d7d\u0d7e\3\2\2\2\u0d7e\u012d\3\2\2\2\u0d7f\u0d80\7\u012a\2"+
		"\2\u0d80\u0d81\7\u008e\2\2\u0d81\u0d82\7\u0134\2\2\u0d82\u0d86\5\u0202"+
		"\u0102\2\u0d83\u0d84\7\u018e\2\2\u0d84\u0d85\7\u0135\2\2\u0d85\u0d87\5"+
		"\u0084C\2\u0d86\u0d83\3\2\2\2\u0d86\u0d87\3\2\2\2\u0d87\u0db1\3\2\2\2"+
		"\u0d88\u0d89\7\u012a\2\2\u0d89\u0d8a\7\u008e\2\2\u0d8a\u0d94\7d\2\2\u0d8b"+
		"\u0d8c\7\u0085\2\2\u0d8c\u0d8d\7\u015a\2\2\u0d8d\u0d8e\7&\2\2\u0d8e\u0d92"+
		"\5\u0202\u0102\2\u0d8f\u0d90\7v\2\2\u0d90\u0d91\7&\2\2\u0d91\u0d93\5\u0202"+
		"\u0102\2\u0d92\u0d8f\3\2\2\2\u0d92\u0d93\3\2\2\2\u0d93\u0d95\3\2\2\2\u0d94"+
		"\u0d8b\3\2\2\2\u0d94\u0d95\3\2\2\2\u0d95\u0d9b\3\2\2\2\u0d96\u0d97\7:"+
		"\2\2\u0d97\u0d98\7\u00b6\2\2\u0d98\u0d99\7\u015a\2\2\u0d99\u0d9a\7&\2"+
		"\2\u0d9a\u0d9c\5\u0202\u0102\2\u0d9b\u0d96\3\2\2\2\u0d9b\u0d9c\3\2\2\2"+
		"\u0d9c\u0da2\3\2\2\2\u0d9d\u0d9e\7\u00d2\2\2\u0d9e\u0d9f\7\u00bb\2\2\u0d9f"+
		"\u0da0\7\u015a\2\2\u0da0\u0da1\7&\2\2\u0da1\u0da3\5\u0202\u0102\2\u0da2"+
		"\u0d9d\3\2\2\2\u0da2\u0da3\3\2\2\2\u0da3\u0da8\3\2\2\2\u0da4\u0da5\7\u00c7"+
		"\2\2\u0da5\u0da6\7\u015a\2\2\u0da6\u0da7\7&\2\2\u0da7\u0da9\5\u0202\u0102"+
		"\2\u0da8\u0da4\3\2\2\2\u0da8\u0da9\3\2\2\2\u0da9\u0dae\3\2\2\2\u0daa\u0dab"+
		"\7\u00ea\2\2\u0dab\u0dac\7a\2\2\u0dac\u0dad\7\30\2\2\u0dad\u0daf\5\u0202"+
		"\u0102\2\u0dae\u0daa\3\2\2\2\u0dae\u0daf\3\2\2\2\u0daf\u0db1\3\2\2\2\u0db0"+
		"\u0d7f\3\2\2\2\u0db0\u0d88\3\2\2\2\u0db1\u012f\3\2\2\2\u0db2\u0db7\5\u0132"+
		"\u009a\2\u0db3\u0db4\7\6\2\2\u0db4\u0db6\5\u0132\u009a\2\u0db5\u0db3\3"+
		"\2\2\2\u0db6\u0db9\3\2\2\2\u0db7\u0db5\3\2\2\2\u0db7\u0db8\3\2\2\2\u0db8"+
		"\u0131\3\2\2\2\u0db9\u0db7\3\2\2\2\u0dba\u0dbf\5\u01d6\u00ec\2\u0dbb\u0dbc"+
		"\7\7\2\2\u0dbc\u0dbe\5\u01d6\u00ec\2\u0dbd\u0dbb\3\2\2\2\u0dbe\u0dc1\3"+
		"\2\2\2\u0dbf\u0dbd\3\2\2\2\u0dbf\u0dc0\3\2\2\2\u0dc0\u0133\3\2\2\2\u0dc1"+
		"\u0dbf\3\2\2\2\u0dc2\u0dc7\5\u0136\u009c\2\u0dc3\u0dc4\7\6\2\2\u0dc4\u0dc6"+
		"\5\u0136\u009c\2\u0dc5\u0dc3\3\2\2\2\u0dc6\u0dc9\3\2\2\2\u0dc7\u0dc5\3"+
		"\2\2\2\u0dc7\u0dc8\3\2\2\2\u0dc8\u0135\3\2\2\2\u0dc9\u0dc7\3\2\2\2\u0dca"+
		"\u0dcd\5\u0132\u009a\2\u0dcb\u0dcc\7\u00f3\2\2\u0dcc\u0dce\5\u0084C\2"+
		"\u0dcd\u0dcb\3\2\2\2\u0dcd\u0dce\3\2\2\2\u0dce\u0137\3\2\2\2\u0dcf\u0dd0"+
		"\5\u01d6\u00ec\2\u0dd0\u0dd1\7\7\2\2\u0dd1\u0dd3\3\2\2\2\u0dd2\u0dcf\3"+
		"\2\2\2\u0dd2\u0dd3\3\2\2\2\u0dd3\u0dd4\3\2\2\2\u0dd4\u0dd5\5\u01d6\u00ec"+
		"\2\u0dd5\u0139\3\2\2\2\u0dd6\u0dd7\5\u01d6\u00ec\2\u0dd7\u0dd8\7\7\2\2"+
		"\u0dd8\u0dda\3\2\2\2\u0dd9\u0dd6\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda\u0ddb"+
		"\3\2\2\2\u0ddb\u0ddc\5\u01d6\u00ec\2\u0ddc\u013b\3\2\2\2\u0ddd\u0de5\5"+
		"\u0148\u00a5\2\u0dde\u0de0\7\30\2\2\u0ddf\u0dde\3\2\2\2\u0ddf\u0de0\3"+
		"\2\2\2\u0de0\u0de3\3\2\2\2\u0de1\u0de4\5\u01d6\u00ec\2\u0de2\u0de4\5\u010e"+
		"\u0088\2\u0de3\u0de1\3\2\2\2\u0de3\u0de2\3\2\2\2\u0de4\u0de6\3\2\2\2\u0de5"+
		"\u0ddf\3\2\2\2\u0de5\u0de6\3\2\2\2\u0de6\u013d\3\2\2\2\u0de7\u0dec\5\u013c"+
		"\u009f\2\u0de8\u0de9\7\6\2\2\u0de9\u0deb\5\u013c\u009f\2\u0dea\u0de8\3"+
		"\2\2\2\u0deb\u0dee\3\2\2\2\u0dec\u0dea\3\2\2\2\u0dec\u0ded\3\2\2\2\u0ded"+
		"\u013f\3\2\2\2\u0dee\u0dec\3\2\2\2\u0def\u0df0\7\4\2\2\u0df0\u0df5\5\u0142"+
		"\u00a2\2\u0df1\u0df2\7\6\2\2\u0df2\u0df4\5\u0142\u00a2\2\u0df3\u0df1\3"+
		"\2\2\2\u0df4\u0df7\3\2\2\2\u0df5\u0df3\3\2\2\2\u0df5\u0df6\3\2\2\2\u0df6"+
		"\u0df8\3\2\2\2\u0df7\u0df5\3\2\2\2\u0df8\u0df9\7\5\2\2\u0df9\u0141\3\2"+
		"\2\2\u0dfa\u0dfd\5\u0144\u00a3\2\u0dfb\u0dfd\5\u019e\u00d0\2\u0dfc\u0dfa"+
		"\3\2\2\2\u0dfc\u0dfb\3\2\2\2\u0dfd\u0143\3\2\2\2\u0dfe\u0e0c\5\u01d4\u00eb"+
		"\2\u0dff\u0e00\5\u01da\u00ee\2\u0e00\u0e01\7\4\2\2\u0e01\u0e06\5\u0146"+
		"\u00a4\2\u0e02\u0e03\7\6\2\2\u0e03\u0e05\5\u0146\u00a4\2\u0e04\u0e02\3"+
		"\2\2\2\u0e05\u0e08\3\2\2\2\u0e06\u0e04\3\2\2\2\u0e06\u0e07\3\2\2\2\u0e07"+
		"\u0e09\3\2\2\2\u0e08\u0e06\3\2\2\2\u0e09\u0e0a\7\5\2\2\u0e0a\u0e0c\3\2"+
		"\2\2\u0e0b\u0dfe\3\2\2\2\u0e0b\u0dff\3\2\2\2\u0e0c\u0145\3\2\2\2\u0e0d"+
		"\u0e10\5\u01d4\u00eb\2\u0e0e\u0e10\5\u016a\u00b6\2\u0e0f\u0e0d\3\2\2\2"+
		"\u0e0f\u0e0e\3\2\2\2\u0e10\u0147\3\2\2\2\u0e11\u0e12\5\u0150\u00a9\2\u0e12"+
		"\u0149\3\2\2\2\u0e13\u0e14\5\u01da\u00ee\2\u0e14\u0e15\7\u01ad\2\2\u0e15"+
		"\u0e16\5\u0148\u00a5\2\u0e16\u014b\3\2\2\2\u0e17\u0e1a\5\u0148\u00a5\2"+
		"\u0e18\u0e1a\5\u014a\u00a6\2\u0e19\u0e17\3\2\2\2\u0e19\u0e18\3\2\2\2\u0e1a"+
		"\u014d\3\2\2\2\u0e1b\u0e20\5\u0148\u00a5\2\u0e1c\u0e1d\7\6\2\2\u0e1d\u0e1f"+
		"\5\u0148\u00a5\2\u0e1e\u0e1c\3\2\2\2\u0e1f\u0e22\3\2\2\2\u0e20\u0e1e\3"+
		"\2\2\2\u0e20\u0e21\3\2\2\2\u0e21\u014f\3\2\2\2\u0e22\u0e20\3\2\2\2\u0e23"+
		"\u0e24\b\u00a9\1\2\u0e24\u0e25\t\35\2\2\u0e25\u0e30\5\u0150\u00a9\7\u0e26"+
		"\u0e27\7{\2\2\u0e27\u0e28\7\4\2\2\u0e28\u0e29\5f\64\2\u0e29\u0e2a\7\5"+
		"\2\2\u0e2a\u0e30\3\2\2\2\u0e2b\u0e2d\5\u0156\u00ac\2\u0e2c\u0e2e\5\u0152"+
		"\u00aa\2\u0e2d\u0e2c\3\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e\u0e30\3\2\2\2\u0e2f"+
		"\u0e23\3\2\2\2\u0e2f\u0e26\3\2\2\2\u0e2f\u0e2b\3\2\2\2\u0e30\u0e39\3\2"+
		"\2\2\u0e31\u0e32\f\4\2\2\u0e32\u0e33\7\22\2\2\u0e33\u0e38\5\u0150\u00a9"+
		"\5\u0e34\u0e35\f\3\2\2\u0e35\u0e36\7\u00f4\2\2\u0e36\u0e38\5\u0150\u00a9"+
		"\4\u0e37\u0e31\3\2\2\2\u0e37\u0e34\3\2\2\2\u0e38\u0e3b\3\2\2\2\u0e39\u0e37"+
		"\3\2\2\2\u0e39\u0e3a\3\2\2\2\u0e3a\u0151\3\2\2\2\u0e3b\u0e39\3\2\2\2\u0e3c"+
		"\u0e3e\5\u0154\u00ab\2\u0e3d\u0e3c\3\2\2\2\u0e3d\u0e3e\3\2\2\2\u0e3e\u0e3f"+
		"\3\2\2\2\u0e3f\u0e40\7\36\2\2\u0e40\u0e41\5\u0156\u00ac\2\u0e41\u0e42"+
		"\7\22\2\2\u0e42\u0e43\5\u0156\u00ac\2\u0e43\u0e8f\3\2\2\2\u0e44\u0e46"+
		"\5\u0154\u00ab\2\u0e45\u0e44\3\2\2\2\u0e45\u0e46\3\2\2\2\u0e46\u0e47\3"+
		"\2\2\2\u0e47\u0e48\7\u00a5\2\2\u0e48\u0e49\7\4\2\2\u0e49\u0e4e\5\u0148"+
		"\u00a5\2\u0e4a\u0e4b\7\6\2\2\u0e4b\u0e4d\5\u0148\u00a5\2\u0e4c\u0e4a\3"+
		"\2\2\2\u0e4d\u0e50\3\2\2\2\u0e4e\u0e4c\3\2\2\2\u0e4e\u0e4f\3\2\2\2\u0e4f"+
		"\u0e51\3\2\2\2\u0e50\u0e4e\3\2\2\2\u0e51\u0e52\7\5\2\2\u0e52\u0e8f\3\2"+
		"\2\2\u0e53\u0e55\5\u0154\u00ab\2\u0e54\u0e53\3\2\2\2\u0e54\u0e55\3\2\2"+
		"\2\u0e55\u0e56\3\2\2\2\u0e56\u0e57\7\u00a5\2\2\u0e57\u0e58\7\4\2\2\u0e58"+
		"\u0e59\5f\64\2\u0e59\u0e5a\7\5\2\2\u0e5a\u0e8f\3\2\2\2\u0e5b\u0e5d\5\u0154"+
		"\u00ab\2\u0e5c\u0e5b\3\2\2\2\u0e5c\u0e5d\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e"+
		"\u0e5f\7\u0125\2\2\u0e5f\u0e8f\5\u0156\u00ac\2\u0e60\u0e62\5\u0154\u00ab"+
		"\2\u0e61\u0e60\3\2\2\2\u0e61\u0e62\3\2\2\2\u0e62\u0e63\3\2\2\2\u0e63\u0e64"+
		"\t\36\2\2\u0e64\u0e72\t\37\2\2\u0e65\u0e66\7\4\2\2\u0e66\u0e73\7\5\2\2"+
		"\u0e67\u0e68\7\4\2\2\u0e68\u0e6d\5\u0148\u00a5\2\u0e69\u0e6a\7\6\2\2\u0e6a"+
		"\u0e6c\5\u0148\u00a5\2\u0e6b\u0e69\3\2\2\2\u0e6c\u0e6f\3\2\2\2\u0e6d\u0e6b"+
		"\3\2\2\2\u0e6d\u0e6e\3\2\2\2\u0e6e\u0e70\3\2\2\2\u0e6f\u0e6d\3\2\2\2\u0e70"+
		"\u0e71\7\5\2\2\u0e71\u0e73\3\2\2\2\u0e72\u0e65\3\2\2\2\u0e72\u0e67\3\2"+
		"\2\2\u0e73\u0e8f\3\2\2\2\u0e74\u0e76\5\u0154\u00ab\2\u0e75\u0e74\3\2\2"+
		"\2\u0e75\u0e76\3\2\2\2\u0e76\u0e77\3\2\2\2\u0e77\u0e78\t\36\2\2\u0e78"+
		"\u0e7b\5\u0156\u00ac\2\u0e79\u0e7a\7u\2\2\u0e7a\u0e7c\5\u0202\u0102\2"+
		"\u0e7b\u0e79\3\2\2\2\u0e7b\u0e7c\3\2\2\2\u0e7c\u0e8f\3\2\2\2\u0e7d\u0e7f"+
		"\7\u00b5\2\2\u0e7e\u0e80\5\u0154\u00ab\2\u0e7f\u0e7e\3\2\2\2\u0e7f\u0e80"+
		"\3\2\2\2\u0e80\u0e81\3\2\2\2\u0e81\u0e8f\7\u00ea\2\2\u0e82\u0e84\7\u00b5"+
		"\2\2\u0e83\u0e85\5\u0154\u00ab\2\u0e84\u0e83\3\2\2\2\u0e84\u0e85\3\2\2"+
		"\2\u0e85\u0e86\3\2\2\2\u0e86\u0e8f\t \2\2\u0e87\u0e89\7\u00b5\2\2\u0e88"+
		"\u0e8a\5\u0154\u00ab\2\u0e89\u0e88\3\2\2\2\u0e89\u0e8a\3\2\2\2\u0e8a\u0e8b"+
		"\3\2\2\2\u0e8b\u0e8c\7k\2\2\u0e8c\u0e8d\7\u0091\2\2\u0e8d\u0e8f\5\u0156"+
		"\u00ac\2\u0e8e\u0e3d\3\2\2\2\u0e8e\u0e45\3\2\2\2\u0e8e\u0e54\3\2\2\2\u0e8e"+
		"\u0e5c\3\2\2\2\u0e8e\u0e61\3\2\2\2\u0e8e\u0e75\3\2\2\2\u0e8e\u0e7d\3\2"+
		"\2\2\u0e8e\u0e82\3\2\2\2\u0e8e\u0e87\3\2\2\2\u0e8f\u0153\3\2\2\2\u0e90"+
		"\u0e91\t\35\2\2\u0e91\u0155\3\2\2\2\u0e92\u0e93\b\u00ac\1\2\u0e93\u0e97"+
		"\5\u015c\u00af\2\u0e94\u0e95\t!\2\2\u0e95\u0e97\5\u0156\u00ac\n\u0e96"+
		"\u0e92\3\2\2\2\u0e96\u0e94\3\2\2\2\u0e97\u0eb1\3\2\2\2\u0e98\u0e99\f\t"+
		"\2\2\u0e99\u0e9a\t\"\2\2\u0e9a\u0eb0\5\u0156\u00ac\n\u0e9b\u0e9c\f\b\2"+
		"\2\u0e9c\u0e9d\t#\2\2\u0e9d\u0eb0\5\u0156\u00ac\t\u0e9e\u0e9f\f\7\2\2"+
		"\u0e9f\u0ea0\5\u0158\u00ad\2\u0ea0\u0ea1\5\u0156\u00ac\b\u0ea1\u0eb0\3"+
		"\2\2\2\u0ea2\u0ea3\f\6\2\2\u0ea3\u0ea4\7\u01a5\2\2\u0ea4\u0eb0\5\u0156"+
		"\u00ac\7\u0ea5\u0ea6\f\5\2\2\u0ea6\u0ea7\7\u01a9\2\2\u0ea7\u0eb0\5\u0156"+
		"\u00ac\6\u0ea8\u0ea9\f\4\2\2\u0ea9\u0eaa\7\u01a6\2\2\u0eaa\u0eb0\5\u0156"+
		"\u00ac\5\u0eab\u0eac\f\3\2\2\u0eac\u0ead\5\u016c\u00b7\2\u0ead\u0eae\5"+
		"\u0156\u00ac\4\u0eae\u0eb0\3\2\2\2\u0eaf\u0e98\3\2\2\2\u0eaf\u0e9b\3\2"+
		"\2\2\u0eaf\u0e9e\3\2\2\2\u0eaf\u0ea2\3\2\2\2\u0eaf\u0ea5\3\2\2\2\u0eaf"+
		"\u0ea8\3\2\2\2\u0eaf\u0eab\3\2\2\2\u0eb0\u0eb3\3\2\2\2\u0eb1\u0eaf\3\2"+
		"\2\2\u0eb1\u0eb2\3\2\2\2\u0eb2\u0157\3\2\2\2\u0eb3\u0eb1\3\2\2\2\u0eb4"+
		"\u0eb5\t$\2\2\u0eb5\u0159\3\2\2\2\u0eb6\u0eb7\t%\2\2\u0eb7\u015b\3\2\2"+
		"\2\u0eb8\u0eb9\b\u00af\1\2\u0eb9\u0fac\t&\2\2\u0eba\u0ebb\t\'\2\2\u0ebb"+
		"\u0ebe\7\4\2\2\u0ebc\u0ebf\5\u015a\u00ae\2\u0ebd\u0ebf\5\u0202\u0102\2"+
		"\u0ebe\u0ebc\3\2\2\2\u0ebe\u0ebd\3\2\2\2\u0ebf\u0ec0\3\2\2\2\u0ec0\u0ec1"+
		"\7\6\2\2\u0ec1\u0ec2\5\u0156\u00ac\2\u0ec2\u0ec3\7\6\2\2\u0ec3\u0ec4\5"+
		"\u0156\u00ac\2\u0ec4\u0ec5\7\5\2\2\u0ec5\u0fac\3\2\2\2\u0ec6\u0ec7\t("+
		"\2\2\u0ec7\u0eca\7\4\2\2\u0ec8\u0ecb\5\u015a\u00ae\2\u0ec9\u0ecb\5\u0202"+
		"\u0102\2\u0eca\u0ec8\3\2\2\2\u0eca\u0ec9\3\2\2\2\u0ecb\u0ecc\3\2\2\2\u0ecc"+
		"\u0ecd\7\6\2\2\u0ecd\u0ece\5\u0156\u00ac\2\u0ece\u0ecf\7\6\2\2\u0ecf\u0ed0"+
		"\5\u0156\u00ac\2\u0ed0\u0ed1\7\5\2\2\u0ed1\u0fac\3\2\2\2\u0ed2\u0ed4\7"+
		",\2\2\u0ed3\u0ed5\5\u01c4\u00e3\2\u0ed4\u0ed3\3\2\2\2\u0ed5\u0ed6\3\2"+
		"\2\2\u0ed6\u0ed4\3\2\2\2\u0ed6\u0ed7\3\2\2\2\u0ed7\u0eda\3\2\2\2\u0ed8"+
		"\u0ed9\7q\2\2\u0ed9\u0edb\5\u0148\u00a5\2\u0eda\u0ed8\3\2\2\2\u0eda\u0edb"+
		"\3\2\2\2\u0edb\u0edc\3\2\2\2\u0edc\u0edd\7s\2\2\u0edd\u0fac\3\2\2\2\u0ede"+
		"\u0edf\7,\2\2\u0edf\u0ee1\5\u0148\u00a5\2\u0ee0\u0ee2\5\u01c4\u00e3\2"+
		"\u0ee1\u0ee0\3\2\2\2\u0ee2\u0ee3\3\2\2\2\u0ee3\u0ee1\3\2\2\2\u0ee3\u0ee4"+
		"\3\2\2\2\u0ee4\u0ee7\3\2\2\2\u0ee5\u0ee6\7q\2\2\u0ee6\u0ee8\5\u0148\u00a5"+
		"\2\u0ee7\u0ee5\3\2\2\2\u0ee7\u0ee8\3\2\2\2\u0ee8\u0ee9\3\2\2\2\u0ee9\u0eea"+
		"\7s\2\2\u0eea\u0fac\3\2\2\2\u0eeb\u0eec\t)\2\2\u0eec\u0eed\7\4\2\2\u0eed"+
		"\u0eee\5\u0148\u00a5\2\u0eee\u0eef\7\30\2\2\u0eef\u0ef0\5\u0190\u00c9"+
		"\2\u0ef0\u0ef1\7\5\2\2\u0ef1\u0fac\3\2\2\2\u0ef2\u0ef3\7\u014e\2\2\u0ef3"+
		"\u0efc\7\4\2\2\u0ef4\u0ef9\5\u013c\u009f\2\u0ef5\u0ef6\7\6\2\2\u0ef6\u0ef8"+
		"\5\u013c\u009f\2\u0ef7\u0ef5\3\2\2\2\u0ef8\u0efb\3\2\2\2\u0ef9\u0ef7\3"+
		"\2\2\2\u0ef9\u0efa\3\2\2\2\u0efa\u0efd\3\2\2\2\u0efb\u0ef9\3\2\2\2\u0efc"+
		"\u0ef4\3\2\2\2\u0efc\u0efd\3\2\2\2\u0efd\u0efe\3\2\2\2\u0efe\u0fac\7\5"+
		"\2\2\u0eff\u0f00\7\u0088\2\2\u0f00\u0f01\7\4\2\2\u0f01\u0f04\5\u0148\u00a5"+
		"\2\u0f02\u0f03\7\u00a2\2\2\u0f03\u0f05\7\u00eb\2\2\u0f04\u0f02\3\2\2\2"+
		"\u0f04\u0f05\3\2\2\2\u0f05\u0f06\3\2\2\2\u0f06\u0f07\7\5\2\2\u0f07\u0fac"+
		"\3\2\2\2\u0f08\u0f09\7\25\2\2\u0f09\u0f0a\7\4\2\2\u0f0a\u0f0d\5\u0148"+
		"\u00a5\2\u0f0b\u0f0c\7\u00a2\2\2\u0f0c\u0f0e\7\u00eb\2\2\u0f0d\u0f0b\3"+
		"\2\2\2\u0f0d\u0f0e\3\2\2\2\u0f0e\u0f0f\3\2\2\2\u0f0f\u0f10\7\5\2\2\u0f10"+
		"\u0fac\3\2\2\2\u0f11\u0f12\7\u00bd\2\2\u0f12\u0f13\7\4\2\2\u0f13\u0f16"+
		"\5\u0148\u00a5\2\u0f14\u0f15\7\u00a2\2\2\u0f15\u0f17\7\u00eb\2\2\u0f16"+
		"\u0f14\3\2\2\2\u0f16\u0f17\3\2\2\2\u0f17\u0f18\3\2\2\2\u0f18\u0f19\7\5"+
		"\2\2\u0f19\u0fac\3\2\2\2\u0f1a\u0f1b\7\u0103\2\2\u0f1b\u0f1c\7\4\2\2\u0f1c"+
		"\u0f1d\5\u0156\u00ac\2\u0f1d\u0f1e\7\u00a5\2\2\u0f1e\u0f1f\5\u0156\u00ac"+
		"\2\u0f1f\u0f20\7\5\2\2\u0f20\u0fac\3\2\2\2\u0f21\u0fac\5\u016a\u00b6\2"+
		"\u0f22\u0f24\7\u01a1\2\2\u0f23\u0f25\5\u00c4c\2\u0f24\u0f23\3\2\2\2\u0f24"+
		"\u0f25\3\2\2\2\u0f25\u0fac\3\2\2\2\u0f26\u0f27\5\u01d4\u00eb\2\u0f27\u0f28"+
		"\7\7\2\2\u0f28\u0f2a\7\u01a1\2\2\u0f29\u0f2b\5\u00c4c\2\u0f2a\u0f29\3"+
		"\2\2\2\u0f2a\u0f2b\3\2\2\2\u0f2b\u0fac\3\2\2\2\u0f2c\u0f2d\7\4\2\2\u0f2d"+
		"\u0f30\5\u013c\u009f\2\u0f2e\u0f2f\7\6\2\2\u0f2f\u0f31\5\u013c\u009f\2"+
		"\u0f30\u0f2e\3\2\2\2\u0f31\u0f32\3\2\2\2\u0f32\u0f30\3\2\2\2\u0f32\u0f33"+
		"\3\2\2\2\u0f33\u0f34\3\2\2\2\u0f34\u0f35\7\5\2\2\u0f35\u0fac\3\2\2\2\u0f36"+
		"\u0f37\7\4\2\2\u0f37\u0f38\5f\64\2\u0f38\u0f39\7\5\2\2\u0f39\u0fac\3\2"+
		"\2\2\u0f3a\u0f3b\5\u01d2\u00ea\2\u0f3b\u0f47\7\4\2\2\u0f3c\u0f3e\5\u00fe"+
		"\u0080\2\u0f3d\u0f3c\3\2\2\2\u0f3d\u0f3e\3\2\2\2\u0f3e\u0f3f\3\2\2\2\u0f3f"+
		"\u0f44\5\u014c\u00a7\2\u0f40\u0f41\7\6\2\2\u0f41\u0f43\5\u014c\u00a7\2"+
		"\u0f42\u0f40\3\2\2\2\u0f43\u0f46\3\2\2\2\u0f44\u0f42\3\2\2\2\u0f44\u0f45"+
		"\3\2\2\2\u0f45\u0f48\3\2\2\2\u0f46\u0f44\3\2\2\2\u0f47\u0f3d\3\2\2\2\u0f47"+
		"\u0f48\3\2\2\2\u0f48\u0f49\3\2\2\2\u0f49\u0f59\7\5\2\2\u0f4a\u0f4b\7\u018f"+
		"\2\2\u0f4b\u0f4c\7\u0098\2\2\u0f4c\u0f4d\7\4\2\2\u0f4d\u0f4e\7\u00f5\2"+
		"\2\u0f4e\u0f4f\7&\2\2\u0f4f\u0f54\5\u00aaV\2\u0f50\u0f51\7\6\2\2\u0f51"+
		"\u0f53\5\u00aaV\2\u0f52\u0f50\3\2\2\2\u0f53\u0f56\3\2\2\2\u0f54\u0f52"+
		"\3\2\2\2\u0f54\u0f55\3\2\2\2\u0f55\u0f57\3\2\2\2\u0f56\u0f54\3\2\2\2\u0f57"+
		"\u0f58\7\5\2\2\u0f58\u0f5a\3\2\2\2\u0f59\u0f4a\3\2\2\2\u0f59\u0f5a\3\2"+
		"\2\2\u0f5a\u0f61\3\2\2\2\u0f5b\u0f5c\7\u0086\2\2\u0f5c\u0f5d\7\4\2\2\u0f5d"+
		"\u0f5e\7\u018b\2\2\u0f5e\u0f5f\5\u0150\u00a9\2\u0f5f\u0f60\7\5\2\2\u0f60"+
		"\u0f62\3\2\2\2\u0f61\u0f5b\3\2\2\2\u0f61\u0f62\3\2\2\2\u0f62\u0f65\3\2"+
		"\2\2\u0f63\u0f64\t*\2\2\u0f64\u0f66\7\u00eb\2\2\u0f65\u0f63\3\2\2\2\u0f65"+
		"\u0f66\3\2\2\2\u0f66\u0f69\3\2\2\2\u0f67\u0f68\7\u00f9\2\2\u0f68\u0f6a"+
		"\5\u01ca\u00e6\2\u0f69\u0f67\3\2\2\2\u0f69\u0f6a\3\2\2\2\u0f6a\u0fac\3"+
		"\2\2\2\u0f6b\u0f6c\5\u01da\u00ee\2\u0f6c\u0f6d\7\u01ac\2\2\u0f6d\u0f6e"+
		"\5\u0148\u00a5\2\u0f6e\u0fac\3\2\2\2\u0f6f\u0f70\7\4\2\2\u0f70\u0f73\5"+
		"\u01da\u00ee\2\u0f71\u0f72\7\6\2\2\u0f72\u0f74\5\u01da\u00ee\2\u0f73\u0f71"+
		"\3\2\2\2\u0f74\u0f75\3\2\2\2\u0f75\u0f73\3\2\2\2\u0f75\u0f76\3\2\2\2\u0f76"+
		"\u0f77\3\2\2\2\u0f77\u0f78\7\5\2\2\u0f78\u0f79\7\u01ac\2\2\u0f79\u0f7a"+
		"\5\u0148\u00a5\2\u0f7a\u0fac\3\2\2\2\u0f7b\u0fac\5\u01da\u00ee\2\u0f7c"+
		"\u0f7d\7\4\2\2\u0f7d\u0f7e\5\u0148\u00a5\2\u0f7e\u0f7f\7\5\2\2\u0f7f\u0fac"+
		"\3\2\2\2\u0f80\u0f81\7\u0082\2\2\u0f81\u0f82\7\4\2\2\u0f82\u0f83\5\u01da"+
		"\u00ee\2\u0f83\u0f84\7\u0091\2\2\u0f84\u0f85\5\u0156\u00ac\2\u0f85\u0f86"+
		"\7\5\2\2\u0f86\u0fac\3\2\2\2\u0f87\u0f88\t+\2\2\u0f88\u0f89\7\4\2\2\u0f89"+
		"\u0f8a\5\u0156\u00ac\2\u0f8a\u0f8b\t,\2\2\u0f8b\u0f8e\5\u0156\u00ac\2"+
		"\u0f8c\u0f8d\t-\2\2\u0f8d\u0f8f\5\u0156\u00ac\2\u0f8e\u0f8c\3\2\2\2\u0f8e"+
		"\u0f8f\3\2\2\2\u0f8f\u0f90\3\2\2\2\u0f90\u0f91\7\5\2\2\u0f91\u0fac\3\2"+
		"\2\2\u0f92\u0f93\7\u016b\2\2\u0f93\u0f95\7\4\2\2\u0f94\u0f96\t.\2\2\u0f95"+
		"\u0f94\3\2\2\2\u0f95\u0f96\3\2\2\2\u0f96\u0f98\3\2\2\2\u0f97\u0f99\5\u0156"+
		"\u00ac\2\u0f98\u0f97\3\2\2\2\u0f98\u0f99\3\2\2\2\u0f99\u0f9a\3\2\2\2\u0f9a"+
		"\u0f9b\7\u0091\2\2\u0f9b\u0f9c\5\u0156\u00ac\2\u0f9c\u0f9d\7\5\2\2\u0f9d"+
		"\u0fac\3\2\2\2\u0f9e\u0f9f\7\u00fb\2\2\u0f9f\u0fa0\7\4\2\2\u0fa0\u0fa1"+
		"\5\u0156\u00ac\2\u0fa1\u0fa2\7\u0102\2\2\u0fa2\u0fa3\5\u0156\u00ac\2\u0fa3"+
		"\u0fa4\7\u0091\2\2\u0fa4\u0fa7\5\u0156\u00ac\2\u0fa5\u0fa6\7\u008c\2\2"+
		"\u0fa6\u0fa8\5\u0156\u00ac\2\u0fa7\u0fa5\3\2\2\2\u0fa7\u0fa8\3\2\2\2\u0fa8"+
		"\u0fa9\3\2\2\2\u0fa9\u0faa\7\5\2\2\u0faa\u0fac\3\2\2\2\u0fab\u0eb8\3\2"+
		"\2\2\u0fab\u0eba\3\2\2\2\u0fab\u0ec6\3\2\2\2\u0fab\u0ed2\3\2\2\2\u0fab"+
		"\u0ede\3\2\2\2\u0fab\u0eeb\3\2\2\2\u0fab\u0ef2\3\2\2\2\u0fab\u0eff\3\2"+
		"\2\2\u0fab\u0f08\3\2\2\2\u0fab\u0f11\3\2\2\2\u0fab\u0f1a\3\2\2\2\u0fab"+
		"\u0f21\3\2\2\2\u0fab\u0f22\3\2\2\2\u0fab\u0f26\3\2\2\2\u0fab\u0f2c\3\2"+
		"\2\2\u0fab\u0f36\3\2\2\2\u0fab\u0f3a\3\2\2\2\u0fab\u0f6b\3\2\2\2\u0fab"+
		"\u0f6f\3\2\2\2\u0fab\u0f7b\3\2\2\2\u0fab\u0f7c\3\2\2\2\u0fab\u0f80\3\2"+
		"\2\2\u0fab\u0f87\3\2\2\2\u0fab\u0f92\3\2\2\2\u0fab\u0f9e\3\2\2\2\u0fac"+
		"\u0fbf\3\2\2\2\u0fad\u0fae\f\32\2\2\u0fae\u0fbe\5\u0188\u00c5\2\u0faf"+
		"\u0fb0\f\31\2\2\u0fb0\u0fb1\7\u01ab\2\2\u0fb1\u0fbe\5\u0190\u00c9\2\u0fb2"+
		"\u0fb3\f\20\2\2\u0fb3\u0fb4\7\u01aa\2\2\u0fb4\u0fbe\5\u015e\u00b0\2\u0fb5"+
		"\u0fb6\f\n\2\2\u0fb6\u0fb7\7\b\2\2\u0fb7\u0fb8\5\u0156\u00ac\2\u0fb8\u0fb9"+
		"\7\t\2\2\u0fb9\u0fbe\3\2\2\2\u0fba\u0fbb\f\b\2\2\u0fbb\u0fbc\7\7\2\2\u0fbc"+
		"\u0fbe\5\u01da\u00ee\2\u0fbd\u0fad\3\2\2\2\u0fbd\u0faf\3\2\2\2\u0fbd\u0fb2"+
		"\3\2\2\2\u0fbd\u0fb5\3\2\2\2\u0fbd\u0fba\3\2\2\2\u0fbe\u0fc1\3\2\2\2\u0fbf"+
		"\u0fbd\3\2\2\2\u0fbf\u0fc0\3\2\2\2\u0fc0\u015d\3\2\2\2\u0fc1\u0fbf\3\2"+
		"\2\2\u0fc2\u0fc6\5\u0164\u00b3\2\u0fc3\u0fc5\5\u0166\u00b4\2\u0fc4\u0fc3"+
		"\3\2\2\2\u0fc5\u0fc8\3\2\2\2\u0fc6\u0fc4\3\2\2\2\u0fc6\u0fc7\3\2\2\2\u0fc7"+
		"\u015f\3\2\2\2\u0fc8\u0fc6\3\2\2\2\u0fc9\u0fcc\5\u01da\u00ee\2\u0fca\u0fcc"+
		"\7\u01bd\2\2\u0fcb\u0fc9\3\2\2\2\u0fcb\u0fca\3\2\2\2\u0fcc\u0161\3\2\2"+
		"\2\u0fcd\u0fce\7\b\2\2\u0fce\u0fcf\5\u0202\u0102\2\u0fcf\u0fd0\7\t\2\2"+
		"\u0fd0\u0163\3\2\2\2\u0fd1\u0fd7\5\u0160\u00b1\2\u0fd2\u0fd7\5\u0162\u00b2"+
		"\2\u0fd3\u0fd4\7\b\2\2\u0fd4\u0fd5\7\u01b6\2\2\u0fd5\u0fd7\7\t\2\2\u0fd6"+
		"\u0fd1\3\2\2\2\u0fd6\u0fd2\3\2\2\2\u0fd6\u0fd3\3\2\2\2\u0fd7\u0165\3\2"+
		"\2\2\u0fd8\u0fd9\7\7\2\2\u0fd9\u0fe3\5\u0160\u00b1\2\u0fda\u0fe3\5\u0162"+
		"\u00b2\2\u0fdb\u0fdc\7\b\2\2\u0fdc\u0fdd\7\u01b6\2\2\u0fdd\u0fe3\7\t\2"+
		"\2\u0fde\u0fdf\7\b\2\2\u0fdf\u0fe0\5\u01da\u00ee\2\u0fe0\u0fe1\7\t\2\2"+
		"\u0fe1\u0fe3\3\2\2\2\u0fe2\u0fd8\3\2\2\2\u0fe2\u0fda\3\2\2\2\u0fe2\u0fdb"+
		"\3\2\2\2\u0fe2\u0fde\3\2\2\2\u0fe3\u0167\3\2\2\2\u0fe4\u0fed\7U\2\2\u0fe5"+
		"\u0fed\7\u015c\2\2\u0fe6\u0fed\7\u015e\2\2\u0fe7\u0fed\7\u015f\2\2\u0fe8"+
		"\u0fed\7\u0160\2\2\u0fe9\u0fed\7\u00b0\2\2\u0fea\u0fed\7\u009c\2\2\u0feb"+
		"\u0fed\5\u01da\u00ee\2\u0fec\u0fe4\3\2\2\2\u0fec\u0fe5\3\2\2\2\u0fec\u0fe6"+
		"\3\2\2\2\u0fec\u0fe7\3\2\2\2\u0fec\u0fe8\3\2\2\2\u0fec\u0fe9\3\2\2\2\u0fec"+
		"\u0fea\3\2\2\2\u0fec\u0feb\3\2\2\2\u0fed\u0169\3\2\2\2\u0fee\u0ffe\7\u00ea"+
		"\2\2\u0fef\u0ffe\7\u01b0\2\2\u0ff0\u0ff1\7\u01aa\2\2\u0ff1\u0ffe\5\u01da"+
		"\u00ee\2\u0ff2\u0ffe\5\u0174\u00bb\2\u0ff3\u0ff4\5\u0168\u00b5\2\u0ff4"+
		"\u0ff5\5\u0202\u0102\2\u0ff5\u0ffe\3\2\2\2\u0ff6\u0ffe\5\u01e2\u00f2\2"+
		"\u0ff7\u0ffe\5\u0172\u00ba\2\u0ff8\u0ffa\5\u0202\u0102\2\u0ff9\u0ff8\3"+
		"\2\2\2\u0ffa\u0ffb\3\2\2\2\u0ffb\u0ff9\3\2\2\2\u0ffb\u0ffc\3\2\2\2\u0ffc"+
		"\u0ffe\3\2\2\2\u0ffd\u0fee\3\2\2\2\u0ffd\u0fef\3\2\2\2\u0ffd\u0ff0\3\2"+
		"\2\2\u0ffd\u0ff2\3\2\2\2\u0ffd\u0ff3\3\2\2\2\u0ffd\u0ff6\3\2\2\2\u0ffd"+
		"\u0ff7\3\2\2\2\u0ffd\u0ff9\3\2\2\2\u0ffe\u016b\3\2\2\2\u0fff\u1000\t/"+
		"\2\2\u1000\u016d\3\2\2\2\u1001\u1002\t\60\2\2\u1002\u016f\3\2\2\2\u1003"+
		"\u1004\t\61\2\2\u1004\u0171\3\2\2\2\u1005\u1006\t\62\2\2\u1006\u0173\3"+
		"\2\2\2\u1007\u100a\7\u00b0\2\2\u1008\u100b\5\u0176\u00bc\2\u1009\u100b"+
		"\5\u017a\u00be\2\u100a\u1008\3\2\2\2\u100a\u1009\3\2\2\2\u100b\u0175\3"+
		"\2\2\2\u100c\u100e\5\u0178\u00bd\2\u100d\u100f\5\u017c\u00bf\2\u100e\u100d"+
		"\3\2\2\2\u100e\u100f\3\2\2\2\u100f\u0177\3\2\2\2\u1010\u1011\5\u017e\u00c0"+
		"\2\u1011\u1012\5\u0180\u00c1\2\u1012\u1014\3\2\2\2\u1013\u1010\3\2\2\2"+
		"\u1014\u1015\3\2\2\2\u1015\u1013\3\2\2\2\u1015\u1016\3\2\2\2\u1016\u0179"+
		"\3\2\2\2\u1017\u101a\5\u017c\u00bf\2\u1018\u101b\5\u0178\u00bd\2\u1019"+
		"\u101b\5\u017c\u00bf\2\u101a\u1018\3\2\2\2\u101a\u1019\3\2\2\2\u101a\u101b"+
		"\3\2\2\2\u101b\u017b\3\2\2\2\u101c\u101d\5\u017e\u00c0\2\u101d\u101e\5"+
		"\u0182\u00c2\2\u101e\u101f\7\u0164\2\2\u101f\u1020\5\u0182\u00c2\2\u1020"+
		"\u017d\3\2\2\2\u1021\u1023\t\63\2\2\u1022\u1021\3\2\2\2\u1022\u1023\3"+
		"\2\2\2\u1023\u1027\3\2\2\2\u1024\u1028\7\u01b6\2\2\u1025\u1028\7\u01b8"+
		"\2\2\u1026\u1028\5\u0202\u0102\2\u1027\u1024\3\2\2\2\u1027\u1025\3\2\2"+
		"\2\u1027\u1026\3\2\2\2\u1028\u017f\3\2\2\2\u1029\u102a\t\64\2\2\u102a"+
		"\u0181\3\2\2\2\u102b\u102c\t\65\2\2\u102c\u0183\3\2\2\2\u102d\u1031\7"+
		"\u0088\2\2\u102e\u102f\7\f\2\2\u102f\u1031\5\u01d6\u00ec\2\u1030\u102d"+
		"\3\2\2\2\u1030\u102e\3\2\2\2\u1031\u0185\3\2\2\2\u1032\u1033\7`\2\2\u1033"+
		"\u1034\79\2\2\u1034\u1035\5\u01da\u00ee\2\u1035\u0187\3\2\2\2\u1036\u1037"+
		"\78\2\2\u1037\u1038\5\u0132\u009a\2\u1038\u0189\3\2\2\2\u1039\u103b\7"+
		"\u014d\2\2\u103a\u103c\5\u0188\u00c5\2\u103b\u103a\3\2\2\2\u103b\u103c"+
		"\3\2\2\2\u103c\u1072\3\2\2\2\u103d\u1041\t\66\2\2\u103e\u103f\7\4\2\2"+
		"\u103f\u1040\7\u01b6\2\2\u1040\u1042\7\5\2\2\u1041\u103e\3\2\2\2\u1041"+
		"\u1042\3\2\2\2\u1042\u1072\3\2\2\2\u1043\u1047\7\u0180\2\2\u1044\u1045"+
		"\7\4\2\2\u1045\u1046\7\u01b6\2\2\u1046\u1048\7\5\2\2\u1047\u1044\3\2\2"+
		"\2\u1047\u1048\3\2\2\2\u1048\u1072\3\2\2\2\u1049\u1051\t\67\2\2\u104a"+
		"\u104b\7\4\2\2\u104b\u104e\7\u01b6\2\2\u104c\u104d\7\6\2\2\u104d\u104f"+
		"\7\u01b6\2\2\u104e\u104c\3\2\2\2\u104e\u104f\3\2\2\2\u104f\u1050\3\2\2"+
		"\2\u1050\u1052\7\5\2\2\u1051\u104a\3\2\2\2\u1051\u1052\3\2\2\2\u1052\u1072"+
		"\3\2\2\2\u1053\u105e\7\u00b0\2\2\u1054\u1057\t8\2\2\u1055\u1056\7\u0164"+
		"\2\2\u1056\u1058\7\u00de\2\2\u1057\u1055\3\2\2\2\u1057\u1058\3\2\2\2\u1058"+
		"\u105f\3\2\2\2\u1059\u105c\t9\2\2\u105a\u105b\7\u0164\2\2\u105b\u105d"+
		"\t:\2\2\u105c\u105a\3\2\2\2\u105c\u105d\3\2\2\2\u105d\u105f\3\2\2\2\u105e"+
		"\u1054\3\2\2\2\u105e\u1059\3\2\2\2\u105e\u105f\3\2\2\2\u105f\u1072\3\2"+
		"\2\2\u1060\u1064\7\u015e\2\2\u1061\u1062\7\u0190\2\2\u1062\u1063\7\u015c"+
		"\2\2\u1063\u1065\7\u0193\2\2\u1064\u1061\3\2\2\2\u1064\u1065\3\2\2\2\u1065"+
		"\u1072\3\2\2\2\u1066\u106a\7\u015c\2\2\u1067\u1068\7\4\2\2\u1068\u1069"+
		"\7\u01b6\2\2\u1069\u106b\7\5\2\2\u106a\u1067\3\2\2\2\u106a\u106b\3\2\2"+
		"\2\u106b\u106f\3\2\2\2\u106c\u106d\7\u0190\2\2\u106d\u106e\7\u015c\2\2"+
		"\u106e\u1070\7\u0193\2\2\u106f\u106c\3\2\2\2\u106f\u1070\3\2\2\2\u1070"+
		"\u1072\3\2\2\2\u1071\u1039\3\2\2\2\u1071\u103d\3\2\2\2\u1071\u1043\3\2"+
		"\2\2\u1071\u1049\3\2\2\2\u1071\u1053\3\2\2\2\u1071\u1060\3\2\2\2\u1071"+
		"\u1066\3\2\2\2\u1072\u018b\3\2\2\2\u1073\u1074\t;\2\2\u1074\u018d\3\2"+
		"\2\2\u1075\u1085\5\u018a\u00c6\2\u1076\u1085\5\u018c\u00c7\2\u1077\u1082"+
		"\5\u01da\u00ee\2\u1078\u1079\7\4\2\2\u1079\u107e\7\u01b6\2\2\u107a\u107b"+
		"\7\6\2\2\u107b\u107d\7\u01b6\2\2\u107c\u107a\3\2\2\2\u107d\u1080\3\2\2"+
		"\2\u107e\u107c\3\2\2\2\u107e\u107f\3\2\2\2\u107f\u1081\3\2\2\2\u1080\u107e"+
		"\3\2\2\2\u1081\u1083\7\5\2\2\u1082\u1078\3\2\2\2\u1082\u1083\3\2\2\2\u1083"+
		"\u1085\3\2\2\2\u1084\u1075\3\2\2\2\u1084\u1076\3\2\2\2\u1084\u1077\3\2"+
		"\2\2\u1085\u018f\3\2\2\2\u1086\u108b\7\27\2\2\u1087\u1088\7\u0198\2\2"+
		"\u1088\u1089\5\u0190\u00c9\2\u1089\u108a\7\u019a\2\2\u108a\u108c\3\2\2"+
		"\2\u108b\u1087\3\2\2\2\u108b\u108c\3\2\2\2\u108c\u10a1\3\2\2\2\u108d\u1094"+
		"\7\u00d2\2\2\u108e\u108f\7\u0198\2\2\u108f\u1090\5\u0190\u00c9\2\u1090"+
		"\u1091\7\6\2\2\u1091\u1092\5\u0190\u00c9\2\u1092\u1093\7\u019a\2\2\u1093"+
		"\u1095\3\2\2\2\u1094\u108e\3\2\2\2\u1094\u1095\3\2\2\2\u1095\u10a1\3\2"+
		"\2\2\u1096\u109d\7\u014e\2\2\u1097\u1099\7\u0198\2\2\u1098\u109a\5\u01b2"+
		"\u00da\2\u1099\u1098\3\2\2\2\u1099\u109a\3\2\2\2\u109a\u109b\3\2\2\2\u109b"+
		"\u109e\7\u019a\2\2\u109c\u109e\7\u0196\2\2\u109d\u1097\3\2\2\2\u109d\u109c"+
		"\3\2\2\2\u109d\u109e\3\2\2\2\u109e\u10a1\3\2\2\2\u109f\u10a1\5\u018e\u00c8"+
		"\2\u10a0\u1086\3\2\2\2\u10a0\u108d\3\2\2\2\u10a0\u1096\3\2\2\2\u10a0\u109f"+
		"\3\2\2\2\u10a1\u0191\3\2\2\2\u10a2\u10a7\5\u0194\u00cb\2\u10a3\u10a4\7"+
		"\6\2\2\u10a4\u10a6\5\u0194\u00cb\2\u10a5\u10a3\3\2\2\2\u10a6\u10a9\3\2"+
		"\2\2\u10a7\u10a5\3\2\2\2\u10a7\u10a8\3\2\2\2\u10a8\u0193\3\2\2\2\u10a9"+
		"\u10a7\3\2\2\2\u10aa\u10ab\5\u0132\u009a\2\u10ab\u10af\5\u0190\u00c9\2"+
		"\u10ac\u10ae\5\u0196\u00cc\2\u10ad\u10ac\3\2\2\2\u10ae\u10b1\3\2\2\2\u10af"+
		"\u10ad\3\2\2\2\u10af\u10b0\3\2\2\2\u10b0\u0195\3\2\2\2\u10b1\u10af\3\2"+
		"\2\2\u10b2\u10b3\5\u0154\u00ab\2\u10b3\u10b4\7\u00ea\2\2\u10b4\u10b9\3"+
		"\2\2\2\u10b5\u10b9\5\u0198\u00cd\2\u10b6\u10b9\5b\62\2\u10b7\u10b9\5\u0184"+
		"\u00c3\2\u10b8\u10b2\3\2\2\2\u10b8\u10b5\3\2\2\2\u10b8\u10b6\3\2\2\2\u10b8"+
		"\u10b7\3\2\2\2\u10b9\u0197\3\2\2\2\u10ba\u10bb\7`\2\2\u10bb\u10bc\5\u0148"+
		"\u00a5\2\u10bc\u0199\3\2\2\2\u10bd\u10be\t<\2\2\u10be\u10bf\5\u0148\u00a5"+
		"\2\u10bf\u019b\3\2\2\2\u10c0\u10c5\5\u019e\u00d0\2\u10c1\u10c2\7\6\2\2"+
		"\u10c2\u10c4\5\u019e\u00d0\2\u10c3\u10c1\3\2\2\2\u10c4\u10c7\3\2\2\2\u10c5"+
		"\u10c3\3\2\2\2\u10c5\u10c6\3\2\2\2\u10c6\u019d\3\2\2\2\u10c7\u10c5\3\2"+
		"\2\2\u10c8\u10c9\5\u01d6\u00ec\2\u10c9\u10cd\5\u0190\u00c9\2\u10ca\u10cb"+
		"\5\u0154\u00ab\2\u10cb\u10cc\7\u00ea\2\2\u10cc\u10ce\3\2\2\2\u10cd\u10ca"+
		"\3\2\2\2\u10cd\u10ce\3\2\2\2\u10ce\u10d0\3\2\2\2\u10cf\u10d1\5b\62\2\u10d0"+
		"\u10cf\3\2\2\2\u10d0\u10d1\3\2\2\2\u10d1\u019f\3\2\2\2\u10d2\u10d7\5\u01a2"+
		"\u00d2\2\u10d3\u10d4\7\6\2\2\u10d4\u10d6\5\u01a2\u00d2\2\u10d5\u10d3\3"+
		"\2\2\2\u10d6\u10d9\3\2\2\2\u10d7\u10d5\3\2\2\2\u10d7\u10d8\3\2\2\2\u10d8"+
		"\u01a1\3\2\2\2\u10d9\u10d7\3\2\2\2\u10da\u10dd\5\u01e8\u00f5\2\u10db\u10dd"+
		"\5\u01a6\u00d4\2\u10dc\u10da\3\2\2\2\u10dc\u10db\3\2\2\2\u10dd\u01a3\3"+
		"\2\2\2\u10de\u10e3\5\u01a6\u00d4\2\u10df\u10e0\7\6\2\2\u10e0\u10e2\5\u01a6"+
		"\u00d4\2\u10e1\u10df\3\2\2\2\u10e2\u10e5\3\2\2\2\u10e3\u10e1\3\2\2\2\u10e3"+
		"\u10e4\3\2\2\2\u10e4\u01a5\3\2\2\2\u10e5\u10e3\3\2\2\2\u10e6\u10e7\5\u01d6"+
		"\u00ec\2\u10e7\u10eb\5\u0190\u00c9\2\u10e8\u10ea\5\u01a8\u00d5\2\u10e9"+
		"\u10e8\3\2\2\2\u10ea\u10ed\3\2\2\2\u10eb\u10e9\3\2\2\2\u10eb\u10ec\3\2"+
		"\2\2\u10ec\u01a7\3\2\2\2\u10ed\u10eb\3\2\2\2\u10ee\u10ef\5\u0154\u00ab"+
		"\2\u10ef\u10f0\7\u00ea\2\2\u10f0\u10f6\3\2\2\2\u10f1\u10f6\5\u0198\u00cd"+
		"\2\u10f2\u10f6\5\u01aa\u00d6\2\u10f3\u10f6\5b\62\2\u10f4\u10f6\5\u01e4"+
		"\u00f3\2\u10f5\u10ee\3\2\2\2\u10f5\u10f1\3\2\2\2\u10f5\u10f2\3\2\2\2\u10f5"+
		"\u10f3\3\2\2\2\u10f5\u10f4\3\2\2\2\u10f6\u01a9\3\2\2\2\u10f7\u10f8\7\u0095"+
		"\2\2\u10f8\u10f9\7\20\2\2\u10f9\u10fa\7\30\2\2\u10fa\u10fb\7\4\2\2\u10fb"+
		"\u10fc\5\u0148\u00a5\2\u10fc\u10fd\7\5\2\2\u10fd\u110a\3\2\2\2\u10fe\u1102"+
		"\7\u0095\2\2\u10ff\u1103\7\20\2\2\u1100\u1101\7&\2\2\u1101\u1103\7`\2"+
		"\2\u1102\u10ff\3\2\2\2\u1102\u1100\3\2\2\2\u1103\u1104\3\2\2\2\u1104\u1105"+
		"\7\30\2\2\u1105\u1107\7\u00a0\2\2\u1106\u1108\5\u01ac\u00d7\2\u1107\u1106"+
		"\3\2\2\2\u1107\u1108\3\2\2\2\u1108\u110a\3\2\2\2\u1109\u10f7\3\2\2\2\u1109"+
		"\u10fe\3\2\2\2\u110a\u01ab\3\2\2\2\u110b\u110f\7\4\2\2\u110c\u110e\5\u01ae"+
		"\u00d8\2\u110d\u110c\3\2\2\2\u110e\u1111\3\2\2\2\u110f\u110d\3\2\2\2\u110f"+
		"\u1110\3\2\2\2\u1110\u1112\3\2\2\2\u1111\u110f\3\2\2\2\u1112\u1113\7\5"+
		"\2\2\u1113\u01ad\3\2\2\2\u1114\u1115\7\u0147\2\2\u1115\u1116\7\u018e\2"+
		"\2\u1116\u111b\5\u01b0\u00d9\2\u1117\u1118\7\u00a7\2\2\u1118\u1119\7&"+
		"\2\2\u1119\u111b\5\u01b0\u00d9\2\u111a\u1114\3\2\2\2\u111a\u1117\3\2\2"+
		"\2\u111b\u01af\3\2\2\2\u111c\u111e\7\u01a0\2\2\u111d\u111c\3\2\2\2\u111d"+
		"\u111e\3\2\2\2\u111e\u111f\3\2\2\2\u111f\u1125\7\u01b6\2\2\u1120\u1122"+
		"\7\u01a0\2\2\u1121\u1120\3\2\2\2\u1121\u1122\3\2\2\2\u1122\u1123\3\2\2"+
		"\2\u1123\u1125\7\u01b3\2\2\u1124\u111d\3\2\2\2\u1124\u1121\3\2\2\2\u1125"+
		"\u01b1\3\2\2\2\u1126\u112b\5\u01b4\u00db\2\u1127\u1128\7\6\2\2\u1128\u112a"+
		"\5\u01b4\u00db\2\u1129\u1127\3\2\2\2\u112a\u112d\3\2\2\2\u112b\u1129\3"+
		"\2\2\2\u112b\u112c\3\2\2\2\u112c\u01b3\3\2\2\2\u112d\u112b\3\2\2\2\u112e"+
		"\u1130\5\u01d6\u00ec\2\u112f\u1131\7\u01aa\2\2\u1130\u112f\3\2\2\2\u1130"+
		"\u1131\3\2\2\2\u1131\u1132\3\2\2\2\u1132\u1136\5\u0190\u00c9\2\u1133\u1134"+
		"\5\u0154\u00ab\2\u1134\u1135\7\u00ea\2\2\u1135\u1137\3\2\2\2\u1136\u1133"+
		"\3\2\2\2\u1136\u1137\3\2\2\2\u1137\u1139\3\2\2\2\u1138\u113a\5b\62\2\u1139"+
		"\u1138\3\2\2\2\u1139\u113a\3\2\2\2\u113a\u01b5\3\2\2\2\u113b\u1143\5\u01b8"+
		"\u00dd\2\u113c\u1143\5\u01ba\u00de\2\u113d\u1143\5\u01bc\u00df\2\u113e"+
		"\u1143\5\u01be\u00e0\2\u113f\u1143\5\u01c0\u00e1\2\u1140\u1143\5b\62\2"+
		"\u1141\u1143\5\u01c2\u00e2\2\u1142\u113b\3\2\2\2\u1142\u113c\3\2\2\2\u1142"+
		"\u113d\3\2\2\2\u1142\u113e\3\2\2\2\u1142\u113f\3\2\2\2\u1142\u1140\3\2"+
		"\2\2\u1142\u1141\3\2\2\2\u1143\u1146\3\2\2\2\u1144\u1142\3\2\2\2\u1144"+
		"\u1145\3\2\2\2\u1145\u01b7\3\2\2\2\u1146\u1144\3\2\2\2\u1147\u1148\7\u00bc"+
		"\2\2\u1148\u1149\t=\2\2\u1149\u01b9\3\2\2\2\u114a\u114b\7\u0143\2\2\u114b"+
		"\u114c\5\u01d6\u00ec\2\u114c\u01bb\3\2\2\2\u114d\u1152\7g\2\2\u114e\u114f"+
		"\5\u0154\u00ab\2\u114f\u1150\7g\2\2\u1150\u1152\3\2\2\2\u1151\u114d\3"+
		"\2\2\2\u1151\u114e\3\2\2\2\u1152\u01bd\3\2\2\2\u1153\u1154\7\u00e7\2\2"+
		"\u1154\u115e\7\u0144\2\2\u1155\u1156\7F\2\2\u1156\u115e\7\u0144\2\2\u1157"+
		"\u1158\7\u010e\2\2\u1158\u1159\7\u0144\2\2\u1159\u115e\7T\2\2\u115a\u115b"+
		"\7\u00dd\2\2\u115b\u115c\7\u0144\2\2\u115c\u115e\7T\2\2\u115d\u1153\3"+
		"\2\2\2\u115d\u1155\3\2\2\2\u115d\u1157\3\2\2\2\u115d\u115a\3\2\2\2\u115e"+
		"\u01bf\3\2\2\2\u115f\u1160\7\u0122\2\2\u1160\u1161\7\u00ea\2\2\u1161\u1162"+
		"\7\u00f0\2\2\u1162\u1163\7\u00ea\2\2\u1163\u1169\7\u00ac\2\2\u1164\u1165"+
		"\7*\2\2\u1165\u1166\7\u00f0\2\2\u1166\u1167\7\u00ea\2\2\u1167\u1169\7"+
		"\u00ac\2\2\u1168\u115f\3\2\2\2\u1168\u1164\3\2\2\2\u1169\u01c1\3\2\2\2"+
		"\u116a\u116b\7\u0144\2\2\u116b\u116c\7\u0130\2\2\u116c\u1171\7\u00b4\2"+
		"\2\u116d\u116e\7\u0144\2\2\u116e\u116f\7\u0130\2\2\u116f\u1171\7b\2\2"+
		"\u1170\u116a\3\2\2\2\u1170\u116d\3\2\2\2\u1171\u01c3\3\2\2\2\u1172\u1173"+
		"\7\u018a\2\2\u1173\u1174\5\u0148\u00a5\2\u1174\u1175\7\u015b\2\2\u1175"+
		"\u1176\5\u0148\u00a5\2\u1176\u01c5\3\2\2\2\u1177\u1178\7\u018d\2\2\u1178"+
		"\u117d\5\u01c8\u00e5\2\u1179\u117a\7\6\2\2\u117a\u117c\5\u01c8\u00e5\2"+
		"\u117b\u1179\3\2\2\2\u117c\u117f\3\2\2\2\u117d\u117b\3\2\2\2\u117d\u117e"+
		"\3\2\2\2\u117e\u01c7\3\2\2\2\u117f\u117d\3\2\2\2\u1180\u1181\5\u01d6\u00ec"+
		"\2\u1181\u1182\7\30\2\2\u1182\u1183\5\u01ca\u00e6\2\u1183\u01c9\3\2\2"+
		"\2\u1184\u11b3\5\u01d6\u00ec\2\u1185\u1186\7\4\2\2\u1186\u1187\5\u01d6"+
		"\u00ec\2\u1187\u1188\7\5\2\2\u1188\u11b3\3\2\2\2\u1189\u11ac\7\4\2\2\u118a"+
		"\u118b\7\65\2\2\u118b\u118c\7&\2\2\u118c\u1191\5\u0148\u00a5\2\u118d\u118e"+
		"\7\6\2\2\u118e\u1190\5\u0148\u00a5\2\u118f\u118d\3\2\2\2\u1190\u1193\3"+
		"\2\2\2\u1191\u118f\3\2\2\2\u1191\u1192\3\2\2\2\u1192\u11ad\3\2\2\2\u1193"+
		"\u1191\3\2\2\2\u1194\u1195\t\33\2\2\u1195\u1196\7&\2\2\u1196\u119b\5\u0148"+
		"\u00a5\2\u1197\u1198\7\6\2\2\u1198\u119a\5\u0148\u00a5\2\u1199\u1197\3"+
		"\2\2\2\u119a\u119d\3\2\2\2\u119b\u1199\3\2\2\2\u119b\u119c\3\2\2\2\u119c"+
		"\u119f\3\2\2\2\u119d\u119b\3\2\2\2\u119e\u1194\3\2\2\2\u119e\u119f\3\2"+
		"\2\2\u119f\u11aa\3\2\2\2\u11a0\u11a1\t\34\2\2\u11a1\u11a2\7&\2\2\u11a2"+
		"\u11a7\5\u00aaV\2\u11a3\u11a4\7\6\2\2\u11a4\u11a6\5\u00aaV\2\u11a5\u11a3"+
		"\3\2\2\2\u11a6\u11a9\3\2\2\2\u11a7\u11a5\3\2\2\2\u11a7\u11a8\3\2\2\2\u11a8"+
		"\u11ab\3\2\2\2\u11a9\u11a7\3\2\2\2\u11aa\u11a0\3\2\2\2\u11aa\u11ab\3\2"+
		"\2\2\u11ab\u11ad\3\2\2\2\u11ac\u118a\3\2\2\2\u11ac\u119e\3\2\2\2\u11ad"+
		"\u11af\3\2\2\2\u11ae\u11b0\5\u01cc\u00e7\2\u11af\u11ae\3\2\2\2\u11af\u11b0"+
		"\3\2\2\2\u11b0\u11b1\3\2\2\2\u11b1\u11b3\7\5\2\2\u11b2\u1184\3\2\2\2\u11b2"+
		"\u1185\3\2\2\2\u11b2\u1189\3\2\2\2\u11b3\u01cb\3\2\2\2\u11b4\u11b5\7\u010d"+
		"\2\2\u11b5\u11c5\5\u01ce\u00e8\2\u11b6\u11b7\7\u012b\2\2\u11b7\u11c5\5"+
		"\u01ce\u00e8\2\u11b8\u11b9\7\u010d\2\2\u11b9\u11ba\7\36\2\2\u11ba\u11bb"+
		"\5\u01ce\u00e8\2\u11bb\u11bc\7\22\2\2\u11bc\u11bd\5\u01ce\u00e8\2\u11bd"+
		"\u11c5\3\2\2\2\u11be\u11bf\7\u012b\2\2\u11bf\u11c0\7\36\2\2\u11c0\u11c1"+
		"\5\u01ce\u00e8\2\u11c1\u11c2\7\22\2\2\u11c2\u11c3\5\u01ce\u00e8\2\u11c3"+
		"\u11c5\3\2\2\2\u11c4\u11b4\3\2\2\2\u11c4\u11b6\3\2\2\2\u11c4\u11b8\3\2"+
		"\2\2\u11c4\u11be\3\2\2\2\u11c5\u01cd\3\2\2\2\u11c6\u11c7\7\u0171\2\2\u11c7"+
		"\u11ce\t>\2\2\u11c8\u11c9\7L\2\2\u11c9\u11ce\7\u012a\2\2\u11ca\u11cb\5"+
		"\u0148\u00a5\2\u11cb\u11cc\t>\2\2\u11cc\u11ce\3\2\2\2\u11cd\u11c6\3\2"+
		"\2\2\u11cd\u11c8\3\2\2\2\u11cd\u11ca\3\2\2\2\u11ce\u01cf\3\2\2\2\u11cf"+
		"\u11d4\5\u01d4\u00eb\2\u11d0\u11d1\7\6\2\2\u11d1\u11d3\5\u01d4\u00eb\2"+
		"\u11d2\u11d0\3\2\2\2\u11d3\u11d6\3\2\2\2\u11d4\u11d2\3\2\2\2\u11d4\u11d5"+
		"\3\2\2\2\u11d5\u01d1\3\2\2\2\u11d6\u11d4\3\2\2\2\u11d7\u11d8\7\u009f\2"+
		"\2\u11d8\u11d9\7\4\2\2\u11d9\u11da\5\u0148\u00a5\2\u11da\u11db\7\5\2\2"+
		"\u11db\u11e2\3\2\2\2\u11dc\u11e2\7\u009f\2\2\u11dd\u11e2\5\u01d4\u00eb"+
		"\2\u11de\u11e2\7\u0086\2\2\u11df\u11e2\7\u00c2\2\2\u11e0\u11e2\7\u0124"+
		"\2\2\u11e1\u11d7\3\2\2\2\u11e1\u11dc\3\2\2\2\u11e1\u11dd\3\2\2\2\u11e1"+
		"\u11de\3\2\2\2\u11e1\u11df\3\2\2\2\u11e1\u11e0\3\2\2\2\u11e2\u01d3\3\2"+
		"\2\2\u11e3\u11e8\5\u01da\u00ee\2\u11e4\u11e5\7\7\2\2\u11e5\u11e7\5\u01da"+
		"\u00ee\2\u11e6\u11e4\3\2\2\2\u11e7\u11ea\3\2\2\2\u11e8\u11e6\3\2\2\2\u11e8"+
		"\u11e9\3\2\2\2\u11e9\u01d5\3\2\2\2\u11ea\u11e8\3\2\2\2\u11eb\u11ec\5\u01da"+
		"\u00ee\2\u11ec\u11ed\5\u01d8\u00ed\2\u11ed\u01d7\3\2\2\2\u11ee\u11ef\7"+
		"\u01a0\2\2\u11ef\u11f1\5\u01da\u00ee\2\u11f0\u11ee\3\2\2\2\u11f1\u11f2"+
		"\3\2\2\2\u11f2\u11f0\3\2\2\2\u11f2\u11f3\3\2\2\2\u11f3\u11f6\3\2\2\2\u11f4"+
		"\u11f6\3\2\2\2\u11f5\u11f0\3\2\2\2\u11f5\u11f4\3\2\2\2\u11f6\u01d9\3\2"+
		"\2\2\u11f7\u11fb\5\u01dc\u00ef\2\u11f8\u11f9\6\u00ee\27\2\u11f9\u11fb"+
		"\5\u020e\u0108\2\u11fa\u11f7\3\2\2\2\u11fa\u11f8\3\2\2\2\u11fb\u01db\3"+
		"\2\2\2\u11fc\u1203\7\u01bc\2\2\u11fd\u1203\5\u01de\u00f0\2\u11fe\u11ff"+
		"\6\u00ef\30\2\u11ff\u1203\5\u020c\u0107\2\u1200\u1201\6\u00ef\31\2\u1201"+
		"\u1203\5\u0210\u0109\2\u1202\u11fc\3\2\2\2\u1202\u11fd\3\2\2\2\u1202\u11fe"+
		"\3\2\2\2\u1202\u1200\3\2\2\2\u1203\u01dd\3\2\2\2\u1204\u1208\7\u01bd\2"+
		"\2\u1205\u1206\6\u00f0\32\2\u1206\u1208\7\u01b2\2\2\u1207\u1204\3\2\2"+
		"\2\u1207\u1205\3\2\2\2\u1208\u01df\3\2\2\2\u1209\u120a\7\u01bd\2\2\u120a"+
		"\u01e1\3\2\2\2\u120b\u120d\6\u00f2\33\2\u120c\u120e\7\u01a0\2\2\u120d"+
		"\u120c\3\2\2\2\u120d\u120e\3\2\2\2\u120e\u120f\3\2\2\2\u120f\u1237\7\u01b7"+
		"\2\2\u1210\u1212\6\u00f2\34\2\u1211\u1213\7\u01a0\2\2\u1212\u1211\3\2"+
		"\2\2\u1212\u1213\3\2\2\2\u1213\u1214\3\2\2\2\u1214\u1237\7\u01b8\2\2\u1215"+
		"\u1217\6\u00f2\35\2\u1216\u1218\7\u01a0\2\2\u1217\u1216\3\2\2\2\u1217"+
		"\u1218\3\2\2\2\u1218\u1219\3\2\2\2\u1219\u1237\t?\2\2\u121a\u121c\7\u01a0"+
		"\2\2\u121b\u121a\3\2\2\2\u121b\u121c\3\2\2\2\u121c\u121d\3\2\2\2\u121d"+
		"\u1237\7\u01b6\2\2\u121e\u1220\7\u01a0\2\2\u121f\u121e\3\2\2\2\u121f\u1220"+
		"\3\2\2\2\u1220\u1221\3\2\2\2\u1221\u1237\7\u01b3\2\2\u1222\u1224\7\u01a0"+
		"\2\2\u1223\u1222\3\2\2\2\u1223\u1224\3\2\2\2\u1224\u1225\3\2\2\2\u1225"+
		"\u1237\7\u01b4\2\2\u1226\u1228\7\u01a0\2\2\u1227\u1226\3\2\2\2\u1227\u1228"+
		"\3\2\2\2\u1228\u1229\3\2\2\2\u1229\u1237\7\u01b5\2\2\u122a\u122c\7\u01a0"+
		"\2\2\u122b\u122a\3\2\2\2\u122b\u122c\3\2\2\2\u122c\u122d\3\2\2\2\u122d"+
		"\u1237\7\u01ba\2\2\u122e\u1230\7\u01a0\2\2\u122f\u122e\3\2\2\2\u122f\u1230"+
		"\3\2\2\2\u1230\u1231\3\2\2\2\u1231\u1237\7\u01b9\2\2\u1232\u1234\7\u01a0"+
		"\2\2\u1233\u1232\3\2\2\2\u1233\u1234\3\2\2\2\u1234\u1235\3\2\2\2\u1235"+
		"\u1237\7\u01bb\2\2\u1236\u120b\3\2\2\2\u1236\u1210\3\2\2\2\u1236\u1215"+
		"\3\2\2\2\u1236\u121b\3\2\2\2\u1236\u121f\3\2\2\2\u1236\u1223\3\2\2\2\u1236"+
		"\u1227\3\2\2\2\u1236\u122b\3\2\2\2\u1236\u122f\3\2\2\2\u1236\u1233\3\2"+
		"\2\2\u1237\u01e3\3\2\2\2\u1238\u1239\7E\2\2\u1239\u123b\5\u01d6\u00ec"+
		"\2\u123a\u1238\3\2\2\2\u123a\u123b\3\2\2\2\u123b\u123c\3\2\2\2\u123c\u1240"+
		"\5\u01e6\u00f4\2\u123d\u123f\5\u01f6\u00fc\2\u123e\u123d\3\2\2\2\u123f"+
		"\u1242\3\2\2\2\u1240\u123e\3\2\2\2\u1240\u1241\3\2\2\2\u1241\u01e5\3\2"+
		"\2\2\u1242\u1240\3\2\2\2\u1243\u1247\5\u01ec\u00f7\2\u1244\u1247\5\u01ee"+
		"\u00f8\2\u1245\u1247\5\u01f2\u00fa\2\u1246\u1243\3\2\2\2\u1246\u1244\3"+
		"\2\2\2\u1246\u1245\3\2\2\2\u1247\u01e7\3\2\2\2\u1248\u1249\7E\2\2\u1249"+
		"\u124b\5\u01d6\u00ec\2\u124a\u1248\3\2\2\2\u124a\u124b\3\2\2\2\u124b\u124c"+
		"\3\2\2\2\u124c\u1250\5\u01ea\u00f6\2\u124d\u124f\5\u01f6\u00fc\2\u124e"+
		"\u124d\3\2\2\2\u124f\u1252\3\2\2\2\u1250\u124e\3\2\2\2\u1250\u1251\3\2"+
		"\2\2\u1251\u01e9\3\2\2\2\u1252\u1250\3\2\2\2\u1253\u1257\5\u01ec\u00f7"+
		"\2\u1254\u1257\5\u01f0\u00f9\2\u1255\u1257\5\u01f4\u00fb\2\u1256\u1253"+
		"\3\2\2\2\u1256\u1254\3\2\2\2\u1256\u1255\3\2\2\2\u1257\u01eb\3\2\2\2\u1258"+
		"\u1259\7\63\2\2\u1259\u125a\7\4\2\2\u125a\u125b\5\u0150\u00a9\2\u125b"+
		"\u125c\7\5\2\2\u125c\u01ed\3\2\2\2\u125d\u1261\7\u0174\2\2\u125e\u125f"+
		"\7\u0105\2\2\u125f\u1261\7\u00ba\2\2\u1260\u125d\3\2\2\2\u1260\u125e\3"+
		"\2\2\2\u1261\u01ef\3\2\2\2\u1262\u1263\5\u01ee\u00f8\2\u1263\u1264\5\u010e"+
		"\u0088\2\u1264\u01f1\3\2\2\2\u1265\u1266\7\u0116\2\2\u1266\u1268\5\u0132"+
		"\u009a\2\u1267\u1269\5\u010e\u0088\2\u1268\u1267\3\2\2\2\u1268\u1269\3"+
		"\2\2\2\u1269\u01f3\3\2\2\2\u126a\u126b\7\u008d\2\2\u126b\u126c\7\u00ba"+
		"\2\2\u126c\u126d\5\u010e\u0088\2\u126d\u126e\5\u01f2\u00fa\2\u126e\u01f5"+
		"\3\2\2\2\u126f\u1272\5\u01f8\u00fd\2\u1270\u1272\5\u01fa\u00fe\2\u1271"+
		"\u126f\3\2\2\2\u1271\u1270\3\2\2\2\u1272\u01f7\3\2\2\2\u1273\u1277\7t"+
		"\2\2\u1274\u1275\7\u00e9\2\2\u1275\u1277\7t\2\2\u1276\u1273\3\2\2\2\u1276"+
		"\u1274\3\2\2\2\u1277\u01f9\3\2\2\2\u1278\u1279\t@\2\2\u1279\u01fb\3\2"+
		"\2\2\u127a\u127f\5\u01fe\u0100\2\u127b\u127c\7\6\2\2\u127c\u127e\5\u01fe"+
		"\u0100\2\u127d\u127b\3\2\2\2\u127e\u1281\3\2\2\2\u127f\u127d\3\2\2\2\u127f"+
		"\u1280\3\2\2\2\u1280\u01fd\3\2\2\2\u1281\u127f\3\2\2\2\u1282";
	private static final String _serializedATNSegment2 =
		"\u1284\5\u0132\u009a\2\u1283\u1285\5\u0200\u0101\2\u1284\u1283\3\2\2\2"+
		"\u1284\u1285\3\2\2\2\u1285\u01ff\3\2\2\2\u1286\u1287\7\u016f\2\2\u1287"+
		"\u1293\5\u0190\u00c9\2\u1288\u1293\5b\62\2\u1289\u1293\5\u0184\u00c3\2"+
		"\u128a\u128b\tA\2\2\u128b\u128c\5\u0154\u00ab\2\u128c\u128d\7\u00ea\2"+
		"\2\u128d\u1293\3\2\2\2\u128e\u128f\7\u0137\2\2\u128f\u1293\5\u0198\u00cd"+
		"\2\u1290\u1291\7p\2\2\u1291\u1293\7`\2\2\u1292\u1286\3\2\2\2\u1292\u1288"+
		"\3\2\2\2\u1292\u1289\3\2\2\2\u1292\u128a\3\2\2\2\u1292\u128e\3\2\2\2\u1292"+
		"\u1290\3\2\2\2\u1293\u0201\3\2\2\2\u1294\u1298\7\u01b1\2\2\u1295\u1296"+
		"\6\u0102\36\2\u1296\u1298\7\u01b2\2\2\u1297\u1294\3\2\2\2\u1297\u1295"+
		"\3\2\2\2\u1298\u0203\3\2\2\2\u1299\u129c\5\u0202\u0102\2\u129a\u129c\7"+
		"\u00ea\2\2\u129b\u1299\3\2\2\2\u129b\u129a\3\2\2\2\u129c\u0205\3\2\2\2"+
		"\u129d\u12a0\7\u01b6\2\2\u129e\u12a0\5\u0202\u0102\2\u129f\u129d\3\2\2"+
		"\2\u129f\u129e\3\2\2\2\u12a0\u0207\3\2\2\2\u12a1\u12a3\5\u00b4[\2\u12a2"+
		"\u12a4\5\u01c6\u00e4\2\u12a3\u12a2\3\2\2\2\u12a3\u12a4\3\2\2\2\u12a4\u12c9"+
		"\3\2\2\2\u12a5\u12a6\7\177\2\2\u12a6\u12c9\5\u013e\u00a0\2\u12a7\u12a8"+
		"\7\u0137\2\2\u12a8\u12c9\5\u020a\u0106\2\u12a9\u12aa\7p\2\2\u12aa\u12c9"+
		"\5\u0110\u0089\2\u12ab\u12ac\7\30\2\2\u12ac\u12c9\5\u01d6\u00ec\2\u12ad"+
		"\u12af\5\u00caf\2\u12ae\u12b0\5\u01c6\u00e4\2\u12af\u12ae\3\2\2\2\u12af"+
		"\u12b0\3\2\2\2\u12b0\u12c9\3\2\2\2\u12b1\u12b3\5\u00e0q\2\u12b2\u12b4"+
		"\5\u00e6t\2\u12b3\u12b2\3\2\2\2\u12b3\u12b4\3\2\2\2\u12b4\u12c9\3\2\2"+
		"\2\u12b5\u12b7\5\u00e6t\2\u12b6\u12b8\5\u00e0q\2\u12b7\u12b6\3\2\2\2\u12b7"+
		"\u12b8\3\2\2\2\u12b8\u12c9\3\2\2\2\u12b9\u12c9\5\u010a\u0086\2\u12ba\u12c9"+
		"\5\u0104\u0083\2\u12bb\u12bd\t\21\2\2\u12bc\u12be\5\u00fe\u0080\2\u12bd"+
		"\u12bc\3\2\2\2\u12bd\u12be\3\2\2\2\u12be\u12bf\3\2\2\2\u12bf\u12c9\5\u00a8"+
		"U\2\u12c0\u12c9\5\u00a2R\2\u12c1\u12c3\7\r\2\2\u12c2\u12c4\5\u013e\u00a0"+
		"\2\u12c3\u12c2\3\2\2\2\u12c3\u12c4\3\2\2\2\u12c4\u12c6\3\2\2\2\u12c5\u12c7"+
		"\5\u00d6l\2\u12c6\u12c5\3\2\2\2\u12c6\u12c7\3\2\2\2\u12c7\u12c9\3\2\2"+
		"\2\u12c8\u12a1\3\2\2\2\u12c8\u12a5\3\2\2\2\u12c8\u12a7\3\2\2\2\u12c8\u12a9"+
		"\3\2\2\2\u12c8\u12ab\3\2\2\2\u12c8\u12ad\3\2\2\2\u12c8\u12b1\3\2\2\2\u12c8"+
		"\u12b5\3\2\2\2\u12c8\u12b9\3\2\2\2\u12c8\u12ba\3\2\2\2\u12c8\u12bb\3\2"+
		"\2\2\u12c8\u12c0\3\2\2\2\u12c8\u12c1\3\2\2\2\u12c9\u0209\3\2\2\2\u12ca"+
		"\u12cf\5\u01d6\u00ec\2\u12cb\u12cc\7\7\2\2\u12cc\u12ce\5\u01d6\u00ec\2"+
		"\u12cd\u12cb\3\2\2\2\u12ce\u12d1\3\2\2\2\u12cf\u12cd\3\2\2\2\u12cf\u12d0"+
		"\3\2\2\2\u12d0\u12d2\3\2\2\2\u12d1\u12cf\3\2\2\2\u12d2\u12d3\7\u0194\2"+
		"\2\u12d3\u12e2\5\u0148\u00a5\2\u12d4\u12d5\7\6\2\2\u12d5\u12da\5\u01d6"+
		"\u00ec\2\u12d6\u12d7\7\7\2\2\u12d7\u12d9\5\u01d6\u00ec\2\u12d8\u12d6\3"+
		"\2\2\2\u12d9\u12dc\3\2\2\2\u12da\u12d8\3\2\2\2\u12da\u12db\3\2\2\2\u12db"+
		"\u12dd\3\2\2\2\u12dc\u12da\3\2\2\2\u12dd\u12de\7\u0194\2\2\u12de\u12df"+
		"\5\u0148\u00a5\2\u12df\u12e1\3\2\2\2\u12e0\u12d4\3\2\2\2\u12e1\u12e4\3"+
		"\2\2\2\u12e2\u12e0\3\2\2\2\u12e2\u12e3\3\2\2\2\u12e3\u020b\3\2\2\2\u12e4"+
		"\u12e2\3\2\2\2\u12e5\u12e6\tB\2\2\u12e6\u020d\3\2\2\2\u12e7\u12e8\tC\2"+
		"\2\u12e8\u020f\3\2\2\2\u12e9\u12ea\tD\2\2\u12ea\u0211\3\2\2\2\u026f\u0214"+
		"\u0219\u021c\u0220\u0225\u022a\u022d\u0231\u0238\u0247\u0254\u025e\u0261"+
		"\u0265\u026c\u0273\u027e\u0281\u028a\u0297\u029c\u02a2\u02ab\u02bb\u02bf"+
		"\u02cd\u02d1\u02d6\u02d9\u02e0\u02e3\u02e9\u02f1\u02f5\u02fa\u031c\u032e"+
		"\u0337\u0339\u0359\u035d\u0363\u0366\u0369\u0370\u0373\u0377\u037a\u0382"+
		"\u038d\u038f\u0397\u039a\u039e\u03a1\u03a7\u03b2\u03b8\u03bd\u03df\u03ec"+
		"\u0405\u040e\u0416\u041a\u041f\u0425\u0431\u0439\u043f\u044d\u0452\u0462"+
		"\u0469\u046d\u0473\u0485\u0499\u049d\u04a3\u04a7\u04ad\u04b3\u04b6\u04b9"+
		"\u04c0\u04c4\u04ce\u04d0\u04d9\u04dc\u04e5\u04ea\u04f0\u04fc\u04ff\u0506"+
		"\u0511\u0514\u0519\u051c\u0523\u0528\u0532\u0534\u053a\u053e\u0543\u0549"+
		"\u054c\u0553\u0557\u055a\u0561\u0567\u056b\u0571\u0574\u0577\u057e\u0583"+
		"\u058c\u0594\u059a\u059d\u05a0\u05a6\u05aa\u05af\u05b2\u05b6\u05b8\u05be"+
		"\u05c6\u05ce\u05d1\u05d6\u05df\u05e5\u05e8\u05ec\u05ef\u05f3\u05f7\u0613"+
		"\u0616\u061a\u0620\u0623\u0626\u062c\u0634\u0639\u063f\u0645\u0648\u064f"+
		"\u0656\u065f\u0664\u0669\u0670\u0676\u067b\u0687\u068a\u0692\u0698\u069b"+
		"\u069e\u06a3\u06a9\u06b4\u06ba\u06c1\u06ca\u06ce\u06d5\u06e6\u0702\u0705"+
		"\u070b\u0714\u071d\u0720\u0727\u072a\u0733\u0737\u0743\u0747\u074e\u07c2"+
		"\u07ca\u07d2\u07db\u07e5\u07e9\u07ec\u07f3\u07f9\u080b\u0817\u081c\u0828"+
		"\u0831\u0839\u083d\u0844\u0846\u084b\u0850\u0854\u0857\u085d\u0862\u0867"+
		"\u086b\u0873\u0878\u087b\u0880\u0884\u0889\u088b\u088f\u0898\u08a0\u08a6"+
		"\u08ac\u08bd\u08c4\u08c9\u08d0\u08d5\u08db\u08de\u08f6\u08f8\u0901\u0908"+
		"\u090b\u0912\u0916\u091c\u0924\u092b\u092e\u0936\u0941\u094c\u0954\u095a"+
		"\u0966\u096d\u0974\u097a\u0985\u098d\u0993\u0999\u099c\u09a4\u09ad\u09b6"+
		"\u09b9\u09c2\u09c5\u09ce\u09d1\u09da\u09dd\u09e0\u09e5\u09e7\u09eb\u09f7"+
		"\u09fe\u0a05\u0a0b\u0a0d\u0a19\u0a1d\u0a21\u0a27\u0a2c\u0a34\u0a38\u0a3b"+
		"\u0a3e\u0a41\u0a45\u0a49\u0a4e\u0a52\u0a55\u0a58\u0a5b\u0a5f\u0a64\u0a68"+
		"\u0a6b\u0a6e\u0a71\u0a73\u0a79\u0a80\u0a85\u0a88\u0a8b\u0a8f\u0a99\u0a9d"+
		"\u0a9f\u0aa2\u0aa6\u0aac\u0ab0\u0abb\u0ac5\u0ac9\u0ad5\u0ae1\u0af0\u0af5"+
		"\u0afb\u0b07\u0b17\u0b1c\u0b29\u0b2e\u0b36\u0b3c\u0b40\u0b43\u0b46\u0b4d"+
		"\u0b53\u0b5c\u0b66\u0b75\u0b7a\u0b7c\u0b80\u0b89\u0b96\u0b9b\u0b9f\u0ba7"+
		"\u0baa\u0bae\u0bbc\u0bc9\u0bce\u0bd2\u0bd5\u0bd9\u0bdf\u0be2\u0be9\u0bf5"+
		"\u0c00\u0c0d\u0c18\u0c1d\u0c25\u0c2a\u0c31\u0c3a\u0c3d\u0c42\u0c49\u0c4c"+
		"\u0c51\u0c57\u0c5d\u0c62\u0c66\u0c6c\u0c70\u0c73\u0c78\u0c7b\u0c80\u0c84"+
		"\u0c87\u0c8a\u0c90\u0c95\u0c9c\u0c9f\u0cb1\u0cb3\u0cb6\u0cc1\u0cca\u0cd1"+
		"\u0cd9\u0ce0\u0ce5\u0ce8\u0ceb\u0cf3\u0cfb\u0d01\u0d0c\u0d14\u0d1b\u0d22"+
		"\u0d24\u0d31\u0d3b\u0d3e\u0d40\u0d4a\u0d54\u0d57\u0d59\u0d61\u0d65\u0d6e"+
		"\u0d71\u0d77\u0d7b\u0d7d\u0d86\u0d92\u0d94\u0d9b\u0da2\u0da8\u0dae\u0db0"+
		"\u0db7\u0dbf\u0dc7\u0dcd\u0dd2\u0dd9\u0ddf\u0de3\u0de5\u0dec\u0df5\u0dfc"+
		"\u0e06\u0e0b\u0e0f\u0e19\u0e20\u0e2d\u0e2f\u0e37\u0e39\u0e3d\u0e45\u0e4e"+
		"\u0e54\u0e5c\u0e61\u0e6d\u0e72\u0e75\u0e7b\u0e7f\u0e84\u0e89\u0e8e\u0e96"+
		"\u0eaf\u0eb1\u0ebe\u0eca\u0ed6\u0eda\u0ee3\u0ee7\u0ef9\u0efc\u0f04\u0f0d"+
		"\u0f16\u0f24\u0f2a\u0f32\u0f3d\u0f44\u0f47\u0f54\u0f59\u0f61\u0f65\u0f69"+
		"\u0f75\u0f8e\u0f95\u0f98\u0fa7\u0fab\u0fbd\u0fbf\u0fc6\u0fcb\u0fd6\u0fe2"+
		"\u0fec\u0ffb\u0ffd\u100a\u100e\u1015\u101a\u1022\u1027\u1030\u103b\u1041"+
		"\u1047\u104e\u1051\u1057\u105c\u105e\u1064\u106a\u106f\u1071\u107e\u1082"+
		"\u1084\u108b\u1094\u1099\u109d\u10a0\u10a7\u10af\u10b8\u10c5\u10cd\u10d0"+
		"\u10d7\u10dc\u10e3\u10eb\u10f5\u1102\u1107\u1109\u110f\u111a\u111d\u1121"+
		"\u1124\u112b\u1130\u1136\u1139\u1142\u1144\u1151\u115d\u1168\u1170\u117d"+
		"\u1191\u119b\u119e\u11a7\u11aa\u11ac\u11af\u11b2\u11c4\u11cd\u11d4\u11e1"+
		"\u11e8\u11f2\u11f5\u11fa\u1202\u1207\u120d\u1212\u1217\u121b\u121f\u1223"+
		"\u1227\u122b\u122f\u1233\u1236\u123a\u1240\u1246\u124a\u1250\u1256\u1260"+
		"\u1268\u1271\u1276\u127f\u1284\u1292\u1297\u129b\u129f\u12a3\u12af\u12b3"+
		"\u12b7\u12bd\u12c3\u12c6\u12c8\u12cf\u12da\u12e2";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}