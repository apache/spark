#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- case: oneVsRest
  main: |
    from pyspark.ml.classification import (
        OneVsRest, OneVsRestModel, LogisticRegression, LogisticRegressionModel
    )

    # Should support
    OneVsRest(classifier=LogisticRegression())
    OneVsRest(classifier=LogisticRegressionModel.load("/foo"))  # E: Argument "classifier" to "OneVsRest" has incompatible type "LogisticRegressionModel"; expected "Optional[Classifier[Never]]"  [arg-type]
    OneVsRest(classifier="foo")  # E: Argument "classifier" to "OneVsRest" has incompatible type "str"; expected "Optional[Classifier[Never]]"  [arg-type]


- case: fitFMClassifier
  main: |
    from pyspark.sql import SparkSession
    from pyspark.ml.classification import FMClassifier, FMClassificationModel

    spark = SparkSession.builder.getOrCreate()
    fm_model: FMClassificationModel = FMClassifier().fit(spark.read.parquet("/foo"))
    fm_model.linear.toArray()
    fm_model.factors.numRows
